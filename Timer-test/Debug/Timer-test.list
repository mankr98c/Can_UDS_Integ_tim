
Timer-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbf4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c5c  0800fec4  0800fec4  0001fec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010b20  08010b20  00020b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010b28  08010b28  00020b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010b2c  08010b2c  00020b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002f0  24000000  08010b30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002694  240002f0  08010e20  000302f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24002984  08010e20  00032984  2**0
                  ALLOC
  9 .ARM.attributes 00000034  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030324  2**0
                  CONTENTS, READONLY
 11 .debug_info   00029326  00000000  00000000  00030367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00007dc0  00000000  00000000  0005968d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002400  00000000  00000000  00061450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001ab0  00000000  00000000  00063850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00042913  00000000  00000000  00065300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00057043  00000000  00000000  000a7c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00160940  00000000  00000000  000fec56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008e80  00000000  00000000  0025f598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000043  00000000  00000000  00268418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002f0 	.word	0x240002f0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800feac 	.word	0x0800feac

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002f4 	.word	0x240002f4
 800030c:	0800feac 	.word	0x0800feac

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <HAL_FCM_InitStatus>:
** Parameter                : None

** Return value             : None
***************************************************************************************************/
uint8_t HAL_FCM_InitStatus(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
	return FCM_FCM_DTC_InitStatus;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <HAL_FCM_InitStatus+0x14>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	2400030d 	.word	0x2400030d

080006c4 <HAL_FCM_ReadDTCInfo>:

** Return value             : None
***************************************************************************************************/

uint8_t HAL_FCM_ReadDTCInfo ( FCM_DTC_StatusType* FCM_ReadDTCInfo, uint16_t Size)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	807b      	strh	r3, [r7, #2]
	/* Variable Declaration */
	uint32_t Retval =  FCM_ZERO;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
	uint8_t FCM_Status = FCM_ZERO;
 80006d4:	2300      	movs	r3, #0
 80006d6:	72fb      	strb	r3, [r7, #11]
	uint16_t FCM_Index = FCM_ZERO;
 80006d8:	2300      	movs	r3, #0
 80006da:	813b      	strh	r3, [r7, #8]
	{
		/* Do Nothing */
	}
#endif
	/* Return Status */
	return FCM_Status;
 80006dc:	7afb      	ldrb	r3, [r7, #11]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <HAL_FCM_WriteDTCInfo>:
** 							: Size ->Size of data to be written

** Return value             : None
***************************************************************************************************/
void HAL_FCM_WriteDTCInfo(const FCM_DTC_StatusType *FCM_WriteDTCInfo,uint16_t Size)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	460b      	mov	r3, r1
 80006f4:	807b      	strh	r3, [r7, #2]
	else
	{
		/* Do Nothing */
	}
#endif
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <HAL_FCM_Read_Snapst_Data>:
**                            BuffLen:

** Return value             : None
***************************************************************************************************/
void HAL_FCM_Read_Snapst_Data(uint16_t FCM_DTC_Ind, uint8_t *DataBuff, uint16_t *BuffLen)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b087      	sub	sp, #28
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
 8000710:	81fb      	strh	r3, [r7, #14]
	uint16_t SnapshotDataIdx = FCM_ZERO;
 8000712:	2300      	movs	r3, #0
 8000714:	82fb      	strh	r3, [r7, #22]
	uint8_t Indx;
	uint8_t buff[3];
	
	for(Indx = FCM_ZERO; Indx < FCM_DTCSnapshotDataVar[FCM_DTC_Ind].FCM_DTCNumSnapshotSupp; Indx++)
 8000716:	2300      	movs	r3, #0
 8000718:	757b      	strb	r3, [r7, #21]
 800071a:	e05e      	b.n	80007da <HAL_FCM_Read_Snapst_Data+0xd6>
	{
		DataBuff[SnapshotDataIdx] = (uint8_t)(FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
											 FCM_DTCSnapshotDataSupp[Indx].FCM_DTCSnapShotDataID >> FCM_EIGHT);
 800071c:	89f9      	ldrh	r1, [r7, #14]
 800071e:	7d7b      	ldrb	r3, [r7, #21]
 8000720:	4837      	ldr	r0, [pc, #220]	; (8000800 <HAL_FCM_Read_Snapst_Data+0xfc>)
 8000722:	461a      	mov	r2, r3
 8000724:	0052      	lsls	r2, r2, #1
 8000726:	441a      	add	r2, r3
 8000728:	0093      	lsls	r3, r2, #2
 800072a:	461a      	mov	r2, r3
 800072c:	460b      	mov	r3, r1
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	440b      	add	r3, r1
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	4413      	add	r3, r2
 8000736:	4403      	add	r3, r0
 8000738:	3304      	adds	r3, #4
 800073a:	881b      	ldrh	r3, [r3, #0]
		DataBuff[SnapshotDataIdx] = (uint8_t)(FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	b299      	uxth	r1, r3
 8000740:	8afb      	ldrh	r3, [r7, #22]
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	4413      	add	r3, r2
 8000746:	b2ca      	uxtb	r2, r1
 8000748:	701a      	strb	r2, [r3, #0]
		DataBuff[SnapshotDataIdx + FCM_ONE] = (uint8_t)(FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
											FCM_DTCSnapshotDataSupp[Indx].FCM_DTCSnapShotDataID);
 800074a:	89f9      	ldrh	r1, [r7, #14]
 800074c:	7d7b      	ldrb	r3, [r7, #21]
 800074e:	482c      	ldr	r0, [pc, #176]	; (8000800 <HAL_FCM_Read_Snapst_Data+0xfc>)
 8000750:	461a      	mov	r2, r3
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	441a      	add	r2, r3
 8000756:	0093      	lsls	r3, r2, #2
 8000758:	461a      	mov	r2, r3
 800075a:	460b      	mov	r3, r1
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	440b      	add	r3, r1
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	4413      	add	r3, r2
 8000764:	4403      	add	r3, r0
 8000766:	3304      	adds	r3, #4
 8000768:	8819      	ldrh	r1, [r3, #0]
		DataBuff[SnapshotDataIdx + FCM_ONE] = (uint8_t)(FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
 800076a:	8afb      	ldrh	r3, [r7, #22]
 800076c:	3301      	adds	r3, #1
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	4413      	add	r3, r2
 8000772:	b2ca      	uxtb	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]
		
		//(void)readEeprom(FCM_DTCSnapshotDataVar[FCM_DTC_Ind].FCM_DTCSnapshotDataSupp[Indx].\
							FCM_DTCEEPROMDataID,(uint32_t)buff);
		memcpy(&DataBuff[SnapshotDataIdx + FCM_TWO], buff, FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
 8000776:	8afb      	ldrh	r3, [r7, #22]
 8000778:	3302      	adds	r3, #2
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	18d0      	adds	r0, r2, r3
							FCM_DTCSnapshotDataSupp[Indx].FCM_DTCSnapshotLen);
 800077e:	89f9      	ldrh	r1, [r7, #14]
 8000780:	7d7b      	ldrb	r3, [r7, #21]
 8000782:	4c1f      	ldr	r4, [pc, #124]	; (8000800 <HAL_FCM_Read_Snapst_Data+0xfc>)
 8000784:	461a      	mov	r2, r3
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	441a      	add	r2, r3
 800078a:	0093      	lsls	r3, r2, #2
 800078c:	461a      	mov	r2, r3
 800078e:	460b      	mov	r3, r1
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	440b      	add	r3, r1
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	4413      	add	r3, r2
 8000798:	4423      	add	r3, r4
 800079a:	3306      	adds	r3, #6
 800079c:	881b      	ldrh	r3, [r3, #0]
		memcpy(&DataBuff[SnapshotDataIdx + FCM_TWO], buff, FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
 800079e:	461a      	mov	r2, r3
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	f00e ff31 	bl	800f60c <memcpy>
	
		SnapshotDataIdx += (FCM_TWO + FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
							FCM_DTCSnapshotDataSupp[Indx].FCM_DTCSnapshotLen);
 80007aa:	89f9      	ldrh	r1, [r7, #14]
 80007ac:	7d7b      	ldrb	r3, [r7, #21]
 80007ae:	4814      	ldr	r0, [pc, #80]	; (8000800 <HAL_FCM_Read_Snapst_Data+0xfc>)
 80007b0:	461a      	mov	r2, r3
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	441a      	add	r2, r3
 80007b6:	0093      	lsls	r3, r2, #2
 80007b8:	461a      	mov	r2, r3
 80007ba:	460b      	mov	r3, r1
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	440b      	add	r3, r1
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	4413      	add	r3, r2
 80007c4:	4403      	add	r3, r0
 80007c6:	3306      	adds	r3, #6
 80007c8:	881a      	ldrh	r2, [r3, #0]
		SnapshotDataIdx += (FCM_TWO + FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
 80007ca:	8afb      	ldrh	r3, [r7, #22]
 80007cc:	4413      	add	r3, r2
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	3302      	adds	r3, #2
 80007d2:	82fb      	strh	r3, [r7, #22]
	for(Indx = FCM_ZERO; Indx < FCM_DTCSnapshotDataVar[FCM_DTC_Ind].FCM_DTCNumSnapshotSupp; Indx++)
 80007d4:	7d7b      	ldrb	r3, [r7, #21]
 80007d6:	3301      	adds	r3, #1
 80007d8:	757b      	strb	r3, [r7, #21]
 80007da:	7d7b      	ldrb	r3, [r7, #21]
 80007dc:	b299      	uxth	r1, r3
 80007de:	89fa      	ldrh	r2, [r7, #14]
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <HAL_FCM_Read_Snapst_Data+0xfc>)
 80007e2:	4613      	mov	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	4403      	add	r3, r0
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	4299      	cmp	r1, r3
 80007f0:	d394      	bcc.n	800071c <HAL_FCM_Read_Snapst_Data+0x18>
	}
	
	BuffLen[FCM_ZERO] = SnapshotDataIdx;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	8afa      	ldrh	r2, [r7, #22]
 80007f6:	801a      	strh	r2, [r3, #0]
}
 80007f8:	bf00      	nop
 80007fa:	371c      	adds	r7, #28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd90      	pop	{r4, r7, pc}
 8000800:	08010174 	.word	0x08010174

08000804 <HAL_FCM_ClearReqDTCUpdate>:
** Parameter                : FCM_ClearDTCInfo pointer

** Return value             : None
***************************************************************************************************/
void HAL_FCM_ClearReqDTCUpdate(uint16_t FCM_ReqDTCIndx, FCM_DTC_StatusType *FCM_ClearDTCInfo)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	80fb      	strh	r3, [r7, #6]
	uint16_t FCM_DTCRecData;
	
	uint16_t FCM_EEPROMID;

	/* Write the individual DTC status into NVM */
	if(FCM_ReqDTCIndx < FCM_MAXNUM_DTCS)
 8000810:	88fb      	ldrh	r3, [r7, #6]
 8000812:	2b20      	cmp	r3, #32
 8000814:	d816      	bhi.n	8000844 <HAL_FCM_ClearReqDTCUpdate+0x40>
	{
		/* Intialize the Variable */
		FCM_DTCRecData = 0xFFFF;
 8000816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081a:	81bb      	strh	r3, [r7, #12]
		FCM_EEPROMID = ((uint16_t)FCM_EEPROM_STRTDTC_DATAID + FCM_ReqDTCIndx);
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	333d      	adds	r3, #61	; 0x3d
 8000820:	817b      	strh	r3, [r7, #10]
		/* Write EEPROM to Clear DTC */
		//(void)writeEeprom(FCM_EEPROMID,(uint16_t)(sizeof(FCM_DTC_StatusType))\
							,(uint32_t)&FCM_ClearDTCInfo[FCM_ReqDTCIndx]);
							
		for(FCM_Indx = FCM_ZERO;FCM_Indx < FCM_DTCSnapshotDataVar[FCM_ReqDTCIndx].FCM_DTCNumSnapshotSupp;FCM_Indx++)
 8000822:	2300      	movs	r3, #0
 8000824:	81fb      	strh	r3, [r7, #14]
 8000826:	e002      	b.n	800082e <HAL_FCM_ClearReqDTCUpdate+0x2a>
 8000828:	89fb      	ldrh	r3, [r7, #14]
 800082a:	3301      	adds	r3, #1
 800082c:	81fb      	strh	r3, [r7, #14]
 800082e:	88fa      	ldrh	r2, [r7, #6]
 8000830:	4907      	ldr	r1, [pc, #28]	; (8000850 <HAL_FCM_ClearReqDTCUpdate+0x4c>)
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	89fa      	ldrh	r2, [r7, #14]
 8000840:	429a      	cmp	r2, r3
 8000842:	d3f1      	bcc.n	8000828 <HAL_FCM_ClearReqDTCUpdate+0x24>
	{
		/* Do Nothing */
	}
		
		
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	08010174 	.word	0x08010174

08000854 <HAL_FCM_ClearAllDTC>:
** Parameter                : None

** Return value             : None
***************************************************************************************************/
void HAL_FCM_ClearAllDTC(FCM_DTC_StatusType *FCM_WriteDTCInfo)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	/* Variable Declaration */

	uint16_t FCM_Index = FCM_ZERO;
 800085c:	2300      	movs	r3, #0
 800085e:	81fb      	strh	r3, [r7, #14]
	uint16_t FCM_RecIndex = FCM_ZERO;
 8000860:	2300      	movs	r3, #0
 8000862:	81bb      	strh	r3, [r7, #12]
	uint16_t FCM_DTCRecData;
	
	/* Run the Loop to write All DTC */
	for(FCM_Index = FCM_ZERO;FCM_Index < FCM_MAXNUM_DTCS;FCM_Index++)
 8000864:	2300      	movs	r3, #0
 8000866:	81fb      	strh	r3, [r7, #14]
 8000868:	e016      	b.n	8000898 <HAL_FCM_ClearAllDTC+0x44>
	{
		/* Intialize the Variable */
		FCM_DTCRecData = 0xFFFF;
 800086a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800086e:	817b      	strh	r3, [r7, #10]
		/* Write in to EEPROM */
		//(void)writeEeprom((uint16_t)(FCM_EEPROM_STRTDTC_DATAID + FCM_Index),\
				(uint16_t)(sizeof(FCM_DTC_StatusType)),(uint32_t)&FCM_WriteDTCInfo[FCM_Index]);

		for(FCM_RecIndex = FCM_ZERO;FCM_RecIndex < FCM_DTCSnapshotDataVar[FCM_Index].FCM_DTCNumSnapshotSupp;FCM_RecIndex++)
 8000870:	2300      	movs	r3, #0
 8000872:	81bb      	strh	r3, [r7, #12]
 8000874:	e002      	b.n	800087c <HAL_FCM_ClearAllDTC+0x28>
 8000876:	89bb      	ldrh	r3, [r7, #12]
 8000878:	3301      	adds	r3, #1
 800087a:	81bb      	strh	r3, [r7, #12]
 800087c:	89fa      	ldrh	r2, [r7, #14]
 800087e:	490b      	ldr	r1, [pc, #44]	; (80008ac <HAL_FCM_ClearAllDTC+0x58>)
 8000880:	4613      	mov	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	440b      	add	r3, r1
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	89ba      	ldrh	r2, [r7, #12]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3f1      	bcc.n	8000876 <HAL_FCM_ClearAllDTC+0x22>
	for(FCM_Index = FCM_ZERO;FCM_Index < FCM_MAXNUM_DTCS;FCM_Index++)
 8000892:	89fb      	ldrh	r3, [r7, #14]
 8000894:	3301      	adds	r3, #1
 8000896:	81fb      	strh	r3, [r7, #14]
 8000898:	89fb      	ldrh	r3, [r7, #14]
 800089a:	2b20      	cmp	r3, #32
 800089c:	d9e5      	bls.n	800086a <HAL_FCM_ClearAllDTC+0x16>
							,FCM_DTCSnapshotDataVar[FCM_Index].FCM_DTCSnapshotDataSupp[FCM_RecIndex].FCM_DTCSnapshotLen\
							,(uint32_t)&FCM_DTCRecData);
		}
	}

}
 800089e:	bf00      	nop
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	08010174 	.word	0x08010174

080008b0 <FCM_Init_DTC_Info>:
FCM_DTC_InfoType FCM_MostRecentCnfmdDTCInfo;

/*----End of Variables data to be copied to NVM---------*/

void FCM_Init_DTC_Info(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
	uint16_t DTC_Index;
	uint8_t DTC_InfoReadStat;
	
	DTC_InfoReadStat = HAL_FCM_ReadDTCInfo(&FCM_DTCInfo[FCM_ZERO],sizeof(FCM_DTCInfo));
 80008b6:	2163      	movs	r1, #99	; 0x63
 80008b8:	4842      	ldr	r0, [pc, #264]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 80008ba:	f7ff ff03 	bl	80006c4 <HAL_FCM_ReadDTCInfo>
 80008be:	4603      	mov	r3, r0
 80008c0:	717b      	strb	r3, [r7, #5]
	/* Check if the DTC Read Failure */
	if (FCM_ZERO == DTC_InfoReadStat)
 80008c2:	797b      	ldrb	r3, [r7, #5]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d16d      	bne.n	80009a4 <FCM_Init_DTC_Info+0xf4>
	{
		for (DTC_Index = FCM_ZERO; DTC_Index < FCM_MAXNUM_DTCS;DTC_Index++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	80fb      	strh	r3, [r7, #6]
 80008cc:	e063      	b.n	8000996 <FCM_Init_DTC_Info+0xe6>
		{
			/* Clear the DTC status bits according to ISO 14229-1 2013 Specification */
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.testFailed   = FCM_FALSE;
 80008ce:	88fa      	ldrh	r2, [r7, #6]
 80008d0:	493c      	ldr	r1, [pc, #240]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	18ca      	adds	r2, r1, r3
 80008da:	7853      	ldrb	r3, [r2, #1]
 80008dc:	f36f 13c7 	bfc	r3, #7, #1
 80008e0:	7053      	strb	r3, [r2, #1]
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.testFailedThisOperationCycle   = FCM_FALSE;
 80008e2:	88fa      	ldrh	r2, [r7, #6]
 80008e4:	4937      	ldr	r1, [pc, #220]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	18ca      	adds	r2, r1, r3
 80008ee:	7853      	ldrb	r3, [r2, #1]
 80008f0:	f36f 1386 	bfc	r3, #6, #1
 80008f4:	7053      	strb	r3, [r2, #1]
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.pendingDTC   = FCM_FALSE;
 80008f6:	88fa      	ldrh	r2, [r7, #6]
 80008f8:	4932      	ldr	r1, [pc, #200]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 80008fa:	4613      	mov	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4413      	add	r3, r2
 8000900:	18ca      	adds	r2, r1, r3
 8000902:	7853      	ldrb	r3, [r2, #1]
 8000904:	f36f 1345 	bfc	r3, #5, #1
 8000908:	7053      	strb	r3, [r2, #1]
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.confirmedDTC   = FCM_FALSE;
 800090a:	88fa      	ldrh	r2, [r7, #6]
 800090c:	492d      	ldr	r1, [pc, #180]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	18ca      	adds	r2, r1, r3
 8000916:	7853      	ldrb	r3, [r2, #1]
 8000918:	f36f 1304 	bfc	r3, #4, #1
 800091c:	7053      	strb	r3, [r2, #1]
		#if (FCM_TST_NOT_CMPLTD_SNC_LST_CLR_STAT_SUPT == FCM_TRUE)
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.testNotCompletedSinceLastClear = FCM_TRUE;
		#else
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.testNotCompletedSinceLastClear = FCM_FALSE;
 800091e:	88fa      	ldrh	r2, [r7, #6]
 8000920:	4928      	ldr	r1, [pc, #160]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 8000922:	4613      	mov	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	18ca      	adds	r2, r1, r3
 800092a:	7853      	ldrb	r3, [r2, #1]
 800092c:	f36f 03c3 	bfc	r3, #3, #1
 8000930:	7053      	strb	r3, [r2, #1]
		#endif
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.testFailedSinceLastClear   = FCM_FALSE;
 8000932:	88fa      	ldrh	r2, [r7, #6]
 8000934:	4923      	ldr	r1, [pc, #140]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 8000936:	4613      	mov	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	18ca      	adds	r2, r1, r3
 800093e:	7853      	ldrb	r3, [r2, #1]
 8000940:	f36f 0382 	bfc	r3, #2, #1
 8000944:	7053      	strb	r3, [r2, #1]

		#if (FCM_TST_NOT_CMPLTD_THIS_OPCYCLE_STAT_SUPT == FCM_TRUE)
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.testNotCompletedThisOperationCycle = FCM_TRUE;
 8000946:	88fa      	ldrh	r2, [r7, #6]
 8000948:	491e      	ldr	r1, [pc, #120]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	18ca      	adds	r2, r1, r3
 8000952:	7853      	ldrb	r3, [r2, #1]
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	7053      	strb	r3, [r2, #1]
		#else
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.testNotCompletedThisOperationCycle = FCM_FALSE;
		#endif
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.warningIndicatorRequested    = FCM_FALSE;
 800095a:	88fa      	ldrh	r2, [r7, #6]
 800095c:	4919      	ldr	r1, [pc, #100]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 800095e:	4613      	mov	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4413      	add	r3, r2
 8000964:	18ca      	adds	r2, r1, r3
 8000966:	7853      	ldrb	r3, [r2, #1]
 8000968:	f36f 0300 	bfc	r3, #0, #1
 800096c:	7053      	strb	r3, [r2, #1]

			FCM_DTCInfo[DTC_Index].AgingCount = FCM_ZERO;
 800096e:	88fa      	ldrh	r2, [r7, #6]
 8000970:	4914      	ldr	r1, [pc, #80]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 8000972:	4613      	mov	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	4413      	add	r3, r2
 8000978:	440b      	add	r3, r1
 800097a:	3302      	adds	r3, #2
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
			FCM_DTCInfo[DTC_Index].OccurenceCount = FCM_ZERO;
 8000980:	88fa      	ldrh	r2, [r7, #6]
 8000982:	4910      	ldr	r1, [pc, #64]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 8000984:	4613      	mov	r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	4413      	add	r3, r2
 800098a:	440b      	add	r3, r1
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
		for (DTC_Index = FCM_ZERO; DTC_Index < FCM_MAXNUM_DTCS;DTC_Index++)
 8000990:	88fb      	ldrh	r3, [r7, #6]
 8000992:	3301      	adds	r3, #1
 8000994:	80fb      	strh	r3, [r7, #6]
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	2b20      	cmp	r3, #32
 800099a:	d998      	bls.n	80008ce <FCM_Init_DTC_Info+0x1e>
		}
		
		HAL_FCM_WriteDTCInfo(&FCM_DTCInfo[FCM_ZERO], sizeof(FCM_DTCInfo));
 800099c:	2163      	movs	r1, #99	; 0x63
 800099e:	4809      	ldr	r0, [pc, #36]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 80009a0:	f7ff fea3 	bl	80006ea <HAL_FCM_WriteDTCInfo>
	{
		/* Do Nothing */
	}
	
	/* Initialization Flag set */
	FCM_FCM_DTC_InitStatus = FCM_TRUE;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <FCM_Init_DTC_Info+0x118>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	701a      	strb	r2, [r3, #0]

	/* Stop the Operation Cycle */
	FCM_UpdateOperationCycle(BODY_DTC_GROUP,FCM_OPERATION_CYCLE_STOP);
 80009aa:	2101      	movs	r1, #1
 80009ac:	2000      	movs	r0, #0
 80009ae:	f00e fa6b 	bl	800ee88 <FCM_UpdateOperationCycle>
	/* Start the Operation Cycle */
	FCM_UpdateOperationCycle(BODY_DTC_GROUP,FCM_OPERATION_CYCLE_START);
 80009b2:	2100      	movs	r1, #0
 80009b4:	2000      	movs	r0, #0
 80009b6:	f00e fa67 	bl	800ee88 <FCM_UpdateOperationCycle>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	24000000 	.word	0x24000000
 80009c8:	2400030d 	.word	0x2400030d

080009cc <FCM_GetDTCSnpShotRecdByDTCnum>:
								RespByts:			Responce bytes

** Return value             : DTC_Rec_Validity: Validiity of the request
***************************************************************************************************/
uint8_t FCM_GetDTCSnpShotRecdByDTCnum(uint32_t FCM_DTC_Number, uint8_t FCM_DTC_Rec_Num, uint8_t *Fcm_Snapshot_DataBuff, uint16_t *RespByts)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	460b      	mov	r3, r1
 80009da:	72fb      	strb	r3, [r7, #11]
	
	uint8_t DTC_Rec_Validity = FCM_FALSE;
 80009dc:	2300      	movs	r3, #0
 80009de:	77fb      	strb	r3, [r7, #31]
	uint16_t FCM_DTC_Ind;
	uint16_t BuffLen = FCM_ZERO;
 80009e0:	2300      	movs	r3, #0
 80009e2:	82bb      	strh	r3, [r7, #20]
	uint8_t *DataBuff = Fcm_Snapshot_DataBuff;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	61bb      	str	r3, [r7, #24]
	
	FCM_DTC_Ind = FCM_FindDTCIndex(FCM_DTC_Number);
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f00e fa29 	bl	800ee40 <FCM_FindDTCIndex>
 80009ee:	4603      	mov	r3, r0
 80009f0:	82fb      	strh	r3, [r7, #22]
	
	if((NULL_PTR != DataBuff) && (NULL_PTR != RespByts))
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d064      	beq.n	8000ac2 <FCM_GetDTCSnpShotRecdByDTCnum+0xf6>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d061      	beq.n	8000ac2 <FCM_GetDTCSnpShotRecdByDTCnum+0xf6>
	{
	
		if(FCM_DTC_Ind < FCM_MAXNUM_DTCS)
 80009fe:	8afb      	ldrh	r3, [r7, #22]
 8000a00:	2b20      	cmp	r3, #32
 8000a02:	d85e      	bhi.n	8000ac2 <FCM_GetDTCSnpShotRecdByDTCnum+0xf6>
		{
			FCM_CopyDTCStatusByDTCNumber(FCM_DTC_Number, DataBuff);
 8000a04:	69b9      	ldr	r1, [r7, #24]
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f00e fc54 	bl	800f2b4 <FCM_CopyDTCStatusByDTCNumber>
				
			/* Increment the Response bytes by DTC Number + Status byte */
			RespByts[FCM_ZERO] +=  FCM_FOUR;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	3304      	adds	r3, #4
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	801a      	strh	r2, [r3, #0]

			/* Move the pointer to point after the DTC status data */
			if (FCM_DTC_Rec_Num == FCM_READ_SNAPSHOT_DATA_RECORD_1)
 8000a18:	7afb      	ldrb	r3, [r7, #11]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d127      	bne.n	8000a6e <FCM_GetDTCSnpShotRecdByDTCnum+0xa2>
			{
				/* Copy the Record  number */
				DataBuff[FCM_FOUR] = FCM_READ_SNAPSHOT_DATA_RECORD_1;
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	3304      	adds	r3, #4
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]

				DataBuff[FCM_FIVE] = (uint8_t)FCM_DTCSnapshotDataVar[FCM_DTC_Ind].FCM_DTCNumSnapshotSupp;
 8000a26:	8afa      	ldrh	r2, [r7, #22]
 8000a28:	4928      	ldr	r1, [pc, #160]	; (8000acc <FCM_GetDTCSnpShotRecdByDTCnum+0x100>)
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4413      	add	r3, r2
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	440b      	add	r3, r1
 8000a34:	881a      	ldrh	r2, [r3, #0]
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	3305      	adds	r3, #5
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	701a      	strb	r2, [r3, #0]
				
				/* Update the Response Length */
				RespByts[FCM_ZERO] += FCM_TWO;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	3302      	adds	r3, #2
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	801a      	strh	r2, [r3, #0]
				
				/* Update the snapshot record here */
				HAL_FCM_Read_Snapst_Data(FCM_DTC_Ind, (&DataBuff[FCM_SIX]), &BuffLen);
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	1d99      	adds	r1, r3, #6
 8000a4e:	f107 0214 	add.w	r2, r7, #20
 8000a52:	8afb      	ldrh	r3, [r7, #22]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fe55 	bl	8000704 <HAL_FCM_Read_Snapst_Data>
				
				/* Update the Response Length */
				RespByts[FCM_ZERO] += (BuffLen);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	881a      	ldrh	r2, [r3, #0]
 8000a5e:	8abb      	ldrh	r3, [r7, #20]
 8000a60:	4413      	add	r3, r2
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	801a      	strh	r2, [r3, #0]
				
				/* DTC record is valid */
				DTC_Rec_Validity = FCM_TRUE;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	77fb      	strb	r3, [r7, #31]
 8000a6c:	e029      	b.n	8000ac2 <FCM_GetDTCSnpShotRecdByDTCnum+0xf6>
			}
			else if (FCM_DTC_Rec_Num == FCM_READ_ALL_SNAPSHOT_DATA_RECORDS)
 8000a6e:	7afb      	ldrb	r3, [r7, #11]
 8000a70:	2bff      	cmp	r3, #255	; 0xff
 8000a72:	d126      	bne.n	8000ac2 <FCM_GetDTCSnpShotRecdByDTCnum+0xf6>
			{	
				/* Copy the Record  number */
				DataBuff[FCM_FOUR] = FCM_READ_ALL_SNAPSHOT_DATA_RECORDS;
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	3304      	adds	r3, #4
 8000a78:	22ff      	movs	r2, #255	; 0xff
 8000a7a:	701a      	strb	r2, [r3, #0]

				DataBuff[FCM_FIVE] = (uint8_t)FCM_DTCSnapshotDataVar[FCM_DTC_Ind].FCM_DTCNumSnapshotSupp;
 8000a7c:	8afa      	ldrh	r2, [r7, #22]
 8000a7e:	4913      	ldr	r1, [pc, #76]	; (8000acc <FCM_GetDTCSnpShotRecdByDTCnum+0x100>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	881a      	ldrh	r2, [r3, #0]
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	3305      	adds	r3, #5
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	701a      	strb	r2, [r3, #0]
				
				/* Update the Response Length */
				RespByts[FCM_ZERO] += FCM_TWO;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	3302      	adds	r3, #2
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	801a      	strh	r2, [r3, #0]
				
				/* Update the snapshot record here */
				HAL_FCM_Read_Snapst_Data(FCM_DTC_Ind, (&DataBuff[FCM_SIX]), &BuffLen);
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	1d99      	adds	r1, r3, #6
 8000aa4:	f107 0214 	add.w	r2, r7, #20
 8000aa8:	8afb      	ldrh	r3, [r7, #22]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fe2a 	bl	8000704 <HAL_FCM_Read_Snapst_Data>
				
				/* Update the Response Length */
				RespByts[FCM_ZERO] += (BuffLen);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	881a      	ldrh	r2, [r3, #0]
 8000ab4:	8abb      	ldrh	r3, [r7, #20]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	801a      	strh	r2, [r3, #0]
				
				/* DTC record is valid */
				DTC_Rec_Validity = FCM_TRUE;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	77fb      	strb	r3, [r7, #31]
		
		/* Do nothing */
		
	}
	/* To be implemented */
	return DTC_Rec_Validity;
 8000ac2:	7ffb      	ldrb	r3, [r7, #31]
	
	
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3720      	adds	r7, #32
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	08010174 	.word	0x08010174

08000ad0 <FCM_ClearRequestdDTCInfo>:
** Parameter                : DTC_Number : DTC number whose status to be cleared

** Return value             : None
***************************************************************************************************/
uint8_t FCM_ClearRequestdDTCInfo (uint32_t DTC_Number, uint8_t DTC_MemorySelection)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	70fb      	strb	r3, [r7, #3]
    uint16_t    Indx;
    uint8_t RetVal = FCM_FALSE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]

    (void)DTC_MemorySelection;

    if (FCM_TRUE == HAL_FCM_InitStatus())
 8000ae0:	f7ff fde4 	bl	80006ac <HAL_FCM_InitStatus>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d172      	bne.n	8000bd0 <FCM_ClearRequestdDTCInfo+0x100>
    {
        /* Find the DTC Index */
        Indx = FCM_FindDTCIndex(DTC_Number);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f00e f9a8 	bl	800ee40 <FCM_FindDTCIndex>
 8000af0:	4603      	mov	r3, r0
 8000af2:	81bb      	strh	r3, [r7, #12]

        if (Indx < FCM_MAXNUM_DTCS)
 8000af4:	89bb      	ldrh	r3, [r7, #12]
 8000af6:	2b20      	cmp	r3, #32
 8000af8:	d868      	bhi.n	8000bcc <FCM_ClearRequestdDTCInfo+0xfc>
        {
            /* Clear the DTC status bits according to ISO 14229-1 2013 Specification */
            FCM_DTCInfo[Indx].FaultStatus.Signal.testFailed = FCM_FALSE;
 8000afa:	89ba      	ldrh	r2, [r7, #12]
 8000afc:	4937      	ldr	r1, [pc, #220]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	18ca      	adds	r2, r1, r3
 8000b06:	7853      	ldrb	r3, [r2, #1]
 8000b08:	f36f 13c7 	bfc	r3, #7, #1
 8000b0c:	7053      	strb	r3, [r2, #1]
            FCM_DTCInfo[Indx].FaultStatus.Signal.testFailedThisOperationCycle  = FCM_FALSE;
 8000b0e:	89ba      	ldrh	r2, [r7, #12]
 8000b10:	4932      	ldr	r1, [pc, #200]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b12:	4613      	mov	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4413      	add	r3, r2
 8000b18:	18ca      	adds	r2, r1, r3
 8000b1a:	7853      	ldrb	r3, [r2, #1]
 8000b1c:	f36f 1386 	bfc	r3, #6, #1
 8000b20:	7053      	strb	r3, [r2, #1]
            FCM_DTCInfo[Indx].FaultStatus.Signal.pendingDTC  = FCM_FALSE;
 8000b22:	89ba      	ldrh	r2, [r7, #12]
 8000b24:	492d      	ldr	r1, [pc, #180]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b26:	4613      	mov	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4413      	add	r3, r2
 8000b2c:	18ca      	adds	r2, r1, r3
 8000b2e:	7853      	ldrb	r3, [r2, #1]
 8000b30:	f36f 1345 	bfc	r3, #5, #1
 8000b34:	7053      	strb	r3, [r2, #1]
            FCM_DTCInfo[Indx].FaultStatus.Signal.confirmedDTC  = FCM_FALSE;
 8000b36:	89ba      	ldrh	r2, [r7, #12]
 8000b38:	4928      	ldr	r1, [pc, #160]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4413      	add	r3, r2
 8000b40:	18ca      	adds	r2, r1, r3
 8000b42:	7853      	ldrb	r3, [r2, #1]
 8000b44:	f36f 1304 	bfc	r3, #4, #1
 8000b48:	7053      	strb	r3, [r2, #1]
        #if (FCM_TST_NOT_CMPLTD_SNC_LST_CLR_STAT_SUPT == FCM_TRUE)
            FCM_DTCInfo[Indx].FaultStatus.Signal.testNotCompletedSinceLastClear  = FCM_TRUE;
        #else
            FCM_DTCInfo[Indx].FaultStatus.Signal.testNotCompletedSinceLastClear = FCM_FALSE;
 8000b4a:	89ba      	ldrh	r2, [r7, #12]
 8000b4c:	4923      	ldr	r1, [pc, #140]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b4e:	4613      	mov	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	18ca      	adds	r2, r1, r3
 8000b56:	7853      	ldrb	r3, [r2, #1]
 8000b58:	f36f 03c3 	bfc	r3, #3, #1
 8000b5c:	7053      	strb	r3, [r2, #1]
        #endif
            FCM_DTCInfo[Indx].FaultStatus.Signal.testFailedSinceLastClear = FCM_FALSE;
 8000b5e:	89ba      	ldrh	r2, [r7, #12]
 8000b60:	491e      	ldr	r1, [pc, #120]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b62:	4613      	mov	r3, r2
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	4413      	add	r3, r2
 8000b68:	18ca      	adds	r2, r1, r3
 8000b6a:	7853      	ldrb	r3, [r2, #1]
 8000b6c:	f36f 0382 	bfc	r3, #2, #1
 8000b70:	7053      	strb	r3, [r2, #1]

        #if (FCM_TST_NOT_CMPLTD_THIS_OPCYCLE_STAT_SUPT == FCM_TRUE)
            FCM_DTCInfo[Indx].FaultStatus.Signal.testNotCompletedThisOperationCycle = FCM_TRUE;
 8000b72:	89ba      	ldrh	r2, [r7, #12]
 8000b74:	4919      	ldr	r1, [pc, #100]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b76:	4613      	mov	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	18ca      	adds	r2, r1, r3
 8000b7e:	7853      	ldrb	r3, [r2, #1]
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	7053      	strb	r3, [r2, #1]
        #else
            FCM_DTCInfo[Indx].FaultStatus.Signal.testNotCompletedThisOperationCycle = FCM_FALSE;
        #endif
            FCM_DTCInfo[Indx].FaultStatus.Signal.warningIndicatorRequested = FCM_FALSE;
 8000b86:	89ba      	ldrh	r2, [r7, #12]
 8000b88:	4914      	ldr	r1, [pc, #80]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	4413      	add	r3, r2
 8000b90:	18ca      	adds	r2, r1, r3
 8000b92:	7853      	ldrb	r3, [r2, #1]
 8000b94:	f36f 0300 	bfc	r3, #0, #1
 8000b98:	7053      	strb	r3, [r2, #1]

            FCM_DTCInfo[Indx].AgingCount   = FCM_ZERO;
 8000b9a:	89ba      	ldrh	r2, [r7, #12]
 8000b9c:	490f      	ldr	r1, [pc, #60]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4413      	add	r3, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
            FCM_DTCInfo[Indx].OccurenceCount  = FCM_ZERO;
 8000bac:	89ba      	ldrh	r2, [r7, #12]
 8000bae:	490b      	ldr	r1, [pc, #44]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]

			HAL_FCM_ClearReqDTCUpdate(Indx,FCM_DTCInfo);
 8000bbc:	89bb      	ldrh	r3, [r7, #12]
 8000bbe:	4907      	ldr	r1, [pc, #28]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fe1f 	bl	8000804 <HAL_FCM_ClearReqDTCUpdate>
			
            RetVal = FCM_TRUE;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
 8000bca:	e001      	b.n	8000bd0 <FCM_ClearRequestdDTCInfo+0x100>
        }
        else
        {
            RetVal = FCM_FALSE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* Do nothing if FCM not init*/
    }

    return RetVal;
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000000 	.word	0x24000000

08000be0 <FCM_DTC_WriteDTCToEEPROM>:
	}

}

void FCM_DTC_WriteDTCToEEPROM(uint16_t DTC_Index, FCM_DTC_StatusType *FCM_PtrToDTCInfo)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	80fb      	strh	r3, [r7, #6]
	/* Write in to EEPROM */
	//(void)writeEeprom((uint16_t)(FCM_EEPROM_STRTDTC_DATAID + DTC_Index),\
						(uint16_t)(sizeof(FCM_DTC_StatusType)),\
						(uint32_t)&FCM_PtrToDTCInfo[DTC_Index]);
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <get_snapshot_by_DID>:

static uint16_t get_snapshot_by_DID(uint32_t did)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	uint16_t gSnapshotList;
	/* Update snapshot list and return */
    return gSnapshotList;
 8000c00:	89fb      	ldrh	r3, [r7, #14]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <ISOTP_CheckReqType>:
** Return value             : RetVal : Success or fail

** Remarks                  : None
***************************************************************************************************/
ISOTP_ReqType ISOTP_CheckReqType(uint32_t MesgID, uint8_t MesgType)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
	ISOTP_ReqType RetVal = ISOTP_PHYSICALREQ;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	73fb      	strb	r3, [r7, #15]

	if ((MesgID == ISOTP_RxPhysReqID) && (MesgType == ISOTP_RxPhysReqID_Type))
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <ISOTP_CheckReqType+0x50>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d107      	bne.n	8000c3a <ISOTP_CheckReqType+0x2a>
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <ISOTP_CheckReqType+0x54>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	78fa      	ldrb	r2, [r7, #3]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d102      	bne.n	8000c3a <ISOTP_CheckReqType+0x2a>
	{
		RetVal = ISOTP_PHYSICALREQ;
 8000c34:	2302      	movs	r3, #2
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e00b      	b.n	8000c52 <ISOTP_CheckReqType+0x42>
	}
	else if	((MesgID == ISOTP_RxFuncReqID) && (MesgType == ISOTP_RxFuncReqID_Type))
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <ISOTP_CheckReqType+0x58>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d106      	bne.n	8000c52 <ISOTP_CheckReqType+0x42>
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <ISOTP_CheckReqType+0x5c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	78fa      	ldrb	r2, [r7, #3]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d101      	bne.n	8000c52 <ISOTP_CheckReqType+0x42>
	{
		RetVal = ISOTP_FUNCTIONALREQ;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
	else
	{
		/* Do nothing */
	}

	return RetVal;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	24000344 	.word	0x24000344
 8000c64:	2400034c 	.word	0x2400034c
 8000c68:	24000348 	.word	0x24000348
 8000c6c:	2400034d 	.word	0x2400034d

08000c70 <ISOTP_SetRxPhysReqID>:
** Return value             : RetVal : Success or fail

** Remarks                  : None
***************************************************************************************************/
void ISOTP_SetRxPhysReqID(uint32_t MesgID, uint8_t MesgType)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	ISOTP_RxPhysReqID = MesgID;
 8000c7c:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <ISOTP_SetRxPhysReqID+0x24>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
	ISOTP_RxPhysReqID_Type = MesgType;
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <ISOTP_SetRxPhysReqID+0x28>)
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	7013      	strb	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	24000344 	.word	0x24000344
 8000c98:	2400034c 	.word	0x2400034c

08000c9c <ISOTP_SetRxFuncReqID>:
** Return value             : RetVal : Success or fail

** Remarks                  : None
***************************************************************************************************/
void ISOTP_SetRxFuncReqID(uint32_t MesgID, uint8_t MesgType)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
	ISOTP_RxFuncReqID = MesgID;
 8000ca8:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <ISOTP_SetRxFuncReqID+0x24>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
	ISOTP_RxFuncReqID_Type = MesgType;
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <ISOTP_SetRxFuncReqID+0x28>)
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	7013      	strb	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	24000348 	.word	0x24000348
 8000cc4:	2400034d 	.word	0x2400034d

08000cc8 <ISOTP_SetTxmesgMesgID>:
** Return value             : RetVal : Success or fail

** Remarks                  : None
***************************************************************************************************/
void ISOTP_SetTxmesgMesgID(uint32_t MesgID, uint8_t MesgType)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	70fb      	strb	r3, [r7, #3]
	ISOTP_TxMesgID = MesgID;
 8000cd4:	4a05      	ldr	r2, [pc, #20]	; (8000cec <ISOTP_SetTxmesgMesgID+0x24>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
	ISOTP_TxMesgID_Type = MesgType;
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <ISOTP_SetTxmesgMesgID+0x28>)
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	7013      	strb	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	2400033c 	.word	0x2400033c
 8000cf0:	24000340 	.word	0x24000340

08000cf4 <ISOTP_GetSchedPeriod>:
** Return value             : Scheduler Periodicity

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOTP_GetSchedPeriod(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
	/* return Periodicity */
	return ISOTP_PERIOD_SCHED;
 8000cf8:	230a      	movs	r3, #10
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <ISOTP_GetFCSTMIN>:
** Return value             : Flow control minimum segmentation time

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOTP_GetFCSTMIN(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
	/* return Flow control minimum segmentation time */
	return ISOTP_FCSTMIN;
 8000d08:	2314      	movs	r3, #20
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <ISOTP_GetPADVal>:
** Return value             : Padding data value 

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOTP_GetPADVal(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
	/* return Padding data value */
	return ISOTP_PADDATA_VAL;
 8000d18:	23aa      	movs	r3, #170	; 0xaa
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <ISOTP_GetFCBS>:
** Return value             : Flow control block size 

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOTP_GetFCBS(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
	/* return Flow control block size */
	return ISOTP_FCBS;
 8000d28:	2308      	movs	r3, #8
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <ISOTP_GetBUFFSIZE>:
** Return value             : buffer size 

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOTP_GetBUFFSIZE(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	/* return iso15765 buffer size */
	return ISOTP_BUFFSIZE;
 8000d38:	f640 73ff 	movw	r3, #4095	; 0xfff
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <ISOTP_STPadding>:
** Return value             : buffer size 

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOTP_STPadding(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
	/* return iso15765 buffer size */
	return ISOTP_ST_PADDING;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <ISOTP_HAL_MsgIndi>:
** Parameter isoTpConfPtr   : Pointer to TP configuration structure

** Return value             : None
*******************************************************************************/
void ISOTP_HAL_MsgIndi (ISOTP_CfgType *isoTpConfPtr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b09c      	sub	sp, #112	; 0x70
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	char buff[100]={0};
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	2260      	movs	r2, #96	; 0x60
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f00e fc19 	bl	800f5a4 <memset>
	ISOUDS_ServerMsgIndi(isoTpConfPtr->nBytes, isoTpConfPtr->tpBuff, (ISOUDS_AddrType)isoTpConfPtr->ReqType);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	8858      	ldrh	r0, [r3, #2]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	1d19      	adds	r1, r3, #4
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d80:	78db      	ldrb	r3, [r3, #3]
 8000d82:	461a      	mov	r2, r3
 8000d84:	f009 feca 	bl	800ab1c <ISOUDS_ServerMsgIndi>
	sprintf(buff,"\r\n UDS received \r\n");
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	490a      	ldr	r1, [pc, #40]	; (8000db8 <ISOTP_HAL_MsgIndi+0x60>)
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f00e fbe8 	bl	800f564 <siprintf>
	  	HAL_UART_Transmit(&debug_uart, (uint8_t *) buff, sizeof(buff), 100);
 8000d94:	f107 010c 	add.w	r1, r7, #12
 8000d98:	2364      	movs	r3, #100	; 0x64
 8000d9a:	2264      	movs	r2, #100	; 0x64
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <ISOTP_HAL_MsgIndi+0x64>)
 8000d9e:	f007 ffff 	bl	8008da0 <HAL_UART_Transmit>
	   	memset(buff,0,sizeof(buff));
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	2264      	movs	r2, #100	; 0x64
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f00e fbfa 	bl	800f5a4 <memset>
}
 8000db0:	bf00      	nop
 8000db2:	3770      	adds	r7, #112	; 0x70
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	0800fec4 	.word	0x0800fec4
 8000dbc:	24001668 	.word	0x24001668

08000dc0 <ISOTP_HAL_FFIndi>:
** Parameter isoTpConfPtr   : Pointer to TP configuration structure

** Return value             : None
*******************************************************************************/
void ISOTP_HAL_FFIndi (const ISOTP_CfgType *isoTpConfPtr)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	(void)isoTpConfPtr;
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <ISOTP_HAL_Reset>:
** Return value             : None

** Remarks                  : None
***************************************************************************************************/
void ISOTP_HAL_Reset (void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <ISOTP_HAL_TimeoutInd>:
** Return value             : None

** Remarks                  : None
***************************************************************************************************/
void ISOTP_HAL_TimeoutInd (void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
	ISOUDS_ServerRst();
 8000de6:	f00a f831 	bl	800ae4c <ISOUDS_ServerRst>
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <ISOTP_HAL_CANMesgTxnReq_Stub>:
** 							: dataBuff : Pointer to the data buffer

** Return value             : None
*******************************************************************************/
void ISOTP_HAL_CANMesgTxnReq_Stub(uint32_t MsgId, uint8_t MesgType, uint8_t  DLC,const uint8_t *dataBuff)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	72fb      	strb	r3, [r7, #11]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	72bb      	strb	r3, [r7, #10]
	extern FDCAN_TxHeaderTypeDef   TxHeader1;
    (void)MesgType;



      TxHeader1.Identifier = MsgId;
 8000e02:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6013      	str	r3, [r2, #0]
      TxHeader1.IdType = MesgType;
 8000e08:	7afb      	ldrb	r3, [r7, #11]
 8000e0a:	4a1b      	ldr	r2, [pc, #108]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e0c:	6053      	str	r3, [r2, #4]
      TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
      TxHeader1.DataLength = FDCAN_DLC_BYTES_8;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e1a:	60da      	str	r2, [r3, #12]
      TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
      TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
      TxHeader1.FDFormat = FDCAN_CLASSIC_CAN;
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
      TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	61da      	str	r2, [r3, #28]
      TxHeader1.MessageMarker = 0;
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]

      for(Indx = 0; Indx < DLC; Indx++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	77fb      	strb	r3, [r7, #31]
 8000e3e:	e00b      	b.n	8000e58 <ISOTP_HAL_CANMesgTxnReq_Stub+0x68>
          {
         data8[Indx] = dataBuff[Indx];
 8000e40:	7ffb      	ldrb	r3, [r7, #31]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	441a      	add	r2, r3
 8000e46:	7ffb      	ldrb	r3, [r7, #31]
 8000e48:	7812      	ldrb	r2, [r2, #0]
 8000e4a:	3320      	adds	r3, #32
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f803 2c0c 	strb.w	r2, [r3, #-12]
      for(Indx = 0; Indx < DLC; Indx++)
 8000e52:	7ffb      	ldrb	r3, [r7, #31]
 8000e54:	3301      	adds	r3, #1
 8000e56:	77fb      	strb	r3, [r7, #31]
 8000e58:	7ffa      	ldrb	r2, [r7, #31]
 8000e5a:	7abb      	ldrb	r3, [r7, #10]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d3ef      	bcc.n	8000e40 <ISOTP_HAL_CANMesgTxnReq_Stub+0x50>
          }

   HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader1, data8);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	461a      	mov	r2, r3
 8000e66:	4904      	ldr	r1, [pc, #16]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <ISOTP_HAL_CANMesgTxnReq_Stub+0x8c>)
 8000e6a:	f003 fbca 	bl	8004602 <HAL_FDCAN_AddMessageToTxFifoQ>


}
 8000e6e:	bf00      	nop
 8000e70:	3720      	adds	r7, #32
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2400150c 	.word	0x2400150c
 8000e7c:	2400157c 	.word	0x2400157c

08000e80 <ISOUDS_ClearDTCInfoPreCondCheck>:
**
**
** Return value             : RetVal : Pre condition validity
*******************************************************************************/
uint8_t ISOUDS_ClearDTCInfoPreCondCheck(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
	uint8_t RetVal = ISOUDS_TRUE;
 8000e86:	2301      	movs	r3, #1
 8000e88:	71fb      	strb	r3, [r7, #7]

	/* Add Code to check the Pre-conditions and update RetVal accordingly */
    RetVal = HAL_ClearDTCInfoPreCondCheck();
 8000e8a:	f000 f829 	bl	8000ee0 <HAL_ClearDTCInfoPreCondCheck>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
	return RetVal;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <ISOUDS_CLearDTCInfoReq>:
** Parameters 				: DTCNumber : DTC number to be cleared
**
** Return value             : Response Value
*******************************************************************************/
uint8_t ISOUDS_CLearDTCInfoReq(uint32_t DTCNumber, uint8_t MemorySelection)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	uint8_t RespVal = ISOUDS_POSRES;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]
	

	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
	RespVal = HAL_CLearDTCInfoReq(DTCNumber, MemorySelection);
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f821 	bl	8000ef8 <HAL_CLearDTCInfoReq>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	73fb      	strb	r3, [r7, #15]

	/* Manual Code End */

	return RespVal;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <ISOUDS_CLearDTCInfoReqStat>:
** Parameters 				: DTCNumber : DTC number to be cleared
**
** Return value             : Response Value
*******************************************************************************/
uint8_t ISOUDS_CLearDTCInfoReqStat(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
	uint8_t RespVal = ISOUDS_POSRES;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	

	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
	RespVal = HAL_CLearDTCInfoReqStat();
 8000ece:	f000 f837 	bl	8000f40 <HAL_CLearDTCInfoReqStat>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]

	/* Manual Code End */

	return RespVal;
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_ClearDTCInfoPreCondCheck>:
** Parameter                : None

** Return value             : ISOUDS_TRUE or  ISOUDS_FALSE
*******************************************************************************/
uint8_t HAL_ClearDTCInfoPreCondCheck(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
	uint8_t RetVal;
	/*Verify the preconditions and return ISOUDS_TRUE of ISOUDS_FALSE*/
	RetVal = ISOUDS_TRUE;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	71fb      	strb	r3, [r7, #7]
	return RetVal;
 8000eea:	79fb      	ldrb	r3, [r7, #7]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_CLearDTCInfoReq>:
** Parameter                : DTCNumber

** Return value             : ISOUDS_POSRES or other ISOUDS macros. refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_CLearDTCInfoReq(uint32_t DTCNumber, uint8_t MemorySelection)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]

	uint8_t RespVal;
	(void)MemorySelection;
	/* User Specific Code */

	if (ISOUDS_CLRDIAG_INFO_MASK_VAL == DTCNumber)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d104      	bne.n	8000f18 <HAL_CLearDTCInfoReq+0x20>
	{
		//setWdtEn(PAL_HIGH);
		(void)FCM_ClearAllDTCInfo();
 8000f0e:	f00e f8f9 	bl	800f104 <FCM_ClearAllDTCInfo>
		//setWdtEn(PAL_LOW);
	    /* User specific implementation */
		RespVal = ISOUDS_POSRES;
 8000f12:	2300      	movs	r3, #0
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	e00e      	b.n	8000f36 <HAL_CLearDTCInfoReq+0x3e>
	}
	else
	{
		/* Clear the Requested DTC */
		RespVal = FCM_ClearRequestdDTCInfo(DTCNumber, MemorySelection);
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fdd7 	bl	8000ad0 <FCM_ClearRequestdDTCInfo>
 8000f22:	4603      	mov	r3, r0
 8000f24:	73fb      	strb	r3, [r7, #15]

		if(FCM_TRUE == RespVal)
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d102      	bne.n	8000f32 <HAL_CLearDTCInfoReq+0x3a>
		{
			/* User specific implementation */
			RespVal = ISOUDS_POSRES;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e001      	b.n	8000f36 <HAL_CLearDTCInfoReq+0x3e>
		}
		else
		{
			/* User specific implementation */
			RespVal = ISOUDS_ROOR;
 8000f32:	2331      	movs	r3, #49	; 0x31
 8000f34:	73fb      	strb	r3, [r7, #15]
		}

	}
	
	return RespVal;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_CLearDTCInfoReqStat>:
** Parameter                : None

** Return value             : ISOUDS_POSRES or other ISOUDS macros. refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_CLearDTCInfoReqStat(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
	uint8_t RespVal;
    /* User specific implementation */
	RespVal = ISOUDS_POSRES;
 8000f46:	2300      	movs	r3, #0
 8000f48:	71fb      	strb	r3, [r7, #7]
	return RespVal;
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <ISOUDS_Get_CntrlDTCSetMaxSubFun>:
** Return value             : retVal : Number of subfunctions

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_CntrlDTCSetMaxSubFun(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
	return ISOUDS_CntrlDTCSetMaxSubFun;
 8000f5c:	2302      	movs	r3, #2
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <ISOUDS_CntrlDTCSetngPreCondCheck>:
**
**
** Return value             : RetVal : Pre condition validity
*******************************************************************************/
uint8_t ISOUDS_CntrlDTCSetngPreCondCheck(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t RetVal = ISOUDS_TRUE;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	71fb      	strb	r3, [r7, #7]

	

	/* Add Code to check the Pre-conditions and update RetVal accordingly */
	RetVal = HAL_CntrlDTCSetngPreCondCheck();
 8000f72:	f000 f835 	bl	8000fe0 <HAL_CntrlDTCSetngPreCondCheck>
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]

	return RetVal;
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <ISOUDS_CntrDTCSet_ON_Cbk>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_CntrDTCSet_ON_Cbk(uint8_t DTCSettingType,const uint8_t *Data, uint16_t DataLen)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80bb      	strh	r3, [r7, #4]
	uint8_t RespVal = ISOUDS_POSRES;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
	

	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
	RespVal = HAL_CntrDTCSet_ON_Cbk(DTCSettingType, Data, DataLen);
 8000f98:	88ba      	ldrh	r2, [r7, #4]
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	6839      	ldr	r1, [r7, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f83a 	bl	8001018 <HAL_CntrDTCSet_ON_Cbk>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
	/* Manual Code End */

	return RespVal;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <ISOUDS_CntrDTCSet_OFF_Cbk>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_CntrDTCSet_OFF_Cbk(uint8_t DTCSettingType,const uint8_t *Data, uint16_t DataLen)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	6039      	str	r1, [r7, #0]
 8000fbc:	71fb      	strb	r3, [r7, #7]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	80bb      	strh	r3, [r7, #4]
	uint8_t RespVal = ISOUDS_POSRES;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]
	

	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
	RespVal = HAL_CntrDTCSet_OFF_Cbk(DTCSettingType, Data, DataLen);
 8000fc6:	88ba      	ldrh	r2, [r7, #4]
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	6839      	ldr	r1, [r7, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 f835 	bl	800103c <HAL_CntrDTCSet_OFF_Cbk>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73fb      	strb	r3, [r7, #15]

	/* Manual Code End */

	return RespVal;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_CntrlDTCSetngPreCondCheck>:
** Parameter                : None

** Return value             : ISOUDS_TRUE or ISOUDS_FALSE
*******************************************************************************/
uint8_t HAL_CntrlDTCSetngPreCondCheck(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
	uint8_t RetVal;
	/* User specific implementation*/
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8000fe6:	f000 fb7a 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d10c      	bne.n	800100a <HAL_CntrlDTCSetngPreCondCheck+0x2a>
 8000ff0:	f000 fb7d 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d107      	bne.n	800100a <HAL_CntrlDTCSetngPreCondCheck+0x2a>
 8000ffa:	f000 fb80 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b01      	cmp	r3, #1
 8001002:	d102      	bne.n	800100a <HAL_CntrlDTCSetngPreCondCheck+0x2a>
	{
		RetVal = ISOUDS_TRUE;
 8001004:	2301      	movs	r3, #1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	e001      	b.n	800100e <HAL_CntrlDTCSetngPreCondCheck+0x2e>
	}
	else
	{
		RetVal = ISOUDS_FALSE;
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]
	}
    return RetVal;
 800100e:	79fb      	ldrb	r3, [r7, #7]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_CntrDTCSet_ON_Cbk>:
** Parameter                : None

** Return value             : ISOUDS response. refer ISOUDS_Server.h file for response codes
*******************************************************************************/
uint8_t HAL_CntrDTCSet_ON_Cbk(uint8_t DTCSettingType, const uint8_t *Data, uint16_t DataLen)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	80bb      	strh	r3, [r7, #4]
	(void) DTCSettingType;
	(void) Data;

    /* User specific implementation*/

	FCM_UpdateCntrolDTCSetting(FCM_DTC_SETTING_ON);
 8001028:	2001      	movs	r0, #1
 800102a:	f00e fa8b 	bl	800f544 <FCM_UpdateCntrolDTCSetting>
	
	RespVal = ISOUDS_POSRES;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]

    return RespVal;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_CntrDTCSet_OFF_Cbk>:
** Parameter                : None

** Return value             : ISOUDS response. refer ISOUDS_Server.h file for response codes
*******************************************************************************/
uint8_t HAL_CntrDTCSet_OFF_Cbk(uint8_t DTCSettingType, const uint8_t *Data, uint16_t DataLen)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	4613      	mov	r3, r2
 800104a:	80bb      	strh	r3, [r7, #4]
#if (SYMC_SECURITY == 1)
	SYMC_UpdateSeed();
#endif

    /* User specific implementation*/
	FCM_UpdateCntrolDTCSetting(FCM_DTC_SETTING_OFF);
 800104c:	2002      	movs	r0, #2
 800104e:	f00e fa79 	bl	800f544 <FCM_UpdateCntrolDTCSetting>
	RespVal = ISOUDS_POSRES;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]
	
    return RespVal;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <ISOUDS_Get_ComContMaxSubFun>:
** Return value             : retVal : Number of subfunctions

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_ComContMaxSubFun(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
	return ISOUDS_ComContMaxSubFun;
 8001064:	2304      	movs	r3, #4
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <ISOUDS_CommTypeSupp>:
**
**
** Return value             : RetVal : Communication type validity
*******************************************************************************/
uint8_t ISOUDS_CommTypeSupp(uint8_t CommType)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = ISOUDS_TRUE;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]

	/* Check normal or Network management communication type */
	if (ISOUDS_ZERO == (CommType & ISOUDS_NWMCMANCM))
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <ISOUDS_CommTypeSupp+0x1c>
		/* Add more conditions according to requirement */
	{
		/* Neither Normal nor Network Management request */
		RetVal = ISOUDS_FALSE;
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]
	else
	{
		/* Do nothing */
	}

	return RetVal;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <ISOUDS_CommCntlPreCondCheck>:
**
**
** Return value             : RetVal : Pre condition validity
*******************************************************************************/
uint8_t ISOUDS_CommCntlPreCondCheck(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
	uint8_t RetVal = ISOUDS_TRUE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	71fb      	strb	r3, [r7, #7]

	

	/* Add Code to check the Pre-conditions and update RetVal accordingly */
	RetVal = HAL_CommCntlPreCondCheck();
 80010a4:	f000 f863 	bl	800116e <HAL_CommCntlPreCondCheck>
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]

	return RetVal;
 80010ac:	79fb      	ldrb	r3, [r7, #7]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <ISOUDS_EnblRxTx>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_EnblRxTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	603a      	str	r2, [r7, #0]
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	460b      	mov	r3, r1
 80010c4:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal = ISOUDS_POSRES;
 80010c6:	2300      	movs	r3, #0
 80010c8:	73fb      	strb	r3, [r7, #15]
	

	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
	RespVal = HAL_EnblRxTx(ControlType,CommType, Data);
 80010ca:	79b9      	ldrb	r1, [r7, #6]
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f868 	bl	80011a6 <HAL_EnblRxTx>
 80010d6:	4603      	mov	r3, r0
 80010d8:	73fb      	strb	r3, [r7, #15]

	/* Manual Code End */

	return RespVal;
 80010da:	7bfb      	ldrb	r3, [r7, #15]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <ISOUDS_EnblRxDisableTx>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_EnblRxDisableTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	603a      	str	r2, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
 80010f0:	460b      	mov	r3, r1
 80010f2:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal = ISOUDS_POSRES;
 80010f4:	2300      	movs	r3, #0
 80010f6:	73fb      	strb	r3, [r7, #15]


	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
	RespVal = HAL_EnblRxDisableTx(ControlType,CommType, Data);
 80010f8:	79b9      	ldrb	r1, [r7, #6]
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f862 	bl	80011c8 <HAL_EnblRxDisableTx>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]

	/* Manual Code End */

	return RespVal;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <ISOUDS_DisbleRxEnblTx>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_DisbleRxEnblTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	603a      	str	r2, [r7, #0]
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	460b      	mov	r3, r1
 8001120:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal = ISOUDS_POSRES;
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]


	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
	RespVal = HAL_DisbleRxEnblTx(ControlType,CommType, Data);
 8001126:	79b9      	ldrb	r1, [r7, #6]
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f85c 	bl	80011ea <HAL_DisbleRxEnblTx>
 8001132:	4603      	mov	r3, r0
 8001134:	73fb      	strb	r3, [r7, #15]

	/* Manual Code End */

	return RespVal;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <ISOUDS_DisablRxTx>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_DisablRxTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	603a      	str	r2, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	460b      	mov	r3, r1
 800114e:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal = ISOUDS_POSRES;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
	

	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
    RespVal = HAL_DisablRxTx(ControlType, CommType, Data);
 8001154:	79b9      	ldrb	r1, [r7, #6]
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f856 	bl	800120c <HAL_DisablRxTx>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]

	/* Manual Code End */

	return RespVal;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_CommCntlPreCondCheck>:
** Parameters 				: None
**
** Return value             : ISOUDS_TRUE or FALSE
*******************************************************************************/
uint8_t HAL_CommCntlPreCondCheck(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
	uint8_t RetVal;
	/* User specific implementation */
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8001174:	f000 fab3 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8001178:	4603      	mov	r3, r0
 800117a:	2b01      	cmp	r3, #1
 800117c:	d10c      	bne.n	8001198 <HAL_CommCntlPreCondCheck+0x2a>
 800117e:	f000 fab6 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 8001182:	4603      	mov	r3, r0
 8001184:	2b01      	cmp	r3, #1
 8001186:	d107      	bne.n	8001198 <HAL_CommCntlPreCondCheck+0x2a>
 8001188:	f000 fab9 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	d102      	bne.n	8001198 <HAL_CommCntlPreCondCheck+0x2a>
	{
		RetVal = ISOUDS_TRUE;
 8001192:	2301      	movs	r3, #1
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	e001      	b.n	800119c <HAL_CommCntlPreCondCheck+0x2e>
	}
	else
	{
		RetVal = ISOUDS_FALSE;
 8001198:	2300      	movs	r3, #0
 800119a:	71fb      	strb	r3, [r7, #7]
	}
	return RetVal;
 800119c:	79fb      	ldrb	r3, [r7, #7]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_EnblRxTx>:
**
** Return value             : Postive or negative response coded based on the condition.
**                            Refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_EnblRxTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b085      	sub	sp, #20
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	603a      	str	r2, [r7, #0]
 80011b0:	71fb      	strb	r3, [r7, #7]
 80011b2:	460b      	mov	r3, r1
 80011b4:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal;
    /* User specific code */
	(void)ControlType;
	(void)CommType;
	(void)Data;
	RespVal = ISOUDS_POSRES;
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]
	return RespVal;
 80011ba:	7bfb      	ldrb	r3, [r7, #15]

}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_EnblRxDisableTx>:
**
** Return value             : Postive or negative response coded based on the condition.
**                            Refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_EnblRxDisableTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	603a      	str	r2, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	460b      	mov	r3, r1
 80011d6:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal;
    /* User specific code */
	(void)ControlType;
	(void)CommType;
	(void)Data;
	RespVal = ISOUDS_POSRES;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
	return RespVal;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <HAL_DisbleRxEnblTx>:
**
** Return value             : Postive or negative response coded based on the condition.
**                            Refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_DisbleRxEnblTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b085      	sub	sp, #20
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	603a      	str	r2, [r7, #0]
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	460b      	mov	r3, r1
 80011f8:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal;
    /* User specific code */
	(void)ControlType;
	(void)CommType;
	(void)Data;
	RespVal = ISOUDS_POSRES;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]
	return RespVal;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_DisablRxTx>:
**
** Return value             : Postive or negative response coded based on the condition.
**                            Refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_DisablRxTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	603a      	str	r2, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	460b      	mov	r3, r1
 800121a:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal;
    /* User specific code */
	(void)ControlType;
	(void)CommType;
	(void)Data;
	RespVal = ISOUDS_POSRES;
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
	return RespVal;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <ISOUDS_Get_DYDDCONFTABSIZE>:
** Return value             : retVal : Number of DIDs Supported

** Remarks                  : None
***************************************************************************************************/
uint16_t ISOUDS_Get_DYDDCONFTABSIZE(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
	return ISOUDS_DYDDCONFTABSIZE;
 8001232:	2302      	movs	r3, #2
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <ISOUDS_HardReset_Cbk>:
** Return value             : retVal : Response code

** Remarks                  : None
***************************************************************************************************/
static uint8_t ISOUDS_HardReset_Cbk(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
	uint8_t RespVal = ISOUDS_POSRES;
 8001244:	2300      	movs	r3, #0
 8001246:	71fb      	strb	r3, [r7, #7]
	uint8_t CondMeet;

	/* API need to be defined to check the conditions */
	CondMeet = HAL_HardReset_Cond();
 8001248:	f000 f845 	bl	80012d6 <HAL_HardReset_Cond>
 800124c:	4603      	mov	r3, r0
 800124e:	71bb      	strb	r3, [r7, #6]

	if (ISOUDS_TRUE == CondMeet)
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d106      	bne.n	8001264 <ISOUDS_HardReset_Cbk+0x26>
	{
		/* Switch session as per request */
		ISOUDS_ReqECUReset();
 8001256:	f009 fe7b 	bl	800af50 <ISOUDS_ReqECUReset>

		/* reset the required parameters during programming session transition */

		/* Reset request Accepted */
		RespVal = HAL_HardReset_Proc();
 800125a:	f000 f890 	bl	800137e <HAL_HardReset_Proc>
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
 8001262:	e001      	b.n	8001268 <ISOUDS_HardReset_Cbk+0x2a>
	}
	else
	{
		RespVal = ISOUDS_CNC;
 8001264:	2322      	movs	r3, #34	; 0x22
 8001266:	71fb      	strb	r3, [r7, #7]
	}

	return RespVal;
 8001268:	79fb      	ldrb	r3, [r7, #7]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <ISOUDS_KeyOffOnReset_Cbk>:
** Return value             : retVal : Response code

** Remarks                  : None
***************************************************************************************************/
static uint8_t ISOUDS_KeyOffOnReset_Cbk(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
	uint8_t RespVal = ISOUDS_POSRES;
 8001278:	2300      	movs	r3, #0
 800127a:	71fb      	strb	r3, [r7, #7]
	uint8_t CondMeet;

	/* API need to be defined to check the conditions */
	CondMeet = HAL_KeyOffOnReset_Cond();
 800127c:	f000 f847 	bl	800130e <HAL_KeyOffOnReset_Cond>
 8001280:	4603      	mov	r3, r0
 8001282:	71bb      	strb	r3, [r7, #6]

	if (ISOUDS_TRUE == CondMeet)
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d104      	bne.n	8001294 <ISOUDS_KeyOffOnReset_Cbk+0x22>
	{
		/* reset the required parameters during programming session transition */

		/* Reset request Accepted */
		RespVal = HAL_KeyOffOnReset_Proc();
 800128a:	f000 f884 	bl	8001396 <HAL_KeyOffOnReset_Proc>
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	e001      	b.n	8001298 <ISOUDS_KeyOffOnReset_Cbk+0x26>
	}
	else
	{
		RespVal = ISOUDS_CNC;
 8001294:	2322      	movs	r3, #34	; 0x22
 8001296:	71fb      	strb	r3, [r7, #7]
	}

	return RespVal;
 8001298:	79fb      	ldrb	r3, [r7, #7]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <ISOUDS_SoftReset_Cbk>:
** Return value             : retVal : Response code

** Remarks                  : None
***************************************************************************************************/
static uint8_t ISOUDS_SoftReset_Cbk(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
	uint8_t RespVal = ISOUDS_POSRES;
 80012a8:	2300      	movs	r3, #0
 80012aa:	71fb      	strb	r3, [r7, #7]
	uint8_t CondMeet;

	/* API need to be defined to check the conditions */
	CondMeet = HAL_SoftReset_Cond();
 80012ac:	f000 f84b 	bl	8001346 <HAL_SoftReset_Cond>
 80012b0:	4603      	mov	r3, r0
 80012b2:	71bb      	strb	r3, [r7, #6]

	if (ISOUDS_TRUE == CondMeet)
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d106      	bne.n	80012c8 <ISOUDS_SoftReset_Cbk+0x26>
	{
		/* Switch session as per request */
		ISOUDS_ReqECUReset();
 80012ba:	f009 fe49 	bl	800af50 <ISOUDS_ReqECUReset>

		/* reset the required parameters during programming session transition */

		/* Reset request Accepted */
		RespVal = HAL_SoftReset_Proc();
 80012be:	f000 f876 	bl	80013ae <HAL_SoftReset_Proc>
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	e001      	b.n	80012cc <ISOUDS_SoftReset_Cbk+0x2a>
	}
	else
	{
		RespVal = ISOUDS_CNC;
 80012c8:	2322      	movs	r3, #34	; 0x22
 80012ca:	71fb      	strb	r3, [r7, #7]
	}

	return RespVal;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_HardReset_Cond>:
** Parameter                : None

** Return value             : ISOUDS_TRUE or ISOUDS_FALSE
***************************************************************************************************/
uint8_t HAL_HardReset_Cond(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
	uint8_t CondMeet;
	
	/*User specific implementation*/
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && \
 80012dc:	f000 f9ff 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d10c      	bne.n	8001300 <HAL_HardReset_Cond+0x2a>
 80012e6:	f000 fa02 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d107      	bne.n	8001300 <HAL_HardReset_Cond+0x2a>
																	(ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 80012f0:	f000 fa05 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 80012f4:	4603      	mov	r3, r0
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && \
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d102      	bne.n	8001300 <HAL_HardReset_Cond+0x2a>
	{
		CondMeet = ISOUDS_TRUE;
 80012fa:	2301      	movs	r3, #1
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	e001      	b.n	8001304 <HAL_HardReset_Cond+0x2e>
	}
	else
	{
		CondMeet = ISOUDS_FALSE;
 8001300:	2300      	movs	r3, #0
 8001302:	71fb      	strb	r3, [r7, #7]
	}
	
	return CondMeet;
 8001304:	79fb      	ldrb	r3, [r7, #7]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_KeyOffOnReset_Cond>:
** Parameter                : None

** Return value             : ISOUDS_TRUE or ISOUDS_FALSE
***************************************************************************************************/
uint8_t HAL_KeyOffOnReset_Cond(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
	uint8_t CondMeet;
	/*User specific implementation*/
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && \
 8001314:	f000 f9e3 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8001318:	4603      	mov	r3, r0
 800131a:	2b01      	cmp	r3, #1
 800131c:	d10c      	bne.n	8001338 <HAL_KeyOffOnReset_Cond+0x2a>
 800131e:	f000 f9e6 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 8001322:	4603      	mov	r3, r0
 8001324:	2b01      	cmp	r3, #1
 8001326:	d107      	bne.n	8001338 <HAL_KeyOffOnReset_Cond+0x2a>
																	(ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8001328:	f000 f9e9 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 800132c:	4603      	mov	r3, r0
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && \
 800132e:	2b01      	cmp	r3, #1
 8001330:	d102      	bne.n	8001338 <HAL_KeyOffOnReset_Cond+0x2a>
	{
		CondMeet = ISOUDS_TRUE;
 8001332:	2301      	movs	r3, #1
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	e001      	b.n	800133c <HAL_KeyOffOnReset_Cond+0x2e>
	}
	else
	{
		CondMeet = ISOUDS_FALSE;
 8001338:	2300      	movs	r3, #0
 800133a:	71fb      	strb	r3, [r7, #7]
	}
	return CondMeet;
 800133c:	79fb      	ldrb	r3, [r7, #7]

}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SoftReset_Cond>:
** Parameter                : None

** Return value             : ISOUDS_TRUE or ISOUDS_FALSE
***************************************************************************************************/
uint8_t HAL_SoftReset_Cond(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
	uint8_t CondMeet;
	/*User specific implementation*/
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && \
 800134c:	f000 f9c7 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8001350:	4603      	mov	r3, r0
 8001352:	2b01      	cmp	r3, #1
 8001354:	d10c      	bne.n	8001370 <HAL_SoftReset_Cond+0x2a>
 8001356:	f000 f9ca 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 800135a:	4603      	mov	r3, r0
 800135c:	2b01      	cmp	r3, #1
 800135e:	d107      	bne.n	8001370 <HAL_SoftReset_Cond+0x2a>
																	(ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8001360:	f000 f9cd 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 8001364:	4603      	mov	r3, r0
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && \
 8001366:	2b01      	cmp	r3, #1
 8001368:	d102      	bne.n	8001370 <HAL_SoftReset_Cond+0x2a>
	{
		CondMeet = ISOUDS_TRUE;
 800136a:	2301      	movs	r3, #1
 800136c:	71fb      	strb	r3, [r7, #7]
 800136e:	e001      	b.n	8001374 <HAL_SoftReset_Cond+0x2e>
	}
	else
	{
		CondMeet = ISOUDS_FALSE;
 8001370:	2300      	movs	r3, #0
 8001372:	71fb      	strb	r3, [r7, #7]
	}
	return CondMeet;
 8001374:	79fb      	ldrb	r3, [r7, #7]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_HardReset_Proc>:
** Parameter                : None

** Return value             : UDS response codes. Refer ISOUDS_Server.h for macro's
***************************************************************************************************/
uint8_t HAL_HardReset_Proc(void)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
	uint8_t RespVal;
	/*User specific implementation*/
	RespVal = ISOUDS_POSRES;
 8001384:	2300      	movs	r3, #0
 8001386:	71fb      	strb	r3, [r7, #7]
	return RespVal;
 8001388:	79fb      	ldrb	r3, [r7, #7]
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_KeyOffOnReset_Proc>:
** Parameter                : None

** Return value             : UDS response codes. Refer ISOUDS_Server.h for macro's
***************************************************************************************************/
uint8_t HAL_KeyOffOnReset_Proc(void)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
	uint8_t RespVal;
	/*User specific implementation*/
	RespVal = ISOUDS_POSRES;
 800139c:	2300      	movs	r3, #0
 800139e:	71fb      	strb	r3, [r7, #7]
	return RespVal;
 80013a0:	79fb      	ldrb	r3, [r7, #7]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <HAL_SoftReset_Proc>:
** Parameter                : None

** Return value             : UDS response codes. Refer ISOUDS_Server.h for macro's
***************************************************************************************************/
uint8_t HAL_SoftReset_Proc(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
	uint8_t RespVal;
	/*User specific implementation*/
	RespVal = ISOUDS_POSRES;
 80013b4:	2300      	movs	r3, #0
 80013b6:	71fb      	strb	r3, [r7, #7]
	return RespVal;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <ISOUDS_Get_IOContrlMaxSubFun>:
** Return value             : retVal : Number of IO control IDs Supported

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_IOContrlMaxSubFun(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
	return ISOUDS_IOContrlMaxSubFun;
 80013ca:	2304      	movs	r3, #4
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <ISOUDS_IOControlParameterSupp>:
**
**
** Return value             : RetVal : Communication type validity
*******************************************************************************/
uint8_t ISOUDS_IOControlParameterSupp(uint8_t IOcontrlParam, uint8_t RoutineIDIndex)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	460a      	mov	r2, r1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	4613      	mov	r3, r2
 80013e6:	71bb      	strb	r3, [r7, #6]
	uint8_t RetVal = ISOUDS_FALSE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]
	uint8_t Index;
	uint8_t IOParam_Found;

	IOParam_Found = ISOUDS_FALSE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	737b      	strb	r3, [r7, #13]
	for (Index = 0; (Index < ISOUDS_IOCntrlCfg_Tbl[RoutineIDIndex].NumOfIOCntrlParamSup) && (ISOUDS_FALSE == IOParam_Found); Index++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	73bb      	strb	r3, [r7, #14]
 80013f4:	e014      	b.n	8001420 <ISOUDS_IOControlParameterSupp+0x48>
	{
		if (IOcontrlParam == ISOUDS_IOCntrlCfg_Tbl[RoutineIDIndex].IOContrlParamSupp[Index])
 80013f6:	79ba      	ldrb	r2, [r7, #6]
 80013f8:	7bb9      	ldrb	r1, [r7, #14]
 80013fa:	4814      	ldr	r0, [pc, #80]	; (800144c <ISOUDS_IOControlParameterSupp+0x74>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4403      	add	r3, r0
 8001406:	440b      	add	r3, r1
 8001408:	3304      	adds	r3, #4
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	79fa      	ldrb	r2, [r7, #7]
 800140e:	429a      	cmp	r2, r3
 8001410:	d103      	bne.n	800141a <ISOUDS_IOControlParameterSupp+0x42>
		{
			/* Neither Normal nor Network Management request */
			RetVal = ISOUDS_TRUE;
 8001412:	2301      	movs	r3, #1
 8001414:	73fb      	strb	r3, [r7, #15]

			IOParam_Found = ISOUDS_TRUE;
 8001416:	2301      	movs	r3, #1
 8001418:	737b      	strb	r3, [r7, #13]
	for (Index = 0; (Index < ISOUDS_IOCntrlCfg_Tbl[RoutineIDIndex].NumOfIOCntrlParamSup) && (ISOUDS_FALSE == IOParam_Found); Index++)
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	3301      	adds	r3, #1
 800141e:	73bb      	strb	r3, [r7, #14]
 8001420:	79ba      	ldrb	r2, [r7, #6]
 8001422:	490a      	ldr	r1, [pc, #40]	; (800144c <ISOUDS_IOControlParameterSupp+0x74>)
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	3303      	adds	r3, #3
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	7bba      	ldrb	r2, [r7, #14]
 8001434:	429a      	cmp	r2, r3
 8001436:	d202      	bcs.n	800143e <ISOUDS_IOControlParameterSupp+0x66>
 8001438:	7b7b      	ldrb	r3, [r7, #13]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0db      	beq.n	80013f6 <ISOUDS_IOControlParameterSupp+0x1e>
		{
			/* Do nothing */
		}
	}

	return RetVal;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	24000184 	.word	0x24000184

08001450 <ISOUDS_IOCntrlPreCondCheck>:
**
**
** Return value             : RetVal : Pre condition validity
*******************************************************************************/
uint8_t ISOUDS_IOCntrlPreCondCheck(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
	uint8_t 	RetVal = ISOUDS_TRUE;
 8001456:	2301      	movs	r3, #1
 8001458:	71fb      	strb	r3, [r7, #7]



	/* Add Code to check the Pre-conditions and update RetVal accordingly */
	RetVal = HAL_IOCntrlPreCondCheck();
 800145a:	f000 f89a 	bl	8001592 <HAL_IOCntrlPreCondCheck>
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]

	return RetVal;
 8001462:	79fb      	ldrb	r3, [r7, #7]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <ISOUDS_IOctrlTestRtn>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_IOctrlTestRtn(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60ba      	str	r2, [r7, #8]
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4603      	mov	r3, r0
 8001478:	81fb      	strh	r3, [r7, #14]
 800147a:	460b      	mov	r3, r1
 800147c:	737b      	strb	r3, [r7, #13]
	uint8_t RespVal = ISOUDS_POSRES;
 800147e:	2300      	movs	r3, #0
 8001480:	75fb      	strb	r3, [r7, #23]
	

	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
    RespVal = HAL_IOctrlTestRtn(IOCntrlID, IOCntrlParam, Data, RespLenth);
 8001482:	7b79      	ldrb	r1, [r7, #13]
 8001484:	89f8      	ldrh	r0, [r7, #14]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	f000 f89e 	bl	80015ca <HAL_IOctrlTestRtn>
 800148e:	4603      	mov	r3, r0
 8001490:	75fb      	strb	r3, [r7, #23]
	/* Manual Code End */

	return RespVal;
 8001492:	7dfb      	ldrb	r3, [r7, #23]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <ISOUDS_IOctrlFrtHeatPwr>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_IOctrlFrtHeatPwr(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60ba      	str	r2, [r7, #8]
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4603      	mov	r3, r0
 80014a8:	81fb      	strh	r3, [r7, #14]
 80014aa:	460b      	mov	r3, r1
 80014ac:	737b      	strb	r3, [r7, #13]
	uint8_t RespVal = ISOUDS_POSRES;
 80014ae:	2300      	movs	r3, #0
 80014b0:	75fb      	strb	r3, [r7, #23]

	/* Manual code start */
	switch(IOCntrlParam)
 80014b2:	7b7b      	ldrb	r3, [r7, #13]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d006      	beq.n	80014c6 <ISOUDS_IOctrlFrtHeatPwr+0x2a>
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	dc06      	bgt.n	80014ca <ISOUDS_IOctrlFrtHeatPwr+0x2e>
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <ISOUDS_IOctrlFrtHeatPwr+0x32>
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d006      	beq.n	80014d2 <ISOUDS_IOctrlFrtHeatPwr+0x36>
		case ISOUDS_IOCTL_PSGHEATPWR:
			//setForcedHeatControl(SEAT_PASSENGER, Data[0]);
		break;

		default:
		break;
 80014c4:	e001      	b.n	80014ca <ISOUDS_IOctrlFrtHeatPwr+0x2e>
		break;
 80014c6:	bf00      	nop
 80014c8:	e004      	b.n	80014d4 <ISOUDS_IOctrlFrtHeatPwr+0x38>
		break;
 80014ca:	bf00      	nop
 80014cc:	e002      	b.n	80014d4 <ISOUDS_IOctrlFrtHeatPwr+0x38>
		break;
 80014ce:	bf00      	nop
 80014d0:	e000      	b.n	80014d4 <ISOUDS_IOctrlFrtHeatPwr+0x38>
		break;
 80014d2:	bf00      	nop
	}

	/* Perform Operation and store the Response code into RespVal */
    RespVal = HAL_IOctrlFrtHeatPwr(IOCntrlID, IOCntrlParam, Data, RespLenth);
 80014d4:	7b79      	ldrb	r1, [r7, #13]
 80014d6:	89f8      	ldrh	r0, [r7, #14]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f000 f887 	bl	80015ee <HAL_IOctrlFrtHeatPwr>
 80014e0:	4603      	mov	r3, r0
 80014e2:	75fb      	strb	r3, [r7, #23]
	/* Manual Code End */

	return RespVal;
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <ISOUDS_IOctrlRearHeatPwr>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_IOctrlRearHeatPwr(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60ba      	str	r2, [r7, #8]
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	4603      	mov	r3, r0
 80014fa:	81fb      	strh	r3, [r7, #14]
 80014fc:	460b      	mov	r3, r1
 80014fe:	737b      	strb	r3, [r7, #13]
	uint8_t RespVal = ISOUDS_POSRES;
 8001500:	2300      	movs	r3, #0
 8001502:	75fb      	strb	r3, [r7, #23]

	/* Manual code start */
	switch(IOCntrlParam)
 8001504:	7b7b      	ldrb	r3, [r7, #13]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d006      	beq.n	8001518 <ISOUDS_IOctrlRearHeatPwr+0x2a>
 800150a:	2b02      	cmp	r3, #2
 800150c:	dc06      	bgt.n	800151c <ISOUDS_IOctrlRearHeatPwr+0x2e>
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <ISOUDS_IOctrlRearHeatPwr+0x32>
 8001512:	2b01      	cmp	r3, #1
 8001514:	d006      	beq.n	8001524 <ISOUDS_IOctrlRearHeatPwr+0x36>
		case ISOUDS_IOCTL_RRHEATPWR:
			//setForcedHeatControl(SEAT_REAR_RIGHT, Data[0]);
		break;

		default:
		break;
 8001516:	e001      	b.n	800151c <ISOUDS_IOctrlRearHeatPwr+0x2e>
		break;
 8001518:	bf00      	nop
 800151a:	e004      	b.n	8001526 <ISOUDS_IOctrlRearHeatPwr+0x38>
		break;
 800151c:	bf00      	nop
 800151e:	e002      	b.n	8001526 <ISOUDS_IOctrlRearHeatPwr+0x38>
		break;
 8001520:	bf00      	nop
 8001522:	e000      	b.n	8001526 <ISOUDS_IOctrlRearHeatPwr+0x38>
		break;
 8001524:	bf00      	nop
	}

	/* Perform Operation and store the Response code into RespVal */
    RespVal = HAL_IOctrlRearHeatPwr(IOCntrlID, IOCntrlParam, Data, RespLenth);
 8001526:	7b79      	ldrb	r1, [r7, #13]
 8001528:	89f8      	ldrh	r0, [r7, #14]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	f000 f870 	bl	8001612 <HAL_IOctrlRearHeatPwr>
 8001532:	4603      	mov	r3, r0
 8001534:	75fb      	strb	r3, [r7, #23]
	/* Manual Code End */

	return RespVal;
 8001536:	7dfb      	ldrb	r3, [r7, #23]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <ISOUDS_IOctrlFrtVentPwr>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_IOctrlFrtVentPwr(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60ba      	str	r2, [r7, #8]
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4603      	mov	r3, r0
 800154c:	81fb      	strh	r3, [r7, #14]
 800154e:	460b      	mov	r3, r1
 8001550:	737b      	strb	r3, [r7, #13]
	uint8_t RespVal = ISOUDS_POSRES;
 8001552:	2300      	movs	r3, #0
 8001554:	75fb      	strb	r3, [r7, #23]

	/* Manual code start */
	switch(IOCntrlParam)
 8001556:	7b7b      	ldrb	r3, [r7, #13]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d006      	beq.n	800156a <ISOUDS_IOctrlFrtVentPwr+0x2a>
 800155c:	2b02      	cmp	r3, #2
 800155e:	dc06      	bgt.n	800156e <ISOUDS_IOctrlFrtVentPwr+0x2e>
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <ISOUDS_IOctrlFrtVentPwr+0x32>
 8001564:	2b01      	cmp	r3, #1
 8001566:	d006      	beq.n	8001576 <ISOUDS_IOctrlFrtVentPwr+0x36>
		case ISOUDS_IOCTL_PSGVENTPWR:
			//setForcedVentControl(SEAT_PASSENGER, Data[0]);
		break;

		default:
		break;
 8001568:	e001      	b.n	800156e <ISOUDS_IOctrlFrtVentPwr+0x2e>
		break;
 800156a:	bf00      	nop
 800156c:	e004      	b.n	8001578 <ISOUDS_IOctrlFrtVentPwr+0x38>
		break;
 800156e:	bf00      	nop
 8001570:	e002      	b.n	8001578 <ISOUDS_IOctrlFrtVentPwr+0x38>
		break;
 8001572:	bf00      	nop
 8001574:	e000      	b.n	8001578 <ISOUDS_IOctrlFrtVentPwr+0x38>
		break;
 8001576:	bf00      	nop
	}

	/* Perform Operation and strore the Response code into RespVal */
    RespVal = HAL_IOctrlFrtVentPwr(IOCntrlID, IOCntrlParam, Data, RespLenth);
 8001578:	7b79      	ldrb	r1, [r7, #13]
 800157a:	89f8      	ldrh	r0, [r7, #14]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f000 f859 	bl	8001636 <HAL_IOctrlFrtVentPwr>
 8001584:	4603      	mov	r3, r0
 8001586:	75fb      	strb	r3, [r7, #23]
	/* Manual Code End */

	return RespVal;
 8001588:	7dfb      	ldrb	r3, [r7, #23]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_IOCntrlPreCondCheck>:
** Parameter                : None

** Return value             : ISOUDS_TRUE or ISOUDS_FALSE
*******************************************************************************/
uint8_t HAL_IOCntrlPreCondCheck(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
	uint8_t RetVal;
	/*User specific code to return true or flase*/
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8001598:	f000 f8a1 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800159c:	4603      	mov	r3, r0
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d10c      	bne.n	80015bc <HAL_IOCntrlPreCondCheck+0x2a>
 80015a2:	f000 f8a4 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d107      	bne.n	80015bc <HAL_IOCntrlPreCondCheck+0x2a>
 80015ac:	f000 f8a7 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d102      	bne.n	80015bc <HAL_IOCntrlPreCondCheck+0x2a>
	{
		RetVal = ISOUDS_TRUE;
 80015b6:	2301      	movs	r3, #1
 80015b8:	71fb      	strb	r3, [r7, #7]
 80015ba:	e001      	b.n	80015c0 <HAL_IOCntrlPreCondCheck+0x2e>
	}
	else
	{
		RetVal = ISOUDS_FALSE;
 80015bc:	2300      	movs	r3, #0
 80015be:	71fb      	strb	r3, [r7, #7]
	}
	return RetVal;
 80015c0:	79fb      	ldrb	r3, [r7, #7]

}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_IOctrlTestRtn>:
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : ISOUDS_POSRES based on the implemntation check status
**                            Refer ISOUDS_Server.h file UDS macro's.
*******************************************************************************/
uint8_t HAL_IOctrlTestRtn(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b087      	sub	sp, #28
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60ba      	str	r2, [r7, #8]
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	4603      	mov	r3, r0
 80015d6:	81fb      	strh	r3, [r7, #14]
 80015d8:	460b      	mov	r3, r1
 80015da:	737b      	strb	r3, [r7, #13]
	(void)*Data;
	(void)IOCntrlParam;
	(void)IOCntrlID;
    /* User specific code */

	RespVal = ISOUDS_POSRES;
 80015dc:	2300      	movs	r3, #0
 80015de:	75fb      	strb	r3, [r7, #23]
	return RespVal;
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <HAL_IOctrlFrtHeatPwr>:
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : ISOUDS_POSRES based on the implemntation check status
**                            Refer ISOUDS_Server.h file UDS macro's.
*******************************************************************************/
uint8_t HAL_IOctrlFrtHeatPwr(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b087      	sub	sp, #28
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60ba      	str	r2, [r7, #8]
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	4603      	mov	r3, r0
 80015fa:	81fb      	strh	r3, [r7, #14]
 80015fc:	460b      	mov	r3, r1
 80015fe:	737b      	strb	r3, [r7, #13]
	(void)*Data;
	(void)IOCntrlParam;
	(void)IOCntrlID;
    /* User specific code */

	RespVal = ISOUDS_POSRES;
 8001600:	2300      	movs	r3, #0
 8001602:	75fb      	strb	r3, [r7, #23]
	return RespVal;
 8001604:	7dfb      	ldrb	r3, [r7, #23]
}
 8001606:	4618      	mov	r0, r3
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_IOctrlRearHeatPwr>:
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : ISOUDS_POSRES based on the implemntation check status
**                            Refer ISOUDS_Server.h file UDS macro's.
*******************************************************************************/
uint8_t HAL_IOctrlRearHeatPwr(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 8001612:	b480      	push	{r7}
 8001614:	b087      	sub	sp, #28
 8001616:	af00      	add	r7, sp, #0
 8001618:	60ba      	str	r2, [r7, #8]
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	4603      	mov	r3, r0
 800161e:	81fb      	strh	r3, [r7, #14]
 8001620:	460b      	mov	r3, r1
 8001622:	737b      	strb	r3, [r7, #13]
	(void)*Data;
	(void)IOCntrlParam;
	(void)IOCntrlID;
    /* User specific code */

	RespVal = ISOUDS_POSRES;
 8001624:	2300      	movs	r3, #0
 8001626:	75fb      	strb	r3, [r7, #23]
	return RespVal;
 8001628:	7dfb      	ldrb	r3, [r7, #23]
}
 800162a:	4618      	mov	r0, r3
 800162c:	371c      	adds	r7, #28
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HAL_IOctrlFrtVentPwr>:
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : ISOUDS_POSRES based on the implemntation check status
**                            Refer ISOUDS_Server.h file UDS macro's.
*******************************************************************************/
uint8_t HAL_IOctrlFrtVentPwr(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 8001636:	b480      	push	{r7}
 8001638:	b087      	sub	sp, #28
 800163a:	af00      	add	r7, sp, #0
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	4603      	mov	r3, r0
 8001642:	81fb      	strh	r3, [r7, #14]
 8001644:	460b      	mov	r3, r1
 8001646:	737b      	strb	r3, [r7, #13]
    /* User specific code */
    #if 0
    Data = 0x00; /*default balue given*/
    *RespLenth += 0x01;
    #endif
	RespVal = ISOUDS_POSRES;
 8001648:	2300      	movs	r3, #0
 800164a:	75fb      	strb	r3, [r7, #23]
	return RespVal;
 800164c:	7dfb      	ldrb	r3, [r7, #23]
}
 800164e:	4618      	mov	r0, r3
 8001650:	371c      	adds	r7, #28
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <ISOUDS_ServerSetReqCANid>:
** Parameter                : CAN ID

** Return value             : None
*******************************************************************************/
void ISOUDS_ServerSetReqCANid(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	ISOTP_SetRxPhysReqID(ISOUDS_ServerConfig_Tab[ISOUDS_PHYSICALREQ - ISOUDS_ONE].RequestID, \
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <ISOUDS_ServerSetReqCANid+0x28>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <ISOUDS_ServerSetReqCANid+0x28>)
 8001666:	7d12      	ldrb	r2, [r2, #20]
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fb00 	bl	8000c70 <ISOTP_SetRxPhysReqID>
							ISOUDS_ServerConfig_Tab[ISOUDS_PHYSICALREQ - ISOUDS_ONE].RequestIDType);
							
	ISOTP_SetRxFuncReqID(ISOUDS_ServerConfig_Tab[ISOUDS_FUNCTIONALREQ - ISOUDS_ONE].RequestID, \
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <ISOUDS_ServerSetReqCANid+0x28>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a03      	ldr	r2, [pc, #12]	; (8001684 <ISOUDS_ServerSetReqCANid+0x28>)
 8001676:	7a12      	ldrb	r2, [r2, #8]
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fb0e 	bl	8000c9c <ISOTP_SetRxFuncReqID>
						  ISOUDS_ServerConfig_Tab[ISOUDS_FUNCTIONALREQ - ISOUDS_ONE].RequestIDType);
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	240001d4 	.word	0x240001d4

08001688 <ISOUDS_ServerSetRespCANid>:
** Parameter                : CAN ID

** Return value             : None
*******************************************************************************/
void ISOUDS_ServerSetRespCANid(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	ISOTP_SetTxmesgMesgID(ISOUDS_ServerConfig_Tab[ISOUDS_PHYSICALREQ - ISOUDS_ONE].ResponseID, \
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <ISOUDS_ServerSetRespCANid+0x18>)
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <ISOUDS_ServerSetRespCANid+0x18>)
 8001692:	7d52      	ldrb	r2, [r2, #21]
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fb16 	bl	8000cc8 <ISOTP_SetTxmesgMesgID>
							ISOUDS_ServerConfig_Tab[ISOUDS_PHYSICALREQ - ISOUDS_ONE].ResponseIDType);
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	240001d4 	.word	0x240001d4

080016a4 <ISOUDS_SrvSetPrdDatByIDCANid>:
** Parameter                : CAN ID

** Return value             : None
*******************************************************************************/
void ISOUDS_SrvSetPrdDatByIDCANid(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
	/*ISOTP_SetTxmesgMesgID(ISOUDS_CAN_PERIODIC_MSG_RESP_ID, ISOUDS_CAN_PERIODIC_MSG_RESP_ID_TYPE);*/
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <ISOUDS_ServerTxRequest>:
** Parameter                : CAN ID

** Return value             : None
*******************************************************************************/
void ISOUDS_ServerTxRequest(uint16_t dataLen, const uint8_t *dataPtr)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	6039      	str	r1, [r7, #0]
 80016bc:	80fb      	strh	r3, [r7, #6]
	(void)ISOTP_TxRequest(dataLen, (uint8_t *)dataPtr);
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	6839      	ldr	r1, [r7, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f00c fe22 	bl	800e30c <ISOTP_TxRequest>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <DelayedSystemSoftwareResetIndication>:
** Parameter                : None

** Return value             : None
*******************************************************************************/
void DelayedSystemSoftwareResetIndication(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
	/*ECU Reset*/
	/* Repro_Reset - ISOUDS_ZERO */

}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <ISOUDS_Get_VehicleSpeed_Check>:
** Return value             : retVal : ISOUDS_TRUE/ISOUDS_FALSE

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_VehicleSpeed_Check(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
	return ISOUDS_TRUE;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <ISOUDS_Get_EngineSpeed_Check>:
** Return value             : retVal : ISOUDS_TRUE/ISOUDS_FALSE

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_EngineSpeed_Check(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
	return ISOUDS_TRUE;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <ISOUDS_Get_Gear_Status_Check>:
** Return value             : retVal : ISOUDS_TRUE/ISOUDS_FALSE

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_Gear_Status_Check(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
	return ISOUDS_TRUE;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <ISOUDS_Get_NoOfServConfgrd>:
** Return value             : retVal : ISOUDS_TRUE/ISOUDS_FALSE

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_NoOfServConfgrd(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
	return ((uint8_t)ISOUDS_TABSIZE);
 8001712:	2312      	movs	r3, #18
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <ISOUDS_GetServerPeriodSched>:
** Return value             : Server Scheduler Period

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOUDS_GetServerPeriodSched(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
	/* return Server Scheduler Period */
	return ISOUDS_SERVER_PERIOD_SCHED;
 8001722:	230a      	movs	r3, #10
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <ISOUDS_GetTimerThresh>:
** Return value             : Timer Threshold 

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOUDS_GetTimerThresh(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
	/* return Timer Threshold */
	return ISOUDS_TMRTHRES;
 8001732:	2332      	movs	r3, #50	; 0x32
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <ISOUDS_GetServerBuffSize>:
** Return value             : Buffer Size 

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOUDS_GetServerBuffSize(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
	/* return Buffer Size */
	return ISOUDS_SERVER_BUFFSIZE;
 8001742:	f640 73ff 	movw	r3, #4095	; 0xfff
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <ISOUDS_GetSTDP2Limit>:
** Return value             :  Standard P2 Limit

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOUDS_GetSTDP2Limit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
	/* return Standard P2 Limit */
	return ISOUDS_STDP2LIM;
 8001754:	2332      	movs	r3, #50	; 0x32
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <ISOUDS_GetNRC78P2MimLim>:
** Return value             :  NRC 78 minimum limit

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOUDS_GetNRC78P2MimLim(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
	/* return NRC 78 minimum limit */
	return ISOUDS_NRC78P2MINLIM;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <ISOUDS_GetNRC78P2MaxLim>:
** Return value             :  NRC 78 maximum limit

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOUDS_GetNRC78P2MaxLim(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	/* return NRC 78 maximum limit */
	return ISOUDS_NRC78P2MAXLIM;
 8001774:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <ISOUDS_GetS3TimerLim>:
** Return value             :  Timer S3 limit

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOUDS_GetS3TimerLim(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
	/* return Timer S3 limit */
	return ISOUDS_S3TMRLIM;
 8001786:	f241 3388 	movw	r3, #5000	; 0x1388
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <ISOUDS_RdDTCPreCondCheck>:
**
**
** Return value             : RetVal : Pre condition validity
*******************************************************************************/
uint8_t ISOUDS_RdDTCPreCondCheck(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
	uint8_t RetVal = ISOUDS_TRUE;
 800179a:	2301      	movs	r3, #1
 800179c:	71fb      	strb	r3, [r7, #7]


	/* Add Code to check the Pre-conditions and update RetVal accordingly */
	RetVal = HAL_RdDTCPreCondCheck();
 800179e:	f000 f8a2 	bl	80018e6 <HAL_RdDTCPreCondCheck>
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]

	return RetVal;
 80017a6:	79fb      	ldrb	r3, [r7, #7]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <ISOUDS_RdTDCInf_reportNumberOfDTCByStatusMask>:
** Parameters 				: RespLen : Length of data copied
**            				: Data : diagnostic Data Buffer
** Return value             : RespVal : Response Type
*******************************************************************************/
static uint8_t ISOUDS_RdTDCInf_reportNumberOfDTCByStatusMask( uint8_t *Data, uint16_t *RespLen)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
	uint8_t RespVal = ISOUDS_POSRES;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]

	uint8_t RdDTCStatusAvailabilityMask;
	uint8_t DTCFormatIdentifier;
	uint16_t DTCCount;

	if (NULL_PTR != Data)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d026      	beq.n	8001812 <ISOUDS_RdTDCInf_reportNumberOfDTCByStatusMask+0x62>
	{
		/* Manual code start */
		/* Read DTC Status mask */
		RdDTCStatusAvailabilityMask = Data[0];
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	73bb      	strb	r3, [r7, #14]

		/* Perform Operation and strore the Response code into RespVal */
		RespVal = HAL_RdTDCInf_reportNumberOfDTCByStatusMask (&RdDTCStatusAvailabilityMask, &DTCFormatIdentifier,
 80017ca:	f107 020a 	add.w	r2, r7, #10
 80017ce:	f107 010d 	add.w	r1, r7, #13
 80017d2:	f107 030e 	add.w	r3, r7, #14
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f891 	bl	80018fe <HAL_RdTDCInf_reportNumberOfDTCByStatusMask>
 80017dc:	4603      	mov	r3, r0
 80017de:	73fb      	strb	r3, [r7, #15]
				&DTCCount);
		Data[0] = RdDTCStatusAvailabilityMask;
 80017e0:	7bba      	ldrb	r2, [r7, #14]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	701a      	strb	r2, [r3, #0]
		Data[1] = DTCFormatIdentifier;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3301      	adds	r3, #1
 80017ea:	7b7a      	ldrb	r2, [r7, #13]
 80017ec:	701a      	strb	r2, [r3, #0]
		#if(ISOUDS_BIG_ENDIAN == ISOUDS_ENDIAN_CONFIGURATION)
			Data[2] = (uint8_t)(DTCCount);
			Data[3] = (uint8_t)(DTCCount >> 8);
		#else
			Data[2] = (uint8_t)(DTCCount);
 80017ee:	897a      	ldrh	r2, [r7, #10]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3302      	adds	r3, #2
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	701a      	strb	r2, [r3, #0]
			Data[3] = (uint8_t)(DTCCount >> 8);
 80017f8:	897b      	ldrh	r3, [r7, #10]
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3303      	adds	r3, #3
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	701a      	strb	r2, [r3, #0]
		#endif		
		*RespLen += 4U;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	3304      	adds	r3, #4
 800180c:	b29a      	uxth	r2, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	801a      	strh	r2, [r3, #0]
		
	}
	
	/* Manual Code End */

	return RespVal;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <ISOUDS_RdTDCInf_reportDTCByStatusMask>:
** Parameters 				: RespLen : Length of data copied
**            				: Data : diagnostic Data Buffer
** Return value             : RespVal : Response Type
*******************************************************************************/
static uint8_t ISOUDS_RdTDCInf_reportDTCByStatusMask( uint8_t *Data, uint16_t *RespLen)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
	uint8_t RespVal = ISOUDS_POSRES;
 8001826:	2300      	movs	r3, #0
 8001828:	73fb      	strb	r3, [r7, #15]
	uint8_t RdDTCStatusAvailabilityMask;

	/* Manual code start */
	if (NULL_PTR != Data)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d015      	beq.n	800185c <ISOUDS_RdTDCInf_reportDTCByStatusMask+0x40>
	{
		/* Read DTC Status mask */
		RdDTCStatusAvailabilityMask = Data[0];
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	73bb      	strb	r3, [r7, #14]
		RespVal = HAL_RdTDCInf_reportDTCByStatusMask(&RdDTCStatusAvailabilityMask, &Data[1], RespLen);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	1c59      	adds	r1, r3, #1
 800183a:	f107 030e 	add.w	r3, r7, #14
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f000 f87b 	bl	800193c <HAL_RdTDCInf_reportDTCByStatusMask>
 8001846:	4603      	mov	r3, r0
 8001848:	73fb      	strb	r3, [r7, #15]
		Data[0] = RdDTCStatusAvailabilityMask;
 800184a:	7bba      	ldrb	r2, [r7, #14]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	701a      	strb	r2, [r3, #0]
		*RespLen += 0x1U;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	3301      	adds	r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	801a      	strh	r2, [r3, #0]
		/* do nothing */
		
	}
	/* Manual Code End */

	return RespVal;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <ISOUDS_RdTDCInf_reportDTCSnpshotRecordByDTCNumber>:
** Parameters 				: RespLen : Length of data copied
**            				: Data : diagnostic Data Buffer
** Return value             : RespVal : Response Type
*******************************************************************************/
static uint8_t ISOUDS_RdTDCInf_reportDTCSnpshotRecordByDTCNumber( uint8_t *Data, uint16_t *RespLen)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b088      	sub	sp, #32
 800186a:	af02      	add	r7, sp, #8
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
	uint8_t RespVal = ISOUDS_POSRES;
 8001870:	2300      	movs	r3, #0
 8001872:	75fb      	strb	r3, [r7, #23]
	uint32_t DTCMaskRecord;
	uint8_t DTCSnapshotRecordNumber;
	uint8_t StatMask =0;
 8001874:	2300      	movs	r3, #0
 8001876:	73bb      	strb	r3, [r7, #14]

	if (NULL_PTR != Data)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d01c      	beq.n	80018b8 <ISOUDS_RdTDCInf_reportDTCSnpshotRecordByDTCNumber+0x52>
	{
		#if(ISOUDS_LITTLE_ENDIAN == ISOUDS_ENDIAN_CONFIGURATION)
			
			DTCMaskRecord = ((uint32_t)(((uint32_t)Data[0]) << 16) + ((uint32_t)Data[1] << 8) + (uint32_t)Data[2]);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	041a      	lsls	r2, r3, #16
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3301      	adds	r3, #1
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	4413      	add	r3, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	3202      	adds	r2, #2
 8001892:	7812      	ldrb	r2, [r2, #0]
 8001894:	4413      	add	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
		#else
			DTCMaskRecord = ((uint32_t)((uint32_t)Data[0]) + ((uint32_t)Data[1] << 8) + ((uint32_t)Data[2] << 16));
		#endif
		
		DTCSnapshotRecordNumber = Data[3];
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	78db      	ldrb	r3, [r3, #3]
 800189c:	73fb      	strb	r3, [r7, #15]

		/* Manual code start */
		RespVal = HAL_RdTDCInf_reportDTCSnapshotRecordByDTCNumber(&DTCMaskRecord,&DTCSnapshotRecordNumber,&StatMask, &Data[0], RespLen);
 800189e:	f107 020e 	add.w	r2, r7, #14
 80018a2:	f107 010f 	add.w	r1, r7, #15
 80018a6:	f107 0010 	add.w	r0, r7, #16
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f000 f865 	bl	800197e <HAL_RdTDCInf_reportDTCSnapshotRecordByDTCNumber>
 80018b4:	4603      	mov	r3, r0
 80018b6:	75fb      	strb	r3, [r7, #23]
		
		
	}
	/* Manual Code End */

	return RespVal;
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <ISOUDS_RdTDCInf_reportSupportedDTC>:
** Parameters 				: RespLen : Length of data copied
**            				: Data : diagnostic Data Buffer
** Return value             : RespVal : Response Type
*******************************************************************************/
static uint8_t ISOUDS_RdTDCInf_reportSupportedDTC( uint8_t *Data, uint16_t *RespLen)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
	uint8_t RespVal = ISOUDS_POSRES;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]

	/* Manual code start */
	RespVal = HAL_RdTDCInf_reportSupportedDTC( Data, RespLen);
 80018d0:	6839      	ldr	r1, [r7, #0]
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f873 	bl	80019be <HAL_RdTDCInf_reportSupportedDTC>
 80018d8:	4603      	mov	r3, r0
 80018da:	73fb      	strb	r3, [r7, #15]
	/* Manual Code End */

	return RespVal;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_RdDTCPreCondCheck>:
** Parameter                : None

** Return value             : ISOUDS_TRUE or ISOUDS_FALSE
*******************************************************************************/
uint8_t HAL_RdDTCPreCondCheck(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
	uint8_t RetVal;
	/*User specific implementation*/
	RetVal = ISOUDS_TRUE;
 80018ec:	2301      	movs	r3, #1
 80018ee:	71fb      	strb	r3, [r7, #7]
	return RetVal;
 80018f0:	79fb      	ldrb	r3, [r7, #7]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <HAL_RdTDCInf_reportNumberOfDTCByStatusMask>:
** Parameters 				: RespLen : Length of data copied
**            				: dataBuff : diagnostic Data Buffer
** Return value             : RespVal : Response Type. refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_RdTDCInf_reportNumberOfDTCByStatusMask(uint8_t *RdDTCStatusAvailabilityMask, uint8_t *DTCFormatIdentifier,uint16_t *DTCCount)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
	uint8_t RespVal;

	RespVal = ISOUDS_POSRES;
 800190a:	2300      	movs	r3, #0
 800190c:	75fb      	strb	r3, [r7, #23]
    /*User specific implementation*/

	*DTCCount = FCM_ReportNoOfDTCByStatusMask(*RdDTCStatusAvailabilityMask & FCM_SUPPORTED_DTC_STATUS_BITS);/*DTCCount*/
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8001916:	b2db      	uxtb	r3, r3
 8001918:	4618      	mov	r0, r3
 800191a:	f00d fd17 	bl	800f34c <FCM_ReportNoOfDTCByStatusMask>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	801a      	strh	r2, [r3, #0]
	*RdDTCStatusAvailabilityMask = FCM_SUPPORTED_DTC_STATUS_BITS;/*DTCStatusAvailabilityMask*/
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	226f      	movs	r2, #111	; 0x6f
 800192a:	701a      	strb	r2, [r3, #0]
	*DTCFormatIdentifier = 0x01;/*DTCFormatIdentifier*/
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]

	return RespVal;
 8001932:	7dfb      	ldrb	r3, [r7, #23]

}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_RdTDCInf_reportDTCByStatusMask>:
** Parameters 				: RespLen : Length of data copied
**            				: dataBuff : diagnostic Data Buffer
** Return value             : RespVal : Response Type. refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_RdTDCInf_reportDTCByStatusMask(uint8_t *RdDTCStatusAvailabilityMask, uint8_t *Data, uint16_t *RespLen)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
	uint8_t RespVal;
	RespVal = ISOUDS_POSRES;
 8001948:	2300      	movs	r3, #0
 800194a:	75fb      	strb	r3, [r7, #23]
	
	/*User specific code*/
	*RespLen += FCM_ReportDTCByStatusMask(*RdDTCStatusAvailabilityMask & FCM_SUPPORTED_DTC_STATUS_BITS, Data);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8001954:	b2db      	uxtb	r3, r3
 8001956:	68b9      	ldr	r1, [r7, #8]
 8001958:	4618      	mov	r0, r3
 800195a:	f00d fd23 	bl	800f3a4 <FCM_ReportDTCByStatusMask>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	b29a      	uxth	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	801a      	strh	r2, [r3, #0]
	
	*RdDTCStatusAvailabilityMask = FCM_SUPPORTED_DTC_STATUS_BITS;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	226f      	movs	r2, #111	; 0x6f
 8001972:	701a      	strb	r2, [r3, #0]

	return RespVal;
 8001974:	7dfb      	ldrb	r3, [r7, #23]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_RdTDCInf_reportDTCSnapshotRecordByDTCNumber>:
** Parameters 				: RespLen : Length of data copied
**            				: dataBuff : diagnostic Data Buffer
** Return value             : RespVal : Response Type. refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_RdTDCInf_reportDTCSnapshotRecordByDTCNumber(uint32_t *DTCMaskRecord,uint8_t *DTCSnapshotRecordNumber,uint8_t *StatMask, uint8_t *Data, uint16_t *Resplen)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	603b      	str	r3, [r7, #0]
	uint8_t RespVal = ISOUDS_POSRES;
 800198c:	2300      	movs	r3, #0
 800198e:	75fb      	strb	r3, [r7, #23]
	uint8_t RetVal;
	(void)StatMask;
	

	RetVal = FCM_GetDTCSnpShotRecdByDTCnum(*DTCMaskRecord, *DTCSnapshotRecordNumber, Data, Resplen);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	7819      	ldrb	r1, [r3, #0]
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	f7ff f816 	bl	80009cc <FCM_GetDTCSnpShotRecdByDTCnum>
 80019a0:	4603      	mov	r3, r0
 80019a2:	75bb      	strb	r3, [r7, #22]

	if (ISOUDS_TRUE == RetVal)
 80019a4:	7dbb      	ldrb	r3, [r7, #22]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d102      	bne.n	80019b0 <HAL_RdTDCInf_reportDTCSnapshotRecordByDTCNumber+0x32>
	{
		RespVal = ISOUDS_POSRES;
 80019aa:	2300      	movs	r3, #0
 80019ac:	75fb      	strb	r3, [r7, #23]
 80019ae:	e001      	b.n	80019b4 <HAL_RdTDCInf_reportDTCSnapshotRecordByDTCNumber+0x36>
	}
	else
	{
		RespVal = ISOUDS_ROOR;
 80019b0:	2331      	movs	r3, #49	; 0x31
 80019b2:	75fb      	strb	r3, [r7, #23]
	}
	return RespVal;
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_RdTDCInf_reportSupportedDTC>:
** Parameters 				: Rpt_SuppDTC_RespLen : Length of data copied
**            				: dataBuff : diagnostic Data Buffer
** Return value             : RespVal : Response Type. refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_RdTDCInf_reportSupportedDTC(uint8_t * Data,uint16_t *Rpt_SuppDTC_RespLen)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
	uint8_t RespVal;

	RespVal = ISOUDS_POSRES;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
	
	Data[ISOUDS_ZERO] = FCM_SUPPORTED_DTC_STATUS_BITS;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	226f      	movs	r2, #111	; 0x6f
 80019d0:	701a      	strb	r2, [r3, #0]
	Rpt_SuppDTC_RespLen[ISOUDS_ZERO] += ISOUDS_ONE;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	801a      	strh	r2, [r3, #0]
	Rpt_SuppDTC_RespLen[ISOUDS_ZERO] += FCM_ReportSupportedDTCs(&Data[ISOUDS_ONE]);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3301      	adds	r3, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	f00d fd4e 	bl	800f484 <FCM_ReportSupportedDTCs>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	4413      	add	r3, r2
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	801a      	strh	r2, [r3, #0]
	
	return RespVal;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <ISOUDS_Get_RDCONFTABSIZE>:
** Paramete           		: None
** Return value             : retVal : Number of DIDs Supported
** Remarks                  : None
***************************************************************************************************/
uint16_t ISOUDS_Get_RDCONFTABSIZE(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
	return ISOUDS_RDCONFTABSIZE;
 8001a06:	230f      	movs	r3, #15
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <ISOUDS_Get_MAXNoOfDIDAllowd>:
** Paramete           		: None
** Return value             : retVal : Number of MAX nnumber Supported
** Remarks                  : None
***************************************************************************************************/
uint16_t ISOUDS_Get_MAXNoOfDIDAllowd(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
	return ISOUDS_MAX_NO_OF_IDS_ALLOWED;
 8001a16:	2305      	movs	r3, #5
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <ISOUDS_CheckPreConditions>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t ISOUDS_CheckPreConditions(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
	uint8_t RespVal = ISOUDS_FALSE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	71fb      	strb	r3, [r7, #7]

	/* Insert logic to check the pre conditions */

	return RespVal;
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <RDBI_EcuStatusMsgCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_EcuStatusMsgCbk(uint8_t buffer[], uint16_t len)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001a46:	2300      	movs	r3, #0
 8001a48:	757b      	strb	r3, [r7, #21]
	uint8_t Status[ISOUDS_ECU_STATUS_MSG_LEN];

	uint16_t idx;

/*retrieve Supply voltage level*/
	(void)ECUStatMSG_SupplyVtgLev(&Status[ISOUDS_ECUSTATMSG_SUPPLYVTGLEV_POS],\
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 f99b 	bl	8001d8c <ECUStatMSG_SupplyVtgLev>
								ISOUDS_ECUSTATMSG_SUPPLYVTGLEV_LEN);
/*retrieve CMX Version of CAN-1*/
	(void)ECUStatMSG_CMXVerCAN1(&Status[ISOUDS_ECUSTATMSG_CMXVERCAN1_POS],\
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f9b3 	bl	8001dca <ECUStatMSG_CMXVerCAN1>
								ISOUDS_ECUSTATMSG_CMXVERCAN1_LEN);
/*CAN Transmit error counter of CAN-1*/
	(void)ECUStatMSG_TransmErrCntrCAN1(&Status[ISOUDS_ECUSTATMSG_TRANSMERRCNTRCAN1_POS],\
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	3303      	adds	r3, #3
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 f9cb 	bl	8001e08 <ECUStatMSG_TransmErrCntrCAN1>
								ISOUDS_ECUSTATMSG_TRANSMERRCNTRCAN1_LEN);
/*CAN Receive error counter of CAN-1*/
	(void)ECUStatMSG_ReceiveErrCntrCAN1(&Status[ISOUDS_ECUSTATMSG_RECEIVEERRCNTRCAN1_POS],\
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	3304      	adds	r3, #4
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f9e3 	bl	8001e46 <ECUStatMSG_ReceiveErrCntrCAN1>
								ISOUDS_ECUSTATMSG_RECEIVEERRCNTRCAN1_LEN);
/*CAN BusOff Counter of CAN-1*/
	(void)ECUStatMSG_CANBUSOFFCntrCAN1(&Status[ISOUDS_ECUSTATMSG_CANBUSOFFCNTRCAN1_POS],\
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	3305      	adds	r3, #5
 8001a86:	2101      	movs	r1, #1
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f9fb 	bl	8001e84 <ECUStatMSG_CANBUSOFFCntrCAN1>
								ISOUDS_ECUSTATMSG_CANBUSOFFCNTRCAN1_LEN);

/* Copy data */
	for(idx = 0U; idx < len; idx++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	82fb      	strh	r3, [r7, #22]
 8001a92:	e00b      	b.n	8001aac <RDBI_EcuStatusMsgCbk+0x72>
	{
		buffer[idx] = Status[idx];
 8001a94:	8afa      	ldrh	r2, [r7, #22]
 8001a96:	8afb      	ldrh	r3, [r7, #22]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3218      	adds	r2, #24
 8001a9e:	443a      	add	r2, r7
 8001aa0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8001aa4:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001aa6:	8afb      	ldrh	r3, [r7, #22]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	82fb      	strh	r3, [r7, #22]
 8001aac:	8afa      	ldrh	r2, [r7, #22]
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d3ef      	bcc.n	8001a94 <RDBI_EcuStatusMsgCbk+0x5a>
	}
	/* End of Dummy Code */
	return RespVal;
 8001ab4:	7d7b      	ldrb	r3, [r7, #21]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <RDBI_SYMCPartNumCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_SYMCPartNumCbk(uint8_t buffer[], uint16_t len)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001aca:	2300      	movs	r3, #0
 8001acc:	73fb      	strb	r3, [r7, #15]
			buffer[idx] = part_number[idx];
		}
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <RDBI_SYMCSoftwareVerCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_SYMCSoftwareVerCbk(uint8_t buffer[], uint16_t len)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
		if(memcmp(version, buffer, ISOUDS_SYMC_SOFTWARE_VER_LEN) != 0U)
			writeEeprom(EEPROM_DID_SW_VERSION,ISOUDS_SYMC_SOFTWARE_VER_LEN,(uint32_t)version);
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <RDBI_SystemSuppCodeCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_SystemSuppCodeCbk(uint8_t buffer[], uint16_t len)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001b06:	2300      	movs	r3, #0
 8001b08:	737b      	strb	r3, [r7, #13]

	uint16_t idx;

	/* Copy data */
	for(idx = 0U; idx < len; idx++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	81fb      	strh	r3, [r7, #14]
 8001b0e:	e008      	b.n	8001b22 <RDBI_SystemSuppCodeCbk+0x28>
	{
		buffer[idx] = (uint8_t)idx;
 8001b10:	89fb      	ldrh	r3, [r7, #14]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	89fa      	ldrh	r2, [r7, #14]
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001b1c:	89fb      	ldrh	r3, [r7, #14]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	81fb      	strh	r3, [r7, #14]
 8001b22:	89fa      	ldrh	r2, [r7, #14]
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d3f2      	bcc.n	8001b10 <RDBI_SystemSuppCodeCbk+0x16>
	}


	/* End of Dummy Code */
	return RespVal;
 8001b2a:	7b7b      	ldrb	r3, [r7, #13]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <RDBI_ECUManufctDateCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_ECUManufctDateCbk(uint8_t buffer[], uint16_t len)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001b44:	2300      	movs	r3, #0
 8001b46:	737b      	strb	r3, [r7, #13]

	uint16_t idx;

	/* Copy data */
	for(idx = 0U; idx < len; idx++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	81fb      	strh	r3, [r7, #14]
 8001b4c:	e008      	b.n	8001b60 <RDBI_ECUManufctDateCbk+0x28>
	{
		buffer[idx] = (uint8_t)idx;
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	89fa      	ldrh	r2, [r7, #14]
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001b5a:	89fb      	ldrh	r3, [r7, #14]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	81fb      	strh	r3, [r7, #14]
 8001b60:	89fa      	ldrh	r2, [r7, #14]
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d3f2      	bcc.n	8001b4e <RDBI_ECUManufctDateCbk+0x16>
	}


	/* End of Dummy Code */
	return RespVal;
 8001b68:	7b7b      	ldrb	r3, [r7, #13]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <RDBI_ECUSerialNUmCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_ECUSerialNUmCbk(uint8_t buffer[], uint16_t len)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b085      	sub	sp, #20
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001b82:	2300      	movs	r3, #0
 8001b84:	737b      	strb	r3, [r7, #13]

	uint16_t idx;

	/* Copy data */
	for(idx = 0U; idx < len; idx++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	81fb      	strh	r3, [r7, #14]
 8001b8a:	e008      	b.n	8001b9e <RDBI_ECUSerialNUmCbk+0x28>
	{
		buffer[idx] = (uint8_t)idx;
 8001b8c:	89fb      	ldrh	r3, [r7, #14]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	89fa      	ldrh	r2, [r7, #14]
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001b98:	89fb      	ldrh	r3, [r7, #14]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	81fb      	strh	r3, [r7, #14]
 8001b9e:	89fa      	ldrh	r2, [r7, #14]
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d3f2      	bcc.n	8001b8c <RDBI_ECUSerialNUmCbk+0x16>
	}


	/* End of Dummy Code */
	return RespVal;
 8001ba6:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <RDBI_VehicleIDNumDataCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_VehicleIDNumDataCbk(uint8_t buffer[], uint16_t len)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]
		/* Update negative Response */
		RespVal = ISOUDS_GPF;
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <RDBI_TesterSerialNumCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_TesterSerialNumCbk(uint8_t buffer[], uint16_t len)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]
		/* Update negative Response */
		RespVal = ISOUDS_GPF;
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <RDBI_ProgramDateCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_ProgramDateCbk(uint8_t buffer[], uint16_t len)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
		/* Update negative Response */
		RespVal = ISOUDS_GPF;
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <RDBI_DiagnosticInfoCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_DiagnosticInfoCbk(uint8_t buffer[], uint16_t len)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	737b      	strb	r3, [r7, #13]

	uint16_t idx;

	/* Copy data */
	for(idx = 0U; idx < len; idx++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	81fb      	strh	r3, [r7, #14]
 8001c22:	e008      	b.n	8001c36 <RDBI_DiagnosticInfoCbk+0x28>
	{
		buffer[idx] = (uint8_t)idx;
 8001c24:	89fb      	ldrh	r3, [r7, #14]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	89fa      	ldrh	r2, [r7, #14]
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	3301      	adds	r3, #1
 8001c34:	81fb      	strh	r3, [r7, #14]
 8001c36:	89fa      	ldrh	r2, [r7, #14]
 8001c38:	887b      	ldrh	r3, [r7, #2]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d3f2      	bcc.n	8001c24 <RDBI_DiagnosticInfoCbk+0x16>
	}


	/* End of Dummy Code */
	return RespVal;
 8001c3e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <RDBI_ProgramIdInfoCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_ProgramIdInfoCbk(uint8_t buffer[], uint16_t len)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	777b      	strb	r3, [r7, #29]
#if (SYMC_SECURITY == 1)
	SYMC_UpdateSeed();
#endif
	
/*retrieve Flash document version number Length*/
	(void)ProgIdInfo_FlashDocVerNum(&status[ISOUDS_PROGIDINFO_FLSHDOCVERNUM_POS],\
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	2101      	movs	r1, #1
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f92d 	bl	8001ec2 <ProgIdInfo_FlashDocVerNum>
							ISOUDS_PROGIDINFO_FLSHDOCVERNUM_LEN);
/*retrieve Status Flag Length*/
	(void)ProgIdInfo_StatusFlag(&status[ISOUDS_PROGIDINFO_STATFLAG_POS],\
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f947 	bl	8001f04 <ProgIdInfo_StatusFlag>
							ISOUDS_PROGIDINFO_STATFLAG_LEN);
/*retrieve Support Flag Length*/
	(void)ProgIdInfo_SupportFlag(&status[ISOUDS_PROGIDINFO_SUPPFLAG_POS],\
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f95f 	bl	8001f42 <ProgIdInfo_SupportFlag>
							ISOUDS_PROGIDINFO_SUPPFLAG_LEN);
/*retrieve Security Class Length*/
	(void)ProgIdInfo_SecurityClass(&status[ISOUDS_PROGIDINFO_SECCLASS_POS],\
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	3303      	adds	r3, #3
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 f979 	bl	8001f84 <ProgIdInfo_SecurityClass>
							ISOUDS_PROGIDINFO_SECCLASS_LEN);
/*retrieve Number of code blocks Length*/
	(void)ProgIdInfo_NumOfCodeBlkS(&status[ISOUDS_PROGIDINFO_NUMOFCODEBLKS_POS],\
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	3304      	adds	r3, #4
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f993 	bl	8001fc6 <ProgIdInfo_NumOfCodeBlkS>
							ISOUDS_PROGIDINFO_NUMOFCODEBLKS_LEN);
/*retrieve Reprogramming Attempt Counter Length*/
	(void)ProgIdInfo_ReProgAttmCNT(&status[ISOUDS_PROGIDINFO_REPROGATTMCNT_POS],\
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	3305      	adds	r3, #5
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 f9ab 	bl	8002004 <ProgIdInfo_ReProgAttmCNT>
							ISOUDS_PROGIDINFO_REPROGATTMCNT_LEN);
/*retrieve Max number of Attempt Counter Length*/
	(void)ProgIdInfo_MaxNumAttmCNT(&status[ISOUDS_PROGIDINFO_MAXNUMATTMCNT_POS],\
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	3307      	adds	r3, #7
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f9c3 	bl	8002042 <ProgIdInfo_MaxNumAttmCNT>
							ISOUDS_PROGIDINFO_MAXNUMATTMCNT_LEN);
/*retrieve Number of data blocks Length*/
	(void)ProgIdInfo_NumOfDataBlks(&status[ISOUDS_PROGIDINFO_NUMOFDATABLKS_POS],\
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	3309      	adds	r3, #9
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f9db 	bl	8002080 <ProgIdInfo_NumOfDataBlks>
							ISOUDS_PROGIDINFO_NUMOFDATABLKS_LEN);
/*retrieve Reprogramming Attempt Counter Length*/
	(void)ProgIdInfo_ReProgAttmCntDa(&status[ISOUDS_PROGIDINFO_REPROGATTMCNTDA_POS],\
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	330a      	adds	r3, #10
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 f9f3 	bl	80020be <ProgIdInfo_ReProgAttmCntDa>
							ISOUDS_PROGIDINFO_REPROGATTMCNTDA_LEN);
/*retrieve Max number of Attempt Counter Length */
	(void)ProgIdInfo_MaxNumAttmCntDa(&status[ISOUDS_PROGIDINFO_MAXNUMATTMCNTDA_POS],\
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	330c      	adds	r3, #12
 8001cde:	2102      	movs	r1, #2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 fa0b 	bl	80020fc <ProgIdInfo_MaxNumAttmCntDa>
							ISOUDS_PROGIDINFO_MAXNUMATTMCNTDA_LEN);
/* Copu Data */
	for(idx = 0U; idx < len; idx++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	83fb      	strh	r3, [r7, #30]
 8001cea:	e00b      	b.n	8001d04 <RDBI_ProgramIdInfoCbk+0xb8>
	{
		buffer[idx] = status[idx];
 8001cec:	8bfa      	ldrh	r2, [r7, #30]
 8001cee:	8bfb      	ldrh	r3, [r7, #30]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3220      	adds	r2, #32
 8001cf6:	443a      	add	r2, r7
 8001cf8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001cfc:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001cfe:	8bfb      	ldrh	r3, [r7, #30]
 8001d00:	3301      	adds	r3, #1
 8001d02:	83fb      	strh	r3, [r7, #30]
 8001d04:	8bfa      	ldrh	r2, [r7, #30]
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d3ef      	bcc.n	8001cec <RDBI_ProgramIdInfoCbk+0xa0>
	}

	/* End of Dummy Code */
	return RespVal;
 8001d0c:	7f7b      	ldrb	r3, [r7, #29]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <RDBI_HardwareVerCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_HardwareVerCbk(uint8_t buffer[], uint16_t len)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]
			buffer[idx] = hw_ver[idx];
		}
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <RDBI_CANDBVerCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_CANDBVerCbk(uint8_t buffer[], uint16_t len)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001d40:	2300      	movs	r3, #0
 8001d42:	737b      	strb	r3, [r7, #13]
	uint8_t	can_db[] = "2.02";
 8001d44:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <RDBI_CANDBVerCbk+0x54>)
 8001d46:	f107 0308 	add.w	r3, r7, #8
 8001d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d4e:	6018      	str	r0, [r3, #0]
 8001d50:	3304      	adds	r3, #4
 8001d52:	7019      	strb	r1, [r3, #0]
#if (SYMC_SECURITY == 1)
	SYMC_UpdateSeed();
#endif

	/* Copy data */
	for(idx = 0U; idx < len; idx++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	81fb      	strh	r3, [r7, #14]
 8001d58:	e00b      	b.n	8001d72 <RDBI_CANDBVerCbk+0x3e>
	{
		buffer[idx] = can_db[idx];
 8001d5a:	89fa      	ldrh	r2, [r7, #14]
 8001d5c:	89fb      	ldrh	r3, [r7, #14]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	440b      	add	r3, r1
 8001d62:	3210      	adds	r2, #16
 8001d64:	443a      	add	r2, r7
 8001d66:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8001d6a:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001d6c:	89fb      	ldrh	r3, [r7, #14]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	81fb      	strh	r3, [r7, #14]
 8001d72:	89fa      	ldrh	r2, [r7, #14]
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d3ef      	bcc.n	8001d5a <RDBI_CANDBVerCbk+0x26>
	}

	/* End of Dummy Code */
	return RespVal;
 8001d7a:	7b7b      	ldrb	r3, [r7, #13]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	0800fed8 	.word	0x0800fed8

08001d8c <ECUStatMSG_SupplyVtgLev>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ECUStatMSG_SupplyVtgLev(uint8_t buffer[], uint16_t len)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	e007      	b.n	8001db2 <ECUStatMSG_SupplyVtgLev+0x26>
	{
		buffer[idx] = idx;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4413      	add	r3, r2
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	3301      	adds	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	887a      	ldrh	r2, [r7, #2]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d8f2      	bhi.n	8001da2 <ECUStatMSG_SupplyVtgLev+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8001dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <ECUStatMSG_CMXVerCAN1>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ECUStatMSG_CMXVerCAN1(uint8_t buffer[], uint16_t len)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	e007      	b.n	8001df0 <ECUStatMSG_CMXVerCAN1+0x26>
	{
		buffer[idx] = idx;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	3301      	adds	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	887a      	ldrh	r2, [r7, #2]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d8f2      	bhi.n	8001de0 <ECUStatMSG_CMXVerCAN1+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8001dfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <ECUStatMSG_TransmErrCntrCAN1>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ECUStatMSG_TransmErrCntrCAN1(uint8_t buffer[], uint16_t len)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001e14:	2300      	movs	r3, #0
 8001e16:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]
 8001e1c:	e007      	b.n	8001e2e <ECUStatMSG_TransmErrCntrCAN1+0x26>
	{
		buffer[idx] = idx;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	4413      	add	r3, r2
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d8f2      	bhi.n	8001e1e <ECUStatMSG_TransmErrCntrCAN1+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8001e38:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <ECUStatMSG_ReceiveErrCntrCAN1>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ECUStatMSG_ReceiveErrCntrCAN1(uint8_t buffer[], uint16_t len)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b085      	sub	sp, #20
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	e007      	b.n	8001e6c <ECUStatMSG_ReceiveErrCntrCAN1+0x26>
	{
		buffer[idx] = idx;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	887a      	ldrh	r2, [r7, #2]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d8f2      	bhi.n	8001e5c <ECUStatMSG_ReceiveErrCntrCAN1+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8001e76:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <ECUStatMSG_CANBUSOFFCntrCAN1>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ECUStatMSG_CANBUSOFFCntrCAN1(uint8_t buffer[], uint16_t len)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e007      	b.n	8001eaa <ECUStatMSG_CANBUSOFFCntrCAN1+0x26>
	{
		buffer[idx] = idx;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d8f2      	bhi.n	8001e9a <ECUStatMSG_CANBUSOFFCntrCAN1+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <ProgIdInfo_FlashDocVerNum>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_FlashDocVerNum(uint8_t buffer[], uint16_t len)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73bb      	strb	r3, [r7, #14]
	/* SES A 203-10 applied controller: $20 */
	uint8_t flash_doc_ver = 0x20;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	737b      	strb	r3, [r7, #13]
	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	73fb      	strb	r3, [r7, #15]
 8001eda:	e007      	b.n	8001eec <ProgIdInfo_FlashDocVerNum+0x2a>
	{
		buffer[idx] = flash_doc_ver;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	7b7a      	ldrb	r2, [r7, #13]
 8001ee4:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	887a      	ldrh	r2, [r7, #2]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d8f2      	bhi.n	8001edc <ProgIdInfo_FlashDocVerNum+0x1a>
	}

	/* End of Dummy Code */
	return RespVal;
 8001ef6:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <ProgIdInfo_StatusFlag>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_StatusFlag(uint8_t buffer[], uint16_t len)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001f10:	2300      	movs	r3, #0
 8001f12:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	e007      	b.n	8001f2a <ProgIdInfo_StatusFlag+0x26>
	{
		buffer[idx] = idx;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	3301      	adds	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d8f2      	bhi.n	8001f1a <ProgIdInfo_StatusFlag+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8001f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <ProgIdInfo_SupportFlag>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_SupportFlag(uint8_t buffer[], uint16_t len)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73bb      	strb	r3, [r7, #14]
	/* SES A 203-10 applied Signature Support: 1 (Feature supported) */
	uint8_t signature_support = 0x1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	737b      	strb	r3, [r7, #13]
	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	73fb      	strb	r3, [r7, #15]
 8001f5a:	e007      	b.n	8001f6c <ProgIdInfo_SupportFlag+0x2a>
	{
		buffer[idx] = signature_support;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	7b7a      	ldrb	r2, [r7, #13]
 8001f64:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	887a      	ldrh	r2, [r7, #2]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d8f2      	bhi.n	8001f5c <ProgIdInfo_SupportFlag+0x1a>
	}

	/* End of Dummy Code */
	return RespVal;
 8001f76:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <ProgIdInfo_SecurityClass>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_SecurityClass(uint8_t buffer[], uint16_t len)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001f90:	2300      	movs	r3, #0
 8001f92:	73bb      	strb	r3, [r7, #14]
	/* SES A 203-10 applied: $03 (Security Class CCC) */
	uint8_t security_class_ccc = 0x03;
 8001f94:	2303      	movs	r3, #3
 8001f96:	737b      	strb	r3, [r7, #13]
	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	e007      	b.n	8001fae <ProgIdInfo_SecurityClass+0x2a>
	{
		buffer[idx] = security_class_ccc;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	7b7a      	ldrb	r2, [r7, #13]
 8001fa6:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	3301      	adds	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d8f2      	bhi.n	8001f9e <ProgIdInfo_SecurityClass+0x1a>
	}

	/* End of Dummy Code */
	return RespVal;
 8001fb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <ProgIdInfo_NumOfCodeBlkS>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_NumOfCodeBlkS(uint8_t buffer[], uint16_t len)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	73fb      	strb	r3, [r7, #15]
 8001fda:	e007      	b.n	8001fec <ProgIdInfo_NumOfCodeBlkS+0x26>
	{
		buffer[idx] = idx;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	887a      	ldrh	r2, [r7, #2]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d8f2      	bhi.n	8001fdc <ProgIdInfo_NumOfCodeBlkS+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8001ff6:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <ProgIdInfo_ReProgAttmCNT>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_ReProgAttmCNT(uint8_t buffer[], uint16_t len)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8002010:	2300      	movs	r3, #0
 8002012:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8002014:	2300      	movs	r3, #0
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	e007      	b.n	800202a <ProgIdInfo_ReProgAttmCNT+0x26>
	{
		buffer[idx] = idx;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	3301      	adds	r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	b29b      	uxth	r3, r3
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	429a      	cmp	r2, r3
 8002032:	d8f2      	bhi.n	800201a <ProgIdInfo_ReProgAttmCNT+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8002034:	7bbb      	ldrb	r3, [r7, #14]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <ProgIdInfo_MaxNumAttmCNT>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_MaxNumAttmCNT(uint8_t buffer[], uint16_t len)
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 800204e:	2300      	movs	r3, #0
 8002050:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
 8002056:	e007      	b.n	8002068 <ProgIdInfo_MaxNumAttmCNT+0x26>
	{
		buffer[idx] = idx;
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	3301      	adds	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	b29b      	uxth	r3, r3
 800206c:	887a      	ldrh	r2, [r7, #2]
 800206e:	429a      	cmp	r2, r3
 8002070:	d8f2      	bhi.n	8002058 <ProgIdInfo_MaxNumAttmCNT+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8002072:	7bbb      	ldrb	r3, [r7, #14]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <ProgIdInfo_NumOfDataBlks>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_NumOfDataBlks(uint8_t buffer[], uint16_t len)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 800208c:	2300      	movs	r3, #0
 800208e:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	e007      	b.n	80020a6 <ProgIdInfo_NumOfDataBlks+0x26>
	{
		buffer[idx] = idx;
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	3301      	adds	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d8f2      	bhi.n	8002096 <ProgIdInfo_NumOfDataBlks+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 80020b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <ProgIdInfo_ReProgAttmCntDa>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_ReProgAttmCntDa(uint8_t buffer[], uint16_t len)
{
 80020be:	b480      	push	{r7}
 80020c0:	b085      	sub	sp, #20
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	460b      	mov	r3, r1
 80020c8:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 80020ca:	2300      	movs	r3, #0
 80020cc:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	e007      	b.n	80020e4 <ProgIdInfo_ReProgAttmCntDa+0x26>
	{
		buffer[idx] = idx;
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	3301      	adds	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	887a      	ldrh	r2, [r7, #2]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d8f2      	bhi.n	80020d4 <ProgIdInfo_ReProgAttmCntDa+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 80020ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <ProgIdInfo_MaxNumAttmCntDa>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_MaxNumAttmCntDa(uint8_t buffer[], uint16_t len)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8002108:	2300      	movs	r3, #0
 800210a:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 800210c:	2300      	movs	r3, #0
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e007      	b.n	8002122 <ProgIdInfo_MaxNumAttmCntDa+0x26>
	{
		buffer[idx] = idx;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	3301      	adds	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	b29b      	uxth	r3, r3
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	429a      	cmp	r2, r3
 800212a:	d8f2      	bhi.n	8002112 <ProgIdInfo_MaxNumAttmCntDa+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 800212c:	7bbb      	ldrb	r3, [r7, #14]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <RDBI_ECUInfoCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_ECUInfoCbk(uint8_t buffer[], uint16_t len)
{
 800213a:	b480      	push	{r7}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8002146:	2300      	movs	r3, #0
 8002148:	73fb      	strb	r3, [r7, #15]
			buffer[idx] = ecu_info[idx];
		}
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <RDBI_QRCodeCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_QRCodeCbk(uint8_t buffer[], uint16_t len)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]
			buffer[idx] = qr_code[idx];
		}
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 8002168:	7bfb      	ldrb	r3, [r7, #15]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <ISOUDS_Get_RDPDDIDDACONFTABSIZE>:
** Return value             : retVal : Number of DIDs Supported

** Remarks                  : None
***************************************************************************************************/
uint16_t ISOUDS_Get_RDPDDIDDACONFTABSIZE(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
	return ISOUDS_RDPDDIDDACONFTABSIZE;
 800217a:	2305      	movs	r3, #5
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <Get_PeriodicDataF200>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t READ_PERIODIC_DID_DATA_ID_0(uint8_t buffer[], uint16_t len)
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	807b      	strh	r3, [r7, #2]
	/* Dummy Code for Testing, change as per application */
	uint8_t idx;
	uint8_t ret_val = ISOUDS_TRUE;
 8002192:	2301      	movs	r3, #1
 8002194:	73bb      	strb	r3, [r7, #14]

	for(idx = 0; idx < len; idx++)
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
 800219a:	e00b      	b.n	80021b4 <Get_PeriodicDataF200+0x2e>
	{
		buffer[idx] = idx + 10;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	320a      	adds	r2, #10
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]
		ret_val = ISOUDS_FALSE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73bb      	strb	r3, [r7, #14]
	for(idx = 0; idx < len; idx++)
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	3301      	adds	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	887a      	ldrh	r2, [r7, #2]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d8ee      	bhi.n	800219c <Get_PeriodicDataF200+0x16>
	}

	return ret_val;
 80021be:	7bbb      	ldrb	r3, [r7, #14]
	/* End of Dummy Code */
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <Get_PeriodicDataF201>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t READ_PERIODIC_DID_DATA_ID_1(uint8_t buffer[], uint16_t len)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
	/* Dummy Code for Testing, change as per application */
	uint8_t idx;
	uint8_t ret_val = ISOUDS_TRUE;
 80021d8:	2301      	movs	r3, #1
 80021da:	73bb      	strb	r3, [r7, #14]

	for(idx = 0; idx < len; idx++)
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e00b      	b.n	80021fa <Get_PeriodicDataF201+0x2e>
	{
		buffer[idx] = idx + 20;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	4413      	add	r3, r2
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	3214      	adds	r2, #20
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	701a      	strb	r2, [r3, #0]
		ret_val = ISOUDS_FALSE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73bb      	strb	r3, [r7, #14]
	for(idx = 0; idx < len; idx++)
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	3301      	adds	r3, #1
 80021f8:	73fb      	strb	r3, [r7, #15]
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	429a      	cmp	r2, r3
 8002202:	d8ee      	bhi.n	80021e2 <Get_PeriodicDataF201+0x16>
	}

	return ret_val;
 8002204:	7bbb      	ldrb	r3, [r7, #14]
	/* End of Dummy Code */
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <Get_PeriodicDataF202>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t READ_PERIODIC_DID_DATA_ID_2(uint8_t buffer[], uint16_t len)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	807b      	strh	r3, [r7, #2]
	/* Dummy Code for Testing, change as per application */
	uint8_t idx;
	uint8_t ret_val = ISOUDS_TRUE;
 800221e:	2301      	movs	r3, #1
 8002220:	73bb      	strb	r3, [r7, #14]

	for(idx = 0; idx < len; idx++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e00b      	b.n	8002240 <Get_PeriodicDataF202+0x2e>
	{
		buffer[idx] = idx + 30;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	321e      	adds	r2, #30
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]
		ret_val = ISOUDS_FALSE;
 8002236:	2300      	movs	r3, #0
 8002238:	73bb      	strb	r3, [r7, #14]
	for(idx = 0; idx < len; idx++)
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	3301      	adds	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	b29b      	uxth	r3, r3
 8002244:	887a      	ldrh	r2, [r7, #2]
 8002246:	429a      	cmp	r2, r3
 8002248:	d8ee      	bhi.n	8002228 <Get_PeriodicDataF202+0x16>
	}

	return ret_val;
 800224a:	7bbb      	ldrb	r3, [r7, #14]
	/* End of Dummy Code */
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <Get_PeriodicDataF203>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t READ_PERIODIC_DID_DATA_ID_3(uint8_t buffer[], uint16_t len)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
	/* Dummy Code for Testing, change as per application */
	uint8_t idx;
	uint8_t ret_val = ISOUDS_TRUE;
 8002264:	2301      	movs	r3, #1
 8002266:	73bb      	strb	r3, [r7, #14]

	for(idx = 0; idx < len; idx++)
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e00b      	b.n	8002286 <Get_PeriodicDataF203+0x2e>
	{
		buffer[idx] = idx + 40;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	3228      	adds	r2, #40	; 0x28
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	701a      	strb	r2, [r3, #0]
		ret_val = ISOUDS_FALSE;
 800227c:	2300      	movs	r3, #0
 800227e:	73bb      	strb	r3, [r7, #14]
	for(idx = 0; idx < len; idx++)
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	3301      	adds	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	b29b      	uxth	r3, r3
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	429a      	cmp	r2, r3
 800228e:	d8ee      	bhi.n	800226e <Get_PeriodicDataF203+0x16>
	}

	return ret_val;
 8002290:	7bbb      	ldrb	r3, [r7, #14]
	/* End of Dummy Code */
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <Get_PeriodicDataF204>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t READ_PERIODIC_DID_DATA_ID_4(uint8_t buffer[], uint16_t len)
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	807b      	strh	r3, [r7, #2]
	/* Dummy Code for Testing, change as per application */
	uint8_t idx;
	uint8_t ret_val = ISOUDS_TRUE;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73bb      	strb	r3, [r7, #14]

	for(idx = 0; idx < len; idx++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	73fb      	strb	r3, [r7, #15]
 80022b2:	e00b      	b.n	80022cc <Get_PeriodicDataF204+0x2e>
	{
		buffer[idx] = idx + 50;
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	3232      	adds	r2, #50	; 0x32
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]
		ret_val = ISOUDS_FALSE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	73bb      	strb	r3, [r7, #14]
	for(idx = 0; idx < len; idx++)
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	3301      	adds	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	887a      	ldrh	r2, [r7, #2]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d8ee      	bhi.n	80022b4 <Get_PeriodicDataF204+0x16>
	}

	return ret_val;
 80022d6:	7bbb      	ldrb	r3, [r7, #14]
	/* End of Dummy Code */
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <ISOUDS_Get_RdMemByAddMaxentries>:
** Return value             : retVal : Number of Entries Supported

** Remarks                  : None
***************************************************************************************************/
uint16_t ISOUDS_Get_RdMemByAddMaxentries(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
	return ISOUDS_RdMemByAddMaxentries;
 80022e8:	2301      	movs	r3, #1
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <ISOUDS_RdAddLengthReqCbk>:
** Return value             : Positive or Negative Response value

** Remarks                  : None
***************************************************************************************************/
uint8_t  ISOUDS_RdAddLengthReqCbk (uint32_t RdAddress, uint32_t RdLength, const uint8_t *RespBuff)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
    /*User specific code*/
    #if 0
    *RespBuff =  0x00;
    RdLength -= 0x01;
    #endif
    retVal = (uint8_t)ISOUDS_POSRES;
 8002300:	2300      	movs	r3, #0
 8002302:	75fb      	strb	r3, [r7, #23]
    return retVal;
 8002304:	7dfb      	ldrb	r3, [r7, #23]

}
 8002306:	4618      	mov	r0, r3
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <ISOUDS_ReqDwnldReqCbk>:
** Return value             : Positive or Negative Response value

** Remarks                  : None
***************************************************************************************************/
uint8_t  ISOUDS_ReqDwnldReqCbk (unsigned long RdAddress, unsigned long RdLength, uint8_t *RespBuff)
{
 8002312:	b480      	push	{r7}
 8002314:	b087      	sub	sp, #28
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
    /*User specific code*/
    #if 0
    *RespBuff =  0x00;
    RdLength -= 0x01;
    #endif
    retVal = (uint8_t)ISOUDS_POSRES;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]
    return retVal;
 8002322:	7dfb      	ldrb	r3, [r7, #23]

}
 8002324:	4618      	mov	r0, r3
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <ISOUDS_GetOnDtcStatChangeEventStat>:
** 							: FALSE : Event Not triggered

** Return value             : None
***************************************************************************************************/
uint8_t ISOUDS_GetOnDtcStatChangeEventStat(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
	uint8_t Read_NumOFDTCsWitStatMsk;
	uint8_t RetVal;

	RetVal = ISOUDS_FALSE;
 8002336:	2300      	movs	r3, #0
 8002338:	71fb      	strb	r3, [r7, #7]

	/* Get the Number of DTCs with the status mask */
	Read_NumOFDTCsWitStatMsk = ISOUDS_READ_NUM_OF_DTC_WITH_STAT_MASK(ISOUDS_EventConfig[OnDtcStatusChange].eventTypeRecord[0]);
 800233a:	2301      	movs	r3, #1
 800233c:	71bb      	strb	r3, [r7, #6]

	/* Check with the Previous data */
	if (ISOUDS_NoOfDTCsStoredPrevly != Read_NumOFDTCsWitStatMsk)
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <ISOUDS_GetOnDtcStatChangeEventStat+0x2c>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	79ba      	ldrb	r2, [r7, #6]
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <ISOUDS_GetOnDtcStatChangeEventStat+0x1c>
	{
		/* Event triggered */
		RetVal = ISOUDS_TRUE;
 8002348:	2301      	movs	r3, #1
 800234a:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* Do nothing */
	}

	return RetVal;
 800234c:	79fb      	ldrb	r3, [r7, #7]
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	2400135a 	.word	0x2400135a

08002360 <ISOUDS_ClrOnDtcStatChangeEventStat>:
** 							: FALSE : Event Not triggered

** Return value             : None
***************************************************************************************************/
uint8_t ISOUDS_ClrOnDtcStatChangeEventStat(void)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
	uint8_t Read_NumOFDTCsWitStatMsk;
	uint8_t RetVal;

	RetVal = ISOUDS_FALSE;
 8002366:	2300      	movs	r3, #0
 8002368:	71fb      	strb	r3, [r7, #7]
	/* Get the Number of DTCs with the status mask */
	Read_NumOFDTCsWitStatMsk = ISOUDS_READ_NUM_OF_DTC_WITH_STAT_MASK(ISOUDS_EventConfig[OnDtcStatusChange].eventTypeRecord[0]);
 800236a:	2301      	movs	r3, #1
 800236c:	71bb      	strb	r3, [r7, #6]
	/* Check with the Previous data */
	if (ISOUDS_NoOfDTCsStoredPrevly != Read_NumOFDTCsWitStatMsk)
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <ISOUDS_ClrOnDtcStatChangeEventStat+0x30>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	79ba      	ldrb	r2, [r7, #6]
 8002374:	429a      	cmp	r2, r3
 8002376:	d004      	beq.n	8002382 <ISOUDS_ClrOnDtcStatChangeEventStat+0x22>
	{
		/* Clear */
		ISOUDS_NoOfDTCsStoredPrevly = Read_NumOFDTCsWitStatMsk;
 8002378:	4a05      	ldr	r2, [pc, #20]	; (8002390 <ISOUDS_ClrOnDtcStatChangeEventStat+0x30>)
 800237a:	79bb      	ldrb	r3, [r7, #6]
 800237c:	7013      	strb	r3, [r2, #0]

		RetVal = ISOUDS_TRUE;
 800237e:	2301      	movs	r3, #1
 8002380:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* Do nothing */
	}

	return RetVal;
 8002382:	79fb      	ldrb	r3, [r7, #7]
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	2400135a 	.word	0x2400135a

08002394 <ISOUDS_GetOnTimerInterruptStat>:
** 							: FALSE : Event Not triggered

** Return value             : None
***************************************************************************************************/
uint8_t ISOUDS_GetOnTimerInterruptStat(void)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
	uint8_t RetVal = ISOUDS_FALSE;
 800239a:	2300      	movs	r3, #0
 800239c:	71fb      	strb	r3, [r7, #7]
	/* Timeout expired */
	if (ISOUDS_TimerVal >= ISOUDS_TimeOutVal)
 800239e:	4b07      	ldr	r3, [pc, #28]	; (80023bc <ISOUDS_GetOnTimerInterruptStat+0x28>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <ISOUDS_GetOnTimerInterruptStat+0x2c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d301      	bcc.n	80023ae <ISOUDS_GetOnTimerInterruptStat+0x1a>
	{
		RetVal = ISOUDS_TRUE;
 80023aa:	2301      	movs	r3, #1
 80023ac:	71fb      	strb	r3, [r7, #7]
	}

	return RetVal;
 80023ae:	79fb      	ldrb	r3, [r7, #7]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	2400135c 	.word	0x2400135c
 80023c0:	24001360 	.word	0x24001360

080023c4 <ISOUDS_UpdtOnTmrIntrptTmrVal>:
** Parameter 		 		: None

** Return value             : None
***************************************************************************************************/
static void ISOUDS_UpdtOnTmrIntrptTmrVal(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
	/* Timeout value check */
	if (ISOUDS_TimerVal < ISOUDS_TimeOutVal)
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <ISOUDS_UpdtOnTmrIntrptTmrVal+0x24>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <ISOUDS_UpdtOnTmrIntrptTmrVal+0x28>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d204      	bcs.n	80023de <ISOUDS_UpdtOnTmrIntrptTmrVal+0x1a>
	{
		/* Increment the timer value */
		ISOUDS_TimerVal += ISOUDS_SERVER_PERIOD_SCHED;
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <ISOUDS_UpdtOnTmrIntrptTmrVal+0x24>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	330a      	adds	r3, #10
 80023da:	4a03      	ldr	r2, [pc, #12]	; (80023e8 <ISOUDS_UpdtOnTmrIntrptTmrVal+0x24>)
 80023dc:	6013      	str	r3, [r2, #0]
	}
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	2400135c 	.word	0x2400135c
 80023ec:	24001360 	.word	0x24001360

080023f0 <ISOUDS_ClrOnTimerInterruptStat>:
** Parameter 		 		: None

** Return value             : None
***************************************************************************************************/
void ISOUDS_ClrOnTimerInterruptStat(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
	/* Check if the timer value reached timeout */
	if (ISOUDS_TimerVal >= ISOUDS_TimeOutVal)
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <ISOUDS_ClrOnTimerInterruptStat+0x20>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <ISOUDS_ClrOnTimerInterruptStat+0x24>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d302      	bcc.n	8002406 <ISOUDS_ClrOnTimerInterruptStat+0x16>
	{
		/* Clear the timer values */
		ISOUDS_TimerVal = 0;
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <ISOUDS_ClrOnTimerInterruptStat+0x20>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
	}


}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	2400135c 	.word	0x2400135c
 8002414:	24001360 	.word	0x24001360

08002418 <ISOUDS_RespOnEvent_Sched>:
** Parameter 		 		: None

** Return value             : None
***************************************************************************************************/
void ISOUDS_RespOnEvent_Sched(void)
{
 8002418:	b5b0      	push	{r4, r5, r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
	uint8_t LoopIndx;

	uint16_t ReqLength;

	/* Run for all events */
	for (EvntIndx = 0 ; EvntIndx < ISOUDS_NUM_OF_EVNTS_SUP; EvntIndx++)
 800241e:	2300      	movs	r3, #0
 8002420:	71fb      	strb	r3, [r7, #7]
 8002422:	e11d      	b.n	8002660 <ISOUDS_RespOnEvent_Sched+0x248>
	{
		/* Check if the event active */
		if (EVENT_REG_ACTIV == ISOUDS_EventConfig[EvntIndx].EventActStat)
 8002424:	79fa      	ldrb	r2, [r7, #7]
 8002426:	4993      	ldr	r1, [pc, #588]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3304      	adds	r3, #4
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b02      	cmp	r3, #2
 8002438:	f040 810f 	bne.w	800265a <ISOUDS_RespOnEvent_Sched+0x242>
		{
			/* Switch event */
			switch(ISOUDS_EventConfig[EvntIndx].EventType)
 800243c:	79fa      	ldrb	r2, [r7, #7]
 800243e:	498d      	ldr	r1, [pc, #564]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	3305      	adds	r3, #5
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	3b01      	subs	r3, #1
 8002450:	2b08      	cmp	r3, #8
 8002452:	d824      	bhi.n	800249e <ISOUDS_RespOnEvent_Sched+0x86>
 8002454:	a201      	add	r2, pc, #4	; (adr r2, 800245c <ISOUDS_RespOnEvent_Sched+0x44>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	08002481 	.word	0x08002481
 8002460:	08002487 	.word	0x08002487
 8002464:	0800248d 	.word	0x0800248d
 8002468:	0800249f 	.word	0x0800249f
 800246c:	0800249f 	.word	0x0800249f
 8002470:	0800249f 	.word	0x0800249f
 8002474:	0800249f 	.word	0x0800249f
 8002478:	08002493 	.word	0x08002493
 800247c:	08002499 	.word	0x08002499
			{
				/* On DTC status change */
				case ISOUDS_ONDTCSTATUSCHANGE:
				{
					ISOUDS_SchedOnDTCStatChng();
 8002480:	f000 f8fc 	bl	800267c <ISOUDS_SchedOnDTCStatChng>
				}
				break;
 8002484:	e00c      	b.n	80024a0 <ISOUDS_RespOnEvent_Sched+0x88>
				/* On timer interrupt */
				case ISOUDS_ONTIMERINTERRUPT:
				{
					ISOUDS_SchedOnTimeIntrpt();
 8002486:	f000 f919 	bl	80026bc <ISOUDS_SchedOnTimeIntrpt>
				}
				break;
 800248a:	e009      	b.n	80024a0 <ISOUDS_RespOnEvent_Sched+0x88>
				/* On Change of DID data */
				case ISOUDS_ONCHANGEOFDATAIDENTIFIER:
				{
					ISOUDS_SchedOnChngOfDID();
 800248c:	f000 f93c 	bl	8002708 <ISOUDS_SchedOnChngOfDID>
				}
				break;
 8002490:	e006      	b.n	80024a0 <ISOUDS_RespOnEvent_Sched+0x88>

				}
				break;
				case ISOUDS_REPMOSTRSNTDTCONSTATCHNG:
				{
					ISOUDS_SchedMstRsntDTCOnStatChng();
 8002492:	f000 f9a1 	bl	80027d8 <ISOUDS_SchedMstRsntDTCOnStatChng>
				}
				break;
 8002496:	e003      	b.n	80024a0 <ISOUDS_RespOnEvent_Sched+0x88>
				case ISOUDS_REPDTCRECINFOONDTCSTTCHNG:
				{
					ISOUDS_SchedRepDTCInfoOnDTCStatChng();
 8002498:	f000 f9ea 	bl	8002870 <ISOUDS_SchedRepDTCInfoOnDTCStatChng>
				}
				break;
 800249c:	e000      	b.n	80024a0 <ISOUDS_RespOnEvent_Sched+0x88>
				default:
				{

				}
				break;
 800249e:	bf00      	nop
			}

			/* Check if it is infinite window or window time elapsed */
			if ((ISOUDS_INFINITE_WINDOW != ISOUDS_EventConfig[EvntIndx].EventWindowTime) && (ISOUDS_EventConfig[EvntIndx].EventTimeLapsed > ((uint32_t)ISOUDS_EventConfig[EvntIndx].EventWindowTime * ISOUDS_RESPON_EVNT_10S)))
 80024a0:	79fa      	ldrb	r2, [r7, #7]
 80024a2:	4974      	ldr	r1, [pc, #464]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	3306      	adds	r3, #6
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	f000 80b4 	beq.w	8002620 <ISOUDS_RespOnEvent_Sched+0x208>
 80024b8:	79fa      	ldrb	r2, [r7, #7]
 80024ba:	496e      	ldr	r1, [pc, #440]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	6819      	ldr	r1, [r3, #0]
 80024c8:	79fa      	ldrb	r2, [r7, #7]
 80024ca:	486a      	ldr	r0, [pc, #424]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4403      	add	r3, r0
 80024d6:	3306      	adds	r3, #6
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	f242 7310 	movw	r3, #10000	; 0x2710
 80024e0:	fb02 f303 	mul.w	r3, r2, r3
 80024e4:	4299      	cmp	r1, r3
 80024e6:	f240 809b 	bls.w	8002620 <ISOUDS_RespOnEvent_Sched+0x208>
			{
				/* Prepare the final response */
				ISOUDS_RespEventReqBuffer[0] = ISOUDS_SIDRESPONEVENT_POSRESP;
 80024ea:	4b63      	ldr	r3, [pc, #396]	; (8002678 <ISOUDS_RespOnEvent_Sched+0x260>)
 80024ec:	22c6      	movs	r2, #198	; 0xc6
 80024ee:	701a      	strb	r2, [r3, #0]
				ISOUDS_RespEventReqBuffer[1] = ISOUDS_EventConfig[EvntIndx].EventType;
 80024f0:	79fa      	ldrb	r2, [r7, #7]
 80024f2:	4960      	ldr	r1, [pc, #384]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	3305      	adds	r3, #5
 8002500:	781a      	ldrb	r2, [r3, #0]
 8002502:	4b5d      	ldr	r3, [pc, #372]	; (8002678 <ISOUDS_RespOnEvent_Sched+0x260>)
 8002504:	705a      	strb	r2, [r3, #1]
				ISOUDS_RespEventReqBuffer[2] = 1;
 8002506:	4b5c      	ldr	r3, [pc, #368]	; (8002678 <ISOUDS_RespOnEvent_Sched+0x260>)
 8002508:	2201      	movs	r2, #1
 800250a:	709a      	strb	r2, [r3, #2]
				ISOUDS_RespEventReqBuffer[3] = ISOUDS_EventConfig[EvntIndx].EventWindowTime;
 800250c:	79fa      	ldrb	r2, [r7, #7]
 800250e:	4959      	ldr	r1, [pc, #356]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	3306      	adds	r3, #6
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	4b56      	ldr	r3, [pc, #344]	; (8002678 <ISOUDS_RespOnEvent_Sched+0x260>)
 8002520:	70da      	strb	r2, [r3, #3]

				for (LoopIndx = 0; LoopIndx < ISOUDS_EventConfig[EvntIndx].eventTypeRecordLen; LoopIndx++)
 8002522:	2300      	movs	r3, #0
 8002524:	71bb      	strb	r3, [r7, #6]
 8002526:	e011      	b.n	800254c <ISOUDS_RespOnEvent_Sched+0x134>
				{
					ISOUDS_RespEventReqBuffer[LoopIndx + 4] = ISOUDS_EventConfig[EvntIndx].eventTypeRecord[LoopIndx];
 8002528:	79fa      	ldrb	r2, [r7, #7]
 800252a:	79b8      	ldrb	r0, [r7, #6]
 800252c:	79bb      	ldrb	r3, [r7, #6]
 800252e:	1d19      	adds	r1, r3, #4
 8002530:	4c50      	ldr	r4, [pc, #320]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 8002532:	4613      	mov	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4423      	add	r3, r4
 800253c:	4403      	add	r3, r0
 800253e:	330a      	adds	r3, #10
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	4b4d      	ldr	r3, [pc, #308]	; (8002678 <ISOUDS_RespOnEvent_Sched+0x260>)
 8002544:	545a      	strb	r2, [r3, r1]
				for (LoopIndx = 0; LoopIndx < ISOUDS_EventConfig[EvntIndx].eventTypeRecordLen; LoopIndx++)
 8002546:	79bb      	ldrb	r3, [r7, #6]
 8002548:	3301      	adds	r3, #1
 800254a:	71bb      	strb	r3, [r7, #6]
 800254c:	79fa      	ldrb	r2, [r7, #7]
 800254e:	4949      	ldr	r1, [pc, #292]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3307      	adds	r3, #7
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	79ba      	ldrb	r2, [r7, #6]
 8002560:	429a      	cmp	r2, r3
 8002562:	d3e1      	bcc.n	8002528 <ISOUDS_RespOnEvent_Sched+0x110>
				}

				for (LoopIndx = 0; LoopIndx < (ISOUDS_EventConfig[EvntIndx].serviceToRespondToRecordLen + ISOUDS_EventConfig[EvntIndx].eventTypeRecordLen); LoopIndx++)
 8002564:	2300      	movs	r3, #0
 8002566:	71bb      	strb	r3, [r7, #6]
 8002568:	e01b      	b.n	80025a2 <ISOUDS_RespOnEvent_Sched+0x18a>
				{
					ISOUDS_RespEventReqBuffer[LoopIndx + 4 + ISOUDS_EventConfig[EvntIndx].eventTypeRecordLen] = ISOUDS_EventConfig[EvntIndx].serviceToRespondToRecord[LoopIndx];
 800256a:	79fa      	ldrb	r2, [r7, #7]
 800256c:	79b8      	ldrb	r0, [r7, #6]
 800256e:	79bb      	ldrb	r3, [r7, #6]
 8002570:	1d1c      	adds	r4, r3, #4
 8002572:	79f9      	ldrb	r1, [r7, #7]
 8002574:	4d3f      	ldr	r5, [pc, #252]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 8002576:	460b      	mov	r3, r1
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	440b      	add	r3, r1
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	442b      	add	r3, r5
 8002580:	3307      	adds	r3, #7
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	18e1      	adds	r1, r4, r3
 8002586:	4c3b      	ldr	r4, [pc, #236]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4423      	add	r3, r4
 8002592:	4403      	add	r3, r0
 8002594:	3314      	adds	r3, #20
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	4b37      	ldr	r3, [pc, #220]	; (8002678 <ISOUDS_RespOnEvent_Sched+0x260>)
 800259a:	545a      	strb	r2, [r3, r1]
				for (LoopIndx = 0; LoopIndx < (ISOUDS_EventConfig[EvntIndx].serviceToRespondToRecordLen + ISOUDS_EventConfig[EvntIndx].eventTypeRecordLen); LoopIndx++)
 800259c:	79bb      	ldrb	r3, [r7, #6]
 800259e:	3301      	adds	r3, #1
 80025a0:	71bb      	strb	r3, [r7, #6]
 80025a2:	79b9      	ldrb	r1, [r7, #6]
 80025a4:	79fa      	ldrb	r2, [r7, #7]
 80025a6:	4833      	ldr	r0, [pc, #204]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4403      	add	r3, r0
 80025b2:	3308      	adds	r3, #8
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	461c      	mov	r4, r3
 80025b8:	79fa      	ldrb	r2, [r7, #7]
 80025ba:	482e      	ldr	r0, [pc, #184]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4403      	add	r3, r0
 80025c6:	3307      	adds	r3, #7
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	4423      	add	r3, r4
 80025cc:	4299      	cmp	r1, r3
 80025ce:	dbcc      	blt.n	800256a <ISOUDS_RespOnEvent_Sched+0x152>
				}

				ReqLength = (4U + (uint16_t)ISOUDS_EventConfig[EvntIndx].eventTypeRecordLen + ISOUDS_EventConfig[EvntIndx].serviceToRespondToRecordLen);
 80025d0:	79fa      	ldrb	r2, [r7, #7]
 80025d2:	4928      	ldr	r1, [pc, #160]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	3307      	adds	r3, #7
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b299      	uxth	r1, r3
 80025e4:	79fa      	ldrb	r2, [r7, #7]
 80025e6:	4823      	ldr	r0, [pc, #140]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4403      	add	r3, r0
 80025f2:	3308      	adds	r3, #8
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	440b      	add	r3, r1
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3304      	adds	r3, #4
 80025fc:	80bb      	strh	r3, [r7, #4]

				ISOUDS_ServerSetRespCANid();
 80025fe:	f7ff f843 	bl	8001688 <ISOUDS_ServerSetRespCANid>
				/* Transmit the message */
				ISOUDS_ServerTxRequest (ReqLength, &ISOUDS_RespEventReqBuffer[0]);
 8002602:	88bb      	ldrh	r3, [r7, #4]
 8002604:	491c      	ldr	r1, [pc, #112]	; (8002678 <ISOUDS_RespOnEvent_Sched+0x260>)
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff f853 	bl	80016b2 <ISOUDS_ServerTxRequest>
				/* Inactivate the Event */
				ISOUDS_EventConfig[EvntIndx].EventActStat = EVENT_REG_INACTIV;
 800260c:	79fa      	ldrb	r2, [r7, #7]
 800260e:	4919      	ldr	r1, [pc, #100]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	3304      	adds	r3, #4
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
			}
			/* If  not infinite window */
			if (ISOUDS_INFINITE_WINDOW != ISOUDS_EventConfig[EvntIndx].EventWindowTime)
 8002620:	79fa      	ldrb	r2, [r7, #7]
 8002622:	4914      	ldr	r1, [pc, #80]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	3306      	adds	r3, #6
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d011      	beq.n	800265a <ISOUDS_RespOnEvent_Sched+0x242>
			{
				/* Increment the Time elapsed */
				ISOUDS_EventConfig[EvntIndx].EventTimeLapsed += ISOUDS_SERVER_PERIOD_SCHED;
 8002636:	79fa      	ldrb	r2, [r7, #7]
 8002638:	490e      	ldr	r1, [pc, #56]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 800263a:	4613      	mov	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	79fa      	ldrb	r2, [r7, #7]
 8002648:	f103 010a 	add.w	r1, r3, #10
 800264c:	4809      	ldr	r0, [pc, #36]	; (8002674 <ISOUDS_RespOnEvent_Sched+0x25c>)
 800264e:	4613      	mov	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4403      	add	r3, r0
 8002658:	6019      	str	r1, [r3, #0]
	for (EvntIndx = 0 ; EvntIndx < ISOUDS_NUM_OF_EVNTS_SUP; EvntIndx++)
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	3301      	adds	r3, #1
 800265e:	71fb      	strb	r3, [r7, #7]
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	2b05      	cmp	r3, #5
 8002664:	f67f aede 	bls.w	8002424 <ISOUDS_RespOnEvent_Sched+0xc>
			}
		}
	}
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bdb0      	pop	{r4, r5, r7, pc}
 8002672:	bf00      	nop
 8002674:	24001364 	.word	0x24001364
 8002678:	24001460 	.word	0x24001460

0800267c <ISOUDS_SchedOnDTCStatChng>:

static void ISOUDS_SchedOnDTCStatChng(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
	uint8_t EventStatus;

	/* Get on DTC status event status */
	EventStatus = ISOUDS_GetOnDtcStatChangeEventStat();
 8002682:	f7ff fe55 	bl	8002330 <ISOUDS_GetOnDtcStatChangeEventStat>
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
	/* EEvent triggered */
	if (ISOUDS_TRUE == EventStatus)
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d10d      	bne.n	80026ac <ISOUDS_SchedOnDTCStatChng+0x30>
	{
		/* Get the UDS status */
		if (ISOUDS_IDLE == ISOUDS_GetUDSStat())
 8002690:	f008 fce6 	bl	800b060 <ISOUDS_GetUDSStat>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d108      	bne.n	80026ac <ISOUDS_SchedOnDTCStatChng+0x30>
		{
			/* Send the request */
			ISOUDS_ServerMsgIndi(ISOUDS_EventConfig[OnDtcStatusChange].serviceToRespondToRecordLen, ISOUDS_EventConfig[OnDtcStatusChange].serviceToRespondToRecord, ISOUDS_PHYSICALREQ);
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <ISOUDS_SchedOnDTCStatChng+0x38>)
 800269c:	891b      	ldrh	r3, [r3, #8]
 800269e:	2202      	movs	r2, #2
 80026a0:	4905      	ldr	r1, [pc, #20]	; (80026b8 <ISOUDS_SchedOnDTCStatChng+0x3c>)
 80026a2:	4618      	mov	r0, r3
 80026a4:	f008 fa3a 	bl	800ab1c <ISOUDS_ServerMsgIndi>
			/* CLear the event triggred */
			(void)ISOUDS_ClrOnDtcStatChangeEventStat();
 80026a8:	f7ff fe5a 	bl	8002360 <ISOUDS_ClrOnDtcStatChangeEventStat>
		}
	}
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	24001364 	.word	0x24001364
 80026b8:	24001378 	.word	0x24001378

080026bc <ISOUDS_SchedOnTimeIntrpt>:

static void ISOUDS_SchedOnTimeIntrpt(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
	uint8_t EventStatus;

	ISOUDS_SchedOnTimeIntrpt();
 80026c2:	f7ff fffb 	bl	80026bc <ISOUDS_SchedOnTimeIntrpt>
	/* Get the event status */
	EventStatus = ISOUDS_GetOnTimerInterruptStat();
 80026c6:	f7ff fe65 	bl	8002394 <ISOUDS_GetOnTimerInterruptStat>
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
	/* Check if the event triggered */
	if (ISOUDS_TRUE == EventStatus)
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10e      	bne.n	80026f2 <ISOUDS_SchedOnTimeIntrpt+0x36>
	{
		/* Check the UDS status */
		if (ISOUDS_IDLE == ISOUDS_GetUDSStat())
 80026d4:	f008 fcc4 	bl	800b060 <ISOUDS_GetUDSStat>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10b      	bne.n	80026f6 <ISOUDS_SchedOnTimeIntrpt+0x3a>
		{
			/* Send the request	 */
			ISOUDS_ServerMsgIndi(ISOUDS_EventConfig[OnTimerInterrupt].serviceToRespondToRecordLen, ISOUDS_EventConfig[OnTimerInterrupt].serviceToRespondToRecord, ISOUDS_PHYSICALREQ);
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <ISOUDS_SchedOnTimeIntrpt+0x44>)
 80026e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026e2:	2202      	movs	r2, #2
 80026e4:	4907      	ldr	r1, [pc, #28]	; (8002704 <ISOUDS_SchedOnTimeIntrpt+0x48>)
 80026e6:	4618      	mov	r0, r3
 80026e8:	f008 fa18 	bl	800ab1c <ISOUDS_ServerMsgIndi>
			/* CLear the event */
			ISOUDS_ClrOnTimerInterruptStat();
 80026ec:	f7ff fe80 	bl	80023f0 <ISOUDS_ClrOnTimerInterruptStat>
	else
	{
		/* Update the evet interrupt */
		ISOUDS_UpdtOnTmrIntrptTmrVal();
	}
}
 80026f0:	e001      	b.n	80026f6 <ISOUDS_SchedOnTimeIntrpt+0x3a>
		ISOUDS_UpdtOnTmrIntrptTmrVal();
 80026f2:	f7ff fe67 	bl	80023c4 <ISOUDS_UpdtOnTmrIntrptTmrVal>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	24001364 	.word	0x24001364
 8002704:	2400139c 	.word	0x2400139c

08002708 <ISOUDS_SchedOnChngOfDID>:

static void ISOUDS_SchedOnChngOfDID(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
	uint8_t RetVal;
	uint8_t LoopIndx;

	uint16_t DID_NUM = 0u;
 800270e:	2300      	movs	r3, #0
 8002710:	80bb      	strh	r3, [r7, #4]

	DID_NUM = ((uint16_t)ISOUDS_EventConfig[OnChangeOfDataIdentifier].eventTypeRecord[0] << 8) | ISOUDS_EventConfig[OnChangeOfDataIdentifier].eventTypeRecord[1];
 8002712:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <ISOUDS_SchedOnChngOfDID+0xbc>)
 8002714:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	b21a      	sxth	r2, r3
 800271c:	4b29      	ldr	r3, [pc, #164]	; (80027c4 <ISOUDS_SchedOnChngOfDID+0xbc>)
 800271e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002722:	b21b      	sxth	r3, r3
 8002724:	4313      	orrs	r3, r2
 8002726:	b21b      	sxth	r3, r3
 8002728:	80bb      	strh	r3, [r7, #4]
	ISOUDS_RespOnEventDIDLiveLen = 0u;
 800272a:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <ISOUDS_SchedOnChngOfDID+0xc0>)
 800272c:	2200      	movs	r2, #0
 800272e:	801a      	strh	r2, [r3, #0]

	RetVal = ISOUDS_RdDidData(DID_NUM,ISOUDS_RespOnEventDIDLIVEDATA,&ISOUDS_RespOnEventDIDLiveLen);
 8002730:	88bb      	ldrh	r3, [r7, #4]
 8002732:	4a25      	ldr	r2, [pc, #148]	; (80027c8 <ISOUDS_SchedOnChngOfDID+0xc0>)
 8002734:	4925      	ldr	r1, [pc, #148]	; (80027cc <ISOUDS_SchedOnChngOfDID+0xc4>)
 8002736:	4618      	mov	r0, r3
 8002738:	f008 fe4c 	bl	800b3d4 <ISOUDS_RdDidData>
 800273c:	4603      	mov	r3, r0
 800273e:	70fb      	strb	r3, [r7, #3]

	if(ISOUDS_TRUE == RetVal)
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d13a      	bne.n	80027bc <ISOUDS_SchedOnChngOfDID+0xb4>
	{
		for(LoopIndx = 0; LoopIndx < ISOUDS_RespOnEventDIDLiveLen;LoopIndx++ )
 8002746:	2300      	movs	r3, #0
 8002748:	71fb      	strb	r3, [r7, #7]
 800274a:	e00a      	b.n	8002762 <ISOUDS_SchedOnChngOfDID+0x5a>
		{
			if(ISOUDS_RespOnEventDIDLIVEDATA[LoopIndx] != ISOUDS_RespOnEventDIDData[LoopIndx])
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	4a1f      	ldr	r2, [pc, #124]	; (80027cc <ISOUDS_SchedOnChngOfDID+0xc4>)
 8002750:	5cd2      	ldrb	r2, [r2, r3]
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	491e      	ldr	r1, [pc, #120]	; (80027d0 <ISOUDS_SchedOnChngOfDID+0xc8>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	429a      	cmp	r2, r3
 800275a:	d109      	bne.n	8002770 <ISOUDS_SchedOnChngOfDID+0x68>
		for(LoopIndx = 0; LoopIndx < ISOUDS_RespOnEventDIDLiveLen;LoopIndx++ )
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	3301      	adds	r3, #1
 8002760:	71fb      	strb	r3, [r7, #7]
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	b29a      	uxth	r2, r3
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <ISOUDS_SchedOnChngOfDID+0xc0>)
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d3ee      	bcc.n	800274c <ISOUDS_SchedOnChngOfDID+0x44>
 800276e:	e000      	b.n	8002772 <ISOUDS_SchedOnChngOfDID+0x6a>
			{
				break;
 8002770:	bf00      	nop
			}

		}

		if(LoopIndx != ISOUDS_RespOnEventDIDLiveLen)
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	b29a      	uxth	r2, r3
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <ISOUDS_SchedOnChngOfDID+0xc0>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d01e      	beq.n	80027bc <ISOUDS_SchedOnChngOfDID+0xb4>
		{
			/* Check the UDS status */
			if (ISOUDS_IDLE == ISOUDS_GetUDSStat())
 800277e:	f008 fc6f 	bl	800b060 <ISOUDS_GetUDSStat>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d119      	bne.n	80027bc <ISOUDS_SchedOnChngOfDID+0xb4>
			{
				ISOUDS_ServerMsgIndi(ISOUDS_EventConfig[OnChangeOfDataIdentifier].serviceToRespondToRecordLen, ISOUDS_EventConfig[OnChangeOfDataIdentifier].serviceToRespondToRecord, ISOUDS_PHYSICALREQ);
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <ISOUDS_SchedOnChngOfDID+0xbc>)
 800278a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800278e:	2202      	movs	r2, #2
 8002790:	4910      	ldr	r1, [pc, #64]	; (80027d4 <ISOUDS_SchedOnChngOfDID+0xcc>)
 8002792:	4618      	mov	r0, r3
 8002794:	f008 f9c2 	bl	800ab1c <ISOUDS_ServerMsgIndi>

				for(LoopIndx = 0; LoopIndx < ISOUDS_RespOnEventDIDLiveLen;LoopIndx++ )
 8002798:	2300      	movs	r3, #0
 800279a:	71fb      	strb	r3, [r7, #7]
 800279c:	e008      	b.n	80027b0 <ISOUDS_SchedOnChngOfDID+0xa8>
				{
					 ISOUDS_RespOnEventDIDData[LoopIndx] = ISOUDS_RespOnEventDIDLIVEDATA[LoopIndx];
 800279e:	79fa      	ldrb	r2, [r7, #7]
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	490a      	ldr	r1, [pc, #40]	; (80027cc <ISOUDS_SchedOnChngOfDID+0xc4>)
 80027a4:	5c89      	ldrb	r1, [r1, r2]
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <ISOUDS_SchedOnChngOfDID+0xc8>)
 80027a8:	54d1      	strb	r1, [r2, r3]
				for(LoopIndx = 0; LoopIndx < ISOUDS_RespOnEventDIDLiveLen;LoopIndx++ )
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	3301      	adds	r3, #1
 80027ae:	71fb      	strb	r3, [r7, #7]
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <ISOUDS_SchedOnChngOfDID+0xc0>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d3f0      	bcc.n	800279e <ISOUDS_SchedOnChngOfDID+0x96>
				}

			}
		}
	}
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	24001364 	.word	0x24001364
 80027c8:	24001452 	.word	0x24001452
 80027cc:	24001448 	.word	0x24001448
 80027d0:	2400143c 	.word	0x2400143c
 80027d4:	240013c0 	.word	0x240013c0

080027d8 <ISOUDS_SchedMstRsntDTCOnStatChng>:

static void ISOUDS_SchedMstRsntDTCOnStatChng(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
	switch(ISOUDS_EventConfig[reportMostRecentDtcOnStatusChange].eventTypeRecord[0])
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <ISOUDS_SchedMstRsntDTCOnStatChng+0x88>)
 80027de:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80027e2:	2b0d      	cmp	r3, #13
 80027e4:	d002      	beq.n	80027ec <ISOUDS_SchedMstRsntDTCOnStatChng+0x14>
 80027e6:	2b0e      	cmp	r3, #14
 80027e8:	d018      	beq.n	800281c <ISOUDS_SchedMstRsntDTCOnStatChng+0x44>
 80027ea:	e02f      	b.n	800284c <ISOUDS_SchedMstRsntDTCOnStatChng+0x74>
	{
		case REPORTMOSTRECENTTESTFAILEDDTC:
		{
			if (ISOUDS_TRUE == ISOUDS_MostResentTestFaildDTCFlag)
 80027ec:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <ISOUDS_SchedMstRsntDTCOnStatChng+0x8c>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d130      	bne.n	8002856 <ISOUDS_SchedMstRsntDTCOnStatChng+0x7e>
			{
				/* Check the UDS status */
				if (ISOUDS_IDLE == ISOUDS_GetUDSStat())
 80027f4:	f008 fc34 	bl	800b060 <ISOUDS_GetUDSStat>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d12b      	bne.n	8002856 <ISOUDS_SchedMstRsntDTCOnStatChng+0x7e>
				{
					/* Prepare the request */
					ISOUDS_RespEventReqBuffer[0] = 0x19;
 80027fe:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <ISOUDS_SchedMstRsntDTCOnStatChng+0x90>)
 8002800:	2219      	movs	r2, #25
 8002802:	701a      	strb	r2, [r3, #0]
					ISOUDS_RespEventReqBuffer[1] = 0x0D;
 8002804:	4b18      	ldr	r3, [pc, #96]	; (8002868 <ISOUDS_SchedMstRsntDTCOnStatChng+0x90>)
 8002806:	220d      	movs	r2, #13
 8002808:	705a      	strb	r2, [r3, #1]

					/* Send the request	 */
					ISOUDS_ServerMsgIndi(2U, &ISOUDS_RespEventReqBuffer[0], ISOUDS_PHYSICALREQ);
 800280a:	2202      	movs	r2, #2
 800280c:	4916      	ldr	r1, [pc, #88]	; (8002868 <ISOUDS_SchedMstRsntDTCOnStatChng+0x90>)
 800280e:	2002      	movs	r0, #2
 8002810:	f008 f984 	bl	800ab1c <ISOUDS_ServerMsgIndi>
					ISOUDS_MostResentTestFaildDTCFlag = ISOUDS_FALSE;
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <ISOUDS_SchedMstRsntDTCOnStatChng+0x8c>)
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		break;
 800281a:	e01c      	b.n	8002856 <ISOUDS_SchedMstRsntDTCOnStatChng+0x7e>
		case REPORTMOSTRECENTCONFIRMEDDTC:
		{
			if (ISOUDS_TRUE == ISOUDS_MostResentConfirmedDTCFlag)
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <ISOUDS_SchedMstRsntDTCOnStatChng+0x94>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d11a      	bne.n	800285a <ISOUDS_SchedMstRsntDTCOnStatChng+0x82>
			{
				/* Check the UDS status */
				if (ISOUDS_IDLE == ISOUDS_GetUDSStat())
 8002824:	f008 fc1c 	bl	800b060 <ISOUDS_GetUDSStat>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d115      	bne.n	800285a <ISOUDS_SchedMstRsntDTCOnStatChng+0x82>
				{
					/* Prepare the request */
					ISOUDS_RespEventReqBuffer[0] = 0x19;
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <ISOUDS_SchedMstRsntDTCOnStatChng+0x90>)
 8002830:	2219      	movs	r2, #25
 8002832:	701a      	strb	r2, [r3, #0]
					ISOUDS_RespEventReqBuffer[1] = 0x0E;
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <ISOUDS_SchedMstRsntDTCOnStatChng+0x90>)
 8002836:	220e      	movs	r2, #14
 8002838:	705a      	strb	r2, [r3, #1]

					/* Send the request	 */
					ISOUDS_ServerMsgIndi(2U, &ISOUDS_RespEventReqBuffer[0], ISOUDS_PHYSICALREQ);
 800283a:	2202      	movs	r2, #2
 800283c:	490a      	ldr	r1, [pc, #40]	; (8002868 <ISOUDS_SchedMstRsntDTCOnStatChng+0x90>)
 800283e:	2002      	movs	r0, #2
 8002840:	f008 f96c 	bl	800ab1c <ISOUDS_ServerMsgIndi>

					ISOUDS_MostResentConfirmedDTCFlag = ISOUDS_FALSE;
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <ISOUDS_SchedMstRsntDTCOnStatChng+0x94>)
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		break;
 800284a:	e006      	b.n	800285a <ISOUDS_SchedMstRsntDTCOnStatChng+0x82>
		default:
		{
			ISOUDS_EventConfig[reportMostRecentDtcOnStatusChange].EventActStat = EVENT_REG_ACTIV;
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <ISOUDS_SchedMstRsntDTCOnStatChng+0x88>)
 800284e:	2202      	movs	r2, #2
 8002850:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		}
		break;
 8002854:	e002      	b.n	800285c <ISOUDS_SchedMstRsntDTCOnStatChng+0x84>
		break;
 8002856:	bf00      	nop
 8002858:	e000      	b.n	800285c <ISOUDS_SchedMstRsntDTCOnStatChng+0x84>
		break;
 800285a:	bf00      	nop
	}
}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}
 8002860:	24001364 	.word	0x24001364
 8002864:	24001454 	.word	0x24001454
 8002868:	24001460 	.word	0x24001460
 800286c:	24001455 	.word	0x24001455

08002870 <ISOUDS_SchedRepDTCInfoOnDTCStatChng>:

static void ISOUDS_SchedRepDTCInfoOnDTCStatChng(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
	uint8_t LoopIndx;
	uint16_t ReqLength;

	if (ISOUDS_TRUE == ISOUDS_ResponStatChngFlag)
 8002876:	4b28      	ldr	r3, [pc, #160]	; (8002918 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xa8>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d148      	bne.n	8002910 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xa0>
	{
		/* Check the UDS status */
		if (ISOUDS_IDLE == ISOUDS_GetUDSStat())
 800287e:	f008 fbef 	bl	800b060 <ISOUDS_GetUDSStat>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d143      	bne.n	8002910 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xa0>
		{
			/* Prepare the request */
			ISOUDS_RespEventReqBuffer[0] = 0x19;
 8002888:	4b24      	ldr	r3, [pc, #144]	; (800291c <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xac>)
 800288a:	2219      	movs	r2, #25
 800288c:	701a      	strb	r2, [r3, #0]

			for (LoopIndx = 0; LoopIndx < ISOUDS_EventConfig[reportDTCRecordInformationOnDtcStatusChange].serviceToRespondToRecordLen; LoopIndx++)
 800288e:	2300      	movs	r3, #0
 8002890:	71fb      	strb	r3, [r7, #7]
 8002892:	e00b      	b.n	80028ac <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0x3c>
			{
				ISOUDS_RespEventReqBuffer[LoopIndx + 1] = ISOUDS_EventConfig[reportDTCRecordInformationOnDtcStatusChange].serviceToRespondToRecord[LoopIndx];
 8002894:	79fa      	ldrb	r2, [r7, #7]
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	3301      	adds	r3, #1
 800289a:	4921      	ldr	r1, [pc, #132]	; (8002920 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xb0>)
 800289c:	440a      	add	r2, r1
 800289e:	f892 10c8 	ldrb.w	r1, [r2, #200]	; 0xc8
 80028a2:	4a1e      	ldr	r2, [pc, #120]	; (800291c <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xac>)
 80028a4:	54d1      	strb	r1, [r2, r3]
			for (LoopIndx = 0; LoopIndx < ISOUDS_EventConfig[reportDTCRecordInformationOnDtcStatusChange].serviceToRespondToRecordLen; LoopIndx++)
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	3301      	adds	r3, #1
 80028aa:	71fb      	strb	r3, [r7, #7]
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xb0>)
 80028b2:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d3ec      	bcc.n	8002894 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0x24>
			}

			ReqLength = ISOUDS_EventConfig[reportDTCRecordInformationOnDtcStatusChange].serviceToRespondToRecordLen + 1;
 80028ba:	4b19      	ldr	r3, [pc, #100]	; (8002920 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xb0>)
 80028bc:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80028c0:	3301      	adds	r3, #1
 80028c2:	80bb      	strh	r3, [r7, #4]

			ISOUDS_RespEventReqBuffer[ReqLength] = (uint8_t)((ISOUDS_RespDIDonStatChng >> 16) & 0xFF);
 80028c4:	4b17      	ldr	r3, [pc, #92]	; (8002924 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xb4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0c1a      	lsrs	r2, r3, #16
 80028ca:	88bb      	ldrh	r3, [r7, #4]
 80028cc:	b2d1      	uxtb	r1, r2
 80028ce:	4a13      	ldr	r2, [pc, #76]	; (800291c <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xac>)
 80028d0:	54d1      	strb	r1, [r2, r3]
			ReqLength++;
 80028d2:	88bb      	ldrh	r3, [r7, #4]
 80028d4:	3301      	adds	r3, #1
 80028d6:	80bb      	strh	r3, [r7, #4]
			ISOUDS_RespEventReqBuffer[ReqLength] = (uint8_t)((ISOUDS_RespDIDonStatChng >> 8) & 0xFF);
 80028d8:	4b12      	ldr	r3, [pc, #72]	; (8002924 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xb4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	0a1a      	lsrs	r2, r3, #8
 80028de:	88bb      	ldrh	r3, [r7, #4]
 80028e0:	b2d1      	uxtb	r1, r2
 80028e2:	4a0e      	ldr	r2, [pc, #56]	; (800291c <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xac>)
 80028e4:	54d1      	strb	r1, [r2, r3]
			ReqLength++;
 80028e6:	88bb      	ldrh	r3, [r7, #4]
 80028e8:	3301      	adds	r3, #1
 80028ea:	80bb      	strh	r3, [r7, #4]
			ISOUDS_RespEventReqBuffer[ReqLength] = (uint8_t)(ISOUDS_RespDIDonStatChng & 0xFF);
 80028ec:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xb4>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	88bb      	ldrh	r3, [r7, #4]
 80028f2:	b2d1      	uxtb	r1, r2
 80028f4:	4a09      	ldr	r2, [pc, #36]	; (800291c <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xac>)
 80028f6:	54d1      	strb	r1, [r2, r3]
			ReqLength++;
 80028f8:	88bb      	ldrh	r3, [r7, #4]
 80028fa:	3301      	adds	r3, #1
 80028fc:	80bb      	strh	r3, [r7, #4]
			/* Send the request	 */
			ISOUDS_ServerMsgIndi(ReqLength, &ISOUDS_RespEventReqBuffer[0], ISOUDS_PHYSICALREQ);
 80028fe:	88bb      	ldrh	r3, [r7, #4]
 8002900:	2202      	movs	r2, #2
 8002902:	4906      	ldr	r1, [pc, #24]	; (800291c <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xac>)
 8002904:	4618      	mov	r0, r3
 8002906:	f008 f909 	bl	800ab1c <ISOUDS_ServerMsgIndi>

			ISOUDS_ResponStatChngFlag = ISOUDS_FALSE;
 800290a:	4b03      	ldr	r3, [pc, #12]	; (8002918 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xa8>)
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	2400145c 	.word	0x2400145c
 800291c:	24001460 	.word	0x24001460
 8002920:	24001364 	.word	0x24001364
 8002924:	24001458 	.word	0x24001458

08002928 <ISOUDS_Get_RtnContrlMaxSubFun>:
** Return value             : retVal : Number of RIDs Supported

** Remarks                  : None
***************************************************************************************************/
uint16_t ISOUDS_Get_RtnContrlMaxSubFun(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
	return ISOUDS_RtnContrlMaxSubFun;
 800292c:	2303      	movs	r3, #3
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <ISOUDS_RtnControlTypeSuppChk>:
**							: RoutineIDIndex : Routine ID index
**
** Return value             : RetVal : Communication type validity
*******************************************************************************/
uint8_t ISOUDS_RtnControlTypeSuppChk(uint8_t RoutineType, uint16_t RoutineIDIndex)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	460a      	mov	r2, r1
 8002942:	71fb      	strb	r3, [r7, #7]
 8002944:	4613      	mov	r3, r2
 8002946:	80bb      	strh	r3, [r7, #4]
	uint8_t Index;
	uint8_t RtnType_Found = ISOUDS_FALSE;
 8002948:	2300      	movs	r3, #0
 800294a:	73bb      	strb	r3, [r7, #14]

	for (Index = 0; (Index < ISOUDS_RtnCntrlCfg_Tbl[RoutineIDIndex].NumOfRtntypeSup) && (ISOUDS_FALSE == RtnType_Found); Index++)
 800294c:	2300      	movs	r3, #0
 800294e:	73fb      	strb	r3, [r7, #15]
 8002950:	e00f      	b.n	8002972 <ISOUDS_RtnControlTypeSuppChk+0x3a>
	{
		if (RoutineType == ISOUDS_RtnCntrlCfg_Tbl[RoutineIDIndex].RtntypeSupp[Index])
 8002952:	88ba      	ldrh	r2, [r7, #4]
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	4910      	ldr	r1, [pc, #64]	; (8002998 <ISOUDS_RtnControlTypeSuppChk+0x60>)
 8002958:	0112      	lsls	r2, r2, #4
 800295a:	440a      	add	r2, r1
 800295c:	4413      	add	r3, r2
 800295e:	3304      	adds	r3, #4
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	79fa      	ldrb	r2, [r7, #7]
 8002964:	429a      	cmp	r2, r3
 8002966:	d101      	bne.n	800296c <ISOUDS_RtnControlTypeSuppChk+0x34>
		{
			RtnType_Found = ISOUDS_TRUE;
 8002968:	2301      	movs	r3, #1
 800296a:	73bb      	strb	r3, [r7, #14]
	for (Index = 0; (Index < ISOUDS_RtnCntrlCfg_Tbl[RoutineIDIndex].NumOfRtntypeSup) && (ISOUDS_FALSE == RtnType_Found); Index++)
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	3301      	adds	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	88bb      	ldrh	r3, [r7, #4]
 8002974:	4a08      	ldr	r2, [pc, #32]	; (8002998 <ISOUDS_RtnControlTypeSuppChk+0x60>)
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	4413      	add	r3, r2
 800297a:	3303      	adds	r3, #3
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	429a      	cmp	r2, r3
 8002982:	d202      	bcs.n	800298a <ISOUDS_RtnControlTypeSuppChk+0x52>
 8002984:	7bbb      	ldrb	r3, [r7, #14]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0e3      	beq.n	8002952 <ISOUDS_RtnControlTypeSuppChk+0x1a>
		{
			/* Do nothing */
		}
	}

	return RtnType_Found;
 800298a:	7bbb      	ldrb	r3, [r7, #14]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	2400021c 	.word	0x2400021c

0800299c <ISOUDS_RtnCntrlPreCondCheck>:
**
**
** Return value             : RetVal : Pre condition validity
*******************************************************************************/
uint8_t ISOUDS_RtnCntrlPreCondCheck(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
	uint8_t RetVal = ISOUDS_TRUE;
 80029a2:	2301      	movs	r3, #1
 80029a4:	71fb      	strb	r3, [r7, #7]

	/* Add Code to check the Pre-conditions and update RetVal accordingly */
	RetVal = HAL_RtnCntrlPreCondCheck();
 80029a6:	f000 f855 	bl	8002a54 <HAL_RtnCntrlPreCondCheck>
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]

	return RetVal;
 80029ae:	79fb      	ldrb	r3, [r7, #7]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <ISOUDS_RtnCheckMemory>:
**							: Data Pointer: Point to Node Identification Number if required
**							: RespLenth : Response lenth
** Return value             : None
***************************************************************************************************/
static uint8_t ISOUDS_RtnCheckMemory(ISOUDS_ConfType *ISOUDSConfPtr, uint16_t RtnCntrlID, uint8_t RtnType, uint8_t *Data, uint16_t *RespLenth)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	817b      	strh	r3, [r7, #10]
 80029c6:	4613      	mov	r3, r2
 80029c8:	727b      	strb	r3, [r7, #9]
	uint8_t RespVal = ISOUDS_POSRES;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]

	/* Manual code start */

	/* Initial Routine request handler */
	/* Perform Operation and store the Response code into RespVal */
	RespVal = HAL_RtnCheckMemory(ISOUDSConfPtr, RtnCntrlID, RtnType, Data, RespLenth);
 80029ce:	7a7a      	ldrb	r2, [r7, #9]
 80029d0:	8979      	ldrh	r1, [r7, #10]
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f847 	bl	8002a6c <HAL_RtnCheckMemory>
 80029de:	4603      	mov	r3, r0
 80029e0:	75fb      	strb	r3, [r7, #23]

	/* Manual Code End */

	return RespVal;
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <ISOUDS_RtnEraseMemory>:
**							: Data Pointer: Point to Node Identification Number if required
**							: RespLenth : Response lenth
** Return value             : None
***************************************************************************************************/
static uint8_t ISOUDS_RtnEraseMemory(ISOUDS_ConfType *ISOUDSConfPtr, uint16_t RtnCntrlID, uint8_t RtnType, uint8_t *Data, uint16_t *RespLenth)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	817b      	strh	r3, [r7, #10]
 80029fa:	4613      	mov	r3, r2
 80029fc:	727b      	strb	r3, [r7, #9]
	uint8_t RespVal = ISOUDS_POSRES;
 80029fe:	2300      	movs	r3, #0
 8002a00:	75fb      	strb	r3, [r7, #23]

	/* Manual code start */

	/* Initial Routine request handler */
	/* Perform Operation and store the Response code into RespVal */
	RespVal = HAL_RtnEraseMemory(ISOUDSConfPtr, RtnCntrlID, RtnType, Data, RespLenth);
 8002a02:	7a7a      	ldrb	r2, [r7, #9]
 8002a04:	8979      	ldrh	r1, [r7, #10]
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f86c 	bl	8002aea <HAL_RtnEraseMemory>
 8002a12:	4603      	mov	r3, r0
 8002a14:	75fb      	strb	r3, [r7, #23]

	/* Manual Code End */

	return RespVal;
 8002a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <ISOUDS_RtnCheckProgDependcies>:
**							: Data Pointer: Point to Node Identification Number if required
**							: RespLenth : Response lenth
** Return value             : None
***************************************************************************************************/
static uint8_t ISOUDS_RtnCheckProgDependcies(ISOUDS_ConfType *ISOUDSConfPtr, uint16_t RtnCntrlID, uint8_t RtnType, uint8_t *Data, uint16_t *RespLenth)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	817b      	strh	r3, [r7, #10]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	727b      	strb	r3, [r7, #9]
	uint8_t RespVal = ISOUDS_POSRES;
 8002a32:	2300      	movs	r3, #0
 8002a34:	75fb      	strb	r3, [r7, #23]

	/* Manual code start */

	/* Initial Routine request handler */
	/* Perform Operation and store the Response code into RespVal */
	RespVal = HAL_RtnChecProgDependencies(ISOUDSConfPtr, RtnCntrlID, RtnType, Data, RespLenth);
 8002a36:	7a7a      	ldrb	r2, [r7, #9]
 8002a38:	8979      	ldrh	r1, [r7, #10]
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f891 	bl	8002b68 <HAL_RtnChecProgDependencies>
 8002a46:	4603      	mov	r3, r0
 8002a48:	75fb      	strb	r3, [r7, #23]

	/* Manual Code End */

	return RespVal;
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_RtnCntrlPreCondCheck>:
**
**
** Return value             : ISOUDS_TRUE or ISOUDS_FALSE
*******************************************************************************/
uint8_t HAL_RtnCntrlPreCondCheck(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
	uint8_t RetVal;
	/*User specific implementation*/
	RetVal = ISOUDS_TRUE;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	71fb      	strb	r3, [r7, #7]
	return RetVal;
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_RtnCheckMemory>:
** Return value             : ISOUDS_POSRES or update based on the condition.
**                            Please refer ISOUDS_Server.h file for macros
***************************************************************************************************/
uint8_t HAL_RtnCheckMemory(ISOUDS_ConfType *ISOUDSConfPtr, uint16_t RtnCntrlID, uint8_t RtnType, \
															uint8_t *Data, uint16_t *RespLenth)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	460b      	mov	r3, r1
 8002a78:	817b      	strh	r3, [r7, #10]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	727b      	strb	r3, [r7, #9]
	uint8_t RespVal = ISOUDS_CNC;
 8002a7e:	2322      	movs	r3, #34	; 0x22
 8002a80:	75fb      	strb	r3, [r7, #23]
	
	if((ISOUDSConfPtr != NULL_PTR) && (Data != NULL_PTR) && (RespLenth != NULL_PTR))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d02b      	beq.n	8002ae0 <HAL_RtnCheckMemory+0x74>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d028      	beq.n	8002ae0 <HAL_RtnCheckMemory+0x74>
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d025      	beq.n	8002ae0 <HAL_RtnCheckMemory+0x74>
	{
		(void)RtnType;
		(void)RtnCntrlID;
		
		if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) \
 8002a94:	f7fe fe23 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d115      	bne.n	8002aca <HAL_RtnCheckMemory+0x5e>
 8002a9e:	f7fe fe26 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d110      	bne.n	8002aca <HAL_RtnCheckMemory+0x5e>
															 && (ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8002aa8:	f7fe fe29 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d10b      	bne.n	8002aca <HAL_RtnCheckMemory+0x5e>
		{
			
			
			Data[ISOUDS_ZERO] = ISOUDS_TWO;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	701a      	strb	r2, [r3, #0]
			*RespLenth += ISOUDS_ONE;
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	801a      	strh	r2, [r3, #0]
			RespVal = ISOUDS_POSRES;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	75fb      	strb	r3, [r7, #23]
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RtnCheckMemory+0x74>
			
		}
		else
		{
			Data[ISOUDS_ZERO] = ISOUDS_FIVE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2205      	movs	r2, #5
 8002ace:	701a      	strb	r2, [r3, #0]
			*RespLenth += ISOUDS_ONE;
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	801a      	strh	r2, [r3, #0]
			RespVal = ISOUDS_POSRES;
 8002adc:	2300      	movs	r3, #0
 8002ade:	75fb      	strb	r3, [r7, #23]
	}
	else
	{
		/* Do Nothing */
	}
	return RespVal;
 8002ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_RtnEraseMemory>:
** Return value             : ISOUDS_POSRES or update based on the condition.
**                            Please refer ISOUDS_Server.h file for macros
***************************************************************************************************/
uint8_t HAL_RtnEraseMemory(ISOUDS_ConfType *ISOUDSConfPtr, uint16_t RtnCntrlID, uint8_t RtnType, \
															uint8_t *Data, uint16_t *RespLenth)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	817b      	strh	r3, [r7, #10]
 8002af8:	4613      	mov	r3, r2
 8002afa:	727b      	strb	r3, [r7, #9]
	uint8_t RespVal = ISOUDS_CNC;
 8002afc:	2322      	movs	r3, #34	; 0x22
 8002afe:	75fb      	strb	r3, [r7, #23]

	if((ISOUDSConfPtr != NULL_PTR) && (Data != NULL_PTR) && (RespLenth != NULL_PTR))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d02b      	beq.n	8002b5e <HAL_RtnEraseMemory+0x74>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d028      	beq.n	8002b5e <HAL_RtnEraseMemory+0x74>
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d025      	beq.n	8002b5e <HAL_RtnEraseMemory+0x74>
	{
		(void)RtnType;
		(void)RtnCntrlID;

		if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) \
 8002b12:	f7fe fde4 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d115      	bne.n	8002b48 <HAL_RtnEraseMemory+0x5e>
 8002b1c:	f7fe fde7 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d110      	bne.n	8002b48 <HAL_RtnEraseMemory+0x5e>
															 && (ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8002b26:	f7fe fdea 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d10b      	bne.n	8002b48 <HAL_RtnEraseMemory+0x5e>
		{


			Data[ISOUDS_ZERO] = ISOUDS_TWO;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	701a      	strb	r2, [r3, #0]
			*RespLenth += ISOUDS_ONE;
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	801a      	strh	r2, [r3, #0]
			RespVal = ISOUDS_POSRES;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]
 8002b46:	e00a      	b.n	8002b5e <HAL_RtnEraseMemory+0x74>

		}
		else
		{
			Data[ISOUDS_ZERO] = ISOUDS_FIVE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2205      	movs	r2, #5
 8002b4c:	701a      	strb	r2, [r3, #0]
			*RespLenth += ISOUDS_ONE;
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	801a      	strh	r2, [r3, #0]
			RespVal = ISOUDS_POSRES;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	75fb      	strb	r3, [r7, #23]
	}
	else
	{
		/* Do Nothing */
	}
	return RespVal;
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_RtnChecProgDependencies>:
** Return value             : ISOUDS_POSRES or update based on the condition.
**                            Please refer ISOUDS_Server.h file for macros
***************************************************************************************************/
uint8_t HAL_RtnChecProgDependencies(ISOUDS_ConfType *ISOUDSConfPtr, uint16_t RtnCntrlID, uint8_t RtnType, \
															uint8_t *Data, uint16_t *RespLenth)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	817b      	strh	r3, [r7, #10]
 8002b76:	4613      	mov	r3, r2
 8002b78:	727b      	strb	r3, [r7, #9]
	uint8_t RespVal = ISOUDS_CNC;
 8002b7a:	2322      	movs	r3, #34	; 0x22
 8002b7c:	75fb      	strb	r3, [r7, #23]

	if((ISOUDSConfPtr != NULL_PTR) && (Data != NULL_PTR) && (RespLenth != NULL_PTR))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d02b      	beq.n	8002bdc <HAL_RtnChecProgDependencies+0x74>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d028      	beq.n	8002bdc <HAL_RtnChecProgDependencies+0x74>
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d025      	beq.n	8002bdc <HAL_RtnChecProgDependencies+0x74>
	{
		(void)RtnType;
		(void)RtnCntrlID;

		if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) \
 8002b90:	f7fe fda5 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d115      	bne.n	8002bc6 <HAL_RtnChecProgDependencies+0x5e>
 8002b9a:	f7fe fda8 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d110      	bne.n	8002bc6 <HAL_RtnChecProgDependencies+0x5e>
															 && (ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8002ba4:	f7fe fdab 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10b      	bne.n	8002bc6 <HAL_RtnChecProgDependencies+0x5e>
		{


			Data[ISOUDS_ZERO] = ISOUDS_TWO;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	701a      	strb	r2, [r3, #0]
			*RespLenth += ISOUDS_ONE;
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	801a      	strh	r2, [r3, #0]
			RespVal = ISOUDS_POSRES;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	75fb      	strb	r3, [r7, #23]
 8002bc4:	e00a      	b.n	8002bdc <HAL_RtnChecProgDependencies+0x74>

		}
		else
		{
			Data[ISOUDS_ZERO] = ISOUDS_FIVE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2205      	movs	r2, #5
 8002bca:	701a      	strb	r2, [r3, #0]
			*RespLenth += ISOUDS_ONE;
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	801a      	strh	r2, [r3, #0]
			RespVal = ISOUDS_POSRES;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	75fb      	strb	r3, [r7, #23]
	}
	else
	{
		/* Do Nothing */
	}
	return RespVal;
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <GetSeedLevel1>:
** Parameter 			  	: SeedGentd: Pointer to Seed

** Return value             : None
***************************************************************************************************/
static uint8_t GetSeedLevel1( uint8_t *SeedGentd)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = ISOUDS_POSRES;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]
	
	/* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002bf2:	f7fe fd74 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d103      	bne.n	8002c04 <GetSeedLevel1+0x1e>
	{
		HAL_GenSeedLevel1(SeedGentd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f8d3 	bl	8002da8 <HAL_GenSeedLevel1>
 8002c02:	e001      	b.n	8002c08 <GetSeedLevel1+0x22>
	}
	else
	{
		/* NRC - conditions not correct */
	    RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002c04:	2388      	movs	r3, #136	; 0x88
 8002c06:	73fb      	strb	r3, [r7, #15]
	}

	
	return RetVal;
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <GenerateKeyLevel1>:
** Parameter                : Seed: Pointer to Seed
                            : Key : Pointer to Key
** Return value             : None
***************************************************************************************************/
static uint8_t GenerateKeyLevel1(const uint8_t *Key,uint16_t Keylength)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	807b      	strh	r3, [r7, #2]
	uint8_t Valdkey_stat;
	uint8_t RetVal;
    /* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002c1e:	f7fe fd5e 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d10f      	bne.n	8002c48 <GenerateKeyLevel1+0x36>
	{
		Valdkey_stat = HAL_GenKeyLevel1(Key, Keylength);
 8002c28:	887b      	ldrh	r3, [r7, #2]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f8e9 	bl	8002e04 <HAL_GenKeyLevel1>
 8002c32:	4603      	mov	r3, r0
 8002c34:	73bb      	strb	r3, [r7, #14]
		
		if (Valdkey_stat == ISOUDS_TRUE)
 8002c36:	7bbb      	ldrb	r3, [r7, #14]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d102      	bne.n	8002c42 <GenerateKeyLevel1+0x30>
		{
			RetVal = ISOUDS_POSRES;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	e004      	b.n	8002c4c <GenerateKeyLevel1+0x3a>
		}
		else
		{
			RetVal = ISOUDS_IK;
 8002c42:	2335      	movs	r3, #53	; 0x35
 8002c44:	73fb      	strb	r3, [r7, #15]
 8002c46:	e001      	b.n	8002c4c <GenerateKeyLevel1+0x3a>
		}
	}
	else
	{
		/* NRC - conditions not correct */
		RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002c48:	2388      	movs	r3, #136	; 0x88
 8002c4a:	73fb      	strb	r3, [r7, #15]
	}
    /* User Defined Code end */
	return RetVal;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <GetSeedLevel3>:
** Parameter 			  	: SeedGentd: Pointer to Seed

** Return value             : None
***************************************************************************************************/
static uint8_t GetSeedLevel3( uint8_t *SeedGentd)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = ISOUDS_POSRES;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]

	/* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002c62:	f7fe fd3c 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d103      	bne.n	8002c74 <GetSeedLevel3+0x1e>
	{
		HAL_GenSeedLevel3(SeedGentd);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f8f7 	bl	8002e60 <HAL_GenSeedLevel3>
 8002c72:	e001      	b.n	8002c78 <GetSeedLevel3+0x22>
	}
	else
	{
		/* NRC - conditions not correct */
	    RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002c74:	2388      	movs	r3, #136	; 0x88
 8002c76:	73fb      	strb	r3, [r7, #15]
	}


	return RetVal;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <GenerateKeyLevel3>:
** Parameter                : Seed: Pointer to Seed
                            : Key : Pointer to Key
** Return value             : None
***************************************************************************************************/
static uint8_t GenerateKeyLevel3(const uint8_t *Key,uint16_t Keylength)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	807b      	strh	r3, [r7, #2]
	uint8_t Valdkey_stat;
	uint8_t RetVal;
    /* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002c8e:	f7fe fd26 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10f      	bne.n	8002cb8 <GenerateKeyLevel3+0x36>
	{
		Valdkey_stat = HAL_GenKeyLevel3(Key, Keylength);
 8002c98:	887b      	ldrh	r3, [r7, #2]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f909 	bl	8002eb4 <HAL_GenKeyLevel3>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	73bb      	strb	r3, [r7, #14]

		if (Valdkey_stat == ISOUDS_TRUE)
 8002ca6:	7bbb      	ldrb	r3, [r7, #14]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d102      	bne.n	8002cb2 <GenerateKeyLevel3+0x30>
		{
			RetVal = ISOUDS_POSRES;
 8002cac:	2300      	movs	r3, #0
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	e004      	b.n	8002cbc <GenerateKeyLevel3+0x3a>
		}
		else
		{
			RetVal = ISOUDS_IK;
 8002cb2:	2335      	movs	r3, #53	; 0x35
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e001      	b.n	8002cbc <GenerateKeyLevel3+0x3a>
		}
	}
	else
	{
		/* NRC - conditions not correct */
		RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002cb8:	2388      	movs	r3, #136	; 0x88
 8002cba:	73fb      	strb	r3, [r7, #15]
	}
    /* User Defined Code end */
	return RetVal;
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <GetSeedLevel5>:
** Parameter 			  	: SeedGentd: Pointer to Seed

** Return value             : None
***************************************************************************************************/
static uint8_t GetSeedLevel5( uint8_t *SeedGentd)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = ISOUDS_POSRES;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73fb      	strb	r3, [r7, #15]

	/* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002cd2:	f7fe fd04 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d103      	bne.n	8002ce4 <GetSeedLevel5+0x1e>
	{
		HAL_GenSeedLevel5(SeedGentd);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f91d 	bl	8002f1c <HAL_GenSeedLevel5>
 8002ce2:	e001      	b.n	8002ce8 <GetSeedLevel5+0x22>
	}
	else
	{
		/* NRC - conditions not correct */
	    RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002ce4:	2388      	movs	r3, #136	; 0x88
 8002ce6:	73fb      	strb	r3, [r7, #15]
	}


	return RetVal;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <GenerateKeyLevel5>:
** Parameter                : Seed: Pointer to Seed
                            : Key : Pointer to Key
** Return value             : None
***************************************************************************************************/
static uint8_t GenerateKeyLevel5(const uint8_t *Key,uint16_t Keylength)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	807b      	strh	r3, [r7, #2]
	uint8_t Valdkey_stat;
	uint8_t RetVal;
    /* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002cfe:	f7fe fcee 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d10f      	bne.n	8002d28 <GenerateKeyLevel5+0x36>
	{
		Valdkey_stat = HAL_GenKeyLevel5(Key, Keylength);
 8002d08:	887b      	ldrh	r3, [r7, #2]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f933 	bl	8002f78 <HAL_GenKeyLevel5>
 8002d12:	4603      	mov	r3, r0
 8002d14:	73bb      	strb	r3, [r7, #14]

		if (Valdkey_stat == ISOUDS_TRUE)
 8002d16:	7bbb      	ldrb	r3, [r7, #14]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d102      	bne.n	8002d22 <GenerateKeyLevel5+0x30>
		{
			RetVal = ISOUDS_POSRES;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	e004      	b.n	8002d2c <GenerateKeyLevel5+0x3a>
		}
		else
		{
			RetVal = ISOUDS_IK;
 8002d22:	2335      	movs	r3, #53	; 0x35
 8002d24:	73fb      	strb	r3, [r7, #15]
 8002d26:	e001      	b.n	8002d2c <GenerateKeyLevel5+0x3a>
		}
	}
	else
	{
		/* NRC - conditions not correct */
		RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002d28:	2388      	movs	r3, #136	; 0x88
 8002d2a:	73fb      	strb	r3, [r7, #15]
	}
    /* User Defined Code end */
	return RetVal;
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <GetSeedLevel7>:
** Parameter 			  	: SeedGentd: Pointer to Seed

** Return value             : None
***************************************************************************************************/
static uint8_t GetSeedLevel7( uint8_t *SeedGentd)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = ISOUDS_POSRES;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	73fb      	strb	r3, [r7, #15]

	/* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002d42:	f7fe fccc 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d103      	bne.n	8002d54 <GetSeedLevel7+0x1e>
	{
		HAL_GenSeedLevel7(SeedGentd);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f941 	bl	8002fd4 <HAL_GenSeedLevel7>
 8002d52:	e001      	b.n	8002d58 <GetSeedLevel7+0x22>
	}
	else
	{
		/* NRC - conditions not correct */
	    RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002d54:	2388      	movs	r3, #136	; 0x88
 8002d56:	73fb      	strb	r3, [r7, #15]
	}


	return RetVal;
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <GenerateKeyLevel7>:
** Parameter                : Seed: Pointer to Seed
                            : Key : Pointer to Key
** Return value             : None
***************************************************************************************************/
static uint8_t GenerateKeyLevel7(const uint8_t *Key,uint16_t Keylength)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	807b      	strh	r3, [r7, #2]
	uint8_t Valdkey_stat;
	uint8_t RetVal;
    /* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002d6e:	f7fe fcb6 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d10f      	bne.n	8002d98 <GenerateKeyLevel7+0x36>
	{
		Valdkey_stat = HAL_GenKeyLevel7(Key, Keylength);
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f953 	bl	8003028 <HAL_GenKeyLevel7>
 8002d82:	4603      	mov	r3, r0
 8002d84:	73bb      	strb	r3, [r7, #14]

		if (Valdkey_stat == ISOUDS_TRUE)
 8002d86:	7bbb      	ldrb	r3, [r7, #14]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d102      	bne.n	8002d92 <GenerateKeyLevel7+0x30>
		{
			RetVal = ISOUDS_POSRES;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	73fb      	strb	r3, [r7, #15]
 8002d90:	e004      	b.n	8002d9c <GenerateKeyLevel7+0x3a>
		}
		else
		{
			RetVal = ISOUDS_IK;
 8002d92:	2335      	movs	r3, #53	; 0x35
 8002d94:	73fb      	strb	r3, [r7, #15]
 8002d96:	e001      	b.n	8002d9c <GenerateKeyLevel7+0x3a>
		}
	}
	else
	{
		/* NRC - conditions not correct */
		RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002d98:	2388      	movs	r3, #136	; 0x88
 8002d9a:	73fb      	strb	r3, [r7, #15]
	}
    /* User Defined Code end */
	return RetVal;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_GenSeedLevel1>:
** Parameter                : None

** Return value             : Seed value
***************************************************************************************************/
void HAL_GenSeedLevel1( uint8_t *SeedGentd)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
	/*User specific implementation*/
	uint8_t seed[8] = {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88};
 8002db0:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <HAL_GenSeedLevel1+0x54>)
 8002db2:	f107 0308 	add.w	r3, r7, #8
 8002db6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dba:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t *PtrToGenSeed  = NULL_PTR;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
	uint8_t Idx;

	/* Compute the seed only if ECU lock status is FALSE, otherwise seed = 0 */ 
	if(ISOUDS_FALSE == ISOUDS_GetSASt())  
 8002dc2:	f009 fe59 	bl	800ca78 <ISOUDS_GetSASt>
	{
		/* do nothing */
	}
	
	/* User Defined Code end */
	PtrToGenSeed = (uint8_t *)&seed;
 8002dc6:	f107 0308 	add.w	r3, r7, #8
 8002dca:	613b      	str	r3, [r7, #16]

	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 8002dcc:	2300      	movs	r3, #0
 8002dce:	75fb      	strb	r3, [r7, #23]
 8002dd0:	e00a      	b.n	8002de8 <HAL_GenSeedLevel1+0x40>
	{
		SeedGentd[Idx] = PtrToGenSeed[Idx];
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	441a      	add	r2, r3
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	440b      	add	r3, r1
 8002dde:	7812      	ldrb	r2, [r2, #0]
 8002de0:	701a      	strb	r2, [r3, #0]
	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	3301      	adds	r3, #1
 8002de6:	75fb      	strb	r3, [r7, #23]
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_GenSeedLevel1+0x58>)
 8002dea:	789b      	ldrb	r3, [r3, #2]
 8002dec:	7dfa      	ldrb	r2, [r7, #23]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d3ef      	bcc.n	8002dd2 <HAL_GenSeedLevel1+0x2a>
	}

}
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	0800fee0 	.word	0x0800fee0
 8002e00:	08010a18 	.word	0x08010a18

08002e04 <HAL_GenKeyLevel1>:
** Parameter                : None

** Return value             : Key value
***************************************************************************************************/
uint8_t HAL_GenKeyLevel1(const uint8_t *Key,uint16_t Keylength)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	807b      	strh	r3, [r7, #2]
	uint8_t RetVal = ISOUDS_TRUE;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
	uint8_t Indx;
	/* seed length in bytes */
	uint8_t KeyL1[4] = {0x01,0x02,0x03,0x04};
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_GenKeyLevel1+0x58>)
 8002e16:	60bb      	str	r3, [r7, #8]
	/* Add security Logic Here */

	/* The final remainder is the key */


	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73bb      	strb	r3, [r7, #14]
 8002e1c:	e012      	b.n	8002e44 <HAL_GenKeyLevel1+0x40>
	{
		if (KeyL1[(Keylength - ISOUDS_ONE) - Indx] != Key[Indx])
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	1e5a      	subs	r2, r3, #1
 8002e22:	7bbb      	ldrb	r3, [r7, #14]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	3310      	adds	r3, #16
 8002e28:	443b      	add	r3, r7
 8002e2a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002e2e:	7bbb      	ldrb	r3, [r7, #14]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	440b      	add	r3, r1
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d001      	beq.n	8002e3e <HAL_GenKeyLevel1+0x3a>
		{
			RetVal = ISOUDS_FALSE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 8002e3e:	7bbb      	ldrb	r3, [r7, #14]
 8002e40:	3301      	adds	r3, #1
 8002e42:	73bb      	strb	r3, [r7, #14]
 8002e44:	7bbb      	ldrb	r3, [r7, #14]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	887a      	ldrh	r2, [r7, #2]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d8e7      	bhi.n	8002e1e <HAL_GenKeyLevel1+0x1a>
		}
	}

	return RetVal;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	04030201 	.word	0x04030201

08002e60 <HAL_GenSeedLevel3>:
** Parameter                : None

** Return value             : Seed value
***************************************************************************************************/
void HAL_GenSeedLevel3( uint8_t *SeedGentd)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	/*User specific implementation*/
	uint8_t seed[8] = {0, };
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
	uint8_t *PtrToGenSeed  = NULL_PTR;
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]
#if (SYMC_SECURITY == 1)
	SYMC_result_e lRet = SYMC_E_ERROR;
#endif

	/* Compute the seed only if ECU lock status is FALSE, otherwise seed = 0 */
	if(ISOUDS_FALSE == ISOUDS_GetSASt())
 8002e74:	f009 fe00 	bl	800ca78 <ISOUDS_GetSASt>
		/* do nothing */
	}


	/* User Defined Code end */
	PtrToGenSeed = (uint8_t *)&seed;
 8002e78:	f107 0308 	add.w	r3, r7, #8
 8002e7c:	613b      	str	r3, [r7, #16]

	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]
 8002e82:	e00a      	b.n	8002e9a <HAL_GenSeedLevel3+0x3a>
	{
		SeedGentd[Idx] = PtrToGenSeed[Idx];
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	441a      	add	r2, r3
 8002e8a:	7dfb      	ldrb	r3, [r7, #23]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	440b      	add	r3, r1
 8002e90:	7812      	ldrb	r2, [r2, #0]
 8002e92:	701a      	strb	r2, [r3, #0]
	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	3301      	adds	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_GenSeedLevel3+0x50>)
 8002e9c:	789b      	ldrb	r3, [r3, #2]
 8002e9e:	7dfa      	ldrb	r2, [r7, #23]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d3ef      	bcc.n	8002e84 <HAL_GenSeedLevel3+0x24>
	}

}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	08010a18 	.word	0x08010a18

08002eb4 <HAL_GenKeyLevel3>:
** Parameter                : None

** Return value             : Key value
***************************************************************************************************/
uint8_t HAL_GenKeyLevel3(const uint8_t *Key,uint16_t Keylength)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
	uint8_t RetVal = ISOUDS_TRUE;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	75fb      	strb	r3, [r7, #23]
		RetVal = ISOUDS_FALSE;
	}
#else
	uint8_t Indx;
	/* seed length in bytes */
	uint8_t KeyL1[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
 8002ec4:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <HAL_GenKeyLevel3+0x64>)
 8002ec6:	f107 030c 	add.w	r3, r7, #12
 8002eca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ece:	e883 0003 	stmia.w	r3, {r0, r1}
	/* Add security Logic Here */

	/* The final remainder is the key */


	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75bb      	strb	r3, [r7, #22]
 8002ed6:	e012      	b.n	8002efe <HAL_GenKeyLevel3+0x4a>
	{
		if (KeyL1[(Keylength - ISOUDS_ONE) - Indx] != Key[Indx])
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	1e5a      	subs	r2, r3, #1
 8002edc:	7dbb      	ldrb	r3, [r7, #22]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	3318      	adds	r3, #24
 8002ee2:	443b      	add	r3, r7
 8002ee4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002ee8:	7dbb      	ldrb	r3, [r7, #22]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	440b      	add	r3, r1
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_GenKeyLevel3+0x44>
		{
			RetVal = ISOUDS_FALSE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	75fb      	strb	r3, [r7, #23]
	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 8002ef8:	7dbb      	ldrb	r3, [r7, #22]
 8002efa:	3301      	adds	r3, #1
 8002efc:	75bb      	strb	r3, [r7, #22]
 8002efe:	7dbb      	ldrb	r3, [r7, #22]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	887a      	ldrh	r2, [r7, #2]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d8e7      	bhi.n	8002ed8 <HAL_GenKeyLevel3+0x24>
		}
	}
#endif
	return RetVal;
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	0800fee8 	.word	0x0800fee8

08002f1c <HAL_GenSeedLevel5>:
** Parameter                : None

** Return value             : Seed value
***************************************************************************************************/
void HAL_GenSeedLevel5( uint8_t *SeedGentd)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	/*User specific implementation*/
	uint8_t seed[8] = {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88};
 8002f24:	4a12      	ldr	r2, [pc, #72]	; (8002f70 <HAL_GenSeedLevel5+0x54>)
 8002f26:	f107 0308 	add.w	r3, r7, #8
 8002f2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f2e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t *PtrToGenSeed  = NULL_PTR;
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
	uint8_t Idx;

	/* Compute the seed only if ECU lock status is FALSE, otherwise seed = 0 */
	if(ISOUDS_FALSE == ISOUDS_GetSASt())
 8002f36:	f009 fd9f 	bl	800ca78 <ISOUDS_GetSASt>
		/* do nothing */
	}


	/* User Defined Code end */
	PtrToGenSeed = (uint8_t *)&seed;
 8002f3a:	f107 0308 	add.w	r3, r7, #8
 8002f3e:	613b      	str	r3, [r7, #16]

	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 8002f40:	2300      	movs	r3, #0
 8002f42:	75fb      	strb	r3, [r7, #23]
 8002f44:	e00a      	b.n	8002f5c <HAL_GenSeedLevel5+0x40>
	{
		SeedGentd[Idx] = PtrToGenSeed[Idx];
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	441a      	add	r2, r3
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	440b      	add	r3, r1
 8002f52:	7812      	ldrb	r2, [r2, #0]
 8002f54:	701a      	strb	r2, [r3, #0]
	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	75fb      	strb	r3, [r7, #23]
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_GenSeedLevel5+0x58>)
 8002f5e:	789b      	ldrb	r3, [r3, #2]
 8002f60:	7dfa      	ldrb	r2, [r7, #23]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d3ef      	bcc.n	8002f46 <HAL_GenSeedLevel5+0x2a>
	}

}
 8002f66:	bf00      	nop
 8002f68:	bf00      	nop
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	0800fee0 	.word	0x0800fee0
 8002f74:	08010a18 	.word	0x08010a18

08002f78 <HAL_GenKeyLevel5>:
** Parameter                : None

** Return value             : Key value
***************************************************************************************************/
uint8_t HAL_GenKeyLevel5(const uint8_t *Key,uint16_t Keylength)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
	uint8_t RetVal = ISOUDS_TRUE;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
	uint8_t Indx;
	/* seed length in bytes */
	uint8_t KeyL1[4] = {0x01,0x02,0x03,0x04};
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <HAL_GenKeyLevel5+0x58>)
 8002f8a:	60bb      	str	r3, [r7, #8]
	/* Add security Logic Here */

	/* The final remainder is the key */


	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73bb      	strb	r3, [r7, #14]
 8002f90:	e012      	b.n	8002fb8 <HAL_GenKeyLevel5+0x40>
	{
		if (KeyL1[(Keylength - ISOUDS_ONE) - Indx] != Key[Indx])
 8002f92:	887b      	ldrh	r3, [r7, #2]
 8002f94:	1e5a      	subs	r2, r3, #1
 8002f96:	7bbb      	ldrb	r3, [r7, #14]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	3310      	adds	r3, #16
 8002f9c:	443b      	add	r3, r7
 8002f9e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002fa2:	7bbb      	ldrb	r3, [r7, #14]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	440b      	add	r3, r1
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d001      	beq.n	8002fb2 <HAL_GenKeyLevel5+0x3a>
		{
			RetVal = ISOUDS_FALSE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73fb      	strb	r3, [r7, #15]
	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 8002fb2:	7bbb      	ldrb	r3, [r7, #14]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	73bb      	strb	r3, [r7, #14]
 8002fb8:	7bbb      	ldrb	r3, [r7, #14]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	887a      	ldrh	r2, [r7, #2]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d8e7      	bhi.n	8002f92 <HAL_GenKeyLevel5+0x1a>
		}
	}

	return RetVal;
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	04030201 	.word	0x04030201

08002fd4 <HAL_GenSeedLevel7>:
** Parameter                : None

** Return value             : Seed value
***************************************************************************************************/
void HAL_GenSeedLevel7( uint8_t *SeedGentd)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
	/*User specific implementation*/
	uint8_t seed[8] ={0, };
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
	uint8_t *PtrToGenSeed  = NULL_PTR;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
#if (SYMC_SECURITY == 1)
	SYMC_result_e lRet = SYMC_E_ERROR;
#endif

	/* Compute the seed only if ECU lock status is FALSE, otherwise seed = 0 */
	if(ISOUDS_FALSE == ISOUDS_GetSASt())
 8002fe8:	f009 fd46 	bl	800ca78 <ISOUDS_GetSASt>
		/* do nothing */
	}


	/* User Defined Code end */
	PtrToGenSeed = (uint8_t *)&seed;
 8002fec:	f107 0308 	add.w	r3, r7, #8
 8002ff0:	613b      	str	r3, [r7, #16]

	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	75fb      	strb	r3, [r7, #23]
 8002ff6:	e00a      	b.n	800300e <HAL_GenSeedLevel7+0x3a>
	{
		SeedGentd[Idx] = PtrToGenSeed[Idx];
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	441a      	add	r2, r3
 8002ffe:	7dfb      	ldrb	r3, [r7, #23]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	440b      	add	r3, r1
 8003004:	7812      	ldrb	r2, [r2, #0]
 8003006:	701a      	strb	r2, [r3, #0]
	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 8003008:	7dfb      	ldrb	r3, [r7, #23]
 800300a:	3301      	adds	r3, #1
 800300c:	75fb      	strb	r3, [r7, #23]
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_GenSeedLevel7+0x50>)
 8003010:	789b      	ldrb	r3, [r3, #2]
 8003012:	7dfa      	ldrb	r2, [r7, #23]
 8003014:	429a      	cmp	r2, r3
 8003016:	d3ef      	bcc.n	8002ff8 <HAL_GenSeedLevel7+0x24>
	}

}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	08010a18 	.word	0x08010a18

08003028 <HAL_GenKeyLevel7>:
** Parameter                : None

** Return value             : Key value
***************************************************************************************************/
uint8_t HAL_GenKeyLevel7(const uint8_t *Key,uint16_t Keylength)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	807b      	strh	r3, [r7, #2]
	uint8_t RetVal = ISOUDS_TRUE;
 8003034:	2301      	movs	r3, #1
 8003036:	75fb      	strb	r3, [r7, #23]
		RetVal = ISOUDS_FALSE;
	}
#else
	uint8_t Indx;
	/* seed length in bytes */
	uint8_t KeyL1[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
 8003038:	4a14      	ldr	r2, [pc, #80]	; (800308c <HAL_GenKeyLevel7+0x64>)
 800303a:	f107 030c 	add.w	r3, r7, #12
 800303e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003042:	e883 0003 	stmia.w	r3, {r0, r1}
	/* Add security Logic Here */

	/* The final remainder is the key */


	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 8003046:	2300      	movs	r3, #0
 8003048:	75bb      	strb	r3, [r7, #22]
 800304a:	e012      	b.n	8003072 <HAL_GenKeyLevel7+0x4a>
	{
		if (KeyL1[(Keylength - ISOUDS_ONE) - Indx] != Key[Indx])
 800304c:	887b      	ldrh	r3, [r7, #2]
 800304e:	1e5a      	subs	r2, r3, #1
 8003050:	7dbb      	ldrb	r3, [r7, #22]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	3318      	adds	r3, #24
 8003056:	443b      	add	r3, r7
 8003058:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800305c:	7dbb      	ldrb	r3, [r7, #22]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	440b      	add	r3, r1
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_GenKeyLevel7+0x44>
		{
			RetVal = ISOUDS_FALSE;
 8003068:	2300      	movs	r3, #0
 800306a:	75fb      	strb	r3, [r7, #23]
	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 800306c:	7dbb      	ldrb	r3, [r7, #22]
 800306e:	3301      	adds	r3, #1
 8003070:	75bb      	strb	r3, [r7, #22]
 8003072:	7dbb      	ldrb	r3, [r7, #22]
 8003074:	b29b      	uxth	r3, r3
 8003076:	887a      	ldrh	r2, [r7, #2]
 8003078:	429a      	cmp	r2, r3
 800307a:	d8e7      	bhi.n	800304c <HAL_GenKeyLevel7+0x24>
		}
	}
#endif
	return RetVal; 
 800307c:	7dfb      	ldrb	r3, [r7, #23]
}
 800307e:	4618      	mov	r0, r3
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	0800fee8 	.word	0x0800fee8

08003090 <ISOUDS_GetSAAttempCount>:
** Parameter index :  None
** Return value: Attemp count
** Remarks:  None
*******************************************************************************/
uint8_t ISOUDS_GetSAAttempCount(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
	{
		/* Do nothing */
	}
#endif
	/* Add logic to read from NVM */
	return ISOUDS_AttempCntFrmNVM;
 8003094:	4b03      	ldr	r3, [pc, #12]	; (80030a4 <ISOUDS_GetSAAttempCount+0x14>)
 8003096:	781b      	ldrb	r3, [r3, #0]
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	2400149c 	.word	0x2400149c

080030a8 <ISOUDS_SetSAAttempCount>:
** Parameter index :  Attemp count
** Return value: None
** Remarks:  None
*******************************************************************************/
void ISOUDS_SetSAAttempCount(uint8_t ISOUDS_SACNT)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* Do nothing */
	}
#endif
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <ISOUDS_Get_StrtDiagSessCfgMaxSub>:
** Return value             : retVal : Number of Subfunctions

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_StrtDiagSessCfgMaxSub(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0
	return ISOUDS_StrtDiagSessCfgMaxSubFun;
 80030c2:	2304      	movs	r3, #4
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <ISOUDS_StrDiagSessDefault_Cbk>:
** Return value             :  RespVal -> Returns the response for the service request

** Remarks                  : None
***************************************************************************************************/
static uint8_t ISOUDS_StrDiagSessDefault_Cbk (ISOUDS_ConfType *ISOUDSConfPtr)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
	uint8_t RespVal = ISOUDS_POSRES;
 80030d6:	2300      	movs	r3, #0
 80030d8:	73fb      	strb	r3, [r7, #15]

	if (NULL_PTR != ISOUDSConfPtr)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00c      	beq.n	80030fa <ISOUDS_StrDiagSessDefault_Cbk+0x2c>
	{
		if (ISOUDSConfPtr->srvSt == (uint8_t)ISOUDS_RXMSG)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d104      	bne.n	80030f2 <ISOUDS_StrDiagSessDefault_Cbk+0x24>
		{
			/* Manual code start */

			/* Initial Routine request handler */
			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessDefault_Cbk();
 80030e8:	f000 f85d 	bl	80031a6 <HAL_StrDiagSessDefault_Cbk>
 80030ec:	4603      	mov	r3, r0
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	e003      	b.n	80030fa <ISOUDS_StrDiagSessDefault_Cbk+0x2c>
			/* Manual code start */

			/* Pending response handler */

			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessDefault_Cbk();
 80030f2:	f000 f858 	bl	80031a6 <HAL_StrDiagSessDefault_Cbk>
 80030f6:	4603      	mov	r3, r0
 80030f8:	73fb      	strb	r3, [r7, #15]
	else
	{
		/* do nothing */
	}
	
	return RespVal;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <ISOUDS_StrDiagSessExtended_Cbk>:
** Return value             :  RespVal -> Returns the response for the service request

** Remarks                  : None
***************************************************************************************************/
static uint8_t ISOUDS_StrDiagSessExtended_Cbk (ISOUDS_ConfType *ISOUDSConfPtr)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	uint8_t RespVal = ISOUDS_POSRES;
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]

	if (NULL_PTR != ISOUDSConfPtr)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00c      	beq.n	8003130 <ISOUDS_StrDiagSessExtended_Cbk+0x2c>
	{
		if (ISOUDSConfPtr->srvSt == (uint8_t)ISOUDS_RXMSG)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d104      	bne.n	8003128 <ISOUDS_StrDiagSessExtended_Cbk+0x24>
		{
			/* Manual code start */
			/* Initial Routine request handler */
			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessExtended_Cbk();
 800311e:	f000 f84e 	bl	80031be <HAL_StrDiagSessExtended_Cbk>
 8003122:	4603      	mov	r3, r0
 8003124:	73fb      	strb	r3, [r7, #15]
 8003126:	e003      	b.n	8003130 <ISOUDS_StrDiagSessExtended_Cbk+0x2c>
			/* Manual code start */

			/* Pending response handler */

			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessExtended_Cbk();
 8003128:	f000 f849 	bl	80031be <HAL_StrDiagSessExtended_Cbk>
 800312c:	4603      	mov	r3, r0
 800312e:	73fb      	strb	r3, [r7, #15]
	else
	{
		/* do nothing */
	}

	return RespVal;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <ISOUDS_StrDiagSessProgramming_Cbk>:
** Return value             : RespVal -> Returns the response for the service request

** Remarks                  : None
***************************************************************************************************/
static uint8_t ISOUDS_StrDiagSessProgramming_Cbk (ISOUDS_ConfType *ISOUDSConfPtr)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
	uint8_t RespVal = ISOUDS_POSRES;
 8003142:	2300      	movs	r3, #0
 8003144:	73fb      	strb	r3, [r7, #15]

	if (NULL_PTR != ISOUDSConfPtr)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00c      	beq.n	8003166 <ISOUDS_StrDiagSessProgramming_Cbk+0x2c>
	{
		if (ISOUDSConfPtr->srvSt == (uint8_t)ISOUDS_RXMSG)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d104      	bne.n	800315e <ISOUDS_StrDiagSessProgramming_Cbk+0x24>
		{
			/* Manual code start */

			/* Initial Routine request handler */
			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessProgramming_Cbk();
 8003154:	f000 f840 	bl	80031d8 <HAL_StrDiagSessProgramming_Cbk>
 8003158:	4603      	mov	r3, r0
 800315a:	73fb      	strb	r3, [r7, #15]
 800315c:	e003      	b.n	8003166 <ISOUDS_StrDiagSessProgramming_Cbk+0x2c>
			/* Manual code start */

			/* Pending response handler */

			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessProgramming_Cbk();
 800315e:	f000 f83b 	bl	80031d8 <HAL_StrDiagSessProgramming_Cbk>
 8003162:	4603      	mov	r3, r0
 8003164:	73fb      	strb	r3, [r7, #15]
	else
	{
		/* do nothing */
	}

	return RespVal;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <ISOUDS_StrDiagSessSafety_Cbk>:
** Return value             :  RespVal -> Returns the response for the service request

** Remarks                  : None
***************************************************************************************************/
static uint8_t ISOUDS_StrDiagSessSafety_Cbk (ISOUDS_ConfType *ISOUDSConfPtr)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	uint8_t RespVal = ISOUDS_POSRES;
 8003178:	2300      	movs	r3, #0
 800317a:	73fb      	strb	r3, [r7, #15]

	if (NULL_PTR != ISOUDSConfPtr)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00c      	beq.n	800319c <ISOUDS_StrDiagSessSafety_Cbk+0x2c>
	{
		if (ISOUDSConfPtr->srvSt == (uint8_t)ISOUDS_RXMSG)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d104      	bne.n	8003194 <ISOUDS_StrDiagSessSafety_Cbk+0x24>
		{
			/* Manual code start */
			/* Initial Routine request handler */
			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessSafety_Cbk();
 800318a:	f000 f843 	bl	8003214 <HAL_StrDiagSessSafety_Cbk>
 800318e:	4603      	mov	r3, r0
 8003190:	73fb      	strb	r3, [r7, #15]
 8003192:	e003      	b.n	800319c <ISOUDS_StrDiagSessSafety_Cbk+0x2c>
			/* Manual code start */

			/* Pending response handler */

			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessSafety_Cbk();
 8003194:	f000 f83e 	bl	8003214 <HAL_StrDiagSessSafety_Cbk>
 8003198:	4603      	mov	r3, r0
 800319a:	73fb      	strb	r3, [r7, #15]
	else
	{
		/* do nothing */
	}

	return RespVal;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_StrDiagSessDefault_Cbk>:
** Parameter                : None

** Return value             :  RespVal -> Returns the response for the service request
***************************************************************************************************/
uint8_t HAL_StrDiagSessDefault_Cbk(void)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
	uint8_t RespVal;

	RespVal = ISOUDS_POSRES;
 80031ac:	2300      	movs	r3, #0
 80031ae:	71fb      	strb	r3, [r7, #7]
	RespVal = ISOUDS_POSRES;
	return(RespVal);
	#endif
#ifdef ISOUDS_SA_SERV 
	/* Session change so lock the security*/
	ISOUDS_SAReset();
 80031b0:	f009 fd5a 	bl	800cc68 <ISOUDS_SAReset>
#endif 
	return RespVal;
 80031b4:	79fb      	ldrb	r3, [r7, #7]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_StrDiagSessExtended_Cbk>:
** Return value             :  RespVal -> Returns the response for the service request

** Remarks                  : None
***************************************************************************************************/
uint8_t HAL_StrDiagSessExtended_Cbk(void)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
	uint8_t RespVal;

	RespVal = ISOUDS_POSRES;
 80031c4:	2300      	movs	r3, #0
 80031c6:	71fb      	strb	r3, [r7, #7]
	SYMC_UpdateSeed();
#endif

#ifdef ISOUDS_SA_SERV 
	/* Session change so lock the security*/
	ISOUDS_SAReset();
 80031c8:	f009 fd4e 	bl	800cc68 <ISOUDS_SAReset>
#endif
	return RespVal;
 80031cc:	79fb      	ldrb	r3, [r7, #7]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_StrDiagSessProgramming_Cbk>:
** Return value             : RespVal -> Returns the response for the service request

** Remarks                  : None
***************************************************************************************************/
uint8_t HAL_StrDiagSessProgramming_Cbk(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
	uint8_t RespVal = ISOUDS_POSRES;
 80031de:	2300      	movs	r3, #0
 80031e0:	71fb      	strb	r3, [r7, #7]
	static uint8_t l_ReprgFlg = ISOUDS_FALSE;
	uint8_t data[1];

	#ifdef ISOUDS_SA_SERV 
	
	if (ISOUDS_FALSE ==	l_ReprgFlg)
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_StrDiagSessProgramming_Cbk+0x38>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_StrDiagSessProgramming_Cbk+0x26>
	{
#if (SYMC_SECURITY == 1)
		SYMC_UpdateSeed();
#endif
		/*Update EEPROM Flag to indicate ReProgramming request is active*/
		data[0] = REPRO_MODE;
 80031ea:	23b5      	movs	r3, #181	; 0xb5
 80031ec:	713b      	strb	r3, [r7, #4]

		//(void)writeEeprom(EEPROM_REPRO_ID, (uint16_t)ISOUDS_ONE, (uint32_t)data);
		/* update the flag*/
		ISOUDS_ReqECUReset();
 80031ee:	f007 feaf 	bl	800af50 <ISOUDS_ReqECUReset>
		RespVal = ISOUDS_RCRRP;
 80031f2:	2378      	movs	r3, #120	; 0x78
 80031f4:	71fb      	strb	r3, [r7, #7]
		l_ReprgFlg = ISOUDS_TRUE;
 80031f6:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_StrDiagSessProgramming_Cbk+0x38>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e001      	b.n	8003202 <HAL_StrDiagSessProgramming_Cbk+0x2a>
	}
	else
	{
		
		RespVal = ISOUDS_RCRRP;
 80031fe:	2378      	movs	r3, #120	; 0x78
 8003200:	71fb      	strb	r3, [r7, #7]
		
	}

					
	/* Session change so lock the security*/
	ISOUDS_SAReset();
 8003202:	f009 fd31 	bl	800cc68 <ISOUDS_SAReset>
	#endif
	return RespVal;
 8003206:	79fb      	ldrb	r3, [r7, #7]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	2400149d 	.word	0x2400149d

08003214 <HAL_StrDiagSessSafety_Cbk>:
** Return value             :  RespVal -> Returns the response for the service request

** Remarks                  : None
***************************************************************************************************/
uint8_t HAL_StrDiagSessSafety_Cbk(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
	uint8_t RespVal;

	RespVal = ISOUDS_POSRES;
 800321a:	2300      	movs	r3, #0
 800321c:	71fb      	strb	r3, [r7, #7]
	RespVal = ISOUDS_POSRES;
	return(RespVal);
	#endif
#ifdef ISOUDS_SA_SERV
	/* Session change so lock the security*/
	ISOUDS_SAReset();
 800321e:	f009 fd23 	bl	800cc68 <ISOUDS_SAReset>
#endif
	return RespVal;
 8003222:	79fb      	ldrb	r3, [r7, #7]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <ISOUDS_TransferDataDownloadReq>:
** Return value             : None

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_TransferDataDownloadReq (uint32_t ReqAddress, uint16_t ReqLength, const uint8_t *DownloadBuff)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	460b      	mov	r3, r1
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	817b      	strh	r3, [r7, #10]
    uint8_t flshresultstatus = ISOUDS_POSRES;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]

	/* Integrate Flash/NVM module to write the DownloadBuff to the Flash/NVM memory */

	/* Manual code ends */

	return flshresultstatus;
 800323e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003240:	4618      	mov	r0, r3
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <ISOUDS_GetTrnsfrReqstDwnldStat>:
** Return value             : flshresultstatus : Status of the download request(ISOUDS_POSRES/ISOUDS_GPF ... etc.,)

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_GetTrnsfrReqstDwnldStat (void)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
    uint8_t flshresultstatus = ISOUDS_POSRES;
 8003252:	2300      	movs	r3, #0
 8003254:	71fb      	strb	r3, [r7, #7]

	/* Integrate Flash/NVM module to get the status of the write requested in ISOUDS_TransferDataDownloadReq() */

	/* Manual code ends */

	return flshresultstatus;
 8003256:	79fb      	ldrb	r3, [r7, #7]
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <ISOUDS_TranferDataUploadRequest>:
** Return value             : flshresultstatus : Status of the download request(ISOUDS_POSRES/ISOUDS_GPF ... etc.,)

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_TranferDataUploadRequest (uint32_t ReqAddress, uint16_t ReqLength, const uint8_t *UploadBuff)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	460b      	mov	r3, r1
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	817b      	strh	r3, [r7, #10]
    uint8_t flshresultstatus = ISOUDS_POSRES;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]

	/* Integrate Flash/NVM module to read the Flash/NVM memory to UploadBuff */

	/* Manual code ends */

	return flshresultstatus;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
}
 8003278:	4618      	mov	r0, r3
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <ISOUDS_TrnsfrExitInd>:

** Return value             : RespRecLength : Length of the response record stored in the bufffer 
												transferRequestParameterRecord
***************************************************************************************************/
uint16_t ISOUDS_TrnsfrExitInd(const uint8_t *transferRequestParameterRecord, uint16_t RecordLength)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
	uint16_t RespRecLength = ISOUDS_ZERO;
 8003290:	2300      	movs	r3, #0
 8003292:	81fb      	strh	r3, [r7, #14]

	/* Implement the Parameter record handling */

	/* Manual code end */
	
	return RespRecLength;
 8003294:	89fb      	ldrh	r3, [r7, #14]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <ISOUDS_Get_WRCONFTABSIZE>:
** Return value             : retVal : Number of DIDs Supported

** Remarks                  : None
***************************************************************************************************/
uint16_t ISOUDS_Get_WRCONFTABSIZE(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0
	return ISOUDS_WRCONFTABSIZE;
 80032a6:	2304      	movs	r3, #4
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <ISOUDS_Write_SYMC_PartNoCbk>:
** Return value             : Positive or Negative Response value

** Remarks                  : None
***************************************************************************************************/
uint8_t  ISOUDS_Write_SYMC_PartNoCbk(uint8_t  DestBuff[], uint8_t  len)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b085      	sub	sp, #20
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	460b      	mov	r3, r1
 80032bc:	70fb      	strb	r3, [r7, #3]
	uint8_t RespVal ;
	(void)DestBuff;
	(void)len;

	/* update Negative Response */
	RespVal = ISOUDS_GPF;
 80032be:	2372      	movs	r3, #114	; 0x72
 80032c0:	73fb      	strb	r3, [r7, #15]

	/* update the retVal variable with respective response if required */

	return RespVal;
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <ISOUDS_Write_VehIdenNoCbk>:
** Return value             : Positive or Negative Response value

** Remarks                  : None
***************************************************************************************************/
uint8_t  ISOUDS_Write_VehIdenNoCbk(uint8_t  DestBuff[], uint8_t  len)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	70fb      	strb	r3, [r7, #3]
	uint8_t RespVal = ISOUDS_POSRES;
 80032dc:	2300      	movs	r3, #0
 80032de:	73fb      	strb	r3, [r7, #15]
		RespVal = ISOUDS_GPF;
	}
#endif
	/* update the retVal variable with respective response if required */

	return RespVal;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <ISOUDS_Write_EcuInfoCbk>:
** Return value             : Positive or Negative Response value

** Remarks                  : None
***************************************************************************************************/
uint8_t  ISOUDS_Write_EcuInfoCbk(uint8_t  DestBuff[], uint8_t  len)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	460b      	mov	r3, r1
 80032f8:	70fb      	strb	r3, [r7, #3]

	uint8_t RespVal = ISOUDS_POSRES;
 80032fa:	2300      	movs	r3, #0
 80032fc:	73fb      	strb	r3, [r7, #15]
		}
	}
#endif
	/* update the retVal variable with respective response if required */

	return RespVal;
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <ISOUDS_Write_QRCodeCbk>:
** Return value             : Positive or Negative Response value

** Remarks                  : None
***************************************************************************************************/
uint8_t  ISOUDS_Write_QRCodeCbk(uint8_t  DestBuff[], uint8_t  len)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	70fb      	strb	r3, [r7, #3]

	uint8_t RespVal = ISOUDS_GPF;
 8003318:	2372      	movs	r3, #114	; 0x72
 800331a:	73fb      	strb	r3, [r7, #15]
		}
	}
#endif
	/* update the retVal variable with respective response if required */

	return RespVal;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <ISOUDS_Get_WrtMemByAddMaxentries>:
** Return value             : retVal : Number of Entries Supported

** Remarks                  : None
***************************************************************************************************/
uint16_t ISOUDS_Get_WrtMemByAddMaxentries(void)
{
 800332a:	b480      	push	{r7}
 800332c:	af00      	add	r7, sp, #0
	return ISOUDS_WrtMemByAddMaxentries;
 800332e:	2301      	movs	r3, #1
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <ISOUDS_WrtAddLengthReqCbk>:
** Return value             : Positive or Negative Response value

** Remarks                  : None
***************************************************************************************************/
uint8_t  ISOUDS_WrtAddLengthReqCbk (uint32_t WrtAddress, uint32_t WrtLength, uint8_t *WrtAddL_dataBuff)
{
 800333a:	b480      	push	{r7}
 800333c:	b087      	sub	sp, #28
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
	/*User specific code*/
	#if 0
    DataBuff[0] = 0x00;
    WrtLength -=0x01;
	#endif
	retVal = (uint8_t)ISOUDS_POSRES;
 8003346:	2300      	movs	r3, #0
 8003348:	75fb      	strb	r3, [r7, #23]
	return retVal;
 800334a:	7dfb      	ldrb	r3, [r7, #23]
}
 800334c:	4618      	mov	r0, r3
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_FDCAN_RxFifo0Callback>:
			  HAL_Delay (1000);
	 }
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800335a:	b08b      	sub	sp, #44	; 0x2c
 800335c:	af06      	add	r7, sp, #24
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d07e      	beq.n	800346a <HAL_FDCAN_RxFifo0Callback+0x112>
  {

	  sprintf(buff,"\r\n CAN in RX data callback \r\n");
 800336c:	4941      	ldr	r1, [pc, #260]	; (8003474 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 800336e:	4842      	ldr	r0, [pc, #264]	; (8003478 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8003370:	f00c f8f8 	bl	800f564 <siprintf>
	   	HAL_UART_Transmit(&huart7, (uint8_t *) buff, sizeof(buff), 100);
 8003374:	2364      	movs	r3, #100	; 0x64
 8003376:	2264      	movs	r2, #100	; 0x64
 8003378:	493f      	ldr	r1, [pc, #252]	; (8003478 <HAL_FDCAN_RxFifo0Callback+0x120>)
 800337a:	4840      	ldr	r0, [pc, #256]	; (800347c <HAL_FDCAN_RxFifo0Callback+0x124>)
 800337c:	f005 fd10 	bl	8008da0 <HAL_UART_Transmit>
	    	memset(buff,0,sizeof(buff));
 8003380:	2264      	movs	r2, #100	; 0x64
 8003382:	2100      	movs	r1, #0
 8003384:	483c      	ldr	r0, [pc, #240]	; (8003478 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8003386:	f00c f90d 	bl	800f5a4 <memset>
    /* Retreive Rx messages from RX FIFO0 */

    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK)
 800338a:	4b3d      	ldr	r3, [pc, #244]	; (8003480 <HAL_FDCAN_RxFifo0Callback+0x128>)
 800338c:	4a3d      	ldr	r2, [pc, #244]	; (8003484 <HAL_FDCAN_RxFifo0Callback+0x12c>)
 800338e:	2140      	movs	r1, #64	; 0x40
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f001 f991 	bl	80046b8 <HAL_FDCAN_GetRxMessage>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_FDCAN_RxFifo0Callback+0x48>
    {
    /* Reception Error */
    Error_Handler();
 800339c:	f000 fad8 	bl	8003950 <Error_Handler>
    }
    ISOTP_RxMsgCbk(0x731,0x00, 0x08,RxData1);
 80033a0:	4b37      	ldr	r3, [pc, #220]	; (8003480 <HAL_FDCAN_RxFifo0Callback+0x128>)
 80033a2:	2208      	movs	r2, #8
 80033a4:	2100      	movs	r1, #0
 80033a6:	f240 7031 	movw	r0, #1841	; 0x731
 80033aa:	f00a ff5f 	bl	800e26c <ISOTP_RxMsgCbk>
    uint8_t St = ISOTP_GetStatus();
 80033ae:	f00b f965 	bl	800e67c <ISOTP_GetStatus>
 80033b2:	4603      	mov	r3, r0
 80033b4:	73fb      	strb	r3, [r7, #15]
    sprintf(buff,"\r\n ISOTP callbackdata %d \r\n", St);
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	461a      	mov	r2, r3
 80033ba:	4933      	ldr	r1, [pc, #204]	; (8003488 <HAL_FDCAN_RxFifo0Callback+0x130>)
 80033bc:	482e      	ldr	r0, [pc, #184]	; (8003478 <HAL_FDCAN_RxFifo0Callback+0x120>)
 80033be:	f00c f8d1 	bl	800f564 <siprintf>
    	    	memset(buff,0,sizeof(buff));
 80033c2:	2264      	movs	r2, #100	; 0x64
 80033c4:	2100      	movs	r1, #0
 80033c6:	482c      	ldr	r0, [pc, #176]	; (8003478 <HAL_FDCAN_RxFifo0Callback+0x120>)
 80033c8:	f00c f8ec 	bl	800f5a4 <memset>
     // Set up the response message header
     // You can customize this based on your needs
     TxResponseHeader.Identifier = 0x12;  // Set the identifier as needed
 80033cc:	4b2f      	ldr	r3, [pc, #188]	; (800348c <HAL_FDCAN_RxFifo0Callback+0x134>)
 80033ce:	2212      	movs	r2, #18
 80033d0:	601a      	str	r2, [r3, #0]
     TxResponseHeader.IdType = FDCAN_STANDARD_ID;
 80033d2:	4b2e      	ldr	r3, [pc, #184]	; (800348c <HAL_FDCAN_RxFifo0Callback+0x134>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	605a      	str	r2, [r3, #4]
     TxResponseHeader.TxFrameType = FDCAN_DATA_FRAME;
 80033d8:	4b2c      	ldr	r3, [pc, #176]	; (800348c <HAL_FDCAN_RxFifo0Callback+0x134>)
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
     TxResponseHeader.DataLength = FDCAN_DLC_BYTES_8;
 80033de:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_FDCAN_RxFifo0Callback+0x134>)
 80033e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033e4:	60da      	str	r2, [r3, #12]

      // Send the response
     if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxResponseHeader, TxResponseData) != HAL_OK)
 80033e6:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <HAL_FDCAN_RxFifo0Callback+0x138>)
 80033e8:	4928      	ldr	r1, [pc, #160]	; (800348c <HAL_FDCAN_RxFifo0Callback+0x134>)
 80033ea:	482a      	ldr	r0, [pc, #168]	; (8003494 <HAL_FDCAN_RxFifo0Callback+0x13c>)
 80033ec:	f001 f909 	bl	8004602 <HAL_FDCAN_AddMessageToTxFifoQ>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_FDCAN_RxFifo0Callback+0xa2>
     {
       // Transmission Error
       Error_Handler();
 80033f6:	f000 faab 	bl	8003950 <Error_Handler>
     }
    sprintf(buff,"\r\n CAN in RX data callback x %.2x %.2x %.2x %.2x %.2x %.2x %.2x %.2x  \r\n",RxData1[0],RxData1[1],RxData1[2],RxData1[3],RxData1[4],RxData1[5],RxData1[6],RxData1[7]);
 80033fa:	4b21      	ldr	r3, [pc, #132]	; (8003480 <HAL_FDCAN_RxFifo0Callback+0x128>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	461e      	mov	r6, r3
 8003400:	4b1f      	ldr	r3, [pc, #124]	; (8003480 <HAL_FDCAN_RxFifo0Callback+0x128>)
 8003402:	785b      	ldrb	r3, [r3, #1]
 8003404:	469c      	mov	ip, r3
 8003406:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <HAL_FDCAN_RxFifo0Callback+0x128>)
 8003408:	789b      	ldrb	r3, [r3, #2]
 800340a:	461a      	mov	r2, r3
 800340c:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <HAL_FDCAN_RxFifo0Callback+0x128>)
 800340e:	78db      	ldrb	r3, [r3, #3]
 8003410:	4619      	mov	r1, r3
 8003412:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <HAL_FDCAN_RxFifo0Callback+0x128>)
 8003414:	791b      	ldrb	r3, [r3, #4]
 8003416:	4618      	mov	r0, r3
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <HAL_FDCAN_RxFifo0Callback+0x128>)
 800341a:	795b      	ldrb	r3, [r3, #5]
 800341c:	461c      	mov	r4, r3
 800341e:	4b18      	ldr	r3, [pc, #96]	; (8003480 <HAL_FDCAN_RxFifo0Callback+0x128>)
 8003420:	799b      	ldrb	r3, [r3, #6]
 8003422:	461d      	mov	r5, r3
 8003424:	4b16      	ldr	r3, [pc, #88]	; (8003480 <HAL_FDCAN_RxFifo0Callback+0x128>)
 8003426:	79db      	ldrb	r3, [r3, #7]
 8003428:	9305      	str	r3, [sp, #20]
 800342a:	9504      	str	r5, [sp, #16]
 800342c:	9403      	str	r4, [sp, #12]
 800342e:	9002      	str	r0, [sp, #8]
 8003430:	9101      	str	r1, [sp, #4]
 8003432:	9200      	str	r2, [sp, #0]
 8003434:	4663      	mov	r3, ip
 8003436:	4632      	mov	r2, r6
 8003438:	4917      	ldr	r1, [pc, #92]	; (8003498 <HAL_FDCAN_RxFifo0Callback+0x140>)
 800343a:	480f      	ldr	r0, [pc, #60]	; (8003478 <HAL_FDCAN_RxFifo0Callback+0x120>)
 800343c:	f00c f892 	bl	800f564 <siprintf>
  	   	HAL_UART_Transmit(&huart7, (uint8_t *) buff, sizeof(buff), 100);
 8003440:	2364      	movs	r3, #100	; 0x64
 8003442:	2264      	movs	r2, #100	; 0x64
 8003444:	490c      	ldr	r1, [pc, #48]	; (8003478 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8003446:	480d      	ldr	r0, [pc, #52]	; (800347c <HAL_FDCAN_RxFifo0Callback+0x124>)
 8003448:	f005 fcaa 	bl	8008da0 <HAL_UART_Transmit>
  	    	memset(buff,0,sizeof(buff));
 800344c:	2264      	movs	r2, #100	; 0x64
 800344e:	2100      	movs	r1, #0
 8003450:	4809      	ldr	r0, [pc, #36]	; (8003478 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8003452:	f00c f8a7 	bl	800f5a4 <memset>

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8003456:	2200      	movs	r2, #0
 8003458:	2101      	movs	r1, #1
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f001 fa9a 	bl	8004994 <HAL_FDCAN_ActivateNotification>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_FDCAN_RxFifo0Callback+0x112>
    {
      /* Notification Error */
      Error_Handler();
 8003466:	f000 fa73 	bl	8003950 <Error_Handler>
    }
  }
}
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003472:	bf00      	nop
 8003474:	0800ff14 	.word	0x0800ff14
 8003478:	240014a0 	.word	0x240014a0
 800347c:	24001668 	.word	0x24001668
 8003480:	24001504 	.word	0x24001504
 8003484:	24001530 	.word	0x24001530
 8003488:	0800ff34 	.word	0x0800ff34
 800348c:	24001558 	.word	0x24001558
 8003490:	2400027c 	.word	0x2400027c
 8003494:	2400157c 	.word	0x2400157c
 8003498:	0800ff50 	.word	0x0800ff50

0800349c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	if (htim2->Instance == TIM2) {
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ac:	d104      	bne.n	80034b8 <HAL_TIM_PeriodElapsedCallback+0x1c>
		milliseconds ++;
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3301      	adds	r3, #1
 80034b4:	4a03      	ldr	r2, [pc, #12]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80034b6:	6013      	str	r3, [r2, #0]

	}
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	240016fc 	.word	0x240016fc

080034c8 <task1>:
void task1()
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
			ISOTP_Main();
 80034cc:	f00b f806 	bl	800e4dc <ISOTP_Main>
			ISOUDS_Main_Server();
 80034d0:	f007 fb66 	bl	800aba0 <ISOUDS_Main_Server>
//			can_Tx();
}
 80034d4:	bf00      	nop
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034dc:	f000 fc70 	bl	8003dc0 <HAL_Init>

  /* USER CODE BEGIN Init */
  ISOTP_Init();
 80034e0:	f00a fe94 	bl	800e20c <ISOTP_Init>
  ISOUDS_Server_Init();
 80034e4:	f007 fad6 	bl	800aa94 <ISOUDS_Server_Init>
  FCM_Init();
 80034e8:	f00b fc82 	bl	800edf0 <FCM_Init>

 /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034ec:	f000 f822 	bl	8003534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034f0:	f000 f9da 	bl	80038a8 <MX_GPIO_Init>
  MX_FDCAN3_Init();
 80034f4:	f000 f88e 	bl	8003614 <MX_FDCAN3_Init>
  MX_UART7_Init();
 80034f8:	f000 f98a 	bl	8003810 <MX_UART7_Init>
  MX_TIM2_Init();
 80034fc:	f000 f93a 	bl	8003774 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim2);
 8003500:	4809      	ldr	r0, [pc, #36]	; (8003528 <main+0x50>)
 8003502:	f004 ff39 	bl	8008378 <HAL_TIM_Base_Start_IT>
  while (1)
  {

    /* USER CODE END WHILE */

	  if(milliseconds %10 ==0)
 8003506:	4b09      	ldr	r3, [pc, #36]	; (800352c <main+0x54>)
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <main+0x58>)
 800350c:	fba3 2301 	umull	r2, r3, r3, r1
 8003510:	08da      	lsrs	r2, r3, #3
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	1aca      	subs	r2, r1, r3
 800351c:	2a00      	cmp	r2, #0
 800351e:	d1f2      	bne.n	8003506 <main+0x2e>
	    {
	  		  task1();
 8003520:	f7ff ffd2 	bl	80034c8 <task1>
	  if(milliseconds %10 ==0)
 8003524:	e7ef      	b.n	8003506 <main+0x2e>
 8003526:	bf00      	nop
 8003528:	2400161c 	.word	0x2400161c
 800352c:	240016fc 	.word	0x240016fc
 8003530:	cccccccd 	.word	0xcccccccd

08003534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b09c      	sub	sp, #112	; 0x70
 8003538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800353a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353e:	224c      	movs	r2, #76	; 0x4c
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f00c f82e 	bl	800f5a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003548:	1d3b      	adds	r3, r7, #4
 800354a:	2220      	movs	r2, #32
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f00c f828 	bl	800f5a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003554:	2002      	movs	r0, #2
 8003556:	f002 f955 	bl	8005804 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800355a:	2300      	movs	r3, #0
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4b2c      	ldr	r3, [pc, #176]	; (8003610 <SystemClock_Config+0xdc>)
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003566:	4a2a      	ldr	r2, [pc, #168]	; (8003610 <SystemClock_Config+0xdc>)
 8003568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800356c:	6193      	str	r3, [r2, #24]
 800356e:	4b28      	ldr	r3, [pc, #160]	; (8003610 <SystemClock_Config+0xdc>)
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800357a:	bf00      	nop
 800357c:	4b24      	ldr	r3, [pc, #144]	; (8003610 <SystemClock_Config+0xdc>)
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003588:	d1f8      	bne.n	800357c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800358a:	2302      	movs	r3, #2
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800358e:	2301      	movs	r3, #1
 8003590:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8003592:	2340      	movs	r3, #64	; 0x40
 8003594:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003596:	2302      	movs	r3, #2
 8003598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800359a:	2300      	movs	r3, #0
 800359c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800359e:	2304      	movs	r3, #4
 80035a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80035a2:	230c      	movs	r3, #12
 80035a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80035a6:	2302      	movs	r3, #2
 80035a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80035aa:	2304      	movs	r3, #4
 80035ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80035ae:	2302      	movs	r3, #2
 80035b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80035b2:	230c      	movs	r3, #12
 80035b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80035ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 f957 	bl	8005878 <HAL_RCC_OscConfig>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80035d0:	f000 f9be 	bl	8003950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035d4:	233f      	movs	r3, #63	; 0x3f
 80035d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80035d8:	2300      	movs	r3, #0
 80035da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80035e8:	2340      	movs	r3, #64	; 0x40
 80035ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80035f0:	2300      	movs	r3, #0
 80035f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80035f4:	1d3b      	adds	r3, r7, #4
 80035f6:	2101      	movs	r1, #1
 80035f8:	4618      	mov	r0, r3
 80035fa:	f002 fd17 	bl	800602c <HAL_RCC_ClockConfig>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003604:	f000 f9a4 	bl	8003950 <Error_Handler>
  }
}
 8003608:	bf00      	nop
 800360a:	3770      	adds	r7, #112	; 0x70
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	58024800 	.word	0x58024800

08003614 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800361a:	4b53      	ldr	r3, [pc, #332]	; (8003768 <MX_FDCAN3_Init+0x154>)
 800361c:	4a53      	ldr	r2, [pc, #332]	; (800376c <MX_FDCAN3_Init+0x158>)
 800361e:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003620:	4b51      	ldr	r3, [pc, #324]	; (8003768 <MX_FDCAN3_Init+0x154>)
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8003626:	4b50      	ldr	r3, [pc, #320]	; (8003768 <MX_FDCAN3_Init+0x154>)
 8003628:	2200      	movs	r2, #0
 800362a:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 800362c:	4b4e      	ldr	r3, [pc, #312]	; (8003768 <MX_FDCAN3_Init+0x154>)
 800362e:	2201      	movs	r2, #1
 8003630:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8003632:	4b4d      	ldr	r3, [pc, #308]	; (8003768 <MX_FDCAN3_Init+0x154>)
 8003634:	2200      	movs	r2, #0
 8003636:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = ENABLE;
 8003638:	4b4b      	ldr	r3, [pc, #300]	; (8003768 <MX_FDCAN3_Init+0x154>)
 800363a:	2201      	movs	r2, #1
 800363c:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 800363e:	4b4a      	ldr	r3, [pc, #296]	; (8003768 <MX_FDCAN3_Init+0x154>)
 8003640:	2201      	movs	r2, #1
 8003642:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 14;
 8003644:	4b48      	ldr	r3, [pc, #288]	; (8003768 <MX_FDCAN3_Init+0x154>)
 8003646:	220e      	movs	r2, #14
 8003648:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 85;
 800364a:	4b47      	ldr	r3, [pc, #284]	; (8003768 <MX_FDCAN3_Init+0x154>)
 800364c:	2255      	movs	r2, #85	; 0x55
 800364e:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 14;
 8003650:	4b45      	ldr	r3, [pc, #276]	; (8003768 <MX_FDCAN3_Init+0x154>)
 8003652:	220e      	movs	r2, #14
 8003654:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 4;
 8003656:	4b44      	ldr	r3, [pc, #272]	; (8003768 <MX_FDCAN3_Init+0x154>)
 8003658:	2204      	movs	r2, #4
 800365a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 12;
 800365c:	4b42      	ldr	r3, [pc, #264]	; (8003768 <MX_FDCAN3_Init+0x154>)
 800365e:	220c      	movs	r2, #12
 8003660:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 12;
 8003662:	4b41      	ldr	r3, [pc, #260]	; (8003768 <MX_FDCAN3_Init+0x154>)
 8003664:	220c      	movs	r2, #12
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 12;
 8003668:	4b3f      	ldr	r3, [pc, #252]	; (8003768 <MX_FDCAN3_Init+0x154>)
 800366a:	220c      	movs	r2, #12
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 800366e:	4b3e      	ldr	r3, [pc, #248]	; (8003768 <MX_FDCAN3_Init+0x154>)
 8003670:	2200      	movs	r2, #0
 8003672:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 8003674:	4b3c      	ldr	r3, [pc, #240]	; (8003768 <MX_FDCAN3_Init+0x154>)
 8003676:	2201      	movs	r2, #1
 8003678:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 800367a:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <MX_FDCAN3_Init+0x154>)
 800367c:	2200      	movs	r2, #0
 800367e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 1;
 8003680:	4b39      	ldr	r3, [pc, #228]	; (8003768 <MX_FDCAN3_Init+0x154>)
 8003682:	2201      	movs	r2, #1
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003686:	4b38      	ldr	r3, [pc, #224]	; (8003768 <MX_FDCAN3_Init+0x154>)
 8003688:	2204      	movs	r2, #4
 800368a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 800368c:	4b36      	ldr	r3, [pc, #216]	; (8003768 <MX_FDCAN3_Init+0x154>)
 800368e:	2200      	movs	r2, #0
 8003690:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003692:	4b35      	ldr	r3, [pc, #212]	; (8003768 <MX_FDCAN3_Init+0x154>)
 8003694:	2204      	movs	r2, #4
 8003696:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8003698:	4b33      	ldr	r3, [pc, #204]	; (8003768 <MX_FDCAN3_Init+0x154>)
 800369a:	2200      	movs	r2, #0
 800369c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800369e:	4b32      	ldr	r3, [pc, #200]	; (8003768 <MX_FDCAN3_Init+0x154>)
 80036a0:	2204      	movs	r2, #4
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80036a4:	4b30      	ldr	r3, [pc, #192]	; (8003768 <MX_FDCAN3_Init+0x154>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80036aa:	4b2f      	ldr	r3, [pc, #188]	; (8003768 <MX_FDCAN3_Init+0x154>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 1;
 80036b0:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <MX_FDCAN3_Init+0x154>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80036b6:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <MX_FDCAN3_Init+0x154>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80036bc:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <MX_FDCAN3_Init+0x154>)
 80036be:	2204      	movs	r2, #4
 80036c0:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80036c2:	4829      	ldr	r0, [pc, #164]	; (8003768 <MX_FDCAN3_Init+0x154>)
 80036c4:	f000 fd1e 	bl	8004104 <HAL_FDCAN_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 80036ce:	f000 f93f 	bl	8003950 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80036d2:	2300      	movs	r3, #0
 80036d4:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80036da:	2302      	movs	r3, #2
 80036dc:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80036de:	2301      	movs	r3, #1
 80036e0:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x22;
 80036e2:	2322      	movs	r3, #34	; 0x22
 80036e4:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x731;
 80036e6:	f240 7331 	movw	r3, #1841	; 0x731
 80036ea:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 80036f0:	463b      	mov	r3, r7
 80036f2:	4619      	mov	r1, r3
 80036f4:	481c      	ldr	r0, [pc, #112]	; (8003768 <MX_FDCAN3_Init+0x154>)
 80036f6:	f000 fee3 	bl	80044c0 <HAL_FDCAN_ConfigFilter>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <MX_FDCAN3_Init+0xf0>
  {
    /* Filter configuration Error */
    Error_Handler();
 8003700:	f000 f926 	bl	8003950 <Error_Handler>
  }
  if(HAL_FDCAN_Start(&hfdcan3)!= HAL_OK)
 8003704:	4818      	ldr	r0, [pc, #96]	; (8003768 <MX_FDCAN3_Init+0x154>)
 8003706:	f000 ff51 	bl	80045ac <HAL_FDCAN_Start>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <MX_FDCAN3_Init+0x100>
  {
   Error_Handler();
 8003710:	f000 f91e 	bl	8003950 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8003714:	2200      	movs	r2, #0
 8003716:	2101      	movs	r1, #1
 8003718:	4813      	ldr	r0, [pc, #76]	; (8003768 <MX_FDCAN3_Init+0x154>)
 800371a:	f001 f93b 	bl	8004994 <HAL_FDCAN_ActivateNotification>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <MX_FDCAN3_Init+0x114>
   {
     /* Notification Error */
     Error_Handler();
 8003724:	f000 f914 	bl	8003950 <Error_Handler>
   }


  // Configure TX Header for FDCAN1
  TxHeader1.Identifier = 0x11;
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <MX_FDCAN3_Init+0x15c>)
 800372a:	2211      	movs	r2, #17
 800372c:	601a      	str	r2, [r3, #0]
  TxHeader1.IdType = FDCAN_STANDARD_ID;
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <MX_FDCAN3_Init+0x15c>)
 8003730:	2200      	movs	r2, #0
 8003732:	605a      	str	r2, [r3, #4]
  TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <MX_FDCAN3_Init+0x15c>)
 8003736:	2200      	movs	r2, #0
 8003738:	609a      	str	r2, [r3, #8]
  TxHeader1.DataLength = FDCAN_DLC_BYTES_8;
 800373a:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <MX_FDCAN3_Init+0x15c>)
 800373c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003740:	60da      	str	r2, [r3, #12]
  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <MX_FDCAN3_Init+0x15c>)
 8003744:	2200      	movs	r2, #0
 8003746:	611a      	str	r2, [r3, #16]
  TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <MX_FDCAN3_Init+0x15c>)
 800374a:	2200      	movs	r2, #0
 800374c:	615a      	str	r2, [r3, #20]
  TxHeader1.FDFormat = FDCAN_CLASSIC_CAN;
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <MX_FDCAN3_Init+0x15c>)
 8003750:	2200      	movs	r2, #0
 8003752:	619a      	str	r2, [r3, #24]
  TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <MX_FDCAN3_Init+0x15c>)
 8003756:	2200      	movs	r2, #0
 8003758:	61da      	str	r2, [r3, #28]
  TxHeader1.MessageMarker = 0;
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <MX_FDCAN3_Init+0x15c>)
 800375c:	2200      	movs	r2, #0
 800375e:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN3_Init 2 */

}
 8003760:	bf00      	nop
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	2400157c 	.word	0x2400157c
 800376c:	4000d400 	.word	0x4000d400
 8003770:	2400150c 	.word	0x2400150c

08003774 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800377a:	f107 0310 	add.w	r3, r7, #16
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	605a      	str	r2, [r3, #4]
 8003784:	609a      	str	r2, [r3, #8]
 8003786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003788:	1d3b      	adds	r3, r7, #4
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003792:	4b1e      	ldr	r3, [pc, #120]	; (800380c <MX_TIM2_Init+0x98>)
 8003794:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003798:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 800379a:	4b1c      	ldr	r3, [pc, #112]	; (800380c <MX_TIM2_Init+0x98>)
 800379c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037a2:	4b1a      	ldr	r3, [pc, #104]	; (800380c <MX_TIM2_Init+0x98>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400;
 80037a8:	4b18      	ldr	r3, [pc, #96]	; (800380c <MX_TIM2_Init+0x98>)
 80037aa:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80037ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037b0:	4b16      	ldr	r3, [pc, #88]	; (800380c <MX_TIM2_Init+0x98>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037b6:	4b15      	ldr	r3, [pc, #84]	; (800380c <MX_TIM2_Init+0x98>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037bc:	4813      	ldr	r0, [pc, #76]	; (800380c <MX_TIM2_Init+0x98>)
 80037be:	f004 fd83 	bl	80082c8 <HAL_TIM_Base_Init>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80037c8:	f000 f8c2 	bl	8003950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037d2:	f107 0310 	add.w	r3, r7, #16
 80037d6:	4619      	mov	r1, r3
 80037d8:	480c      	ldr	r0, [pc, #48]	; (800380c <MX_TIM2_Init+0x98>)
 80037da:	f004 ff73 	bl	80086c4 <HAL_TIM_ConfigClockSource>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80037e4:	f000 f8b4 	bl	8003950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037e8:	2300      	movs	r3, #0
 80037ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	4619      	mov	r1, r3
 80037f4:	4805      	ldr	r0, [pc, #20]	; (800380c <MX_TIM2_Init+0x98>)
 80037f6:	f005 f9c9 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003800:	f000 f8a6 	bl	8003950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003804:	bf00      	nop
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	2400161c 	.word	0x2400161c

08003810 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8003814:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <MX_UART7_Init+0x90>)
 8003816:	4a23      	ldr	r2, [pc, #140]	; (80038a4 <MX_UART7_Init+0x94>)
 8003818:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800381a:	4b21      	ldr	r3, [pc, #132]	; (80038a0 <MX_UART7_Init+0x90>)
 800381c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003820:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003822:	4b1f      	ldr	r3, [pc, #124]	; (80038a0 <MX_UART7_Init+0x90>)
 8003824:	2200      	movs	r2, #0
 8003826:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003828:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <MX_UART7_Init+0x90>)
 800382a:	2200      	movs	r2, #0
 800382c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800382e:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <MX_UART7_Init+0x90>)
 8003830:	2200      	movs	r2, #0
 8003832:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003834:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <MX_UART7_Init+0x90>)
 8003836:	220c      	movs	r2, #12
 8003838:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800383a:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <MX_UART7_Init+0x90>)
 800383c:	2200      	movs	r2, #0
 800383e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <MX_UART7_Init+0x90>)
 8003842:	2200      	movs	r2, #0
 8003844:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <MX_UART7_Init+0x90>)
 8003848:	2200      	movs	r2, #0
 800384a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800384c:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <MX_UART7_Init+0x90>)
 800384e:	2200      	movs	r2, #0
 8003850:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003852:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <MX_UART7_Init+0x90>)
 8003854:	2200      	movs	r2, #0
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003858:	4811      	ldr	r0, [pc, #68]	; (80038a0 <MX_UART7_Init+0x90>)
 800385a:	f005 fa51 	bl	8008d00 <HAL_UART_Init>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8003864:	f000 f874 	bl	8003950 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003868:	2100      	movs	r1, #0
 800386a:	480d      	ldr	r0, [pc, #52]	; (80038a0 <MX_UART7_Init+0x90>)
 800386c:	f006 fbe5 	bl	800a03a <HAL_UARTEx_SetTxFifoThreshold>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8003876:	f000 f86b 	bl	8003950 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800387a:	2100      	movs	r1, #0
 800387c:	4808      	ldr	r0, [pc, #32]	; (80038a0 <MX_UART7_Init+0x90>)
 800387e:	f006 fc1a 	bl	800a0b6 <HAL_UARTEx_SetRxFifoThreshold>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8003888:	f000 f862 	bl	8003950 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800388c:	4804      	ldr	r0, [pc, #16]	; (80038a0 <MX_UART7_Init+0x90>)
 800388e:	f006 fb9b 	bl	8009fc8 <HAL_UARTEx_DisableFifoMode>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8003898:	f000 f85a 	bl	8003950 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800389c:	bf00      	nop
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	24001668 	.word	0x24001668
 80038a4:	40007800 	.word	0x40007800

080038a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ae:	f107 030c 	add.w	r3, r7, #12
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	605a      	str	r2, [r3, #4]
 80038b8:	609a      	str	r2, [r3, #8]
 80038ba:	60da      	str	r2, [r3, #12]
 80038bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038be:	4b22      	ldr	r3, [pc, #136]	; (8003948 <MX_GPIO_Init+0xa0>)
 80038c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038c4:	4a20      	ldr	r2, [pc, #128]	; (8003948 <MX_GPIO_Init+0xa0>)
 80038c6:	f043 0310 	orr.w	r3, r3, #16
 80038ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038ce:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <MX_GPIO_Init+0xa0>)
 80038d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038dc:	4b1a      	ldr	r3, [pc, #104]	; (8003948 <MX_GPIO_Init+0xa0>)
 80038de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038e2:	4a19      	ldr	r2, [pc, #100]	; (8003948 <MX_GPIO_Init+0xa0>)
 80038e4:	f043 0308 	orr.w	r3, r3, #8
 80038e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038ec:	4b16      	ldr	r3, [pc, #88]	; (8003948 <MX_GPIO_Init+0xa0>)
 80038ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	607b      	str	r3, [r7, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038fa:	4b13      	ldr	r3, [pc, #76]	; (8003948 <MX_GPIO_Init+0xa0>)
 80038fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003900:	4a11      	ldr	r2, [pc, #68]	; (8003948 <MX_GPIO_Init+0xa0>)
 8003902:	f043 0304 	orr.w	r3, r3, #4
 8003906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800390a:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <MX_GPIO_Init+0xa0>)
 800390c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8003918:	2201      	movs	r2, #1
 800391a:	21c0      	movs	r1, #192	; 0xc0
 800391c:	480b      	ldr	r0, [pc, #44]	; (800394c <MX_GPIO_Init+0xa4>)
 800391e:	f001 ff57 	bl	80057d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003922:	23c0      	movs	r3, #192	; 0xc0
 8003924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003926:	2301      	movs	r3, #1
 8003928:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003932:	f107 030c 	add.w	r3, r7, #12
 8003936:	4619      	mov	r1, r3
 8003938:	4804      	ldr	r0, [pc, #16]	; (800394c <MX_GPIO_Init+0xa4>)
 800393a:	f001 fda1 	bl	8005480 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800393e:	bf00      	nop
 8003940:	3720      	adds	r7, #32
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	58024400 	.word	0x58024400
 800394c:	58020800 	.word	0x58020800

08003950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003954:	b672      	cpsid	i
}
 8003956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003958:	e7fe      	b.n	8003958 <Error_Handler+0x8>
	...

0800395c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <HAL_MspInit+0x30>)
 8003964:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003968:	4a08      	ldr	r2, [pc, #32]	; (800398c <HAL_MspInit+0x30>)
 800396a:	f043 0302 	orr.w	r3, r3, #2
 800396e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003972:	4b06      	ldr	r3, [pc, #24]	; (800398c <HAL_MspInit+0x30>)
 8003974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	607b      	str	r3, [r7, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	58024400 	.word	0x58024400

08003990 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b0b8      	sub	sp, #224	; 0xe0
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003998:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039a8:	f107 0310 	add.w	r3, r7, #16
 80039ac:	22b8      	movs	r2, #184	; 0xb8
 80039ae:	2100      	movs	r1, #0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f00b fdf7 	bl	800f5a4 <memset>
  if(hfdcan->Instance==FDCAN3)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a2b      	ldr	r2, [pc, #172]	; (8003a68 <HAL_FDCAN_MspInit+0xd8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d14e      	bne.n	8003a5e <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80039c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80039cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80039d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039d2:	f107 0310 	add.w	r3, r7, #16
 80039d6:	4618      	mov	r0, r3
 80039d8:	f002 feb4 	bl	8006744 <HAL_RCCEx_PeriphCLKConfig>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80039e2:	f7ff ffb5 	bl	8003950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80039e6:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <HAL_FDCAN_MspInit+0xdc>)
 80039e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80039ec:	4a1f      	ldr	r2, [pc, #124]	; (8003a6c <HAL_FDCAN_MspInit+0xdc>)
 80039ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80039f6:	4b1d      	ldr	r3, [pc, #116]	; (8003a6c <HAL_FDCAN_MspInit+0xdc>)
 80039f8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80039fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a04:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <HAL_FDCAN_MspInit+0xdc>)
 8003a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a0a:	4a18      	ldr	r2, [pc, #96]	; (8003a6c <HAL_FDCAN_MspInit+0xdc>)
 8003a0c:	f043 0308 	orr.w	r3, r3, #8
 8003a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a14:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <HAL_FDCAN_MspInit+0xdc>)
 8003a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PD12     ------> FDCAN3_RX
    PD13     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003a22:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003a26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_FDCAN3;
 8003a3c:	2305      	movs	r3, #5
 8003a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a46:	4619      	mov	r1, r3
 8003a48:	4809      	ldr	r0, [pc, #36]	; (8003a70 <HAL_FDCAN_MspInit+0xe0>)
 8003a4a:	f001 fd19 	bl	8005480 <HAL_GPIO_Init>

    /* FDCAN3 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2100      	movs	r1, #0
 8003a52:	209f      	movs	r0, #159	; 0x9f
 8003a54:	f000 fb21 	bl	800409a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8003a58:	209f      	movs	r0, #159	; 0x9f
 8003a5a:	f000 fb38 	bl	80040ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8003a5e:	bf00      	nop
 8003a60:	37e0      	adds	r7, #224	; 0xe0
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	4000d400 	.word	0x4000d400
 8003a6c:	58024400 	.word	0x58024400
 8003a70:	58020c00 	.word	0x58020c00

08003a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a84:	d116      	bne.n	8003ab4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a86:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <HAL_TIM_Base_MspInit+0x48>)
 8003a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a8c:	4a0b      	ldr	r2, [pc, #44]	; (8003abc <HAL_TIM_Base_MspInit+0x48>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_TIM_Base_MspInit+0x48>)
 8003a98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	201c      	movs	r0, #28
 8003aaa:	f000 faf6 	bl	800409a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003aae:	201c      	movs	r0, #28
 8003ab0:	f000 fb0d 	bl	80040ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003ab4:	bf00      	nop
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	58024400 	.word	0x58024400

08003ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b0b8      	sub	sp, #224	; 0xe0
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ad8:	f107 0310 	add.w	r3, r7, #16
 8003adc:	22b8      	movs	r2, #184	; 0xb8
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f00b fd5f 	bl	800f5a4 <memset>
  if(huart->Instance==UART7)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a27      	ldr	r2, [pc, #156]	; (8003b88 <HAL_UART_MspInit+0xc8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d146      	bne.n	8003b7e <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003af0:	f04f 0202 	mov.w	r2, #2
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b02:	f107 0310 	add.w	r3, r7, #16
 8003b06:	4618      	mov	r0, r3
 8003b08:	f002 fe1c 	bl	8006744 <HAL_RCCEx_PeriphCLKConfig>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003b12:	f7ff ff1d 	bl	8003950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <HAL_UART_MspInit+0xcc>)
 8003b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b1c:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <HAL_UART_MspInit+0xcc>)
 8003b1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b26:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <HAL_UART_MspInit+0xcc>)
 8003b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b34:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <HAL_UART_MspInit+0xcc>)
 8003b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b3a:	4a14      	ldr	r2, [pc, #80]	; (8003b8c <HAL_UART_MspInit+0xcc>)
 8003b3c:	f043 0310 	orr.w	r3, r3, #16
 8003b40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <HAL_UART_MspInit+0xcc>)
 8003b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003b52:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003b56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003b6c:	2307      	movs	r3, #7
 8003b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b76:	4619      	mov	r1, r3
 8003b78:	4805      	ldr	r0, [pc, #20]	; (8003b90 <HAL_UART_MspInit+0xd0>)
 8003b7a:	f001 fc81 	bl	8005480 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8003b7e:	bf00      	nop
 8003b80:	37e0      	adds	r7, #224	; 0xe0
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40007800 	.word	0x40007800
 8003b8c:	58024400 	.word	0x58024400
 8003b90:	58021000 	.word	0x58021000

08003b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b98:	e7fe      	b.n	8003b98 <NMI_Handler+0x4>

08003b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b9e:	e7fe      	b.n	8003b9e <HardFault_Handler+0x4>

08003ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ba4:	e7fe      	b.n	8003ba4 <MemManage_Handler+0x4>

08003ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003baa:	e7fe      	b.n	8003baa <BusFault_Handler+0x4>

08003bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bb0:	e7fe      	b.n	8003bb0 <UsageFault_Handler+0x4>

08003bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003be0:	f000 f960 	bl	8003ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003be4:	bf00      	nop
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bec:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <TIM2_IRQHandler+0x10>)
 8003bee:	f004 fc49 	bl	8008484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	2400161c 	.word	0x2400161c

08003bfc <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8003c00:	4802      	ldr	r0, [pc, #8]	; (8003c0c <FDCAN3_IT0_IRQHandler+0x10>)
 8003c02:	f000 ff41 	bl	8004a88 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	2400157c 	.word	0x2400157c

08003c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <_sbrk+0x5c>)
 8003c1a:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <_sbrk+0x60>)
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c24:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <_sbrk+0x64>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <_sbrk+0x64>)
 8003c2e:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <_sbrk+0x68>)
 8003c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <_sbrk+0x64>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4413      	add	r3, r2
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d207      	bcs.n	8003c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c40:	f00b fcb8 	bl	800f5b4 <__errno>
 8003c44:	4603      	mov	r3, r0
 8003c46:	220c      	movs	r2, #12
 8003c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	e009      	b.n	8003c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c50:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <_sbrk+0x64>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c56:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <_sbrk+0x64>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	4a05      	ldr	r2, [pc, #20]	; (8003c74 <_sbrk+0x64>)
 8003c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c62:	68fb      	ldr	r3, [r7, #12]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	24050000 	.word	0x24050000
 8003c70:	00000400 	.word	0x00000400
 8003c74:	24001700 	.word	0x24001700
 8003c78:	24002988 	.word	0x24002988

08003c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c80:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <SystemInit+0xd0>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	4a31      	ldr	r2, [pc, #196]	; (8003d4c <SystemInit+0xd0>)
 8003c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c90:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <SystemInit+0xd4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	2b06      	cmp	r3, #6
 8003c9a:	d807      	bhi.n	8003cac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c9c:	4b2c      	ldr	r3, [pc, #176]	; (8003d50 <SystemInit+0xd4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f023 030f 	bic.w	r3, r3, #15
 8003ca4:	4a2a      	ldr	r2, [pc, #168]	; (8003d50 <SystemInit+0xd4>)
 8003ca6:	f043 0307 	orr.w	r3, r3, #7
 8003caa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003cac:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <SystemInit+0xd8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a28      	ldr	r2, [pc, #160]	; (8003d54 <SystemInit+0xd8>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003cb8:	4b26      	ldr	r3, [pc, #152]	; (8003d54 <SystemInit+0xd8>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003cbe:	4b25      	ldr	r3, [pc, #148]	; (8003d54 <SystemInit+0xd8>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	4924      	ldr	r1, [pc, #144]	; (8003d54 <SystemInit+0xd8>)
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <SystemInit+0xdc>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003cca:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <SystemInit+0xd4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003cd6:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <SystemInit+0xd4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 030f 	bic.w	r3, r3, #15
 8003cde:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <SystemInit+0xd4>)
 8003ce0:	f043 0307 	orr.w	r3, r3, #7
 8003ce4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003ce6:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <SystemInit+0xd8>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <SystemInit+0xd8>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003cf2:	4b18      	ldr	r3, [pc, #96]	; (8003d54 <SystemInit+0xd8>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003cf8:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <SystemInit+0xd8>)
 8003cfa:	4a18      	ldr	r2, [pc, #96]	; (8003d5c <SystemInit+0xe0>)
 8003cfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003cfe:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <SystemInit+0xd8>)
 8003d00:	4a17      	ldr	r2, [pc, #92]	; (8003d60 <SystemInit+0xe4>)
 8003d02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003d04:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <SystemInit+0xd8>)
 8003d06:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <SystemInit+0xe8>)
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <SystemInit+0xd8>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003d10:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <SystemInit+0xd8>)
 8003d12:	4a14      	ldr	r2, [pc, #80]	; (8003d64 <SystemInit+0xe8>)
 8003d14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003d16:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <SystemInit+0xd8>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <SystemInit+0xd8>)
 8003d1e:	4a11      	ldr	r2, [pc, #68]	; (8003d64 <SystemInit+0xe8>)
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <SystemInit+0xd8>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <SystemInit+0xd8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a09      	ldr	r2, [pc, #36]	; (8003d54 <SystemInit+0xd8>)
 8003d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <SystemInit+0xd8>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <SystemInit+0xec>)
 8003d3c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003d40:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	e000ed00 	.word	0xe000ed00
 8003d50:	52002000 	.word	0x52002000
 8003d54:	58024400 	.word	0x58024400
 8003d58:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d5c:	02020200 	.word	0x02020200
 8003d60:	01ff0000 	.word	0x01ff0000
 8003d64:	01010280 	.word	0x01010280
 8003d68:	52004000 	.word	0x52004000

08003d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003da4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d70:	f7ff ff84 	bl	8003c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d74:	480c      	ldr	r0, [pc, #48]	; (8003da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d76:	490d      	ldr	r1, [pc, #52]	; (8003dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d78:	4a0d      	ldr	r2, [pc, #52]	; (8003db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d7c:	e002      	b.n	8003d84 <LoopCopyDataInit>

08003d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d82:	3304      	adds	r3, #4

08003d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d88:	d3f9      	bcc.n	8003d7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d8c:	4c0a      	ldr	r4, [pc, #40]	; (8003db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d90:	e001      	b.n	8003d96 <LoopFillZerobss>

08003d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d94:	3204      	adds	r2, #4

08003d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d98:	d3fb      	bcc.n	8003d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d9a:	f00b fc11 	bl	800f5c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d9e:	f7ff fb9b 	bl	80034d8 <main>
  bx  lr
 8003da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003da4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003da8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003dac:	240002f0 	.word	0x240002f0
  ldr r2, =_sidata
 8003db0:	08010b30 	.word	0x08010b30
  ldr r2, =_sbss
 8003db4:	240002f0 	.word	0x240002f0
  ldr r4, =_ebss
 8003db8:	24002984 	.word	0x24002984

08003dbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dbc:	e7fe      	b.n	8003dbc <ADC3_IRQHandler>
	...

08003dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dc6:	2003      	movs	r0, #3
 8003dc8:	f000 f95c 	bl	8004084 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dcc:	f002 fae4 	bl	8006398 <HAL_RCC_GetSysClockFreq>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <HAL_Init+0x68>)
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	4913      	ldr	r1, [pc, #76]	; (8003e2c <HAL_Init+0x6c>)
 8003dde:	5ccb      	ldrb	r3, [r1, r3]
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
 8003de8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dea:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <HAL_Init+0x68>)
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	4a0e      	ldr	r2, [pc, #56]	; (8003e2c <HAL_Init+0x6c>)
 8003df4:	5cd3      	ldrb	r3, [r2, r3]
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003e00:	4a0b      	ldr	r2, [pc, #44]	; (8003e30 <HAL_Init+0x70>)
 8003e02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e04:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <HAL_Init+0x74>)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e0a:	200f      	movs	r0, #15
 8003e0c:	f000 f814 	bl	8003e38 <HAL_InitTick>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e002      	b.n	8003e20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e1a:	f7ff fd9f 	bl	800395c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	58024400 	.word	0x58024400
 8003e2c:	08010aa4 	.word	0x08010aa4
 8003e30:	24000288 	.word	0x24000288
 8003e34:	24000284 	.word	0x24000284

08003e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003e40:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <HAL_InitTick+0x60>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e021      	b.n	8003e90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003e4c:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <HAL_InitTick+0x64>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <HAL_InitTick+0x60>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	4619      	mov	r1, r3
 8003e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f941 	bl	80040ea <HAL_SYSTICK_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e00e      	b.n	8003e90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b0f      	cmp	r3, #15
 8003e76:	d80a      	bhi.n	8003e8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e78:	2200      	movs	r2, #0
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e80:	f000 f90b 	bl	800409a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e84:	4a06      	ldr	r2, [pc, #24]	; (8003ea0 <HAL_InitTick+0x68>)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e000      	b.n	8003e90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	24000290 	.word	0x24000290
 8003e9c:	24000284 	.word	0x24000284
 8003ea0:	2400028c 	.word	0x2400028c

08003ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ea8:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_IncTick+0x20>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <HAL_IncTick+0x24>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	4a04      	ldr	r2, [pc, #16]	; (8003ec8 <HAL_IncTick+0x24>)
 8003eb6:	6013      	str	r3, [r2, #0]
}
 8003eb8:	bf00      	nop
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	24000290 	.word	0x24000290
 8003ec8:	24001704 	.word	0x24001704

08003ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return uwTick;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <HAL_GetTick+0x14>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	24001704 	.word	0x24001704

08003ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <__NVIC_SetPriorityGrouping+0x40>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f00:	4013      	ands	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <__NVIC_SetPriorityGrouping+0x44>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f12:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <__NVIC_SetPriorityGrouping+0x40>)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	60d3      	str	r3, [r2, #12]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	e000ed00 	.word	0xe000ed00
 8003f28:	05fa0000 	.word	0x05fa0000

08003f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <__NVIC_GetPriorityGrouping+0x18>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	0a1b      	lsrs	r3, r3, #8
 8003f36:	f003 0307 	and.w	r3, r3, #7
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	e000ed00 	.word	0xe000ed00

08003f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	db0b      	blt.n	8003f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	f003 021f 	and.w	r2, r3, #31
 8003f60:	4907      	ldr	r1, [pc, #28]	; (8003f80 <__NVIC_EnableIRQ+0x38>)
 8003f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2001      	movs	r0, #1
 8003f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	e000e100 	.word	0xe000e100

08003f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	6039      	str	r1, [r7, #0]
 8003f8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	db0a      	blt.n	8003fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	490c      	ldr	r1, [pc, #48]	; (8003fd0 <__NVIC_SetPriority+0x4c>)
 8003f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fa2:	0112      	lsls	r2, r2, #4
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fac:	e00a      	b.n	8003fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	4908      	ldr	r1, [pc, #32]	; (8003fd4 <__NVIC_SetPriority+0x50>)
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	3b04      	subs	r3, #4
 8003fbc:	0112      	lsls	r2, r2, #4
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	761a      	strb	r2, [r3, #24]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	e000e100 	.word	0xe000e100
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b089      	sub	sp, #36	; 0x24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f1c3 0307 	rsb	r3, r3, #7
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	bf28      	it	cs
 8003ff6:	2304      	movcs	r3, #4
 8003ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	2b06      	cmp	r3, #6
 8004000:	d902      	bls.n	8004008 <NVIC_EncodePriority+0x30>
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	3b03      	subs	r3, #3
 8004006:	e000      	b.n	800400a <NVIC_EncodePriority+0x32>
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800400c:	f04f 32ff 	mov.w	r2, #4294967295
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	43da      	mvns	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	401a      	ands	r2, r3
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004020:	f04f 31ff 	mov.w	r1, #4294967295
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	fa01 f303 	lsl.w	r3, r1, r3
 800402a:	43d9      	mvns	r1, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004030:	4313      	orrs	r3, r2
         );
}
 8004032:	4618      	mov	r0, r3
 8004034:	3724      	adds	r7, #36	; 0x24
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3b01      	subs	r3, #1
 800404c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004050:	d301      	bcc.n	8004056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004052:	2301      	movs	r3, #1
 8004054:	e00f      	b.n	8004076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004056:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <SysTick_Config+0x40>)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3b01      	subs	r3, #1
 800405c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800405e:	210f      	movs	r1, #15
 8004060:	f04f 30ff 	mov.w	r0, #4294967295
 8004064:	f7ff ff8e 	bl	8003f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <SysTick_Config+0x40>)
 800406a:	2200      	movs	r2, #0
 800406c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800406e:	4b04      	ldr	r3, [pc, #16]	; (8004080 <SysTick_Config+0x40>)
 8004070:	2207      	movs	r2, #7
 8004072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	e000e010 	.word	0xe000e010

08004084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff ff29 	bl	8003ee4 <__NVIC_SetPriorityGrouping>
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b086      	sub	sp, #24
 800409e:	af00      	add	r7, sp, #0
 80040a0:	4603      	mov	r3, r0
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040a8:	f7ff ff40 	bl	8003f2c <__NVIC_GetPriorityGrouping>
 80040ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	6978      	ldr	r0, [r7, #20]
 80040b4:	f7ff ff90 	bl	8003fd8 <NVIC_EncodePriority>
 80040b8:	4602      	mov	r2, r0
 80040ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040be:	4611      	mov	r1, r2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff ff5f 	bl	8003f84 <__NVIC_SetPriority>
}
 80040c6:	bf00      	nop
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	4603      	mov	r3, r0
 80040d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff ff33 	bl	8003f48 <__NVIC_EnableIRQ>
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff ffa4 	bl	8004040 <SysTick_Config>
 80040f8:	4603      	mov	r3, r0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b098      	sub	sp, #96	; 0x60
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800410c:	4a84      	ldr	r2, [pc, #528]	; (8004320 <HAL_FDCAN_Init+0x21c>)
 800410e:	f107 030c 	add.w	r3, r7, #12
 8004112:	4611      	mov	r1, r2
 8004114:	224c      	movs	r2, #76	; 0x4c
 8004116:	4618      	mov	r0, r3
 8004118:	f00b fa78 	bl	800f60c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e1c6      	b.n	80044b4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a7e      	ldr	r2, [pc, #504]	; (8004324 <HAL_FDCAN_Init+0x220>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d106      	bne.n	800413e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004138:	461a      	mov	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff fc1c 	bl	8003990 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0210 	bic.w	r2, r2, #16
 8004166:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004168:	f7ff feb0 	bl	8003ecc <HAL_GetTick>
 800416c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800416e:	e014      	b.n	800419a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004170:	f7ff feac 	bl	8003ecc <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b0a      	cmp	r3, #10
 800417c:	d90d      	bls.n	800419a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004184:	f043 0201 	orr.w	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2203      	movs	r2, #3
 8004192:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e18c      	b.n	80044b4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d0e3      	beq.n	8004170 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041b8:	f7ff fe88 	bl	8003ecc <HAL_GetTick>
 80041bc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041be:	e014      	b.n	80041ea <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041c0:	f7ff fe84 	bl	8003ecc <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b0a      	cmp	r3, #10
 80041cc:	d90d      	bls.n	80041ea <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d4:	f043 0201 	orr.w	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2203      	movs	r2, #3
 80041e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e164      	b.n	80044b4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0e3      	beq.n	80041c0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0202 	orr.w	r2, r2, #2
 8004206:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	7c1b      	ldrb	r3, [r3, #16]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d108      	bne.n	8004222 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421e:	619a      	str	r2, [r3, #24]
 8004220:	e007      	b.n	8004232 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004230:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	7c5b      	ldrb	r3, [r3, #17]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d108      	bne.n	800424c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699a      	ldr	r2, [r3, #24]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004248:	619a      	str	r2, [r3, #24]
 800424a:	e007      	b.n	800425c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800425a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	7c9b      	ldrb	r3, [r3, #18]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d108      	bne.n	8004276 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004272:	619a      	str	r2, [r3, #24]
 8004274:	e007      	b.n	8004286 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699a      	ldr	r2, [r3, #24]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004284:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699a      	ldr	r2, [r3, #24]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80042aa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0210 	bic.w	r2, r2, #16
 80042ba:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d108      	bne.n	80042d6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0204 	orr.w	r2, r2, #4
 80042d2:	619a      	str	r2, [r3, #24]
 80042d4:	e030      	b.n	8004338 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d02c      	beq.n	8004338 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d020      	beq.n	8004328 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699a      	ldr	r2, [r3, #24]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042f4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0210 	orr.w	r2, r2, #16
 8004304:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2b03      	cmp	r3, #3
 800430c:	d114      	bne.n	8004338 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699a      	ldr	r2, [r3, #24]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0220 	orr.w	r2, r2, #32
 800431c:	619a      	str	r2, [r3, #24]
 800431e:	e00b      	b.n	8004338 <HAL_FDCAN_Init+0x234>
 8004320:	0800ff9c 	.word	0x0800ff9c
 8004324:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0220 	orr.w	r2, r2, #32
 8004336:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	3b01      	subs	r3, #1
 800433e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	3b01      	subs	r3, #1
 8004346:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004348:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004350:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	3b01      	subs	r3, #1
 800435a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004360:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004362:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800436c:	d115      	bne.n	800439a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	3b01      	subs	r3, #1
 800437a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800437c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	3b01      	subs	r3, #1
 8004384:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004386:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	3b01      	subs	r3, #1
 8004390:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004396:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004398:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c0:	4413      	add	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d011      	beq.n	80043ea <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80043ce:	f023 0107 	bic.w	r1, r3, #7
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	3360      	adds	r3, #96	; 0x60
 80043da:	443b      	add	r3, r7
 80043dc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d011      	beq.n	8004416 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043fa:	f023 0107 	bic.w	r1, r3, #7
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	3360      	adds	r3, #96	; 0x60
 8004406:	443b      	add	r3, r7
 8004408:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441a:	2b00      	cmp	r3, #0
 800441c:	d012      	beq.n	8004444 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004426:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	3360      	adds	r3, #96	; 0x60
 8004432:	443b      	add	r3, r7
 8004434:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004438:	011a      	lsls	r2, r3, #4
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004448:	2b00      	cmp	r3, #0
 800444a:	d012      	beq.n	8004472 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004454:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	3360      	adds	r3, #96	; 0x60
 8004460:	443b      	add	r3, r7
 8004462:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004466:	021a      	lsls	r2, r3, #8
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a11      	ldr	r2, [pc, #68]	; (80044bc <HAL_FDCAN_Init+0x3b8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d107      	bne.n	800448c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f022 0203 	bic.w	r2, r2, #3
 800448a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fde7 	bl	8005078 <FDCAN_CalcultateRamBlockAddresses>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80044b0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3760      	adds	r7, #96	; 0x60
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	4000a000 	.word	0x4000a000

080044c0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80044d0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d002      	beq.n	80044de <HAL_FDCAN_ConfigFilter+0x1e>
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d157      	bne.n	800458e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d12b      	bne.n	800453e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	2b07      	cmp	r3, #7
 80044ec:	d10d      	bne.n	800450a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80044fa:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004500:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004502:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	e00e      	b.n	8004528 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004516:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800451e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	e025      	b.n	800458a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	075a      	lsls	r2, r3, #29
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b07      	cmp	r3, #7
 8004552:	d103      	bne.n	800455c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	e006      	b.n	800456a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	079a      	lsls	r2, r3, #30
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4413      	add	r3, r2
 8004576:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	3304      	adds	r3, #4
 8004582:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e008      	b.n	80045a0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004594:	f043 0202 	orr.w	r2, r3, #2
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
  }
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d111      	bne.n	80045e4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	e008      	b.n	80045f6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ea:	f043 0204 	orr.w	r2, r3, #4
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d141      	bne.n	800469e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004622:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004630:	f043 0220 	orr.w	r2, r3, #32
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e038      	b.n	80046b0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004654:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e026      	b.n	80046b0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800466a:	0c1b      	lsrs	r3, r3, #16
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fe83 	bl	8005384 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2101      	movs	r1, #1
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	fa01 f202 	lsl.w	r2, r1, r2
 800468a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800468e:	2201      	movs	r2, #1
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	409a      	lsls	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	e008      	b.n	80046b0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046a4:	f043 0208 	orr.w	r2, r3, #8
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
  }
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b08b      	sub	sp, #44	; 0x2c
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80046d0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80046d2:	7efb      	ldrb	r3, [r7, #27]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	f040 814b 	bne.w	8004970 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b40      	cmp	r3, #64	; 0x40
 80046de:	d14d      	bne.n	800477c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d109      	bne.n	8004704 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046f6:	f043 0220 	orr.w	r2, r3, #32
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e13e      	b.n	8004982 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800470c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800471a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e12c      	b.n	8004982 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004730:	0e1b      	lsrs	r3, r3, #24
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b01      	cmp	r3, #1
 8004738:	d10b      	bne.n	8004752 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004742:	0fdb      	lsrs	r3, r3, #31
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800474c:	d101      	bne.n	8004752 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800474e:	2301      	movs	r3, #1
 8004750:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	4413      	add	r3, r2
 8004764:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	69f9      	ldr	r1, [r7, #28]
 8004770:	fb01 f303 	mul.w	r3, r1, r3
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
 800477a:	e069      	b.n	8004850 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b41      	cmp	r3, #65	; 0x41
 8004780:	d14d      	bne.n	800481e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800478a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004798:	f043 0220 	orr.w	r2, r3, #32
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e0ed      	b.n	8004982 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e0db      	b.n	8004982 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047d2:	0e1b      	lsrs	r3, r3, #24
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d10b      	bne.n	80047f4 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047e4:	0fdb      	lsrs	r3, r3, #31
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ee:	d101      	bne.n	80047f4 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80047f0:	2301      	movs	r3, #1
 80047f2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004810:	69f9      	ldr	r1, [r7, #28]
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
 800481c:	e018      	b.n	8004850 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	429a      	cmp	r2, r3
 8004826:	d309      	bcc.n	800483c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800482e:	f043 0220 	orr.w	r2, r3, #32
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0a2      	b.n	8004982 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	fb01 f303 	mul.w	r3, r1, r3
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d107      	bne.n	8004874 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	0c9b      	lsrs	r3, r3, #18
 800486a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e005      	b.n	8004880 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	3304      	adds	r3, #4
 800489c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	0e1b      	lsrs	r3, r3, #24
 80048d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	0fda      	lsrs	r2, r3, #31
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	3304      	adds	r3, #4
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80048ee:	2300      	movs	r3, #0
 80048f0:	623b      	str	r3, [r7, #32]
 80048f2:	e00a      	b.n	800490a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	441a      	add	r2, r3
 80048fa:	6839      	ldr	r1, [r7, #0]
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	440b      	add	r3, r1
 8004900:	7812      	ldrb	r2, [r2, #0]
 8004902:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	3301      	adds	r3, #1
 8004908:	623b      	str	r3, [r7, #32]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	0c1b      	lsrs	r3, r3, #16
 8004910:	4a1f      	ldr	r2, [pc, #124]	; (8004990 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8004912:	5cd3      	ldrb	r3, [r2, r3]
 8004914:	461a      	mov	r2, r3
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	4293      	cmp	r3, r2
 800491a:	d3eb      	bcc.n	80048f4 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b40      	cmp	r3, #64	; 0x40
 8004920:	d105      	bne.n	800492e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800492c:	e01e      	b.n	800496c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b41      	cmp	r3, #65	; 0x41
 8004932:	d105      	bne.n	8004940 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800493e:	e015      	b.n	800496c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b1f      	cmp	r3, #31
 8004944:	d808      	bhi.n	8004958 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2101      	movs	r1, #1
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	fa01 f202 	lsl.w	r2, r1, r2
 8004952:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004956:	e009      	b.n	800496c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 021f 	and.w	r2, r3, #31
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2101      	movs	r1, #1
 8004964:	fa01 f202 	lsl.w	r2, r1, r2
 8004968:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	e008      	b.n	8004982 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004976:	f043 0208 	orr.w	r2, r3, #8
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
  }
}
 8004982:	4618      	mov	r0, r3
 8004984:	372c      	adds	r7, #44	; 0x2c
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	08010ab4 	.word	0x08010ab4

08004994 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80049a6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80049a8:	7dfb      	ldrb	r3, [r7, #23]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d002      	beq.n	80049b4 <HAL_FDCAN_ActivateNotification+0x20>
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d155      	bne.n	8004a60 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4013      	ands	r3, r2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d108      	bne.n	80049d4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0201 	orr.w	r2, r2, #1
 80049d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80049d2:	e014      	b.n	80049fe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4013      	ands	r3, r2
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d108      	bne.n	80049f6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0202 	orr.w	r2, r2, #2
 80049f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80049f4:	e003      	b.n	80049fe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2203      	movs	r2, #3
 80049fc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d009      	beq.n	8004a1c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d009      	beq.n	8004a3a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	4b0f      	ldr	r3, [pc, #60]	; (8004a80 <HAL_FDCAN_ActivateNotification+0xec>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	6553      	str	r3, [r2, #84]	; 0x54
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	0f9b      	lsrs	r3, r3, #30
 8004a56:	490b      	ldr	r1, [pc, #44]	; (8004a84 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e008      	b.n	8004a72 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a66:	f043 0202 	orr.w	r2, r3, #2
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
  }
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	3fcfffff 	.word	0x3fcfffff
 8004a84:	4000a800 	.word	0x4000a800

08004a88 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b096      	sub	sp, #88	; 0x58
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004a90:	4b95      	ldr	r3, [pc, #596]	; (8004ce8 <HAL_FDCAN_IRQHandler+0x260>)
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	079b      	lsls	r3, r3, #30
 8004a96:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004a98:	4b93      	ldr	r3, [pc, #588]	; (8004ce8 <HAL_FDCAN_IRQHandler+0x260>)
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	079b      	lsls	r3, r3, #30
 8004a9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aaa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004aae:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ab8:	4013      	ands	r3, r2
 8004aba:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ace:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ade:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ae8:	4013      	ands	r3, r2
 8004aea:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8004af6:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b00:	4013      	ands	r3, r2
 8004b02:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8004b0e:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b18:	4013      	ands	r3, r2
 8004b1a:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00f      	beq.n	8004b56 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b48:	651a      	str	r2, [r3, #80]	; 0x50
 8004b4a:	4b67      	ldr	r3, [pc, #412]	; (8004ce8 <HAL_FDCAN_IRQHandler+0x260>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fa44 	bl	8004fde <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01c      	beq.n	8004b9a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d017      	beq.n	8004b9a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004b72:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b7e:	4013      	ands	r3, r2
 8004b80:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b8a:	651a      	str	r2, [r3, #80]	; 0x50
 8004b8c:	4b56      	ldr	r3, [pc, #344]	; (8004ce8 <HAL_FDCAN_IRQHandler+0x260>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004b92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f9f9 	bl	8004f8c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00d      	beq.n	8004bbc <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ba6:	4b51      	ldr	r3, [pc, #324]	; (8004cec <HAL_FDCAN_IRQHandler+0x264>)
 8004ba8:	400b      	ands	r3, r1
 8004baa:	6513      	str	r3, [r2, #80]	; 0x50
 8004bac:	4a4e      	ldr	r2, [pc, #312]	; (8004ce8 <HAL_FDCAN_IRQHandler+0x260>)
 8004bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bb0:	0f9b      	lsrs	r3, r3, #30
 8004bb2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004bb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f9b2 	bl	8004f20 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00d      	beq.n	8004bde <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004bc8:	4b48      	ldr	r3, [pc, #288]	; (8004cec <HAL_FDCAN_IRQHandler+0x264>)
 8004bca:	400b      	ands	r3, r1
 8004bcc:	6513      	str	r3, [r2, #80]	; 0x50
 8004bce:	4a46      	ldr	r2, [pc, #280]	; (8004ce8 <HAL_FDCAN_IRQHandler+0x260>)
 8004bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd2:	0f9b      	lsrs	r3, r3, #30
 8004bd4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004bd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f9ac 	bl	8004f36 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00d      	beq.n	8004c00 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004bea:	4b40      	ldr	r3, [pc, #256]	; (8004cec <HAL_FDCAN_IRQHandler+0x264>)
 8004bec:	400b      	ands	r3, r1
 8004bee:	6513      	str	r3, [r2, #80]	; 0x50
 8004bf0:	4a3d      	ldr	r2, [pc, #244]	; (8004ce8 <HAL_FDCAN_IRQHandler+0x260>)
 8004bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf4:	0f9b      	lsrs	r3, r3, #30
 8004bf6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004bf8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fe fbac 	bl	8003358 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00d      	beq.n	8004c22 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c0c:	4b37      	ldr	r3, [pc, #220]	; (8004cec <HAL_FDCAN_IRQHandler+0x264>)
 8004c0e:	400b      	ands	r3, r1
 8004c10:	6513      	str	r3, [r2, #80]	; 0x50
 8004c12:	4a35      	ldr	r2, [pc, #212]	; (8004ce8 <HAL_FDCAN_IRQHandler+0x260>)
 8004c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c16:	0f9b      	lsrs	r3, r3, #30
 8004c18:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004c1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f995 	bl	8004f4c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00f      	beq.n	8004c4c <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c3e:	651a      	str	r2, [r3, #80]	; 0x50
 8004c40:	4b29      	ldr	r3, [pc, #164]	; (8004ce8 <HAL_FDCAN_IRQHandler+0x260>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f98b 	bl	8004f62 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01c      	beq.n	8004c90 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d017      	beq.n	8004c90 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c68:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c74:	4013      	ands	r3, r2
 8004c76:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c80:	651a      	str	r2, [r3, #80]	; 0x50
 8004c82:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <HAL_FDCAN_IRQHandler+0x260>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004c88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f973 	bl	8004f76 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00f      	beq.n	8004cba <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004cac:	651a      	str	r2, [r3, #80]	; 0x50
 8004cae:	4b0e      	ldr	r3, [pc, #56]	; (8004ce8 <HAL_FDCAN_IRQHandler+0x260>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f974 	bl	8004fa2 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d015      	beq.n	8004cf0 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d010      	beq.n	8004cf0 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004cd6:	651a      	str	r2, [r3, #80]	; 0x50
 8004cd8:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <HAL_FDCAN_IRQHandler+0x260>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f969 	bl	8004fb6 <HAL_FDCAN_TimestampWraparoundCallback>
 8004ce4:	e004      	b.n	8004cf0 <HAL_FDCAN_IRQHandler+0x268>
 8004ce6:	bf00      	nop
 8004ce8:	4000a800 	.word	0x4000a800
 8004cec:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00f      	beq.n	8004d1a <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50
 8004d0e:	4b81      	ldr	r3, [pc, #516]	; (8004f14 <HAL_FDCAN_IRQHandler+0x48c>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f958 	bl	8004fca <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d014      	beq.n	8004d4e <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00f      	beq.n	8004d4e <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d36:	651a      	str	r2, [r3, #80]	; 0x50
 8004d38:	4b76      	ldr	r3, [pc, #472]	; (8004f14 <HAL_FDCAN_IRQHandler+0x48c>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00d      	beq.n	8004d70 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d5a:	4b6f      	ldr	r3, [pc, #444]	; (8004f18 <HAL_FDCAN_IRQHandler+0x490>)
 8004d5c:	400b      	ands	r3, r1
 8004d5e:	6513      	str	r3, [r2, #80]	; 0x50
 8004d60:	4a6c      	ldr	r2, [pc, #432]	; (8004f14 <HAL_FDCAN_IRQHandler+0x48c>)
 8004d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d64:	0f9b      	lsrs	r3, r3, #30
 8004d66:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004d68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f94b 	bl	8005006 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d011      	beq.n	8004d9a <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d7c:	4b66      	ldr	r3, [pc, #408]	; (8004f18 <HAL_FDCAN_IRQHandler+0x490>)
 8004d7e:	400b      	ands	r3, r1
 8004d80:	6513      	str	r3, [r2, #80]	; 0x50
 8004d82:	4a64      	ldr	r2, [pc, #400]	; (8004f14 <HAL_FDCAN_IRQHandler+0x48c>)
 8004d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d86:	0f9b      	lsrs	r3, r3, #30
 8004d88:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a5f      	ldr	r2, [pc, #380]	; (8004f1c <HAL_FDCAN_IRQHandler+0x494>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	f040 80aa 	bne.w	8004efa <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80a2 	beq.w	8004efa <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dca:	4013      	ands	r3, r2
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dd8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004de2:	4013      	ands	r3, r2
 8004de4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8004e08:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	4013      	ands	r3, r2
 8004e14:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8004e20:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d007      	beq.n	8004e54 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e4a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004e4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f8e4 	bl	800501c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e60:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004e62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f8e4 	bl	8005032 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d019      	beq.n	8004ea8 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d014      	beq.n	8004ea8 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	0c1b      	lsrs	r3, r3, #16
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e94:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2240      	movs	r2, #64	; 0x40
 8004e9c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	6939      	ldr	r1, [r7, #16]
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f8d0 	bl	8005048 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f8d1 	bl	8005060 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00b      	beq.n	8004edc <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	6a3a      	ldr	r2, [r7, #32]
 8004eca:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f874 	bl	8004ff2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	3758      	adds	r7, #88	; 0x58
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	4000a800 	.word	0x4000a800
 8004f18:	3fcfffff 	.word	0x3fcfffff
 8004f1c:	4000a000 	.word	0x4000a000

08004f20 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005084:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800508e:	4ba7      	ldr	r3, [pc, #668]	; (800532c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005090:	4013      	ands	r3, r2
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	0091      	lsls	r1, r2, #2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	430b      	orrs	r3, r1
 800509c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050a8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	041a      	lsls	r2, r3, #16
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	4413      	add	r3, r2
 80050c4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80050ce:	4b97      	ldr	r3, [pc, #604]	; (800532c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	0091      	lsls	r1, r2, #2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	430b      	orrs	r3, r1
 80050dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f0:	041a      	lsls	r2, r3, #16
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	4413      	add	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005110:	4b86      	ldr	r3, [pc, #536]	; (800532c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005112:	4013      	ands	r3, r2
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	0091      	lsls	r1, r2, #2
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	430b      	orrs	r3, r1
 800511e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800512a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	041a      	lsls	r2, r3, #16
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005146:	fb02 f303 	mul.w	r3, r2, r3
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	4413      	add	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005158:	4b74      	ldr	r3, [pc, #464]	; (800532c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800515a:	4013      	ands	r3, r2
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	0091      	lsls	r1, r2, #2
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	430b      	orrs	r3, r1
 8005166:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005172:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517a:	041a      	lsls	r2, r3, #16
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800518e:	fb02 f303 	mul.w	r3, r2, r3
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	4413      	add	r3, r2
 8005196:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80051a0:	4b62      	ldr	r3, [pc, #392]	; (800532c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	0091      	lsls	r1, r2, #2
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6812      	ldr	r2, [r2, #0]
 80051ac:	430b      	orrs	r3, r1
 80051ae:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80051ba:	fb02 f303 	mul.w	r3, r2, r3
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	4413      	add	r3, r2
 80051c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80051cc:	4b57      	ldr	r3, [pc, #348]	; (800532c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80051ce:	4013      	ands	r3, r2
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	0091      	lsls	r1, r2, #2
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6812      	ldr	r2, [r2, #0]
 80051d8:	430b      	orrs	r3, r1
 80051da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051e6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ee:	041a      	lsls	r2, r3, #16
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	4413      	add	r3, r2
 8005204:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800520e:	4b47      	ldr	r3, [pc, #284]	; (800532c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005210:	4013      	ands	r3, r2
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	0091      	lsls	r1, r2, #2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	430b      	orrs	r3, r1
 800521c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005228:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005230:	041a      	lsls	r2, r3, #16
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005244:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800524c:	061a      	lsls	r2, r3, #24
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800525c:	4b34      	ldr	r3, [pc, #208]	; (8005330 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800525e:	4413      	add	r3, r2
 8005260:	009a      	lsls	r2, r3, #2
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	441a      	add	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	441a      	add	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	441a      	add	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	441a      	add	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80052c2:	fb01 f303 	mul.w	r3, r1, r3
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	441a      	add	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	441a      	add	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80052f2:	fb01 f303 	mul.w	r3, r1, r3
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	441a      	add	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800530e:	fb01 f303 	mul.w	r3, r1, r3
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	441a      	add	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	4a04      	ldr	r2, [pc, #16]	; (8005334 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d915      	bls.n	8005354 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005328:	e006      	b.n	8005338 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800532a:	bf00      	nop
 800532c:	ffff0003 	.word	0xffff0003
 8005330:	10002b00 	.word	0x10002b00
 8005334:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800533e:	f043 0220 	orr.w	r2, r3, #32
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2203      	movs	r2, #3
 800534c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e010      	b.n	8005376 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e005      	b.n	8005368 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3304      	adds	r3, #4
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	429a      	cmp	r2, r3
 8005372:	d3f3      	bcc.n	800535c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop

08005384 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8005384:	b480      	push	{r7}
 8005386:	b089      	sub	sp, #36	; 0x24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80053a2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80053aa:	4313      	orrs	r3, r2
 80053ac:	61fb      	str	r3, [r7, #28]
 80053ae:	e00a      	b.n	80053c6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80053b8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80053be:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80053c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80053d0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80053d6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80053dc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053f0:	6839      	ldr	r1, [r7, #0]
 80053f2:	fb01 f303 	mul.w	r3, r1, r3
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	3304      	adds	r3, #4
 8005406:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	3304      	adds	r3, #4
 8005412:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005414:	2300      	movs	r3, #0
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e020      	b.n	800545c <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	3303      	adds	r3, #3
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	4413      	add	r3, r2
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	3302      	adds	r3, #2
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	440b      	add	r3, r1
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005432:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	3301      	adds	r3, #1
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	440b      	add	r3, r1
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005440:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	440a      	add	r2, r1
 8005448:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800544a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	3304      	adds	r3, #4
 8005454:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	3304      	adds	r3, #4
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	0c1b      	lsrs	r3, r3, #16
 8005462:	4a06      	ldr	r2, [pc, #24]	; (800547c <FDCAN_CopyMessageToRAM+0xf8>)
 8005464:	5cd3      	ldrb	r3, [r2, r3]
 8005466:	461a      	mov	r2, r3
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	4293      	cmp	r3, r2
 800546c:	d3d5      	bcc.n	800541a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800546e:	bf00      	nop
 8005470:	bf00      	nop
 8005472:	3724      	adds	r7, #36	; 0x24
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	08010ab4 	.word	0x08010ab4

08005480 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005480:	b480      	push	{r7}
 8005482:	b089      	sub	sp, #36	; 0x24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800548a:	2300      	movs	r3, #0
 800548c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800548e:	4b86      	ldr	r3, [pc, #536]	; (80056a8 <HAL_GPIO_Init+0x228>)
 8005490:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005492:	e18c      	b.n	80057ae <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	2101      	movs	r1, #1
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	fa01 f303 	lsl.w	r3, r1, r3
 80054a0:	4013      	ands	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 817e 	beq.w	80057a8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d005      	beq.n	80054c4 <HAL_GPIO_Init+0x44>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f003 0303 	and.w	r3, r3, #3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d130      	bne.n	8005526 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	2203      	movs	r2, #3
 80054d0:	fa02 f303 	lsl.w	r3, r2, r3
 80054d4:	43db      	mvns	r3, r3
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4013      	ands	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054fa:	2201      	movs	r2, #1
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	43db      	mvns	r3, r3
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4013      	ands	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	091b      	lsrs	r3, r3, #4
 8005510:	f003 0201 	and.w	r2, r3, #1
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4313      	orrs	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	2b03      	cmp	r3, #3
 8005530:	d017      	beq.n	8005562 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	2203      	movs	r2, #3
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	43db      	mvns	r3, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4013      	ands	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4313      	orrs	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d123      	bne.n	80055b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	08da      	lsrs	r2, r3, #3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3208      	adds	r2, #8
 8005576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	220f      	movs	r2, #15
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	43db      	mvns	r3, r3
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	4013      	ands	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	08da      	lsrs	r2, r3, #3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3208      	adds	r2, #8
 80055b0:	69b9      	ldr	r1, [r7, #24]
 80055b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	2203      	movs	r2, #3
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	43db      	mvns	r3, r3
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4013      	ands	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f003 0203 	and.w	r2, r3, #3
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 80d8 	beq.w	80057a8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055f8:	4b2c      	ldr	r3, [pc, #176]	; (80056ac <HAL_GPIO_Init+0x22c>)
 80055fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055fe:	4a2b      	ldr	r2, [pc, #172]	; (80056ac <HAL_GPIO_Init+0x22c>)
 8005600:	f043 0302 	orr.w	r3, r3, #2
 8005604:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005608:	4b28      	ldr	r3, [pc, #160]	; (80056ac <HAL_GPIO_Init+0x22c>)
 800560a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005616:	4a26      	ldr	r2, [pc, #152]	; (80056b0 <HAL_GPIO_Init+0x230>)
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	089b      	lsrs	r3, r3, #2
 800561c:	3302      	adds	r3, #2
 800561e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	220f      	movs	r2, #15
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	43db      	mvns	r3, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	4013      	ands	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a1d      	ldr	r2, [pc, #116]	; (80056b4 <HAL_GPIO_Init+0x234>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d04a      	beq.n	80056d8 <HAL_GPIO_Init+0x258>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a1c      	ldr	r2, [pc, #112]	; (80056b8 <HAL_GPIO_Init+0x238>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d02b      	beq.n	80056a2 <HAL_GPIO_Init+0x222>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a1b      	ldr	r2, [pc, #108]	; (80056bc <HAL_GPIO_Init+0x23c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d025      	beq.n	800569e <HAL_GPIO_Init+0x21e>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a1a      	ldr	r2, [pc, #104]	; (80056c0 <HAL_GPIO_Init+0x240>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d01f      	beq.n	800569a <HAL_GPIO_Init+0x21a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <HAL_GPIO_Init+0x244>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d019      	beq.n	8005696 <HAL_GPIO_Init+0x216>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a18      	ldr	r2, [pc, #96]	; (80056c8 <HAL_GPIO_Init+0x248>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <HAL_GPIO_Init+0x212>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a17      	ldr	r2, [pc, #92]	; (80056cc <HAL_GPIO_Init+0x24c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00d      	beq.n	800568e <HAL_GPIO_Init+0x20e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a16      	ldr	r2, [pc, #88]	; (80056d0 <HAL_GPIO_Init+0x250>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d007      	beq.n	800568a <HAL_GPIO_Init+0x20a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a15      	ldr	r2, [pc, #84]	; (80056d4 <HAL_GPIO_Init+0x254>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d101      	bne.n	8005686 <HAL_GPIO_Init+0x206>
 8005682:	2309      	movs	r3, #9
 8005684:	e029      	b.n	80056da <HAL_GPIO_Init+0x25a>
 8005686:	230a      	movs	r3, #10
 8005688:	e027      	b.n	80056da <HAL_GPIO_Init+0x25a>
 800568a:	2307      	movs	r3, #7
 800568c:	e025      	b.n	80056da <HAL_GPIO_Init+0x25a>
 800568e:	2306      	movs	r3, #6
 8005690:	e023      	b.n	80056da <HAL_GPIO_Init+0x25a>
 8005692:	2305      	movs	r3, #5
 8005694:	e021      	b.n	80056da <HAL_GPIO_Init+0x25a>
 8005696:	2304      	movs	r3, #4
 8005698:	e01f      	b.n	80056da <HAL_GPIO_Init+0x25a>
 800569a:	2303      	movs	r3, #3
 800569c:	e01d      	b.n	80056da <HAL_GPIO_Init+0x25a>
 800569e:	2302      	movs	r3, #2
 80056a0:	e01b      	b.n	80056da <HAL_GPIO_Init+0x25a>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e019      	b.n	80056da <HAL_GPIO_Init+0x25a>
 80056a6:	bf00      	nop
 80056a8:	58000080 	.word	0x58000080
 80056ac:	58024400 	.word	0x58024400
 80056b0:	58000400 	.word	0x58000400
 80056b4:	58020000 	.word	0x58020000
 80056b8:	58020400 	.word	0x58020400
 80056bc:	58020800 	.word	0x58020800
 80056c0:	58020c00 	.word	0x58020c00
 80056c4:	58021000 	.word	0x58021000
 80056c8:	58021400 	.word	0x58021400
 80056cc:	58021800 	.word	0x58021800
 80056d0:	58021c00 	.word	0x58021c00
 80056d4:	58022400 	.word	0x58022400
 80056d8:	2300      	movs	r3, #0
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	f002 0203 	and.w	r2, r2, #3
 80056e0:	0092      	lsls	r2, r2, #2
 80056e2:	4093      	lsls	r3, r2
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056ea:	4938      	ldr	r1, [pc, #224]	; (80057cc <HAL_GPIO_Init+0x34c>)
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	089b      	lsrs	r3, r3, #2
 80056f0:	3302      	adds	r3, #2
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	43db      	mvns	r3, r3
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	4013      	ands	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800571e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	43db      	mvns	r3, r3
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	4013      	ands	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800574c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	43db      	mvns	r3, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4013      	ands	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	43db      	mvns	r3, r3
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	4013      	ands	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	3301      	adds	r3, #1
 80057ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	fa22 f303 	lsr.w	r3, r2, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f47f ae6b 	bne.w	8005494 <HAL_GPIO_Init+0x14>
  }
}
 80057be:	bf00      	nop
 80057c0:	bf00      	nop
 80057c2:	3724      	adds	r7, #36	; 0x24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	58000400 	.word	0x58000400

080057d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	807b      	strh	r3, [r7, #2]
 80057dc:	4613      	mov	r3, r2
 80057de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057e0:	787b      	ldrb	r3, [r7, #1]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057e6:	887a      	ldrh	r2, [r7, #2]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80057ec:	e003      	b.n	80057f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80057ee:	887b      	ldrh	r3, [r7, #2]
 80057f0:	041a      	lsls	r2, r3, #16
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	619a      	str	r2, [r3, #24]
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
	...

08005804 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800580c:	4b19      	ldr	r3, [pc, #100]	; (8005874 <HAL_PWREx_ConfigSupply+0x70>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b04      	cmp	r3, #4
 8005816:	d00a      	beq.n	800582e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005818:	4b16      	ldr	r3, [pc, #88]	; (8005874 <HAL_PWREx_ConfigSupply+0x70>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	429a      	cmp	r2, r3
 8005824:	d001      	beq.n	800582a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e01f      	b.n	800586a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	e01d      	b.n	800586a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800582e:	4b11      	ldr	r3, [pc, #68]	; (8005874 <HAL_PWREx_ConfigSupply+0x70>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f023 0207 	bic.w	r2, r3, #7
 8005836:	490f      	ldr	r1, [pc, #60]	; (8005874 <HAL_PWREx_ConfigSupply+0x70>)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4313      	orrs	r3, r2
 800583c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800583e:	f7fe fb45 	bl	8003ecc <HAL_GetTick>
 8005842:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005844:	e009      	b.n	800585a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005846:	f7fe fb41 	bl	8003ecc <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005854:	d901      	bls.n	800585a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e007      	b.n	800586a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <HAL_PWREx_ConfigSupply+0x70>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005866:	d1ee      	bne.n	8005846 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	58024800 	.word	0x58024800

08005878 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08c      	sub	sp, #48	; 0x30
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e3c8      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8087 	beq.w	80059a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005898:	4b88      	ldr	r3, [pc, #544]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058a2:	4b86      	ldr	r3, [pc, #536]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80058a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058aa:	2b10      	cmp	r3, #16
 80058ac:	d007      	beq.n	80058be <HAL_RCC_OscConfig+0x46>
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	2b18      	cmp	r3, #24
 80058b2:	d110      	bne.n	80058d6 <HAL_RCC_OscConfig+0x5e>
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d10b      	bne.n	80058d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058be:	4b7f      	ldr	r3, [pc, #508]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d06c      	beq.n	80059a4 <HAL_RCC_OscConfig+0x12c>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d168      	bne.n	80059a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e3a2      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058de:	d106      	bne.n	80058ee <HAL_RCC_OscConfig+0x76>
 80058e0:	4b76      	ldr	r3, [pc, #472]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a75      	ldr	r2, [pc, #468]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 80058e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	e02e      	b.n	800594c <HAL_RCC_OscConfig+0xd4>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10c      	bne.n	8005910 <HAL_RCC_OscConfig+0x98>
 80058f6:	4b71      	ldr	r3, [pc, #452]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a70      	ldr	r2, [pc, #448]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 80058fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	4b6e      	ldr	r3, [pc, #440]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a6d      	ldr	r2, [pc, #436]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e01d      	b.n	800594c <HAL_RCC_OscConfig+0xd4>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005918:	d10c      	bne.n	8005934 <HAL_RCC_OscConfig+0xbc>
 800591a:	4b68      	ldr	r3, [pc, #416]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a67      	ldr	r2, [pc, #412]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	4b65      	ldr	r3, [pc, #404]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a64      	ldr	r2, [pc, #400]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 800592c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	e00b      	b.n	800594c <HAL_RCC_OscConfig+0xd4>
 8005934:	4b61      	ldr	r3, [pc, #388]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a60      	ldr	r2, [pc, #384]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 800593a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	4b5e      	ldr	r3, [pc, #376]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a5d      	ldr	r2, [pc, #372]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800594a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d013      	beq.n	800597c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005954:	f7fe faba 	bl	8003ecc <HAL_GetTick>
 8005958:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800595c:	f7fe fab6 	bl	8003ecc <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b64      	cmp	r3, #100	; 0x64
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e356      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800596e:	4b53      	ldr	r3, [pc, #332]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0f0      	beq.n	800595c <HAL_RCC_OscConfig+0xe4>
 800597a:	e014      	b.n	80059a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fe faa6 	bl	8003ecc <HAL_GetTick>
 8005980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005984:	f7fe faa2 	bl	8003ecc <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b64      	cmp	r3, #100	; 0x64
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e342      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005996:	4b49      	ldr	r3, [pc, #292]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0x10c>
 80059a2:	e000      	b.n	80059a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 808c 	beq.w	8005acc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059b4:	4b41      	ldr	r3, [pc, #260]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059be:	4b3f      	ldr	r3, [pc, #252]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d007      	beq.n	80059da <HAL_RCC_OscConfig+0x162>
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	2b18      	cmp	r3, #24
 80059ce:	d137      	bne.n	8005a40 <HAL_RCC_OscConfig+0x1c8>
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d132      	bne.n	8005a40 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059da:	4b38      	ldr	r3, [pc, #224]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d005      	beq.n	80059f2 <HAL_RCC_OscConfig+0x17a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e314      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059f2:	4b32      	ldr	r3, [pc, #200]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f023 0219 	bic.w	r2, r3, #25
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	492f      	ldr	r1, [pc, #188]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a04:	f7fe fa62 	bl	8003ecc <HAL_GetTick>
 8005a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a0c:	f7fe fa5e 	bl	8003ecc <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e2fe      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a1e:	4b27      	ldr	r3, [pc, #156]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0f0      	beq.n	8005a0c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a2a:	4b24      	ldr	r3, [pc, #144]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	061b      	lsls	r3, r3, #24
 8005a38:	4920      	ldr	r1, [pc, #128]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a3e:	e045      	b.n	8005acc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d026      	beq.n	8005a96 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a48:	4b1c      	ldr	r3, [pc, #112]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f023 0219 	bic.w	r2, r3, #25
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	4919      	ldr	r1, [pc, #100]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5a:	f7fe fa37 	bl	8003ecc <HAL_GetTick>
 8005a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a60:	e008      	b.n	8005a74 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a62:	f7fe fa33 	bl	8003ecc <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d901      	bls.n	8005a74 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e2d3      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a74:	4b11      	ldr	r3, [pc, #68]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0f0      	beq.n	8005a62 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a80:	4b0e      	ldr	r3, [pc, #56]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	061b      	lsls	r3, r3, #24
 8005a8e:	490b      	ldr	r1, [pc, #44]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	604b      	str	r3, [r1, #4]
 8005a94:	e01a      	b.n	8005acc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a08      	ldr	r2, [pc, #32]	; (8005abc <HAL_RCC_OscConfig+0x244>)
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa2:	f7fe fa13 	bl	8003ecc <HAL_GetTick>
 8005aa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005aa8:	e00a      	b.n	8005ac0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aaa:	f7fe fa0f 	bl	8003ecc <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d903      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e2af      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
 8005abc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ac0:	4b96      	ldr	r3, [pc, #600]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1ee      	bne.n	8005aaa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d06a      	beq.n	8005bae <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad8:	4b90      	ldr	r3, [pc, #576]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ae0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ae2:	4b8e      	ldr	r3, [pc, #568]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d007      	beq.n	8005afe <HAL_RCC_OscConfig+0x286>
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b18      	cmp	r3, #24
 8005af2:	d11b      	bne.n	8005b2c <HAL_RCC_OscConfig+0x2b4>
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d116      	bne.n	8005b2c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005afe:	4b87      	ldr	r3, [pc, #540]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d005      	beq.n	8005b16 <HAL_RCC_OscConfig+0x29e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	2b80      	cmp	r3, #128	; 0x80
 8005b10:	d001      	beq.n	8005b16 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e282      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b16:	4b81      	ldr	r3, [pc, #516]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	061b      	lsls	r3, r3, #24
 8005b24:	497d      	ldr	r1, [pc, #500]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b2a:	e040      	b.n	8005bae <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d023      	beq.n	8005b7c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005b34:	4b79      	ldr	r3, [pc, #484]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a78      	ldr	r2, [pc, #480]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b40:	f7fe f9c4 	bl	8003ecc <HAL_GetTick>
 8005b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b46:	e008      	b.n	8005b5a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b48:	f7fe f9c0 	bl	8003ecc <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e260      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b5a:	4b70      	ldr	r3, [pc, #448]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0f0      	beq.n	8005b48 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b66:	4b6d      	ldr	r3, [pc, #436]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	061b      	lsls	r3, r3, #24
 8005b74:	4969      	ldr	r1, [pc, #420]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60cb      	str	r3, [r1, #12]
 8005b7a:	e018      	b.n	8005bae <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b7c:	4b67      	ldr	r3, [pc, #412]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a66      	ldr	r2, [pc, #408]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b88:	f7fe f9a0 	bl	8003ecc <HAL_GetTick>
 8005b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b90:	f7fe f99c 	bl	8003ecc <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e23c      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ba2:	4b5e      	ldr	r3, [pc, #376]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d036      	beq.n	8005c28 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d019      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bc2:	4b56      	ldr	r3, [pc, #344]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bc6:	4a55      	ldr	r2, [pc, #340]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bce:	f7fe f97d 	bl	8003ecc <HAL_GetTick>
 8005bd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd6:	f7fe f979 	bl	8003ecc <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e219      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005be8:	4b4c      	ldr	r3, [pc, #304]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0f0      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x35e>
 8005bf4:	e018      	b.n	8005c28 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bf6:	4b49      	ldr	r3, [pc, #292]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bfa:	4a48      	ldr	r2, [pc, #288]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005bfc:	f023 0301 	bic.w	r3, r3, #1
 8005c00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c02:	f7fe f963 	bl	8003ecc <HAL_GetTick>
 8005c06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c0a:	f7fe f95f 	bl	8003ecc <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e1ff      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c1c:	4b3f      	ldr	r3, [pc, #252]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1f0      	bne.n	8005c0a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d036      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d019      	beq.n	8005c70 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c3c:	4b37      	ldr	r3, [pc, #220]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a36      	ldr	r2, [pc, #216]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005c42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c48:	f7fe f940 	bl	8003ecc <HAL_GetTick>
 8005c4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c50:	f7fe f93c 	bl	8003ecc <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e1dc      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c62:	4b2e      	ldr	r3, [pc, #184]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0f0      	beq.n	8005c50 <HAL_RCC_OscConfig+0x3d8>
 8005c6e:	e018      	b.n	8005ca2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c70:	4b2a      	ldr	r3, [pc, #168]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a29      	ldr	r2, [pc, #164]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c7c:	f7fe f926 	bl	8003ecc <HAL_GetTick>
 8005c80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c84:	f7fe f922 	bl	8003ecc <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e1c2      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c96:	4b21      	ldr	r3, [pc, #132]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f0      	bne.n	8005c84 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8086 	beq.w	8005dbc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005cb0:	4b1b      	ldr	r3, [pc, #108]	; (8005d20 <HAL_RCC_OscConfig+0x4a8>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1a      	ldr	r2, [pc, #104]	; (8005d20 <HAL_RCC_OscConfig+0x4a8>)
 8005cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cbc:	f7fe f906 	bl	8003ecc <HAL_GetTick>
 8005cc0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cc4:	f7fe f902 	bl	8003ecc <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b64      	cmp	r3, #100	; 0x64
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e1a2      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cd6:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <HAL_RCC_OscConfig+0x4a8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0f0      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d106      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x480>
 8005cea:	4b0c      	ldr	r3, [pc, #48]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cee:	4a0b      	ldr	r2, [pc, #44]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005cf0:	f043 0301 	orr.w	r3, r3, #1
 8005cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf6:	e032      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e6>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d111      	bne.n	8005d24 <HAL_RCC_OscConfig+0x4ac>
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d04:	4a05      	ldr	r2, [pc, #20]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005d06:	f023 0301 	bic.w	r3, r3, #1
 8005d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d0c:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d10:	4a02      	ldr	r2, [pc, #8]	; (8005d1c <HAL_RCC_OscConfig+0x4a4>)
 8005d12:	f023 0304 	bic.w	r3, r3, #4
 8005d16:	6713      	str	r3, [r2, #112]	; 0x70
 8005d18:	e021      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e6>
 8005d1a:	bf00      	nop
 8005d1c:	58024400 	.word	0x58024400
 8005d20:	58024800 	.word	0x58024800
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2b05      	cmp	r3, #5
 8005d2a:	d10c      	bne.n	8005d46 <HAL_RCC_OscConfig+0x4ce>
 8005d2c:	4b83      	ldr	r3, [pc, #524]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d30:	4a82      	ldr	r2, [pc, #520]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005d32:	f043 0304 	orr.w	r3, r3, #4
 8005d36:	6713      	str	r3, [r2, #112]	; 0x70
 8005d38:	4b80      	ldr	r3, [pc, #512]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3c:	4a7f      	ldr	r2, [pc, #508]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	6713      	str	r3, [r2, #112]	; 0x70
 8005d44:	e00b      	b.n	8005d5e <HAL_RCC_OscConfig+0x4e6>
 8005d46:	4b7d      	ldr	r3, [pc, #500]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4a:	4a7c      	ldr	r2, [pc, #496]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005d4c:	f023 0301 	bic.w	r3, r3, #1
 8005d50:	6713      	str	r3, [r2, #112]	; 0x70
 8005d52:	4b7a      	ldr	r3, [pc, #488]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	4a79      	ldr	r2, [pc, #484]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005d58:	f023 0304 	bic.w	r3, r3, #4
 8005d5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d015      	beq.n	8005d92 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d66:	f7fe f8b1 	bl	8003ecc <HAL_GetTick>
 8005d6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d6c:	e00a      	b.n	8005d84 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d6e:	f7fe f8ad 	bl	8003ecc <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e14b      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d84:	4b6d      	ldr	r3, [pc, #436]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0ee      	beq.n	8005d6e <HAL_RCC_OscConfig+0x4f6>
 8005d90:	e014      	b.n	8005dbc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d92:	f7fe f89b 	bl	8003ecc <HAL_GetTick>
 8005d96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d98:	e00a      	b.n	8005db0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d9a:	f7fe f897 	bl	8003ecc <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e135      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005db0:	4b62      	ldr	r3, [pc, #392]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1ee      	bne.n	8005d9a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 812a 	beq.w	800601a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005dc6:	4b5d      	ldr	r3, [pc, #372]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dce:	2b18      	cmp	r3, #24
 8005dd0:	f000 80ba 	beq.w	8005f48 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	f040 8095 	bne.w	8005f08 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dde:	4b57      	ldr	r3, [pc, #348]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a56      	ldr	r2, [pc, #344]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dea:	f7fe f86f 	bl	8003ecc <HAL_GetTick>
 8005dee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df2:	f7fe f86b 	bl	8003ecc <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e10b      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e04:	4b4d      	ldr	r3, [pc, #308]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f0      	bne.n	8005df2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e10:	4b4a      	ldr	r3, [pc, #296]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005e12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e14:	4b4a      	ldr	r3, [pc, #296]	; (8005f40 <HAL_RCC_OscConfig+0x6c8>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e20:	0112      	lsls	r2, r2, #4
 8005e22:	430a      	orrs	r2, r1
 8005e24:	4945      	ldr	r1, [pc, #276]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	628b      	str	r3, [r1, #40]	; 0x28
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	025b      	lsls	r3, r3, #9
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	3b01      	subs	r3, #1
 8005e46:	041b      	lsls	r3, r3, #16
 8005e48:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e52:	3b01      	subs	r3, #1
 8005e54:	061b      	lsls	r3, r3, #24
 8005e56:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e5a:	4938      	ldr	r1, [pc, #224]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e60:	4b36      	ldr	r3, [pc, #216]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	4a35      	ldr	r2, [pc, #212]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005e66:	f023 0301 	bic.w	r3, r3, #1
 8005e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e6c:	4b33      	ldr	r3, [pc, #204]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e70:	4b34      	ldr	r3, [pc, #208]	; (8005f44 <HAL_RCC_OscConfig+0x6cc>)
 8005e72:	4013      	ands	r3, r2
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e78:	00d2      	lsls	r2, r2, #3
 8005e7a:	4930      	ldr	r1, [pc, #192]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e80:	4b2e      	ldr	r3, [pc, #184]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	f023 020c 	bic.w	r2, r3, #12
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	492b      	ldr	r1, [pc, #172]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e92:	4b2a      	ldr	r3, [pc, #168]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	f023 0202 	bic.w	r2, r3, #2
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9e:	4927      	ldr	r1, [pc, #156]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ea4:	4b25      	ldr	r3, [pc, #148]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	4a24      	ldr	r2, [pc, #144]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eb0:	4b22      	ldr	r3, [pc, #136]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	4a21      	ldr	r2, [pc, #132]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ebc:	4b1f      	ldr	r3, [pc, #124]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	4a1e      	ldr	r2, [pc, #120]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005ec2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005ec8:	4b1c      	ldr	r3, [pc, #112]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	4a1b      	ldr	r2, [pc, #108]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005ece:	f043 0301 	orr.w	r3, r3, #1
 8005ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ed4:	4b19      	ldr	r3, [pc, #100]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a18      	ldr	r2, [pc, #96]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fd fff4 	bl	8003ecc <HAL_GetTick>
 8005ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee8:	f7fd fff0 	bl	8003ecc <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e090      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005efa:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x670>
 8005f06:	e088      	b.n	800601a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f08:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a0b      	ldr	r2, [pc, #44]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f14:	f7fd ffda 	bl	8003ecc <HAL_GetTick>
 8005f18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f1c:	f7fd ffd6 	bl	8003ecc <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e076      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f2e:	4b03      	ldr	r3, [pc, #12]	; (8005f3c <HAL_RCC_OscConfig+0x6c4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1f0      	bne.n	8005f1c <HAL_RCC_OscConfig+0x6a4>
 8005f3a:	e06e      	b.n	800601a <HAL_RCC_OscConfig+0x7a2>
 8005f3c:	58024400 	.word	0x58024400
 8005f40:	fffffc0c 	.word	0xfffffc0c
 8005f44:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f48:	4b36      	ldr	r3, [pc, #216]	; (8006024 <HAL_RCC_OscConfig+0x7ac>)
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f4e:	4b35      	ldr	r3, [pc, #212]	; (8006024 <HAL_RCC_OscConfig+0x7ac>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d031      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f003 0203 	and.w	r2, r3, #3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d12a      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	091b      	lsrs	r3, r3, #4
 8005f6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d122      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d11a      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	0a5b      	lsrs	r3, r3, #9
 8005f8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f96:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d111      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	0c1b      	lsrs	r3, r3, #16
 8005fa0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d108      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	0e1b      	lsrs	r3, r3, #24
 8005fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d001      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e02b      	b.n	800601c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005fc4:	4b17      	ldr	r3, [pc, #92]	; (8006024 <HAL_RCC_OscConfig+0x7ac>)
 8005fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc8:	08db      	lsrs	r3, r3, #3
 8005fca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d01f      	beq.n	800601a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005fda:	4b12      	ldr	r3, [pc, #72]	; (8006024 <HAL_RCC_OscConfig+0x7ac>)
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	4a11      	ldr	r2, [pc, #68]	; (8006024 <HAL_RCC_OscConfig+0x7ac>)
 8005fe0:	f023 0301 	bic.w	r3, r3, #1
 8005fe4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fe6:	f7fd ff71 	bl	8003ecc <HAL_GetTick>
 8005fea:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005fec:	bf00      	nop
 8005fee:	f7fd ff6d 	bl	8003ecc <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d0f9      	beq.n	8005fee <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ffa:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <HAL_RCC_OscConfig+0x7ac>)
 8005ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <HAL_RCC_OscConfig+0x7b0>)
 8006000:	4013      	ands	r3, r2
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006006:	00d2      	lsls	r2, r2, #3
 8006008:	4906      	ldr	r1, [pc, #24]	; (8006024 <HAL_RCC_OscConfig+0x7ac>)
 800600a:	4313      	orrs	r3, r2
 800600c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800600e:	4b05      	ldr	r3, [pc, #20]	; (8006024 <HAL_RCC_OscConfig+0x7ac>)
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	4a04      	ldr	r2, [pc, #16]	; (8006024 <HAL_RCC_OscConfig+0x7ac>)
 8006014:	f043 0301 	orr.w	r3, r3, #1
 8006018:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3730      	adds	r7, #48	; 0x30
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	58024400 	.word	0x58024400
 8006028:	ffff0007 	.word	0xffff0007

0800602c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e19c      	b.n	800637a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006040:	4b8a      	ldr	r3, [pc, #552]	; (800626c <HAL_RCC_ClockConfig+0x240>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	429a      	cmp	r2, r3
 800604c:	d910      	bls.n	8006070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800604e:	4b87      	ldr	r3, [pc, #540]	; (800626c <HAL_RCC_ClockConfig+0x240>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f023 020f 	bic.w	r2, r3, #15
 8006056:	4985      	ldr	r1, [pc, #532]	; (800626c <HAL_RCC_ClockConfig+0x240>)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	4313      	orrs	r3, r2
 800605c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800605e:	4b83      	ldr	r3, [pc, #524]	; (800626c <HAL_RCC_ClockConfig+0x240>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d001      	beq.n	8006070 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e184      	b.n	800637a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d010      	beq.n	800609e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	4b7b      	ldr	r3, [pc, #492]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006088:	429a      	cmp	r2, r3
 800608a:	d908      	bls.n	800609e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800608c:	4b78      	ldr	r3, [pc, #480]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	4975      	ldr	r1, [pc, #468]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 800609a:	4313      	orrs	r3, r2
 800609c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0308 	and.w	r3, r3, #8
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d010      	beq.n	80060cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	695a      	ldr	r2, [r3, #20]
 80060ae:	4b70      	ldr	r3, [pc, #448]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d908      	bls.n	80060cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060ba:	4b6d      	ldr	r3, [pc, #436]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	496a      	ldr	r1, [pc, #424]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d010      	beq.n	80060fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699a      	ldr	r2, [r3, #24]
 80060dc:	4b64      	ldr	r3, [pc, #400]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d908      	bls.n	80060fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060e8:	4b61      	ldr	r3, [pc, #388]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	495e      	ldr	r1, [pc, #376]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b00      	cmp	r3, #0
 8006104:	d010      	beq.n	8006128 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69da      	ldr	r2, [r3, #28]
 800610a:	4b59      	ldr	r3, [pc, #356]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006112:	429a      	cmp	r2, r3
 8006114:	d908      	bls.n	8006128 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006116:	4b56      	ldr	r3, [pc, #344]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	4953      	ldr	r1, [pc, #332]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 8006124:	4313      	orrs	r3, r2
 8006126:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d010      	beq.n	8006156 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	4b4d      	ldr	r3, [pc, #308]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	f003 030f 	and.w	r3, r3, #15
 8006140:	429a      	cmp	r2, r3
 8006142:	d908      	bls.n	8006156 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006144:	4b4a      	ldr	r3, [pc, #296]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	f023 020f 	bic.w	r2, r3, #15
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	4947      	ldr	r1, [pc, #284]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 8006152:	4313      	orrs	r3, r2
 8006154:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d055      	beq.n	800620e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006162:	4b43      	ldr	r3, [pc, #268]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	4940      	ldr	r1, [pc, #256]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 8006170:	4313      	orrs	r3, r2
 8006172:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d107      	bne.n	800618c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800617c:	4b3c      	ldr	r3, [pc, #240]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d121      	bne.n	80061cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e0f6      	b.n	800637a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b03      	cmp	r3, #3
 8006192:	d107      	bne.n	80061a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006194:	4b36      	ldr	r3, [pc, #216]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d115      	bne.n	80061cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0ea      	b.n	800637a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d107      	bne.n	80061bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061ac:	4b30      	ldr	r3, [pc, #192]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d109      	bne.n	80061cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0de      	b.n	800637a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061bc:	4b2c      	ldr	r3, [pc, #176]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0d6      	b.n	800637a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061cc:	4b28      	ldr	r3, [pc, #160]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	f023 0207 	bic.w	r2, r3, #7
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	4925      	ldr	r1, [pc, #148]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061de:	f7fd fe75 	bl	8003ecc <HAL_GetTick>
 80061e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061e4:	e00a      	b.n	80061fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061e6:	f7fd fe71 	bl	8003ecc <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e0be      	b.n	800637a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061fc:	4b1c      	ldr	r3, [pc, #112]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	429a      	cmp	r2, r3
 800620c:	d1eb      	bne.n	80061e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d010      	beq.n	800623c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	4b14      	ldr	r3, [pc, #80]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	429a      	cmp	r2, r3
 8006228:	d208      	bcs.n	800623c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800622a:	4b11      	ldr	r3, [pc, #68]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f023 020f 	bic.w	r2, r3, #15
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	490e      	ldr	r1, [pc, #56]	; (8006270 <HAL_RCC_ClockConfig+0x244>)
 8006238:	4313      	orrs	r3, r2
 800623a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800623c:	4b0b      	ldr	r3, [pc, #44]	; (800626c <HAL_RCC_ClockConfig+0x240>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d214      	bcs.n	8006274 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624a:	4b08      	ldr	r3, [pc, #32]	; (800626c <HAL_RCC_ClockConfig+0x240>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f023 020f 	bic.w	r2, r3, #15
 8006252:	4906      	ldr	r1, [pc, #24]	; (800626c <HAL_RCC_ClockConfig+0x240>)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	4313      	orrs	r3, r2
 8006258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800625a:	4b04      	ldr	r3, [pc, #16]	; (800626c <HAL_RCC_ClockConfig+0x240>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	429a      	cmp	r2, r3
 8006266:	d005      	beq.n	8006274 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e086      	b.n	800637a <HAL_RCC_ClockConfig+0x34e>
 800626c:	52002000 	.word	0x52002000
 8006270:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d010      	beq.n	80062a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	4b3f      	ldr	r3, [pc, #252]	; (8006384 <HAL_RCC_ClockConfig+0x358>)
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800628c:	429a      	cmp	r2, r3
 800628e:	d208      	bcs.n	80062a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006290:	4b3c      	ldr	r3, [pc, #240]	; (8006384 <HAL_RCC_ClockConfig+0x358>)
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	4939      	ldr	r1, [pc, #228]	; (8006384 <HAL_RCC_ClockConfig+0x358>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d010      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695a      	ldr	r2, [r3, #20]
 80062b2:	4b34      	ldr	r3, [pc, #208]	; (8006384 <HAL_RCC_ClockConfig+0x358>)
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d208      	bcs.n	80062d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062be:	4b31      	ldr	r3, [pc, #196]	; (8006384 <HAL_RCC_ClockConfig+0x358>)
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	492e      	ldr	r1, [pc, #184]	; (8006384 <HAL_RCC_ClockConfig+0x358>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d010      	beq.n	80062fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	699a      	ldr	r2, [r3, #24]
 80062e0:	4b28      	ldr	r3, [pc, #160]	; (8006384 <HAL_RCC_ClockConfig+0x358>)
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d208      	bcs.n	80062fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062ec:	4b25      	ldr	r3, [pc, #148]	; (8006384 <HAL_RCC_ClockConfig+0x358>)
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	4922      	ldr	r1, [pc, #136]	; (8006384 <HAL_RCC_ClockConfig+0x358>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b00      	cmp	r3, #0
 8006308:	d010      	beq.n	800632c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69da      	ldr	r2, [r3, #28]
 800630e:	4b1d      	ldr	r3, [pc, #116]	; (8006384 <HAL_RCC_ClockConfig+0x358>)
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006316:	429a      	cmp	r2, r3
 8006318:	d208      	bcs.n	800632c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800631a:	4b1a      	ldr	r3, [pc, #104]	; (8006384 <HAL_RCC_ClockConfig+0x358>)
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	4917      	ldr	r1, [pc, #92]	; (8006384 <HAL_RCC_ClockConfig+0x358>)
 8006328:	4313      	orrs	r3, r2
 800632a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800632c:	f000 f834 	bl	8006398 <HAL_RCC_GetSysClockFreq>
 8006330:	4602      	mov	r2, r0
 8006332:	4b14      	ldr	r3, [pc, #80]	; (8006384 <HAL_RCC_ClockConfig+0x358>)
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	0a1b      	lsrs	r3, r3, #8
 8006338:	f003 030f 	and.w	r3, r3, #15
 800633c:	4912      	ldr	r1, [pc, #72]	; (8006388 <HAL_RCC_ClockConfig+0x35c>)
 800633e:	5ccb      	ldrb	r3, [r1, r3]
 8006340:	f003 031f 	and.w	r3, r3, #31
 8006344:	fa22 f303 	lsr.w	r3, r2, r3
 8006348:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800634a:	4b0e      	ldr	r3, [pc, #56]	; (8006384 <HAL_RCC_ClockConfig+0x358>)
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	4a0d      	ldr	r2, [pc, #52]	; (8006388 <HAL_RCC_ClockConfig+0x35c>)
 8006354:	5cd3      	ldrb	r3, [r2, r3]
 8006356:	f003 031f 	and.w	r3, r3, #31
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	fa22 f303 	lsr.w	r3, r2, r3
 8006360:	4a0a      	ldr	r2, [pc, #40]	; (800638c <HAL_RCC_ClockConfig+0x360>)
 8006362:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006364:	4a0a      	ldr	r2, [pc, #40]	; (8006390 <HAL_RCC_ClockConfig+0x364>)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800636a:	4b0a      	ldr	r3, [pc, #40]	; (8006394 <HAL_RCC_ClockConfig+0x368>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f7fd fd62 	bl	8003e38 <HAL_InitTick>
 8006374:	4603      	mov	r3, r0
 8006376:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	58024400 	.word	0x58024400
 8006388:	08010aa4 	.word	0x08010aa4
 800638c:	24000288 	.word	0x24000288
 8006390:	24000284 	.word	0x24000284
 8006394:	2400028c 	.word	0x2400028c

08006398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006398:	b480      	push	{r7}
 800639a:	b089      	sub	sp, #36	; 0x24
 800639c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800639e:	4bb3      	ldr	r3, [pc, #716]	; (800666c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063a6:	2b18      	cmp	r3, #24
 80063a8:	f200 8155 	bhi.w	8006656 <HAL_RCC_GetSysClockFreq+0x2be>
 80063ac:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80063ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b2:	bf00      	nop
 80063b4:	08006419 	.word	0x08006419
 80063b8:	08006657 	.word	0x08006657
 80063bc:	08006657 	.word	0x08006657
 80063c0:	08006657 	.word	0x08006657
 80063c4:	08006657 	.word	0x08006657
 80063c8:	08006657 	.word	0x08006657
 80063cc:	08006657 	.word	0x08006657
 80063d0:	08006657 	.word	0x08006657
 80063d4:	0800643f 	.word	0x0800643f
 80063d8:	08006657 	.word	0x08006657
 80063dc:	08006657 	.word	0x08006657
 80063e0:	08006657 	.word	0x08006657
 80063e4:	08006657 	.word	0x08006657
 80063e8:	08006657 	.word	0x08006657
 80063ec:	08006657 	.word	0x08006657
 80063f0:	08006657 	.word	0x08006657
 80063f4:	08006445 	.word	0x08006445
 80063f8:	08006657 	.word	0x08006657
 80063fc:	08006657 	.word	0x08006657
 8006400:	08006657 	.word	0x08006657
 8006404:	08006657 	.word	0x08006657
 8006408:	08006657 	.word	0x08006657
 800640c:	08006657 	.word	0x08006657
 8006410:	08006657 	.word	0x08006657
 8006414:	0800644b 	.word	0x0800644b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006418:	4b94      	ldr	r3, [pc, #592]	; (800666c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0320 	and.w	r3, r3, #32
 8006420:	2b00      	cmp	r3, #0
 8006422:	d009      	beq.n	8006438 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006424:	4b91      	ldr	r3, [pc, #580]	; (800666c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	08db      	lsrs	r3, r3, #3
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	4a90      	ldr	r2, [pc, #576]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006430:	fa22 f303 	lsr.w	r3, r2, r3
 8006434:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006436:	e111      	b.n	800665c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006438:	4b8d      	ldr	r3, [pc, #564]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800643a:	61bb      	str	r3, [r7, #24]
      break;
 800643c:	e10e      	b.n	800665c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800643e:	4b8d      	ldr	r3, [pc, #564]	; (8006674 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006440:	61bb      	str	r3, [r7, #24]
      break;
 8006442:	e10b      	b.n	800665c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006444:	4b8c      	ldr	r3, [pc, #560]	; (8006678 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006446:	61bb      	str	r3, [r7, #24]
      break;
 8006448:	e108      	b.n	800665c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800644a:	4b88      	ldr	r3, [pc, #544]	; (800666c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006454:	4b85      	ldr	r3, [pc, #532]	; (800666c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	091b      	lsrs	r3, r3, #4
 800645a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800645e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006460:	4b82      	ldr	r3, [pc, #520]	; (800666c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800646a:	4b80      	ldr	r3, [pc, #512]	; (800666c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800646c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646e:	08db      	lsrs	r3, r3, #3
 8006470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	fb02 f303 	mul.w	r3, r2, r3
 800647a:	ee07 3a90 	vmov	s15, r3
 800647e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006482:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 80e1 	beq.w	8006650 <HAL_RCC_GetSysClockFreq+0x2b8>
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2b02      	cmp	r3, #2
 8006492:	f000 8083 	beq.w	800659c <HAL_RCC_GetSysClockFreq+0x204>
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b02      	cmp	r3, #2
 800649a:	f200 80a1 	bhi.w	80065e0 <HAL_RCC_GetSysClockFreq+0x248>
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <HAL_RCC_GetSysClockFreq+0x114>
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d056      	beq.n	8006558 <HAL_RCC_GetSysClockFreq+0x1c0>
 80064aa:	e099      	b.n	80065e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064ac:	4b6f      	ldr	r3, [pc, #444]	; (800666c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0320 	and.w	r3, r3, #32
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d02d      	beq.n	8006514 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064b8:	4b6c      	ldr	r3, [pc, #432]	; (800666c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	08db      	lsrs	r3, r3, #3
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	4a6b      	ldr	r2, [pc, #428]	; (8006670 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064c4:	fa22 f303 	lsr.w	r3, r2, r3
 80064c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	ee07 3a90 	vmov	s15, r3
 80064d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e2:	4b62      	ldr	r3, [pc, #392]	; (800666c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ea:	ee07 3a90 	vmov	s15, r3
 80064ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800667c <HAL_RCC_GetSysClockFreq+0x2e4>
 80064fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800650a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800650e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006512:	e087      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	ee07 3a90 	vmov	s15, r3
 800651a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006680 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006526:	4b51      	ldr	r3, [pc, #324]	; (800666c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652e:	ee07 3a90 	vmov	s15, r3
 8006532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006536:	ed97 6a02 	vldr	s12, [r7, #8]
 800653a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800667c <HAL_RCC_GetSysClockFreq+0x2e4>
 800653e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800654a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800654e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006552:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006556:	e065      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006562:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006684 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800656a:	4b40      	ldr	r3, [pc, #256]	; (800666c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800656c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006572:	ee07 3a90 	vmov	s15, r3
 8006576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657a:	ed97 6a02 	vldr	s12, [r7, #8]
 800657e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800667c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800658a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800658e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006596:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800659a:	e043      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	ee07 3a90 	vmov	s15, r3
 80065a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006688 <HAL_RCC_GetSysClockFreq+0x2f0>
 80065aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ae:	4b2f      	ldr	r3, [pc, #188]	; (800666c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065be:	ed97 6a02 	vldr	s12, [r7, #8]
 80065c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800667c <HAL_RCC_GetSysClockFreq+0x2e4>
 80065c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065de:	e021      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006684 <HAL_RCC_GetSysClockFreq+0x2ec>
 80065ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f2:	4b1e      	ldr	r3, [pc, #120]	; (800666c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fa:	ee07 3a90 	vmov	s15, r3
 80065fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006602:	ed97 6a02 	vldr	s12, [r7, #8]
 8006606:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800667c <HAL_RCC_GetSysClockFreq+0x2e4>
 800660a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800660e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800661a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006622:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006624:	4b11      	ldr	r3, [pc, #68]	; (800666c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006628:	0a5b      	lsrs	r3, r3, #9
 800662a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800662e:	3301      	adds	r3, #1
 8006630:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	ee07 3a90 	vmov	s15, r3
 8006638:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800663c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006648:	ee17 3a90 	vmov	r3, s15
 800664c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800664e:	e005      	b.n	800665c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	61bb      	str	r3, [r7, #24]
      break;
 8006654:	e002      	b.n	800665c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006656:	4b07      	ldr	r3, [pc, #28]	; (8006674 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006658:	61bb      	str	r3, [r7, #24]
      break;
 800665a:	bf00      	nop
  }

  return sysclockfreq;
 800665c:	69bb      	ldr	r3, [r7, #24]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3724      	adds	r7, #36	; 0x24
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	58024400 	.word	0x58024400
 8006670:	03d09000 	.word	0x03d09000
 8006674:	003d0900 	.word	0x003d0900
 8006678:	017d7840 	.word	0x017d7840
 800667c:	46000000 	.word	0x46000000
 8006680:	4c742400 	.word	0x4c742400
 8006684:	4a742400 	.word	0x4a742400
 8006688:	4bbebc20 	.word	0x4bbebc20

0800668c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006692:	f7ff fe81 	bl	8006398 <HAL_RCC_GetSysClockFreq>
 8006696:	4602      	mov	r2, r0
 8006698:	4b10      	ldr	r3, [pc, #64]	; (80066dc <HAL_RCC_GetHCLKFreq+0x50>)
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	0a1b      	lsrs	r3, r3, #8
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	490f      	ldr	r1, [pc, #60]	; (80066e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80066a4:	5ccb      	ldrb	r3, [r1, r3]
 80066a6:	f003 031f 	and.w	r3, r3, #31
 80066aa:	fa22 f303 	lsr.w	r3, r2, r3
 80066ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066b0:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <HAL_RCC_GetHCLKFreq+0x50>)
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	f003 030f 	and.w	r3, r3, #15
 80066b8:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80066ba:	5cd3      	ldrb	r3, [r2, r3]
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	fa22 f303 	lsr.w	r3, r2, r3
 80066c6:	4a07      	ldr	r2, [pc, #28]	; (80066e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80066c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066ca:	4a07      	ldr	r2, [pc, #28]	; (80066e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80066d0:	4b04      	ldr	r3, [pc, #16]	; (80066e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80066d2:	681b      	ldr	r3, [r3, #0]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	58024400 	.word	0x58024400
 80066e0:	08010aa4 	.word	0x08010aa4
 80066e4:	24000288 	.word	0x24000288
 80066e8:	24000284 	.word	0x24000284

080066ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80066f0:	f7ff ffcc 	bl	800668c <HAL_RCC_GetHCLKFreq>
 80066f4:	4602      	mov	r2, r0
 80066f6:	4b06      	ldr	r3, [pc, #24]	; (8006710 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	091b      	lsrs	r3, r3, #4
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	4904      	ldr	r1, [pc, #16]	; (8006714 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006702:	5ccb      	ldrb	r3, [r1, r3]
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800670c:	4618      	mov	r0, r3
 800670e:	bd80      	pop	{r7, pc}
 8006710:	58024400 	.word	0x58024400
 8006714:	08010aa4 	.word	0x08010aa4

08006718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800671c:	f7ff ffb6 	bl	800668c <HAL_RCC_GetHCLKFreq>
 8006720:	4602      	mov	r2, r0
 8006722:	4b06      	ldr	r3, [pc, #24]	; (800673c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	0a1b      	lsrs	r3, r3, #8
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	4904      	ldr	r1, [pc, #16]	; (8006740 <HAL_RCC_GetPCLK2Freq+0x28>)
 800672e:	5ccb      	ldrb	r3, [r1, r3]
 8006730:	f003 031f 	and.w	r3, r3, #31
 8006734:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006738:	4618      	mov	r0, r3
 800673a:	bd80      	pop	{r7, pc}
 800673c:	58024400 	.word	0x58024400
 8006740:	08010aa4 	.word	0x08010aa4

08006744 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006748:	b0c6      	sub	sp, #280	; 0x118
 800674a:	af00      	add	r7, sp, #0
 800674c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006750:	2300      	movs	r3, #0
 8006752:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006756:	2300      	movs	r3, #0
 8006758:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800675c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006768:	2500      	movs	r5, #0
 800676a:	ea54 0305 	orrs.w	r3, r4, r5
 800676e:	d049      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006776:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800677a:	d02f      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800677c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006780:	d828      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006786:	d01a      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800678c:	d822      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006796:	d007      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006798:	e01c      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800679a:	4bab      	ldr	r3, [pc, #684]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	4aaa      	ldr	r2, [pc, #680]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067a6:	e01a      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ac:	3308      	adds	r3, #8
 80067ae:	2102      	movs	r1, #2
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 fc25 	bl	8008000 <RCCEx_PLL2_Config>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067bc:	e00f      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c2:	3328      	adds	r3, #40	; 0x28
 80067c4:	2102      	movs	r1, #2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f001 fccc 	bl	8008164 <RCCEx_PLL3_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067d2:	e004      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80067da:	e000      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80067dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10a      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80067e6:	4b98      	ldr	r3, [pc, #608]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80067ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f4:	4a94      	ldr	r2, [pc, #592]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067f6:	430b      	orrs	r3, r1
 80067f8:	6513      	str	r3, [r2, #80]	; 0x50
 80067fa:	e003      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006800:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006810:	f04f 0900 	mov.w	r9, #0
 8006814:	ea58 0309 	orrs.w	r3, r8, r9
 8006818:	d047      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800681a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006820:	2b04      	cmp	r3, #4
 8006822:	d82a      	bhi.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006824:	a201      	add	r2, pc, #4	; (adr r2, 800682c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682a:	bf00      	nop
 800682c:	08006841 	.word	0x08006841
 8006830:	0800684f 	.word	0x0800684f
 8006834:	08006865 	.word	0x08006865
 8006838:	08006883 	.word	0x08006883
 800683c:	08006883 	.word	0x08006883
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006840:	4b81      	ldr	r3, [pc, #516]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	4a80      	ldr	r2, [pc, #512]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800684a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800684c:	e01a      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006852:	3308      	adds	r3, #8
 8006854:	2100      	movs	r1, #0
 8006856:	4618      	mov	r0, r3
 8006858:	f001 fbd2 	bl	8008000 <RCCEx_PLL2_Config>
 800685c:	4603      	mov	r3, r0
 800685e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006862:	e00f      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006868:	3328      	adds	r3, #40	; 0x28
 800686a:	2100      	movs	r1, #0
 800686c:	4618      	mov	r0, r3
 800686e:	f001 fc79 	bl	8008164 <RCCEx_PLL3_Config>
 8006872:	4603      	mov	r3, r0
 8006874:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006878:	e004      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006880:	e000      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006884:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800688c:	4b6e      	ldr	r3, [pc, #440]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800688e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006890:	f023 0107 	bic.w	r1, r3, #7
 8006894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689a:	4a6b      	ldr	r2, [pc, #428]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800689c:	430b      	orrs	r3, r1
 800689e:	6513      	str	r3, [r2, #80]	; 0x50
 80068a0:	e003      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80068aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80068b6:	f04f 0b00 	mov.w	fp, #0
 80068ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80068be:	d05b      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80068c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068c8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80068cc:	d03b      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80068ce:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80068d2:	d834      	bhi.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80068d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068d8:	d037      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80068da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068de:	d82e      	bhi.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80068e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80068e4:	d033      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80068e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80068ea:	d828      	bhi.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80068ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068f0:	d01a      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80068f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068f6:	d822      	bhi.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80068fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006900:	d007      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006902:	e01c      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006904:	4b50      	ldr	r3, [pc, #320]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	4a4f      	ldr	r2, [pc, #316]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800690a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800690e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006910:	e01e      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006916:	3308      	adds	r3, #8
 8006918:	2100      	movs	r1, #0
 800691a:	4618      	mov	r0, r3
 800691c:	f001 fb70 	bl	8008000 <RCCEx_PLL2_Config>
 8006920:	4603      	mov	r3, r0
 8006922:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006926:	e013      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800692c:	3328      	adds	r3, #40	; 0x28
 800692e:	2100      	movs	r1, #0
 8006930:	4618      	mov	r0, r3
 8006932:	f001 fc17 	bl	8008164 <RCCEx_PLL3_Config>
 8006936:	4603      	mov	r3, r0
 8006938:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800693c:	e008      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006944:	e004      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006946:	bf00      	nop
 8006948:	e002      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800694a:	bf00      	nop
 800694c:	e000      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800694e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006950:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10b      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006958:	4b3b      	ldr	r3, [pc, #236]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800695a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006964:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006968:	4a37      	ldr	r2, [pc, #220]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800696a:	430b      	orrs	r3, r1
 800696c:	6593      	str	r3, [r2, #88]	; 0x58
 800696e:	e003      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006970:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006974:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006984:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006988:	2300      	movs	r3, #0
 800698a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800698e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006992:	460b      	mov	r3, r1
 8006994:	4313      	orrs	r3, r2
 8006996:	d05d      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80069a0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80069a4:	d03b      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80069a6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80069aa:	d834      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80069ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069b0:	d037      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80069b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069b6:	d82e      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80069b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069bc:	d033      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80069be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069c2:	d828      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80069c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069c8:	d01a      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80069ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ce:	d822      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80069d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069d8:	d007      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80069da:	e01c      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069dc:	4b1a      	ldr	r3, [pc, #104]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	4a19      	ldr	r2, [pc, #100]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069e8:	e01e      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ee:	3308      	adds	r3, #8
 80069f0:	2100      	movs	r1, #0
 80069f2:	4618      	mov	r0, r3
 80069f4:	f001 fb04 	bl	8008000 <RCCEx_PLL2_Config>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80069fe:	e013      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a04:	3328      	adds	r3, #40	; 0x28
 8006a06:	2100      	movs	r1, #0
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 fbab 	bl	8008164 <RCCEx_PLL3_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a14:	e008      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a1c:	e004      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006a1e:	bf00      	nop
 8006a20:	e002      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006a22:	bf00      	nop
 8006a24:	e000      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10d      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006a30:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a34:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a40:	4a01      	ldr	r2, [pc, #4]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a42:	430b      	orrs	r3, r1
 8006a44:	6593      	str	r3, [r2, #88]	; 0x58
 8006a46:	e005      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006a48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006a60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a64:	2300      	movs	r3, #0
 8006a66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a6a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4313      	orrs	r3, r2
 8006a72:	d03a      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a7a:	2b30      	cmp	r3, #48	; 0x30
 8006a7c:	d01f      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006a7e:	2b30      	cmp	r3, #48	; 0x30
 8006a80:	d819      	bhi.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d00c      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006a86:	2b20      	cmp	r3, #32
 8006a88:	d815      	bhi.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d019      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006a8e:	2b10      	cmp	r3, #16
 8006a90:	d111      	bne.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a92:	4baa      	ldr	r3, [pc, #680]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a96:	4aa9      	ldr	r2, [pc, #676]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006a9e:	e011      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	2102      	movs	r1, #2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 faa9 	bl	8008000 <RCCEx_PLL2_Config>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006ab4:	e006      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006abc:	e002      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006abe:	bf00      	nop
 8006ac0:	e000      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10a      	bne.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006acc:	4b9b      	ldr	r3, [pc, #620]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ada:	4a98      	ldr	r2, [pc, #608]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006adc:	430b      	orrs	r3, r1
 8006ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ae0:	e003      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ae6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006afa:	2300      	movs	r3, #0
 8006afc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b00:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006b04:	460b      	mov	r3, r1
 8006b06:	4313      	orrs	r3, r2
 8006b08:	d051      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b14:	d035      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006b16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b1a:	d82e      	bhi.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006b1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b20:	d031      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006b22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b26:	d828      	bhi.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b2c:	d01a      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b32:	d822      	bhi.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b3c:	d007      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006b3e:	e01c      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b40:	4b7e      	ldr	r3, [pc, #504]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	4a7d      	ldr	r2, [pc, #500]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b4c:	e01c      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b52:	3308      	adds	r3, #8
 8006b54:	2100      	movs	r1, #0
 8006b56:	4618      	mov	r0, r3
 8006b58:	f001 fa52 	bl	8008000 <RCCEx_PLL2_Config>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b62:	e011      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b68:	3328      	adds	r3, #40	; 0x28
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f001 faf9 	bl	8008164 <RCCEx_PLL3_Config>
 8006b72:	4603      	mov	r3, r0
 8006b74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b78:	e006      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b80:	e002      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006b82:	bf00      	nop
 8006b84:	e000      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10a      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006b90:	4b6a      	ldr	r3, [pc, #424]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b94:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b9e:	4a67      	ldr	r2, [pc, #412]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	6513      	str	r3, [r2, #80]	; 0x50
 8006ba4:	e003      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006baa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006bba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bc4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	d053      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bd8:	d033      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006bda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bde:	d82c      	bhi.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006be0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006be4:	d02f      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006be6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006bea:	d826      	bhi.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006bec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006bf0:	d02b      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006bf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006bf6:	d820      	bhi.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bfc:	d012      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006bfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c02:	d81a      	bhi.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d022      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c0c:	d115      	bne.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c12:	3308      	adds	r3, #8
 8006c14:	2101      	movs	r1, #1
 8006c16:	4618      	mov	r0, r3
 8006c18:	f001 f9f2 	bl	8008000 <RCCEx_PLL2_Config>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006c22:	e015      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c28:	3328      	adds	r3, #40	; 0x28
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f001 fa99 	bl	8008164 <RCCEx_PLL3_Config>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006c38:	e00a      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c40:	e006      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006c42:	bf00      	nop
 8006c44:	e004      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006c46:	bf00      	nop
 8006c48:	e002      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006c4a:	bf00      	nop
 8006c4c:	e000      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10a      	bne.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006c58:	4b38      	ldr	r3, [pc, #224]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c66:	4a35      	ldr	r2, [pc, #212]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c68:	430b      	orrs	r3, r1
 8006c6a:	6513      	str	r3, [r2, #80]	; 0x50
 8006c6c:	e003      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006c82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c86:	2300      	movs	r3, #0
 8006c88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c8c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c90:	460b      	mov	r3, r1
 8006c92:	4313      	orrs	r3, r2
 8006c94:	d058      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ca2:	d033      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ca8:	d82c      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cae:	d02f      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb4:	d826      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006cb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cba:	d02b      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006cbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cc0:	d820      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006cc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cc6:	d012      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ccc:	d81a      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d022      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006cd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cd6:	d115      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cdc:	3308      	adds	r3, #8
 8006cde:	2101      	movs	r1, #1
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f001 f98d 	bl	8008000 <RCCEx_PLL2_Config>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006cec:	e015      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf2:	3328      	adds	r3, #40	; 0x28
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f001 fa34 	bl	8008164 <RCCEx_PLL3_Config>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d02:	e00a      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d0a:	e006      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006d0c:	bf00      	nop
 8006d0e:	e004      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006d10:	bf00      	nop
 8006d12:	e002      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006d14:	bf00      	nop
 8006d16:	e000      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10e      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d22:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d26:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d32:	4a02      	ldr	r2, [pc, #8]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d34:	430b      	orrs	r3, r1
 8006d36:	6593      	str	r3, [r2, #88]	; 0x58
 8006d38:	e006      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006d3a:	bf00      	nop
 8006d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4313      	orrs	r3, r2
 8006d66:	d037      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d72:	d00e      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d78:	d816      	bhi.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d018      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006d7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d82:	d111      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d84:	4bc4      	ldr	r3, [pc, #784]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	4ac3      	ldr	r2, [pc, #780]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006d90:	e00f      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d96:	3308      	adds	r3, #8
 8006d98:	2101      	movs	r1, #1
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f001 f930 	bl	8008000 <RCCEx_PLL2_Config>
 8006da0:	4603      	mov	r3, r0
 8006da2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006da6:	e004      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006dae:	e000      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10a      	bne.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006dba:	4bb7      	ldr	r3, [pc, #732]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dbe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc8:	4ab3      	ldr	r2, [pc, #716]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	6513      	str	r3, [r2, #80]	; 0x50
 8006dce:	e003      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006de8:	2300      	movs	r3, #0
 8006dea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006dee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006df2:	460b      	mov	r3, r1
 8006df4:	4313      	orrs	r3, r2
 8006df6:	d039      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d81c      	bhi.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006e02:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e08:	08006e45 	.word	0x08006e45
 8006e0c:	08006e19 	.word	0x08006e19
 8006e10:	08006e27 	.word	0x08006e27
 8006e14:	08006e45 	.word	0x08006e45
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e18:	4b9f      	ldr	r3, [pc, #636]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	4a9e      	ldr	r2, [pc, #632]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006e24:	e00f      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	2102      	movs	r1, #2
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 f8e6 	bl	8008000 <RCCEx_PLL2_Config>
 8006e34:	4603      	mov	r3, r0
 8006e36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006e3a:	e004      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e42:	e000      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006e4e:	4b92      	ldr	r3, [pc, #584]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e52:	f023 0103 	bic.w	r1, r3, #3
 8006e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e5c:	4a8e      	ldr	r2, [pc, #568]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e5e:	430b      	orrs	r3, r1
 8006e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e62:	e003      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006e78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	f000 8099 	beq.w	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e8e:	4b83      	ldr	r3, [pc, #524]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a82      	ldr	r2, [pc, #520]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e9a:	f7fd f817 	bl	8003ecc <HAL_GetTick>
 8006e9e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ea2:	e00b      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ea4:	f7fd f812 	bl	8003ecc <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b64      	cmp	r3, #100	; 0x64
 8006eb2:	d903      	bls.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006eba:	e005      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ebc:	4b77      	ldr	r3, [pc, #476]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0ed      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d173      	bne.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006ed0:	4b71      	ldr	r3, [pc, #452]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ed2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006edc:	4053      	eors	r3, r2
 8006ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d015      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ee6:	4b6c      	ldr	r3, [pc, #432]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ef2:	4b69      	ldr	r3, [pc, #420]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef6:	4a68      	ldr	r2, [pc, #416]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006efc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006efe:	4b66      	ldr	r3, [pc, #408]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f02:	4a65      	ldr	r2, [pc, #404]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f08:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f0a:	4a63      	ldr	r2, [pc, #396]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f10:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f1e:	d118      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f20:	f7fc ffd4 	bl	8003ecc <HAL_GetTick>
 8006f24:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f28:	e00d      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f2a:	f7fc ffcf 	bl	8003ecc <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006f34:	1ad2      	subs	r2, r2, r3
 8006f36:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d903      	bls.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8006f44:	e005      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f46:	4b54      	ldr	r3, [pc, #336]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0eb      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006f52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d129      	bne.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f6a:	d10e      	bne.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006f6c:	4b4a      	ldr	r3, [pc, #296]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f7c:	091a      	lsrs	r2, r3, #4
 8006f7e:	4b48      	ldr	r3, [pc, #288]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	4a45      	ldr	r2, [pc, #276]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f84:	430b      	orrs	r3, r1
 8006f86:	6113      	str	r3, [r2, #16]
 8006f88:	e005      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006f8a:	4b43      	ldr	r3, [pc, #268]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	4a42      	ldr	r2, [pc, #264]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f94:	6113      	str	r3, [r2, #16]
 8006f96:	4b40      	ldr	r3, [pc, #256]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f98:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fa6:	4a3c      	ldr	r2, [pc, #240]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fa8:	430b      	orrs	r3, r1
 8006faa:	6713      	str	r3, [r2, #112]	; 0x70
 8006fac:	e008      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8006fb6:	e003      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f002 0301 	and.w	r3, r2, #1
 8006fcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006fd6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	f000 808f 	beq.w	8007100 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fe8:	2b28      	cmp	r3, #40	; 0x28
 8006fea:	d871      	bhi.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006fec:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff2:	bf00      	nop
 8006ff4:	080070d9 	.word	0x080070d9
 8006ff8:	080070d1 	.word	0x080070d1
 8006ffc:	080070d1 	.word	0x080070d1
 8007000:	080070d1 	.word	0x080070d1
 8007004:	080070d1 	.word	0x080070d1
 8007008:	080070d1 	.word	0x080070d1
 800700c:	080070d1 	.word	0x080070d1
 8007010:	080070d1 	.word	0x080070d1
 8007014:	080070a5 	.word	0x080070a5
 8007018:	080070d1 	.word	0x080070d1
 800701c:	080070d1 	.word	0x080070d1
 8007020:	080070d1 	.word	0x080070d1
 8007024:	080070d1 	.word	0x080070d1
 8007028:	080070d1 	.word	0x080070d1
 800702c:	080070d1 	.word	0x080070d1
 8007030:	080070d1 	.word	0x080070d1
 8007034:	080070bb 	.word	0x080070bb
 8007038:	080070d1 	.word	0x080070d1
 800703c:	080070d1 	.word	0x080070d1
 8007040:	080070d1 	.word	0x080070d1
 8007044:	080070d1 	.word	0x080070d1
 8007048:	080070d1 	.word	0x080070d1
 800704c:	080070d1 	.word	0x080070d1
 8007050:	080070d1 	.word	0x080070d1
 8007054:	080070d9 	.word	0x080070d9
 8007058:	080070d1 	.word	0x080070d1
 800705c:	080070d1 	.word	0x080070d1
 8007060:	080070d1 	.word	0x080070d1
 8007064:	080070d1 	.word	0x080070d1
 8007068:	080070d1 	.word	0x080070d1
 800706c:	080070d1 	.word	0x080070d1
 8007070:	080070d1 	.word	0x080070d1
 8007074:	080070d9 	.word	0x080070d9
 8007078:	080070d1 	.word	0x080070d1
 800707c:	080070d1 	.word	0x080070d1
 8007080:	080070d1 	.word	0x080070d1
 8007084:	080070d1 	.word	0x080070d1
 8007088:	080070d1 	.word	0x080070d1
 800708c:	080070d1 	.word	0x080070d1
 8007090:	080070d1 	.word	0x080070d1
 8007094:	080070d9 	.word	0x080070d9
 8007098:	58024400 	.word	0x58024400
 800709c:	58024800 	.word	0x58024800
 80070a0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a8:	3308      	adds	r3, #8
 80070aa:	2101      	movs	r1, #1
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 ffa7 	bl	8008000 <RCCEx_PLL2_Config>
 80070b2:	4603      	mov	r3, r0
 80070b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80070b8:	e00f      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070be:	3328      	adds	r3, #40	; 0x28
 80070c0:	2101      	movs	r1, #1
 80070c2:	4618      	mov	r0, r3
 80070c4:	f001 f84e 	bl	8008164 <RCCEx_PLL3_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80070ce:	e004      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80070d6:	e000      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80070d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10a      	bne.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80070e2:	4bbf      	ldr	r3, [pc, #764]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80070e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80070ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070f0:	4abb      	ldr	r2, [pc, #748]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80070f2:	430b      	orrs	r3, r1
 80070f4:	6553      	str	r3, [r2, #84]	; 0x54
 80070f6:	e003      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f002 0302 	and.w	r3, r2, #2
 800710c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007110:	2300      	movs	r3, #0
 8007112:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007116:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800711a:	460b      	mov	r3, r1
 800711c:	4313      	orrs	r3, r2
 800711e:	d041      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007126:	2b05      	cmp	r3, #5
 8007128:	d824      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800712a:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	0800717d 	.word	0x0800717d
 8007134:	08007149 	.word	0x08007149
 8007138:	0800715f 	.word	0x0800715f
 800713c:	0800717d 	.word	0x0800717d
 8007140:	0800717d 	.word	0x0800717d
 8007144:	0800717d 	.word	0x0800717d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800714c:	3308      	adds	r3, #8
 800714e:	2101      	movs	r1, #1
 8007150:	4618      	mov	r0, r3
 8007152:	f000 ff55 	bl	8008000 <RCCEx_PLL2_Config>
 8007156:	4603      	mov	r3, r0
 8007158:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800715c:	e00f      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800715e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007162:	3328      	adds	r3, #40	; 0x28
 8007164:	2101      	movs	r1, #1
 8007166:	4618      	mov	r0, r3
 8007168:	f000 fffc 	bl	8008164 <RCCEx_PLL3_Config>
 800716c:	4603      	mov	r3, r0
 800716e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007172:	e004      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800717a:	e000      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800717c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800717e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10a      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007186:	4b96      	ldr	r3, [pc, #600]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718a:	f023 0107 	bic.w	r1, r3, #7
 800718e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007194:	4a92      	ldr	r2, [pc, #584]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007196:	430b      	orrs	r3, r1
 8007198:	6553      	str	r3, [r2, #84]	; 0x54
 800719a:	e003      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	f002 0304 	and.w	r3, r2, #4
 80071b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071b4:	2300      	movs	r3, #0
 80071b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071ba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80071be:	460b      	mov	r3, r1
 80071c0:	4313      	orrs	r3, r2
 80071c2:	d044      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071cc:	2b05      	cmp	r3, #5
 80071ce:	d825      	bhi.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80071d0:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	08007225 	.word	0x08007225
 80071dc:	080071f1 	.word	0x080071f1
 80071e0:	08007207 	.word	0x08007207
 80071e4:	08007225 	.word	0x08007225
 80071e8:	08007225 	.word	0x08007225
 80071ec:	08007225 	.word	0x08007225
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f4:	3308      	adds	r3, #8
 80071f6:	2101      	movs	r1, #1
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 ff01 	bl	8008000 <RCCEx_PLL2_Config>
 80071fe:	4603      	mov	r3, r0
 8007200:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007204:	e00f      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800720a:	3328      	adds	r3, #40	; 0x28
 800720c:	2101      	movs	r1, #1
 800720e:	4618      	mov	r0, r3
 8007210:	f000 ffa8 	bl	8008164 <RCCEx_PLL3_Config>
 8007214:	4603      	mov	r3, r0
 8007216:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800721a:	e004      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007222:	e000      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007226:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10b      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800722e:	4b6c      	ldr	r3, [pc, #432]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007232:	f023 0107 	bic.w	r1, r3, #7
 8007236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800723a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723e:	4a68      	ldr	r2, [pc, #416]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007240:	430b      	orrs	r3, r1
 8007242:	6593      	str	r3, [r2, #88]	; 0x58
 8007244:	e003      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007246:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800724a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800724e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007256:	f002 0320 	and.w	r3, r2, #32
 800725a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800725e:	2300      	movs	r3, #0
 8007260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007264:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007268:	460b      	mov	r3, r1
 800726a:	4313      	orrs	r3, r2
 800726c:	d055      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800726e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007276:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800727a:	d033      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800727c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007280:	d82c      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007286:	d02f      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800728c:	d826      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800728e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007292:	d02b      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007294:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007298:	d820      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800729a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800729e:	d012      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80072a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a4:	d81a      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d022      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80072aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ae:	d115      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b4:	3308      	adds	r3, #8
 80072b6:	2100      	movs	r1, #0
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fea1 	bl	8008000 <RCCEx_PLL2_Config>
 80072be:	4603      	mov	r3, r0
 80072c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80072c4:	e015      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ca:	3328      	adds	r3, #40	; 0x28
 80072cc:	2102      	movs	r1, #2
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 ff48 	bl	8008164 <RCCEx_PLL3_Config>
 80072d4:	4603      	mov	r3, r0
 80072d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80072da:	e00a      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80072e2:	e006      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80072e4:	bf00      	nop
 80072e6:	e004      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80072e8:	bf00      	nop
 80072ea:	e002      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80072ec:	bf00      	nop
 80072ee:	e000      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80072f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10b      	bne.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072fa:	4b39      	ldr	r3, [pc, #228]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800730a:	4a35      	ldr	r2, [pc, #212]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800730c:	430b      	orrs	r3, r1
 800730e:	6553      	str	r3, [r2, #84]	; 0x54
 8007310:	e003      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007312:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007316:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800731a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007326:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800732a:	2300      	movs	r3, #0
 800732c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007330:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007334:	460b      	mov	r3, r1
 8007336:	4313      	orrs	r3, r2
 8007338:	d058      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800733a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800733e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007342:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007346:	d033      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007348:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800734c:	d82c      	bhi.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800734e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007352:	d02f      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007358:	d826      	bhi.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800735a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800735e:	d02b      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007360:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007364:	d820      	bhi.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800736a:	d012      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800736c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007370:	d81a      	bhi.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d022      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800737a:	d115      	bne.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800737c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007380:	3308      	adds	r3, #8
 8007382:	2100      	movs	r1, #0
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fe3b 	bl	8008000 <RCCEx_PLL2_Config>
 800738a:	4603      	mov	r3, r0
 800738c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007390:	e015      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007396:	3328      	adds	r3, #40	; 0x28
 8007398:	2102      	movs	r1, #2
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fee2 	bl	8008164 <RCCEx_PLL3_Config>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80073a6:	e00a      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80073ae:	e006      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80073b0:	bf00      	nop
 80073b2:	e004      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80073b4:	bf00      	nop
 80073b6:	e002      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80073b8:	bf00      	nop
 80073ba:	e000      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80073bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10e      	bne.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073c6:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80073ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073d6:	4a02      	ldr	r2, [pc, #8]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073d8:	430b      	orrs	r3, r1
 80073da:	6593      	str	r3, [r2, #88]	; 0x58
 80073dc:	e006      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80073de:	bf00      	nop
 80073e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80073ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80073f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073fc:	2300      	movs	r3, #0
 80073fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007402:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007406:	460b      	mov	r3, r1
 8007408:	4313      	orrs	r3, r2
 800740a:	d055      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800740c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007410:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007414:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007418:	d033      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800741a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800741e:	d82c      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007424:	d02f      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800742a:	d826      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800742c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007430:	d02b      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007432:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007436:	d820      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800743c:	d012      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800743e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007442:	d81a      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007444:	2b00      	cmp	r3, #0
 8007446:	d022      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800744c:	d115      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800744e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007452:	3308      	adds	r3, #8
 8007454:	2100      	movs	r1, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fdd2 	bl	8008000 <RCCEx_PLL2_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007462:	e015      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007468:	3328      	adds	r3, #40	; 0x28
 800746a:	2102      	movs	r1, #2
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fe79 	bl	8008164 <RCCEx_PLL3_Config>
 8007472:	4603      	mov	r3, r0
 8007474:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007478:	e00a      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007480:	e006      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007482:	bf00      	nop
 8007484:	e004      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007486:	bf00      	nop
 8007488:	e002      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800748a:	bf00      	nop
 800748c:	e000      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800748e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007490:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10b      	bne.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007498:	4ba0      	ldr	r3, [pc, #640]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800749a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80074a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074a8:	4a9c      	ldr	r2, [pc, #624]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074aa:	430b      	orrs	r3, r1
 80074ac:	6593      	str	r3, [r2, #88]	; 0x58
 80074ae:	e003      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80074b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80074b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	f002 0308 	and.w	r3, r2, #8
 80074c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074c8:	2300      	movs	r3, #0
 80074ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80074ce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80074d2:	460b      	mov	r3, r1
 80074d4:	4313      	orrs	r3, r2
 80074d6:	d01e      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80074d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e4:	d10c      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80074e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ea:	3328      	adds	r3, #40	; 0x28
 80074ec:	2102      	movs	r1, #2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 fe38 	bl	8008164 <RCCEx_PLL3_Config>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007500:	4b86      	ldr	r3, [pc, #536]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007504:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800750c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007510:	4a82      	ldr	r2, [pc, #520]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007512:	430b      	orrs	r3, r1
 8007514:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	f002 0310 	and.w	r3, r2, #16
 8007522:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007526:	2300      	movs	r3, #0
 8007528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800752c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007530:	460b      	mov	r3, r1
 8007532:	4313      	orrs	r3, r2
 8007534:	d01e      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800753e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007542:	d10c      	bne.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007548:	3328      	adds	r3, #40	; 0x28
 800754a:	2102      	movs	r1, #2
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fe09 	bl	8008164 <RCCEx_PLL3_Config>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800755e:	4b6f      	ldr	r3, [pc, #444]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007562:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800756a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800756e:	4a6b      	ldr	r2, [pc, #428]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007570:	430b      	orrs	r3, r1
 8007572:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007580:	67bb      	str	r3, [r7, #120]	; 0x78
 8007582:	2300      	movs	r3, #0
 8007584:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007586:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800758a:	460b      	mov	r3, r1
 800758c:	4313      	orrs	r3, r2
 800758e:	d03e      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007594:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800759c:	d022      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800759e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075a2:	d81b      	bhi.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d003      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80075a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ac:	d00b      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80075ae:	e015      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b4:	3308      	adds	r3, #8
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 fd21 	bl	8008000 <RCCEx_PLL2_Config>
 80075be:	4603      	mov	r3, r0
 80075c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80075c4:	e00f      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ca:	3328      	adds	r3, #40	; 0x28
 80075cc:	2102      	movs	r1, #2
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fdc8 	bl	8008164 <RCCEx_PLL3_Config>
 80075d4:	4603      	mov	r3, r0
 80075d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80075da:	e004      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80075e2:	e000      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80075e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10b      	bne.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075ee:	4b4b      	ldr	r3, [pc, #300]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80075f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80075fe:	4a47      	ldr	r2, [pc, #284]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007600:	430b      	orrs	r3, r1
 8007602:	6593      	str	r3, [r2, #88]	; 0x58
 8007604:	e003      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007606:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800760a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800760e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800761a:	673b      	str	r3, [r7, #112]	; 0x70
 800761c:	2300      	movs	r3, #0
 800761e:	677b      	str	r3, [r7, #116]	; 0x74
 8007620:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007624:	460b      	mov	r3, r1
 8007626:	4313      	orrs	r3, r2
 8007628:	d03b      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800762a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800762e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007632:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007636:	d01f      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800763c:	d818      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800763e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007642:	d003      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007648:	d007      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800764a:	e011      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800764c:	4b33      	ldr	r3, [pc, #204]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	4a32      	ldr	r2, [pc, #200]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007656:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007658:	e00f      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800765a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800765e:	3328      	adds	r3, #40	; 0x28
 8007660:	2101      	movs	r1, #1
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fd7e 	bl	8008164 <RCCEx_PLL3_Config>
 8007668:	4603      	mov	r3, r0
 800766a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800766e:	e004      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007676:	e000      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800767a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10b      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007682:	4b26      	ldr	r3, [pc, #152]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007686:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800768a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800768e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007692:	4a22      	ldr	r2, [pc, #136]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007694:	430b      	orrs	r3, r1
 8007696:	6553      	str	r3, [r2, #84]	; 0x54
 8007698:	e003      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800769e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80076a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076aa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80076ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80076b0:	2300      	movs	r3, #0
 80076b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076b4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80076b8:	460b      	mov	r3, r1
 80076ba:	4313      	orrs	r3, r2
 80076bc:	d034      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80076be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80076c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076cc:	d007      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80076ce:	e011      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d0:	4b12      	ldr	r3, [pc, #72]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	4a11      	ldr	r2, [pc, #68]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80076dc:	e00e      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e2:	3308      	adds	r3, #8
 80076e4:	2102      	movs	r1, #2
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 fc8a 	bl	8008000 <RCCEx_PLL2_Config>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80076f2:	e003      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80076fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10d      	bne.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800770c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007712:	4a02      	ldr	r2, [pc, #8]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007714:	430b      	orrs	r3, r1
 8007716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007718:	e006      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800771a:	bf00      	nop
 800771c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007720:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007724:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007730:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007734:	663b      	str	r3, [r7, #96]	; 0x60
 8007736:	2300      	movs	r3, #0
 8007738:	667b      	str	r3, [r7, #100]	; 0x64
 800773a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800773e:	460b      	mov	r3, r1
 8007740:	4313      	orrs	r3, r2
 8007742:	d00c      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007748:	3328      	adds	r3, #40	; 0x28
 800774a:	2102      	movs	r1, #2
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fd09 	bl	8008164 <RCCEx_PLL3_Config>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800775e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007766:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800776a:	65bb      	str	r3, [r7, #88]	; 0x58
 800776c:	2300      	movs	r3, #0
 800776e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007770:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007774:	460b      	mov	r3, r1
 8007776:	4313      	orrs	r3, r2
 8007778:	d036      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800777a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800777e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007784:	d018      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800778a:	d811      	bhi.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800778c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007790:	d014      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007796:	d80b      	bhi.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007798:	2b00      	cmp	r3, #0
 800779a:	d011      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800779c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a0:	d106      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077a2:	4bb7      	ldr	r3, [pc, #732]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	4ab6      	ldr	r2, [pc, #728]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80077ae:	e008      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80077b6:	e004      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80077b8:	bf00      	nop
 80077ba:	e002      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80077bc:	bf00      	nop
 80077be:	e000      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80077c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10a      	bne.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80077ca:	4bad      	ldr	r3, [pc, #692]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80077d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077d8:	4aa9      	ldr	r2, [pc, #676]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077da:	430b      	orrs	r3, r1
 80077dc:	6553      	str	r3, [r2, #84]	; 0x54
 80077de:	e003      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80077e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80077f4:	653b      	str	r3, [r7, #80]	; 0x50
 80077f6:	2300      	movs	r3, #0
 80077f8:	657b      	str	r3, [r7, #84]	; 0x54
 80077fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80077fe:	460b      	mov	r3, r1
 8007800:	4313      	orrs	r3, r2
 8007802:	d009      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007804:	4b9e      	ldr	r3, [pc, #632]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007808:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800780c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007812:	4a9b      	ldr	r2, [pc, #620]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007814:	430b      	orrs	r3, r1
 8007816:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007824:	64bb      	str	r3, [r7, #72]	; 0x48
 8007826:	2300      	movs	r3, #0
 8007828:	64fb      	str	r3, [r7, #76]	; 0x4c
 800782a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800782e:	460b      	mov	r3, r1
 8007830:	4313      	orrs	r3, r2
 8007832:	d009      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007834:	4b92      	ldr	r3, [pc, #584]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007838:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800783c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007842:	4a8f      	ldr	r2, [pc, #572]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007844:	430b      	orrs	r3, r1
 8007846:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007854:	643b      	str	r3, [r7, #64]	; 0x40
 8007856:	2300      	movs	r3, #0
 8007858:	647b      	str	r3, [r7, #68]	; 0x44
 800785a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800785e:	460b      	mov	r3, r1
 8007860:	4313      	orrs	r3, r2
 8007862:	d00e      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007864:	4b86      	ldr	r3, [pc, #536]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	4a85      	ldr	r2, [pc, #532]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800786a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800786e:	6113      	str	r3, [r2, #16]
 8007870:	4b83      	ldr	r3, [pc, #524]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007872:	6919      	ldr	r1, [r3, #16]
 8007874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007878:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800787c:	4a80      	ldr	r2, [pc, #512]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800787e:	430b      	orrs	r3, r1
 8007880:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800788e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007890:	2300      	movs	r3, #0
 8007892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007894:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007898:	460b      	mov	r3, r1
 800789a:	4313      	orrs	r3, r2
 800789c:	d009      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800789e:	4b78      	ldr	r3, [pc, #480]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80078a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	4a74      	ldr	r2, [pc, #464]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078ae:	430b      	orrs	r3, r1
 80078b0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80078b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ba:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80078be:	633b      	str	r3, [r7, #48]	; 0x30
 80078c0:	2300      	movs	r3, #0
 80078c2:	637b      	str	r3, [r7, #52]	; 0x34
 80078c4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80078c8:	460b      	mov	r3, r1
 80078ca:	4313      	orrs	r3, r2
 80078cc:	d00a      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078ce:	4b6c      	ldr	r3, [pc, #432]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80078d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078de:	4a68      	ldr	r2, [pc, #416]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078e0:	430b      	orrs	r3, r1
 80078e2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80078e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	2100      	movs	r1, #0
 80078ee:	62b9      	str	r1, [r7, #40]	; 0x28
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078f6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80078fa:	460b      	mov	r3, r1
 80078fc:	4313      	orrs	r3, r2
 80078fe:	d011      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007904:	3308      	adds	r3, #8
 8007906:	2100      	movs	r1, #0
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fb79 	bl	8008000 <RCCEx_PLL2_Config>
 800790e:	4603      	mov	r3, r0
 8007910:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007914:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800791c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007920:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	2100      	movs	r1, #0
 800792e:	6239      	str	r1, [r7, #32]
 8007930:	f003 0302 	and.w	r3, r3, #2
 8007934:	627b      	str	r3, [r7, #36]	; 0x24
 8007936:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800793a:	460b      	mov	r3, r1
 800793c:	4313      	orrs	r3, r2
 800793e:	d011      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007944:	3308      	adds	r3, #8
 8007946:	2101      	movs	r1, #1
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fb59 	bl	8008000 <RCCEx_PLL2_Config>
 800794e:	4603      	mov	r3, r0
 8007950:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007954:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007960:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796c:	2100      	movs	r1, #0
 800796e:	61b9      	str	r1, [r7, #24]
 8007970:	f003 0304 	and.w	r3, r3, #4
 8007974:	61fb      	str	r3, [r7, #28]
 8007976:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800797a:	460b      	mov	r3, r1
 800797c:	4313      	orrs	r3, r2
 800797e:	d011      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007984:	3308      	adds	r3, #8
 8007986:	2102      	movs	r1, #2
 8007988:	4618      	mov	r0, r3
 800798a:	f000 fb39 	bl	8008000 <RCCEx_PLL2_Config>
 800798e:	4603      	mov	r3, r0
 8007990:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007994:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007998:	2b00      	cmp	r3, #0
 800799a:	d003      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800799c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80079a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	2100      	movs	r1, #0
 80079ae:	6139      	str	r1, [r7, #16]
 80079b0:	f003 0308 	and.w	r3, r3, #8
 80079b4:	617b      	str	r3, [r7, #20]
 80079b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80079ba:	460b      	mov	r3, r1
 80079bc:	4313      	orrs	r3, r2
 80079be:	d011      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c4:	3328      	adds	r3, #40	; 0x28
 80079c6:	2100      	movs	r1, #0
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 fbcb 	bl	8008164 <RCCEx_PLL3_Config>
 80079ce:	4603      	mov	r3, r0
 80079d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80079d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80079e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	2100      	movs	r1, #0
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	f003 0310 	and.w	r3, r3, #16
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80079fa:	460b      	mov	r3, r1
 80079fc:	4313      	orrs	r3, r2
 80079fe:	d011      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a04:	3328      	adds	r3, #40	; 0x28
 8007a06:	2101      	movs	r1, #1
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 fbab 	bl	8008164 <RCCEx_PLL3_Config>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007a14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	6039      	str	r1, [r7, #0]
 8007a30:	f003 0320 	and.w	r3, r3, #32
 8007a34:	607b      	str	r3, [r7, #4]
 8007a36:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	d011      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a44:	3328      	adds	r3, #40	; 0x28
 8007a46:	2102      	movs	r1, #2
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 fb8b 	bl	8008164 <RCCEx_PLL3_Config>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007a54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007a64:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	e000      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a7e:	bf00      	nop
 8007a80:	58024400 	.word	0x58024400

08007a84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007a88:	f7fe fe00 	bl	800668c <HAL_RCC_GetHCLKFreq>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	091b      	lsrs	r3, r3, #4
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	4904      	ldr	r1, [pc, #16]	; (8007aac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007a9a:	5ccb      	ldrb	r3, [r1, r3]
 8007a9c:	f003 031f 	and.w	r3, r3, #31
 8007aa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	58024400 	.word	0x58024400
 8007aac:	08010aa4 	.word	0x08010aa4

08007ab0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b089      	sub	sp, #36	; 0x24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ab8:	4ba1      	ldr	r3, [pc, #644]	; (8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abc:	f003 0303 	and.w	r3, r3, #3
 8007ac0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007ac2:	4b9f      	ldr	r3, [pc, #636]	; (8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac6:	0b1b      	lsrs	r3, r3, #12
 8007ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007acc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007ace:	4b9c      	ldr	r3, [pc, #624]	; (8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	091b      	lsrs	r3, r3, #4
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007ada:	4b99      	ldr	r3, [pc, #612]	; (8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ade:	08db      	lsrs	r3, r3, #3
 8007ae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	fb02 f303 	mul.w	r3, r2, r3
 8007aea:	ee07 3a90 	vmov	s15, r3
 8007aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 8111 	beq.w	8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	f000 8083 	beq.w	8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	f200 80a1 	bhi.w	8007c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d056      	beq.n	8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007b1a:	e099      	b.n	8007c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b1c:	4b88      	ldr	r3, [pc, #544]	; (8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0320 	and.w	r3, r3, #32
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d02d      	beq.n	8007b84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b28:	4b85      	ldr	r3, [pc, #532]	; (8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	08db      	lsrs	r3, r3, #3
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	4a84      	ldr	r2, [pc, #528]	; (8007d44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007b34:	fa22 f303 	lsr.w	r3, r2, r3
 8007b38:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	ee07 3a90 	vmov	s15, r3
 8007b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	ee07 3a90 	vmov	s15, r3
 8007b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b52:	4b7b      	ldr	r3, [pc, #492]	; (8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b5a:	ee07 3a90 	vmov	s15, r3
 8007b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007b82:	e087      	b.n	8007c94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	ee07 3a90 	vmov	s15, r3
 8007b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b96:	4b6a      	ldr	r3, [pc, #424]	; (8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9e:	ee07 3a90 	vmov	s15, r3
 8007ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007baa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bc6:	e065      	b.n	8007c94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bda:	4b59      	ldr	r3, [pc, #356]	; (8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c0a:	e043      	b.n	8007c94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	ee07 3a90 	vmov	s15, r3
 8007c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c1e:	4b48      	ldr	r3, [pc, #288]	; (8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c26:	ee07 3a90 	vmov	s15, r3
 8007c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c4e:	e021      	b.n	8007c94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	ee07 3a90 	vmov	s15, r3
 8007c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c62:	4b37      	ldr	r3, [pc, #220]	; (8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c6a:	ee07 3a90 	vmov	s15, r3
 8007c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007c94:	4b2a      	ldr	r3, [pc, #168]	; (8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c98:	0a5b      	lsrs	r3, r3, #9
 8007c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cba:	ee17 2a90 	vmov	r2, s15
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007cc2:	4b1f      	ldr	r3, [pc, #124]	; (8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc6:	0c1b      	lsrs	r3, r3, #16
 8007cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ccc:	ee07 3a90 	vmov	s15, r3
 8007cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ce8:	ee17 2a90 	vmov	r2, s15
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007cf0:	4b13      	ldr	r3, [pc, #76]	; (8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf4:	0e1b      	lsrs	r3, r3, #24
 8007cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d16:	ee17 2a90 	vmov	r2, s15
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d1e:	e008      	b.n	8007d32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	609a      	str	r2, [r3, #8]
}
 8007d32:	bf00      	nop
 8007d34:	3724      	adds	r7, #36	; 0x24
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	58024400 	.word	0x58024400
 8007d44:	03d09000 	.word	0x03d09000
 8007d48:	46000000 	.word	0x46000000
 8007d4c:	4c742400 	.word	0x4c742400
 8007d50:	4a742400 	.word	0x4a742400
 8007d54:	4bbebc20 	.word	0x4bbebc20

08007d58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b089      	sub	sp, #36	; 0x24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d60:	4ba1      	ldr	r3, [pc, #644]	; (8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	f003 0303 	and.w	r3, r3, #3
 8007d68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007d6a:	4b9f      	ldr	r3, [pc, #636]	; (8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	0d1b      	lsrs	r3, r3, #20
 8007d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d76:	4b9c      	ldr	r3, [pc, #624]	; (8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	0a1b      	lsrs	r3, r3, #8
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007d82:	4b99      	ldr	r3, [pc, #612]	; (8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d86:	08db      	lsrs	r3, r3, #3
 8007d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	fb02 f303 	mul.w	r3, r2, r3
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 8111 	beq.w	8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	f000 8083 	beq.w	8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	f200 80a1 	bhi.w	8007ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d056      	beq.n	8007e70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007dc2:	e099      	b.n	8007ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dc4:	4b88      	ldr	r3, [pc, #544]	; (8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0320 	and.w	r3, r3, #32
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d02d      	beq.n	8007e2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dd0:	4b85      	ldr	r3, [pc, #532]	; (8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	08db      	lsrs	r3, r3, #3
 8007dd6:	f003 0303 	and.w	r3, r3, #3
 8007dda:	4a84      	ldr	r2, [pc, #528]	; (8007fec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8007de0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	ee07 3a90 	vmov	s15, r3
 8007de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dfa:	4b7b      	ldr	r3, [pc, #492]	; (8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007e2a:	e087      	b.n	8007f3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	ee07 3a90 	vmov	s15, r3
 8007e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3e:	4b6a      	ldr	r3, [pc, #424]	; (8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e46:	ee07 3a90 	vmov	s15, r3
 8007e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e6e:	e065      	b.n	8007f3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e82:	4b59      	ldr	r3, [pc, #356]	; (8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007eb2:	e043      	b.n	8007f3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	ee07 3a90 	vmov	s15, r3
 8007eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ebe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ffc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ec6:	4b48      	ldr	r3, [pc, #288]	; (8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ece:	ee07 3a90 	vmov	s15, r3
 8007ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ef6:	e021      	b.n	8007f3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	ee07 3a90 	vmov	s15, r3
 8007efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f0a:	4b37      	ldr	r3, [pc, #220]	; (8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f12:	ee07 3a90 	vmov	s15, r3
 8007f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007f3c:	4b2a      	ldr	r3, [pc, #168]	; (8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f40:	0a5b      	lsrs	r3, r3, #9
 8007f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f56:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f62:	ee17 2a90 	vmov	r2, s15
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007f6a:	4b1f      	ldr	r3, [pc, #124]	; (8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	0c1b      	lsrs	r3, r3, #16
 8007f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f74:	ee07 3a90 	vmov	s15, r3
 8007f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f84:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f90:	ee17 2a90 	vmov	r2, s15
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007f98:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9c:	0e1b      	lsrs	r3, r3, #24
 8007f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007faa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fbe:	ee17 2a90 	vmov	r2, s15
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007fc6:	e008      	b.n	8007fda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	609a      	str	r2, [r3, #8]
}
 8007fda:	bf00      	nop
 8007fdc:	3724      	adds	r7, #36	; 0x24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	58024400 	.word	0x58024400
 8007fec:	03d09000 	.word	0x03d09000
 8007ff0:	46000000 	.word	0x46000000
 8007ff4:	4c742400 	.word	0x4c742400
 8007ff8:	4a742400 	.word	0x4a742400
 8007ffc:	4bbebc20 	.word	0x4bbebc20

08008000 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800800e:	4b53      	ldr	r3, [pc, #332]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 8008010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008012:	f003 0303 	and.w	r3, r3, #3
 8008016:	2b03      	cmp	r3, #3
 8008018:	d101      	bne.n	800801e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e099      	b.n	8008152 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800801e:	4b4f      	ldr	r3, [pc, #316]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a4e      	ldr	r2, [pc, #312]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 8008024:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800802a:	f7fb ff4f 	bl	8003ecc <HAL_GetTick>
 800802e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008030:	e008      	b.n	8008044 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008032:	f7fb ff4b 	bl	8003ecc <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	2b02      	cmp	r3, #2
 800803e:	d901      	bls.n	8008044 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e086      	b.n	8008152 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008044:	4b45      	ldr	r3, [pc, #276]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1f0      	bne.n	8008032 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008050:	4b42      	ldr	r3, [pc, #264]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 8008052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008054:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	031b      	lsls	r3, r3, #12
 800805e:	493f      	ldr	r1, [pc, #252]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 8008060:	4313      	orrs	r3, r2
 8008062:	628b      	str	r3, [r1, #40]	; 0x28
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	3b01      	subs	r3, #1
 800806a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	3b01      	subs	r3, #1
 8008074:	025b      	lsls	r3, r3, #9
 8008076:	b29b      	uxth	r3, r3
 8008078:	431a      	orrs	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	3b01      	subs	r3, #1
 8008080:	041b      	lsls	r3, r3, #16
 8008082:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008086:	431a      	orrs	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	3b01      	subs	r3, #1
 800808e:	061b      	lsls	r3, r3, #24
 8008090:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008094:	4931      	ldr	r1, [pc, #196]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 8008096:	4313      	orrs	r3, r2
 8008098:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800809a:	4b30      	ldr	r3, [pc, #192]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 800809c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	492d      	ldr	r1, [pc, #180]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80080ac:	4b2b      	ldr	r3, [pc, #172]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 80080ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b0:	f023 0220 	bic.w	r2, r3, #32
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	4928      	ldr	r1, [pc, #160]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80080be:	4b27      	ldr	r3, [pc, #156]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 80080c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c2:	4a26      	ldr	r2, [pc, #152]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 80080c4:	f023 0310 	bic.w	r3, r3, #16
 80080c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80080ca:	4b24      	ldr	r3, [pc, #144]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 80080cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080ce:	4b24      	ldr	r3, [pc, #144]	; (8008160 <RCCEx_PLL2_Config+0x160>)
 80080d0:	4013      	ands	r3, r2
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	69d2      	ldr	r2, [r2, #28]
 80080d6:	00d2      	lsls	r2, r2, #3
 80080d8:	4920      	ldr	r1, [pc, #128]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80080de:	4b1f      	ldr	r3, [pc, #124]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 80080e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e2:	4a1e      	ldr	r2, [pc, #120]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 80080e4:	f043 0310 	orr.w	r3, r3, #16
 80080e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d106      	bne.n	80080fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80080f0:	4b1a      	ldr	r3, [pc, #104]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	4a19      	ldr	r2, [pc, #100]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 80080f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080fc:	e00f      	b.n	800811e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d106      	bne.n	8008112 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008104:	4b15      	ldr	r3, [pc, #84]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 8008106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008108:	4a14      	ldr	r2, [pc, #80]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 800810a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800810e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008110:	e005      	b.n	800811e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008112:	4b12      	ldr	r3, [pc, #72]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 8008114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008116:	4a11      	ldr	r2, [pc, #68]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 8008118:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800811c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800811e:	4b0f      	ldr	r3, [pc, #60]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a0e      	ldr	r2, [pc, #56]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 8008124:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800812a:	f7fb fecf 	bl	8003ecc <HAL_GetTick>
 800812e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008130:	e008      	b.n	8008144 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008132:	f7fb fecb 	bl	8003ecc <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d901      	bls.n	8008144 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e006      	b.n	8008152 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008144:	4b05      	ldr	r3, [pc, #20]	; (800815c <RCCEx_PLL2_Config+0x15c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0f0      	beq.n	8008132 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008150:	7bfb      	ldrb	r3, [r7, #15]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	58024400 	.word	0x58024400
 8008160:	ffff0007 	.word	0xffff0007

08008164 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008172:	4b53      	ldr	r3, [pc, #332]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 8008174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	2b03      	cmp	r3, #3
 800817c:	d101      	bne.n	8008182 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e099      	b.n	80082b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008182:	4b4f      	ldr	r3, [pc, #316]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a4e      	ldr	r2, [pc, #312]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 8008188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800818c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800818e:	f7fb fe9d 	bl	8003ecc <HAL_GetTick>
 8008192:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008194:	e008      	b.n	80081a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008196:	f7fb fe99 	bl	8003ecc <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d901      	bls.n	80081a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e086      	b.n	80082b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081a8:	4b45      	ldr	r3, [pc, #276]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1f0      	bne.n	8008196 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80081b4:	4b42      	ldr	r3, [pc, #264]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	051b      	lsls	r3, r3, #20
 80081c2:	493f      	ldr	r1, [pc, #252]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	628b      	str	r3, [r1, #40]	; 0x28
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	025b      	lsls	r3, r3, #9
 80081da:	b29b      	uxth	r3, r3
 80081dc:	431a      	orrs	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	041b      	lsls	r3, r3, #16
 80081e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081ea:	431a      	orrs	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	061b      	lsls	r3, r3, #24
 80081f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081f8:	4931      	ldr	r1, [pc, #196]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80081fe:	4b30      	ldr	r3, [pc, #192]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 8008200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	492d      	ldr	r1, [pc, #180]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 800820c:	4313      	orrs	r3, r2
 800820e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008210:	4b2b      	ldr	r3, [pc, #172]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	4928      	ldr	r1, [pc, #160]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 800821e:	4313      	orrs	r3, r2
 8008220:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008222:	4b27      	ldr	r3, [pc, #156]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 8008224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008226:	4a26      	ldr	r2, [pc, #152]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 8008228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800822c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800822e:	4b24      	ldr	r3, [pc, #144]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 8008230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008232:	4b24      	ldr	r3, [pc, #144]	; (80082c4 <RCCEx_PLL3_Config+0x160>)
 8008234:	4013      	ands	r3, r2
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	69d2      	ldr	r2, [r2, #28]
 800823a:	00d2      	lsls	r2, r2, #3
 800823c:	4920      	ldr	r1, [pc, #128]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 800823e:	4313      	orrs	r3, r2
 8008240:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008242:	4b1f      	ldr	r3, [pc, #124]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 8008244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008246:	4a1e      	ldr	r2, [pc, #120]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 8008248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800824c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d106      	bne.n	8008262 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008254:	4b1a      	ldr	r3, [pc, #104]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	4a19      	ldr	r2, [pc, #100]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 800825a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800825e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008260:	e00f      	b.n	8008282 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d106      	bne.n	8008276 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008268:	4b15      	ldr	r3, [pc, #84]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 800826a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826c:	4a14      	ldr	r2, [pc, #80]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 800826e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008272:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008274:	e005      	b.n	8008282 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008276:	4b12      	ldr	r3, [pc, #72]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 8008278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827a:	4a11      	ldr	r2, [pc, #68]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 800827c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008280:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008282:	4b0f      	ldr	r3, [pc, #60]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a0e      	ldr	r2, [pc, #56]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 8008288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800828c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800828e:	f7fb fe1d 	bl	8003ecc <HAL_GetTick>
 8008292:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008294:	e008      	b.n	80082a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008296:	f7fb fe19 	bl	8003ecc <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d901      	bls.n	80082a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e006      	b.n	80082b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082a8:	4b05      	ldr	r3, [pc, #20]	; (80082c0 <RCCEx_PLL3_Config+0x15c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d0f0      	beq.n	8008296 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	58024400 	.word	0x58024400
 80082c4:	ffff0007 	.word	0xffff0007

080082c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e049      	b.n	800836e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fb fbc0 	bl	8003a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3304      	adds	r3, #4
 8008304:	4619      	mov	r1, r3
 8008306:	4610      	mov	r0, r2
 8008308:	f000 fafc 	bl	8008904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b01      	cmp	r3, #1
 800838a:	d001      	beq.n	8008390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e05e      	b.n	800844e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f042 0201 	orr.w	r2, r2, #1
 80083a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a2b      	ldr	r2, [pc, #172]	; (800845c <HAL_TIM_Base_Start_IT+0xe4>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d02c      	beq.n	800840c <HAL_TIM_Base_Start_IT+0x94>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ba:	d027      	beq.n	800840c <HAL_TIM_Base_Start_IT+0x94>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a27      	ldr	r2, [pc, #156]	; (8008460 <HAL_TIM_Base_Start_IT+0xe8>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d022      	beq.n	800840c <HAL_TIM_Base_Start_IT+0x94>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a26      	ldr	r2, [pc, #152]	; (8008464 <HAL_TIM_Base_Start_IT+0xec>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d01d      	beq.n	800840c <HAL_TIM_Base_Start_IT+0x94>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a24      	ldr	r2, [pc, #144]	; (8008468 <HAL_TIM_Base_Start_IT+0xf0>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d018      	beq.n	800840c <HAL_TIM_Base_Start_IT+0x94>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a23      	ldr	r2, [pc, #140]	; (800846c <HAL_TIM_Base_Start_IT+0xf4>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d013      	beq.n	800840c <HAL_TIM_Base_Start_IT+0x94>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a21      	ldr	r2, [pc, #132]	; (8008470 <HAL_TIM_Base_Start_IT+0xf8>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d00e      	beq.n	800840c <HAL_TIM_Base_Start_IT+0x94>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a20      	ldr	r2, [pc, #128]	; (8008474 <HAL_TIM_Base_Start_IT+0xfc>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d009      	beq.n	800840c <HAL_TIM_Base_Start_IT+0x94>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a1e      	ldr	r2, [pc, #120]	; (8008478 <HAL_TIM_Base_Start_IT+0x100>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d004      	beq.n	800840c <HAL_TIM_Base_Start_IT+0x94>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a1d      	ldr	r2, [pc, #116]	; (800847c <HAL_TIM_Base_Start_IT+0x104>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d115      	bne.n	8008438 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	689a      	ldr	r2, [r3, #8]
 8008412:	4b1b      	ldr	r3, [pc, #108]	; (8008480 <HAL_TIM_Base_Start_IT+0x108>)
 8008414:	4013      	ands	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b06      	cmp	r3, #6
 800841c:	d015      	beq.n	800844a <HAL_TIM_Base_Start_IT+0xd2>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008424:	d011      	beq.n	800844a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f042 0201 	orr.w	r2, r2, #1
 8008434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008436:	e008      	b.n	800844a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0201 	orr.w	r2, r2, #1
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	e000      	b.n	800844c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800844a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	40010000 	.word	0x40010000
 8008460:	40000400 	.word	0x40000400
 8008464:	40000800 	.word	0x40000800
 8008468:	40000c00 	.word	0x40000c00
 800846c:	40010400 	.word	0x40010400
 8008470:	40001800 	.word	0x40001800
 8008474:	40014000 	.word	0x40014000
 8008478:	4000e000 	.word	0x4000e000
 800847c:	4000e400 	.word	0x4000e400
 8008480:	00010007 	.word	0x00010007

08008484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	f003 0302 	and.w	r3, r3, #2
 8008496:	2b02      	cmp	r3, #2
 8008498:	d122      	bne.n	80084e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d11b      	bne.n	80084e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f06f 0202 	mvn.w	r2, #2
 80084b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	f003 0303 	and.w	r3, r3, #3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f9fe 	bl	80088c8 <HAL_TIM_IC_CaptureCallback>
 80084cc:	e005      	b.n	80084da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f9f0 	bl	80088b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fa01 	bl	80088dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	f003 0304 	and.w	r3, r3, #4
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	d122      	bne.n	8008534 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f003 0304 	and.w	r3, r3, #4
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	d11b      	bne.n	8008534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f06f 0204 	mvn.w	r2, #4
 8008504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2202      	movs	r2, #2
 800850a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f9d4 	bl	80088c8 <HAL_TIM_IC_CaptureCallback>
 8008520:	e005      	b.n	800852e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f9c6 	bl	80088b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f9d7 	bl	80088dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	f003 0308 	and.w	r3, r3, #8
 800853e:	2b08      	cmp	r3, #8
 8008540:	d122      	bne.n	8008588 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f003 0308 	and.w	r3, r3, #8
 800854c:	2b08      	cmp	r3, #8
 800854e:	d11b      	bne.n	8008588 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f06f 0208 	mvn.w	r2, #8
 8008558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2204      	movs	r2, #4
 800855e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	69db      	ldr	r3, [r3, #28]
 8008566:	f003 0303 	and.w	r3, r3, #3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f9aa 	bl	80088c8 <HAL_TIM_IC_CaptureCallback>
 8008574:	e005      	b.n	8008582 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f99c 	bl	80088b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f9ad 	bl	80088dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	f003 0310 	and.w	r3, r3, #16
 8008592:	2b10      	cmp	r3, #16
 8008594:	d122      	bne.n	80085dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	f003 0310 	and.w	r3, r3, #16
 80085a0:	2b10      	cmp	r3, #16
 80085a2:	d11b      	bne.n	80085dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f06f 0210 	mvn.w	r2, #16
 80085ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2208      	movs	r2, #8
 80085b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d003      	beq.n	80085ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f980 	bl	80088c8 <HAL_TIM_IC_CaptureCallback>
 80085c8:	e005      	b.n	80085d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f972 	bl	80088b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f983 	bl	80088dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d10e      	bne.n	8008608 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d107      	bne.n	8008608 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f06f 0201 	mvn.w	r2, #1
 8008600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7fa ff4a 	bl	800349c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008612:	2b80      	cmp	r3, #128	; 0x80
 8008614:	d10e      	bne.n	8008634 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008620:	2b80      	cmp	r3, #128	; 0x80
 8008622:	d107      	bne.n	8008634 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800862c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fb52 	bl	8008cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008642:	d10e      	bne.n	8008662 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864e:	2b80      	cmp	r3, #128	; 0x80
 8008650:	d107      	bne.n	8008662 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800865a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fb45 	bl	8008cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800866c:	2b40      	cmp	r3, #64	; 0x40
 800866e:	d10e      	bne.n	800868e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867a:	2b40      	cmp	r3, #64	; 0x40
 800867c:	d107      	bne.n	800868e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f931 	bl	80088f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f003 0320 	and.w	r3, r3, #32
 8008698:	2b20      	cmp	r3, #32
 800869a:	d10e      	bne.n	80086ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	f003 0320 	and.w	r3, r3, #32
 80086a6:	2b20      	cmp	r3, #32
 80086a8:	d107      	bne.n	80086ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f06f 0220 	mvn.w	r2, #32
 80086b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fb05 	bl	8008cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086ba:	bf00      	nop
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d101      	bne.n	80086e0 <HAL_TIM_ConfigClockSource+0x1c>
 80086dc:	2302      	movs	r3, #2
 80086de:	e0dc      	b.n	800889a <HAL_TIM_ConfigClockSource+0x1d6>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2202      	movs	r2, #2
 80086ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	4b6a      	ldr	r3, [pc, #424]	; (80088a4 <HAL_TIM_ConfigClockSource+0x1e0>)
 80086fc:	4013      	ands	r3, r2
 80086fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008706:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a64      	ldr	r2, [pc, #400]	; (80088a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008716:	4293      	cmp	r3, r2
 8008718:	f000 80a9 	beq.w	800886e <HAL_TIM_ConfigClockSource+0x1aa>
 800871c:	4a62      	ldr	r2, [pc, #392]	; (80088a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800871e:	4293      	cmp	r3, r2
 8008720:	f200 80ae 	bhi.w	8008880 <HAL_TIM_ConfigClockSource+0x1bc>
 8008724:	4a61      	ldr	r2, [pc, #388]	; (80088ac <HAL_TIM_ConfigClockSource+0x1e8>)
 8008726:	4293      	cmp	r3, r2
 8008728:	f000 80a1 	beq.w	800886e <HAL_TIM_ConfigClockSource+0x1aa>
 800872c:	4a5f      	ldr	r2, [pc, #380]	; (80088ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800872e:	4293      	cmp	r3, r2
 8008730:	f200 80a6 	bhi.w	8008880 <HAL_TIM_ConfigClockSource+0x1bc>
 8008734:	4a5e      	ldr	r2, [pc, #376]	; (80088b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008736:	4293      	cmp	r3, r2
 8008738:	f000 8099 	beq.w	800886e <HAL_TIM_ConfigClockSource+0x1aa>
 800873c:	4a5c      	ldr	r2, [pc, #368]	; (80088b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800873e:	4293      	cmp	r3, r2
 8008740:	f200 809e 	bhi.w	8008880 <HAL_TIM_ConfigClockSource+0x1bc>
 8008744:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008748:	f000 8091 	beq.w	800886e <HAL_TIM_ConfigClockSource+0x1aa>
 800874c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008750:	f200 8096 	bhi.w	8008880 <HAL_TIM_ConfigClockSource+0x1bc>
 8008754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008758:	f000 8089 	beq.w	800886e <HAL_TIM_ConfigClockSource+0x1aa>
 800875c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008760:	f200 808e 	bhi.w	8008880 <HAL_TIM_ConfigClockSource+0x1bc>
 8008764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008768:	d03e      	beq.n	80087e8 <HAL_TIM_ConfigClockSource+0x124>
 800876a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800876e:	f200 8087 	bhi.w	8008880 <HAL_TIM_ConfigClockSource+0x1bc>
 8008772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008776:	f000 8086 	beq.w	8008886 <HAL_TIM_ConfigClockSource+0x1c2>
 800877a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800877e:	d87f      	bhi.n	8008880 <HAL_TIM_ConfigClockSource+0x1bc>
 8008780:	2b70      	cmp	r3, #112	; 0x70
 8008782:	d01a      	beq.n	80087ba <HAL_TIM_ConfigClockSource+0xf6>
 8008784:	2b70      	cmp	r3, #112	; 0x70
 8008786:	d87b      	bhi.n	8008880 <HAL_TIM_ConfigClockSource+0x1bc>
 8008788:	2b60      	cmp	r3, #96	; 0x60
 800878a:	d050      	beq.n	800882e <HAL_TIM_ConfigClockSource+0x16a>
 800878c:	2b60      	cmp	r3, #96	; 0x60
 800878e:	d877      	bhi.n	8008880 <HAL_TIM_ConfigClockSource+0x1bc>
 8008790:	2b50      	cmp	r3, #80	; 0x50
 8008792:	d03c      	beq.n	800880e <HAL_TIM_ConfigClockSource+0x14a>
 8008794:	2b50      	cmp	r3, #80	; 0x50
 8008796:	d873      	bhi.n	8008880 <HAL_TIM_ConfigClockSource+0x1bc>
 8008798:	2b40      	cmp	r3, #64	; 0x40
 800879a:	d058      	beq.n	800884e <HAL_TIM_ConfigClockSource+0x18a>
 800879c:	2b40      	cmp	r3, #64	; 0x40
 800879e:	d86f      	bhi.n	8008880 <HAL_TIM_ConfigClockSource+0x1bc>
 80087a0:	2b30      	cmp	r3, #48	; 0x30
 80087a2:	d064      	beq.n	800886e <HAL_TIM_ConfigClockSource+0x1aa>
 80087a4:	2b30      	cmp	r3, #48	; 0x30
 80087a6:	d86b      	bhi.n	8008880 <HAL_TIM_ConfigClockSource+0x1bc>
 80087a8:	2b20      	cmp	r3, #32
 80087aa:	d060      	beq.n	800886e <HAL_TIM_ConfigClockSource+0x1aa>
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d867      	bhi.n	8008880 <HAL_TIM_ConfigClockSource+0x1bc>
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d05c      	beq.n	800886e <HAL_TIM_ConfigClockSource+0x1aa>
 80087b4:	2b10      	cmp	r3, #16
 80087b6:	d05a      	beq.n	800886e <HAL_TIM_ConfigClockSource+0x1aa>
 80087b8:	e062      	b.n	8008880 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087ca:	f000 f9bf 	bl	8008b4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80087dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	609a      	str	r2, [r3, #8]
      break;
 80087e6:	e04f      	b.n	8008888 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087f8:	f000 f9a8 	bl	8008b4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800880a:	609a      	str	r2, [r3, #8]
      break;
 800880c:	e03c      	b.n	8008888 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800881a:	461a      	mov	r2, r3
 800881c:	f000 f918 	bl	8008a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2150      	movs	r1, #80	; 0x50
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f972 	bl	8008b10 <TIM_ITRx_SetConfig>
      break;
 800882c:	e02c      	b.n	8008888 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800883a:	461a      	mov	r2, r3
 800883c:	f000 f937 	bl	8008aae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2160      	movs	r1, #96	; 0x60
 8008846:	4618      	mov	r0, r3
 8008848:	f000 f962 	bl	8008b10 <TIM_ITRx_SetConfig>
      break;
 800884c:	e01c      	b.n	8008888 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800885a:	461a      	mov	r2, r3
 800885c:	f000 f8f8 	bl	8008a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2140      	movs	r1, #64	; 0x40
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f952 	bl	8008b10 <TIM_ITRx_SetConfig>
      break;
 800886c:	e00c      	b.n	8008888 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4619      	mov	r1, r3
 8008878:	4610      	mov	r0, r2
 800887a:	f000 f949 	bl	8008b10 <TIM_ITRx_SetConfig>
      break;
 800887e:	e003      	b.n	8008888 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	73fb      	strb	r3, [r7, #15]
      break;
 8008884:	e000      	b.n	8008888 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008886:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008898:	7bfb      	ldrb	r3, [r7, #15]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	ffceff88 	.word	0xffceff88
 80088a8:	00100040 	.word	0x00100040
 80088ac:	00100030 	.word	0x00100030
 80088b0:	00100020 	.word	0x00100020

080088b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a44      	ldr	r2, [pc, #272]	; (8008a28 <TIM_Base_SetConfig+0x124>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d013      	beq.n	8008944 <TIM_Base_SetConfig+0x40>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008922:	d00f      	beq.n	8008944 <TIM_Base_SetConfig+0x40>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a41      	ldr	r2, [pc, #260]	; (8008a2c <TIM_Base_SetConfig+0x128>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d00b      	beq.n	8008944 <TIM_Base_SetConfig+0x40>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a40      	ldr	r2, [pc, #256]	; (8008a30 <TIM_Base_SetConfig+0x12c>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d007      	beq.n	8008944 <TIM_Base_SetConfig+0x40>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a3f      	ldr	r2, [pc, #252]	; (8008a34 <TIM_Base_SetConfig+0x130>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d003      	beq.n	8008944 <TIM_Base_SetConfig+0x40>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a3e      	ldr	r2, [pc, #248]	; (8008a38 <TIM_Base_SetConfig+0x134>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d108      	bne.n	8008956 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	4313      	orrs	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a33      	ldr	r2, [pc, #204]	; (8008a28 <TIM_Base_SetConfig+0x124>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d027      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008964:	d023      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a30      	ldr	r2, [pc, #192]	; (8008a2c <TIM_Base_SetConfig+0x128>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d01f      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a2f      	ldr	r2, [pc, #188]	; (8008a30 <TIM_Base_SetConfig+0x12c>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d01b      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a2e      	ldr	r2, [pc, #184]	; (8008a34 <TIM_Base_SetConfig+0x130>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d017      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a2d      	ldr	r2, [pc, #180]	; (8008a38 <TIM_Base_SetConfig+0x134>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d013      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a2c      	ldr	r2, [pc, #176]	; (8008a3c <TIM_Base_SetConfig+0x138>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d00f      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a2b      	ldr	r2, [pc, #172]	; (8008a40 <TIM_Base_SetConfig+0x13c>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d00b      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a2a      	ldr	r2, [pc, #168]	; (8008a44 <TIM_Base_SetConfig+0x140>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d007      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a29      	ldr	r2, [pc, #164]	; (8008a48 <TIM_Base_SetConfig+0x144>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d003      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a28      	ldr	r2, [pc, #160]	; (8008a4c <TIM_Base_SetConfig+0x148>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d108      	bne.n	80089c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	4313      	orrs	r3, r2
 80089be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	689a      	ldr	r2, [r3, #8]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a10      	ldr	r2, [pc, #64]	; (8008a28 <TIM_Base_SetConfig+0x124>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d00f      	beq.n	8008a0c <TIM_Base_SetConfig+0x108>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a12      	ldr	r2, [pc, #72]	; (8008a38 <TIM_Base_SetConfig+0x134>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d00b      	beq.n	8008a0c <TIM_Base_SetConfig+0x108>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a11      	ldr	r2, [pc, #68]	; (8008a3c <TIM_Base_SetConfig+0x138>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d007      	beq.n	8008a0c <TIM_Base_SetConfig+0x108>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a10      	ldr	r2, [pc, #64]	; (8008a40 <TIM_Base_SetConfig+0x13c>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d003      	beq.n	8008a0c <TIM_Base_SetConfig+0x108>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a0f      	ldr	r2, [pc, #60]	; (8008a44 <TIM_Base_SetConfig+0x140>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d103      	bne.n	8008a14 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	691a      	ldr	r2, [r3, #16]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	615a      	str	r2, [r3, #20]
}
 8008a1a:	bf00      	nop
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	40010000 	.word	0x40010000
 8008a2c:	40000400 	.word	0x40000400
 8008a30:	40000800 	.word	0x40000800
 8008a34:	40000c00 	.word	0x40000c00
 8008a38:	40010400 	.word	0x40010400
 8008a3c:	40014000 	.word	0x40014000
 8008a40:	40014400 	.word	0x40014400
 8008a44:	40014800 	.word	0x40014800
 8008a48:	4000e000 	.word	0x4000e000
 8008a4c:	4000e400 	.word	0x4000e400

08008a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	f023 0201 	bic.w	r2, r3, #1
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	011b      	lsls	r3, r3, #4
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f023 030a 	bic.w	r3, r3, #10
 8008a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	621a      	str	r2, [r3, #32]
}
 8008aa2:	bf00      	nop
 8008aa4:	371c      	adds	r7, #28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b087      	sub	sp, #28
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	60f8      	str	r0, [r7, #12]
 8008ab6:	60b9      	str	r1, [r7, #8]
 8008ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	f023 0210 	bic.w	r2, r3, #16
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	031b      	lsls	r3, r3, #12
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008aea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	621a      	str	r2, [r3, #32]
}
 8008b02:	bf00      	nop
 8008b04:	371c      	adds	r7, #28
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
	...

08008b10 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4b09      	ldr	r3, [pc, #36]	; (8008b48 <TIM_ITRx_SetConfig+0x38>)
 8008b24:	4013      	ands	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	f043 0307 	orr.w	r3, r3, #7
 8008b32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	609a      	str	r2, [r3, #8]
}
 8008b3a:	bf00      	nop
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	ffcfff8f 	.word	0xffcfff8f

08008b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
 8008b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	021a      	lsls	r2, r3, #8
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	431a      	orrs	r2, r3
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	609a      	str	r2, [r3, #8]
}
 8008b80:	bf00      	nop
 8008b82:	371c      	adds	r7, #28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d101      	bne.n	8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	e077      	b.n	8008c94 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a35      	ldr	r2, [pc, #212]	; (8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d004      	beq.n	8008bd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a34      	ldr	r2, [pc, #208]	; (8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d108      	bne.n	8008bea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008bde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a25      	ldr	r2, [pc, #148]	; (8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d02c      	beq.n	8008c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c16:	d027      	beq.n	8008c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a22      	ldr	r2, [pc, #136]	; (8008ca8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d022      	beq.n	8008c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a21      	ldr	r2, [pc, #132]	; (8008cac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d01d      	beq.n	8008c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a1f      	ldr	r2, [pc, #124]	; (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d018      	beq.n	8008c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a1a      	ldr	r2, [pc, #104]	; (8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d013      	beq.n	8008c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a1b      	ldr	r2, [pc, #108]	; (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d00e      	beq.n	8008c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a1a      	ldr	r2, [pc, #104]	; (8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d009      	beq.n	8008c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a18      	ldr	r2, [pc, #96]	; (8008cbc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d004      	beq.n	8008c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a17      	ldr	r2, [pc, #92]	; (8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d10c      	bne.n	8008c82 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	40010000 	.word	0x40010000
 8008ca4:	40010400 	.word	0x40010400
 8008ca8:	40000400 	.word	0x40000400
 8008cac:	40000800 	.word	0x40000800
 8008cb0:	40000c00 	.word	0x40000c00
 8008cb4:	40001800 	.word	0x40001800
 8008cb8:	40014000 	.word	0x40014000
 8008cbc:	4000e000 	.word	0x4000e000
 8008cc0:	4000e400 	.word	0x4000e400

08008cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d101      	bne.n	8008d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e042      	b.n	8008d98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d106      	bne.n	8008d2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7fa fecb 	bl	8003ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2224      	movs	r2, #36	; 0x24
 8008d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f022 0201 	bic.w	r2, r2, #1
 8008d40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f8ba 	bl	8008ebc <UART_SetConfig>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d101      	bne.n	8008d52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e022      	b.n	8008d98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 ff1a 	bl	8009b94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689a      	ldr	r2, [r3, #8]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f042 0201 	orr.w	r2, r2, #1
 8008d8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 ffa1 	bl	8009cd8 <UART_CheckIdleState>
 8008d96:	4603      	mov	r3, r0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08a      	sub	sp, #40	; 0x28
 8008da4:	af02      	add	r7, sp, #8
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	4613      	mov	r3, r2
 8008dae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db6:	2b20      	cmp	r3, #32
 8008db8:	d17b      	bne.n	8008eb2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <HAL_UART_Transmit+0x26>
 8008dc0:	88fb      	ldrh	r3, [r7, #6]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e074      	b.n	8008eb4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2221      	movs	r2, #33	; 0x21
 8008dd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dda:	f7fb f877 	bl	8003ecc <HAL_GetTick>
 8008dde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	88fa      	ldrh	r2, [r7, #6]
 8008de4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	88fa      	ldrh	r2, [r7, #6]
 8008dec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008df8:	d108      	bne.n	8008e0c <HAL_UART_Transmit+0x6c>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d104      	bne.n	8008e0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008e02:	2300      	movs	r3, #0
 8008e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	61bb      	str	r3, [r7, #24]
 8008e0a:	e003      	b.n	8008e14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e14:	e030      	b.n	8008e78 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2180      	movs	r1, #128	; 0x80
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f001 f803 	bl	8009e2c <UART_WaitOnFlagUntilTimeout>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d005      	beq.n	8008e38 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e03d      	b.n	8008eb4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10b      	bne.n	8008e56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	461a      	mov	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	3302      	adds	r3, #2
 8008e52:	61bb      	str	r3, [r7, #24]
 8008e54:	e007      	b.n	8008e66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	781a      	ldrb	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	3301      	adds	r3, #1
 8008e64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1c8      	bne.n	8008e16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2140      	movs	r1, #64	; 0x40
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 ffcc 	bl	8009e2c <UART_WaitOnFlagUntilTimeout>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d005      	beq.n	8008ea6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e006      	b.n	8008eb4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2220      	movs	r2, #32
 8008eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e000      	b.n	8008eb4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008eb2:	2302      	movs	r3, #2
  }
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3720      	adds	r7, #32
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ec0:	b092      	sub	sp, #72	; 0x48
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	431a      	orrs	r2, r3
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	431a      	orrs	r2, r3
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	69db      	ldr	r3, [r3, #28]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	4bbe      	ldr	r3, [pc, #760]	; (80091e4 <UART_SetConfig+0x328>)
 8008eec:	4013      	ands	r3, r2
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	6812      	ldr	r2, [r2, #0]
 8008ef2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ef4:	430b      	orrs	r3, r1
 8008ef6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4ab3      	ldr	r2, [pc, #716]	; (80091e8 <UART_SetConfig+0x32c>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d004      	beq.n	8008f28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f24:	4313      	orrs	r3, r2
 8008f26:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	4baf      	ldr	r3, [pc, #700]	; (80091ec <UART_SetConfig+0x330>)
 8008f30:	4013      	ands	r3, r2
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	6812      	ldr	r2, [r2, #0]
 8008f36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f38:	430b      	orrs	r3, r1
 8008f3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f42:	f023 010f 	bic.w	r1, r3, #15
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4aa6      	ldr	r2, [pc, #664]	; (80091f0 <UART_SetConfig+0x334>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d177      	bne.n	800904c <UART_SetConfig+0x190>
 8008f5c:	4ba5      	ldr	r3, [pc, #660]	; (80091f4 <UART_SetConfig+0x338>)
 8008f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f64:	2b28      	cmp	r3, #40	; 0x28
 8008f66:	d86d      	bhi.n	8009044 <UART_SetConfig+0x188>
 8008f68:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <UART_SetConfig+0xb4>)
 8008f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6e:	bf00      	nop
 8008f70:	08009015 	.word	0x08009015
 8008f74:	08009045 	.word	0x08009045
 8008f78:	08009045 	.word	0x08009045
 8008f7c:	08009045 	.word	0x08009045
 8008f80:	08009045 	.word	0x08009045
 8008f84:	08009045 	.word	0x08009045
 8008f88:	08009045 	.word	0x08009045
 8008f8c:	08009045 	.word	0x08009045
 8008f90:	0800901d 	.word	0x0800901d
 8008f94:	08009045 	.word	0x08009045
 8008f98:	08009045 	.word	0x08009045
 8008f9c:	08009045 	.word	0x08009045
 8008fa0:	08009045 	.word	0x08009045
 8008fa4:	08009045 	.word	0x08009045
 8008fa8:	08009045 	.word	0x08009045
 8008fac:	08009045 	.word	0x08009045
 8008fb0:	08009025 	.word	0x08009025
 8008fb4:	08009045 	.word	0x08009045
 8008fb8:	08009045 	.word	0x08009045
 8008fbc:	08009045 	.word	0x08009045
 8008fc0:	08009045 	.word	0x08009045
 8008fc4:	08009045 	.word	0x08009045
 8008fc8:	08009045 	.word	0x08009045
 8008fcc:	08009045 	.word	0x08009045
 8008fd0:	0800902d 	.word	0x0800902d
 8008fd4:	08009045 	.word	0x08009045
 8008fd8:	08009045 	.word	0x08009045
 8008fdc:	08009045 	.word	0x08009045
 8008fe0:	08009045 	.word	0x08009045
 8008fe4:	08009045 	.word	0x08009045
 8008fe8:	08009045 	.word	0x08009045
 8008fec:	08009045 	.word	0x08009045
 8008ff0:	08009035 	.word	0x08009035
 8008ff4:	08009045 	.word	0x08009045
 8008ff8:	08009045 	.word	0x08009045
 8008ffc:	08009045 	.word	0x08009045
 8009000:	08009045 	.word	0x08009045
 8009004:	08009045 	.word	0x08009045
 8009008:	08009045 	.word	0x08009045
 800900c:	08009045 	.word	0x08009045
 8009010:	0800903d 	.word	0x0800903d
 8009014:	2301      	movs	r3, #1
 8009016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800901a:	e326      	b.n	800966a <UART_SetConfig+0x7ae>
 800901c:	2304      	movs	r3, #4
 800901e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009022:	e322      	b.n	800966a <UART_SetConfig+0x7ae>
 8009024:	2308      	movs	r3, #8
 8009026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800902a:	e31e      	b.n	800966a <UART_SetConfig+0x7ae>
 800902c:	2310      	movs	r3, #16
 800902e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009032:	e31a      	b.n	800966a <UART_SetConfig+0x7ae>
 8009034:	2320      	movs	r3, #32
 8009036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800903a:	e316      	b.n	800966a <UART_SetConfig+0x7ae>
 800903c:	2340      	movs	r3, #64	; 0x40
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009042:	e312      	b.n	800966a <UART_SetConfig+0x7ae>
 8009044:	2380      	movs	r3, #128	; 0x80
 8009046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800904a:	e30e      	b.n	800966a <UART_SetConfig+0x7ae>
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a69      	ldr	r2, [pc, #420]	; (80091f8 <UART_SetConfig+0x33c>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d130      	bne.n	80090b8 <UART_SetConfig+0x1fc>
 8009056:	4b67      	ldr	r3, [pc, #412]	; (80091f4 <UART_SetConfig+0x338>)
 8009058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	2b05      	cmp	r3, #5
 8009060:	d826      	bhi.n	80090b0 <UART_SetConfig+0x1f4>
 8009062:	a201      	add	r2, pc, #4	; (adr r2, 8009068 <UART_SetConfig+0x1ac>)
 8009064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009068:	08009081 	.word	0x08009081
 800906c:	08009089 	.word	0x08009089
 8009070:	08009091 	.word	0x08009091
 8009074:	08009099 	.word	0x08009099
 8009078:	080090a1 	.word	0x080090a1
 800907c:	080090a9 	.word	0x080090a9
 8009080:	2300      	movs	r3, #0
 8009082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009086:	e2f0      	b.n	800966a <UART_SetConfig+0x7ae>
 8009088:	2304      	movs	r3, #4
 800908a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800908e:	e2ec      	b.n	800966a <UART_SetConfig+0x7ae>
 8009090:	2308      	movs	r3, #8
 8009092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009096:	e2e8      	b.n	800966a <UART_SetConfig+0x7ae>
 8009098:	2310      	movs	r3, #16
 800909a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800909e:	e2e4      	b.n	800966a <UART_SetConfig+0x7ae>
 80090a0:	2320      	movs	r3, #32
 80090a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090a6:	e2e0      	b.n	800966a <UART_SetConfig+0x7ae>
 80090a8:	2340      	movs	r3, #64	; 0x40
 80090aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ae:	e2dc      	b.n	800966a <UART_SetConfig+0x7ae>
 80090b0:	2380      	movs	r3, #128	; 0x80
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090b6:	e2d8      	b.n	800966a <UART_SetConfig+0x7ae>
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a4f      	ldr	r2, [pc, #316]	; (80091fc <UART_SetConfig+0x340>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d130      	bne.n	8009124 <UART_SetConfig+0x268>
 80090c2:	4b4c      	ldr	r3, [pc, #304]	; (80091f4 <UART_SetConfig+0x338>)
 80090c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c6:	f003 0307 	and.w	r3, r3, #7
 80090ca:	2b05      	cmp	r3, #5
 80090cc:	d826      	bhi.n	800911c <UART_SetConfig+0x260>
 80090ce:	a201      	add	r2, pc, #4	; (adr r2, 80090d4 <UART_SetConfig+0x218>)
 80090d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d4:	080090ed 	.word	0x080090ed
 80090d8:	080090f5 	.word	0x080090f5
 80090dc:	080090fd 	.word	0x080090fd
 80090e0:	08009105 	.word	0x08009105
 80090e4:	0800910d 	.word	0x0800910d
 80090e8:	08009115 	.word	0x08009115
 80090ec:	2300      	movs	r3, #0
 80090ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090f2:	e2ba      	b.n	800966a <UART_SetConfig+0x7ae>
 80090f4:	2304      	movs	r3, #4
 80090f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090fa:	e2b6      	b.n	800966a <UART_SetConfig+0x7ae>
 80090fc:	2308      	movs	r3, #8
 80090fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009102:	e2b2      	b.n	800966a <UART_SetConfig+0x7ae>
 8009104:	2310      	movs	r3, #16
 8009106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800910a:	e2ae      	b.n	800966a <UART_SetConfig+0x7ae>
 800910c:	2320      	movs	r3, #32
 800910e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009112:	e2aa      	b.n	800966a <UART_SetConfig+0x7ae>
 8009114:	2340      	movs	r3, #64	; 0x40
 8009116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800911a:	e2a6      	b.n	800966a <UART_SetConfig+0x7ae>
 800911c:	2380      	movs	r3, #128	; 0x80
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009122:	e2a2      	b.n	800966a <UART_SetConfig+0x7ae>
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a35      	ldr	r2, [pc, #212]	; (8009200 <UART_SetConfig+0x344>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d130      	bne.n	8009190 <UART_SetConfig+0x2d4>
 800912e:	4b31      	ldr	r3, [pc, #196]	; (80091f4 <UART_SetConfig+0x338>)
 8009130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009132:	f003 0307 	and.w	r3, r3, #7
 8009136:	2b05      	cmp	r3, #5
 8009138:	d826      	bhi.n	8009188 <UART_SetConfig+0x2cc>
 800913a:	a201      	add	r2, pc, #4	; (adr r2, 8009140 <UART_SetConfig+0x284>)
 800913c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009140:	08009159 	.word	0x08009159
 8009144:	08009161 	.word	0x08009161
 8009148:	08009169 	.word	0x08009169
 800914c:	08009171 	.word	0x08009171
 8009150:	08009179 	.word	0x08009179
 8009154:	08009181 	.word	0x08009181
 8009158:	2300      	movs	r3, #0
 800915a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800915e:	e284      	b.n	800966a <UART_SetConfig+0x7ae>
 8009160:	2304      	movs	r3, #4
 8009162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009166:	e280      	b.n	800966a <UART_SetConfig+0x7ae>
 8009168:	2308      	movs	r3, #8
 800916a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800916e:	e27c      	b.n	800966a <UART_SetConfig+0x7ae>
 8009170:	2310      	movs	r3, #16
 8009172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009176:	e278      	b.n	800966a <UART_SetConfig+0x7ae>
 8009178:	2320      	movs	r3, #32
 800917a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800917e:	e274      	b.n	800966a <UART_SetConfig+0x7ae>
 8009180:	2340      	movs	r3, #64	; 0x40
 8009182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009186:	e270      	b.n	800966a <UART_SetConfig+0x7ae>
 8009188:	2380      	movs	r3, #128	; 0x80
 800918a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800918e:	e26c      	b.n	800966a <UART_SetConfig+0x7ae>
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a1b      	ldr	r2, [pc, #108]	; (8009204 <UART_SetConfig+0x348>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d142      	bne.n	8009220 <UART_SetConfig+0x364>
 800919a:	4b16      	ldr	r3, [pc, #88]	; (80091f4 <UART_SetConfig+0x338>)
 800919c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800919e:	f003 0307 	and.w	r3, r3, #7
 80091a2:	2b05      	cmp	r3, #5
 80091a4:	d838      	bhi.n	8009218 <UART_SetConfig+0x35c>
 80091a6:	a201      	add	r2, pc, #4	; (adr r2, 80091ac <UART_SetConfig+0x2f0>)
 80091a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ac:	080091c5 	.word	0x080091c5
 80091b0:	080091cd 	.word	0x080091cd
 80091b4:	080091d5 	.word	0x080091d5
 80091b8:	080091dd 	.word	0x080091dd
 80091bc:	08009209 	.word	0x08009209
 80091c0:	08009211 	.word	0x08009211
 80091c4:	2300      	movs	r3, #0
 80091c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ca:	e24e      	b.n	800966a <UART_SetConfig+0x7ae>
 80091cc:	2304      	movs	r3, #4
 80091ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091d2:	e24a      	b.n	800966a <UART_SetConfig+0x7ae>
 80091d4:	2308      	movs	r3, #8
 80091d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091da:	e246      	b.n	800966a <UART_SetConfig+0x7ae>
 80091dc:	2310      	movs	r3, #16
 80091de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091e2:	e242      	b.n	800966a <UART_SetConfig+0x7ae>
 80091e4:	cfff69f3 	.word	0xcfff69f3
 80091e8:	58000c00 	.word	0x58000c00
 80091ec:	11fff4ff 	.word	0x11fff4ff
 80091f0:	40011000 	.word	0x40011000
 80091f4:	58024400 	.word	0x58024400
 80091f8:	40004400 	.word	0x40004400
 80091fc:	40004800 	.word	0x40004800
 8009200:	40004c00 	.word	0x40004c00
 8009204:	40005000 	.word	0x40005000
 8009208:	2320      	movs	r3, #32
 800920a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800920e:	e22c      	b.n	800966a <UART_SetConfig+0x7ae>
 8009210:	2340      	movs	r3, #64	; 0x40
 8009212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009216:	e228      	b.n	800966a <UART_SetConfig+0x7ae>
 8009218:	2380      	movs	r3, #128	; 0x80
 800921a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800921e:	e224      	b.n	800966a <UART_SetConfig+0x7ae>
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4ab1      	ldr	r2, [pc, #708]	; (80094ec <UART_SetConfig+0x630>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d176      	bne.n	8009318 <UART_SetConfig+0x45c>
 800922a:	4bb1      	ldr	r3, [pc, #708]	; (80094f0 <UART_SetConfig+0x634>)
 800922c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800922e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009232:	2b28      	cmp	r3, #40	; 0x28
 8009234:	d86c      	bhi.n	8009310 <UART_SetConfig+0x454>
 8009236:	a201      	add	r2, pc, #4	; (adr r2, 800923c <UART_SetConfig+0x380>)
 8009238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923c:	080092e1 	.word	0x080092e1
 8009240:	08009311 	.word	0x08009311
 8009244:	08009311 	.word	0x08009311
 8009248:	08009311 	.word	0x08009311
 800924c:	08009311 	.word	0x08009311
 8009250:	08009311 	.word	0x08009311
 8009254:	08009311 	.word	0x08009311
 8009258:	08009311 	.word	0x08009311
 800925c:	080092e9 	.word	0x080092e9
 8009260:	08009311 	.word	0x08009311
 8009264:	08009311 	.word	0x08009311
 8009268:	08009311 	.word	0x08009311
 800926c:	08009311 	.word	0x08009311
 8009270:	08009311 	.word	0x08009311
 8009274:	08009311 	.word	0x08009311
 8009278:	08009311 	.word	0x08009311
 800927c:	080092f1 	.word	0x080092f1
 8009280:	08009311 	.word	0x08009311
 8009284:	08009311 	.word	0x08009311
 8009288:	08009311 	.word	0x08009311
 800928c:	08009311 	.word	0x08009311
 8009290:	08009311 	.word	0x08009311
 8009294:	08009311 	.word	0x08009311
 8009298:	08009311 	.word	0x08009311
 800929c:	080092f9 	.word	0x080092f9
 80092a0:	08009311 	.word	0x08009311
 80092a4:	08009311 	.word	0x08009311
 80092a8:	08009311 	.word	0x08009311
 80092ac:	08009311 	.word	0x08009311
 80092b0:	08009311 	.word	0x08009311
 80092b4:	08009311 	.word	0x08009311
 80092b8:	08009311 	.word	0x08009311
 80092bc:	08009301 	.word	0x08009301
 80092c0:	08009311 	.word	0x08009311
 80092c4:	08009311 	.word	0x08009311
 80092c8:	08009311 	.word	0x08009311
 80092cc:	08009311 	.word	0x08009311
 80092d0:	08009311 	.word	0x08009311
 80092d4:	08009311 	.word	0x08009311
 80092d8:	08009311 	.word	0x08009311
 80092dc:	08009309 	.word	0x08009309
 80092e0:	2301      	movs	r3, #1
 80092e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092e6:	e1c0      	b.n	800966a <UART_SetConfig+0x7ae>
 80092e8:	2304      	movs	r3, #4
 80092ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ee:	e1bc      	b.n	800966a <UART_SetConfig+0x7ae>
 80092f0:	2308      	movs	r3, #8
 80092f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092f6:	e1b8      	b.n	800966a <UART_SetConfig+0x7ae>
 80092f8:	2310      	movs	r3, #16
 80092fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092fe:	e1b4      	b.n	800966a <UART_SetConfig+0x7ae>
 8009300:	2320      	movs	r3, #32
 8009302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009306:	e1b0      	b.n	800966a <UART_SetConfig+0x7ae>
 8009308:	2340      	movs	r3, #64	; 0x40
 800930a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800930e:	e1ac      	b.n	800966a <UART_SetConfig+0x7ae>
 8009310:	2380      	movs	r3, #128	; 0x80
 8009312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009316:	e1a8      	b.n	800966a <UART_SetConfig+0x7ae>
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a75      	ldr	r2, [pc, #468]	; (80094f4 <UART_SetConfig+0x638>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d130      	bne.n	8009384 <UART_SetConfig+0x4c8>
 8009322:	4b73      	ldr	r3, [pc, #460]	; (80094f0 <UART_SetConfig+0x634>)
 8009324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009326:	f003 0307 	and.w	r3, r3, #7
 800932a:	2b05      	cmp	r3, #5
 800932c:	d826      	bhi.n	800937c <UART_SetConfig+0x4c0>
 800932e:	a201      	add	r2, pc, #4	; (adr r2, 8009334 <UART_SetConfig+0x478>)
 8009330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009334:	0800934d 	.word	0x0800934d
 8009338:	08009355 	.word	0x08009355
 800933c:	0800935d 	.word	0x0800935d
 8009340:	08009365 	.word	0x08009365
 8009344:	0800936d 	.word	0x0800936d
 8009348:	08009375 	.word	0x08009375
 800934c:	2300      	movs	r3, #0
 800934e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009352:	e18a      	b.n	800966a <UART_SetConfig+0x7ae>
 8009354:	2304      	movs	r3, #4
 8009356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800935a:	e186      	b.n	800966a <UART_SetConfig+0x7ae>
 800935c:	2308      	movs	r3, #8
 800935e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009362:	e182      	b.n	800966a <UART_SetConfig+0x7ae>
 8009364:	2310      	movs	r3, #16
 8009366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800936a:	e17e      	b.n	800966a <UART_SetConfig+0x7ae>
 800936c:	2320      	movs	r3, #32
 800936e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009372:	e17a      	b.n	800966a <UART_SetConfig+0x7ae>
 8009374:	2340      	movs	r3, #64	; 0x40
 8009376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800937a:	e176      	b.n	800966a <UART_SetConfig+0x7ae>
 800937c:	2380      	movs	r3, #128	; 0x80
 800937e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009382:	e172      	b.n	800966a <UART_SetConfig+0x7ae>
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a5b      	ldr	r2, [pc, #364]	; (80094f8 <UART_SetConfig+0x63c>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d130      	bne.n	80093f0 <UART_SetConfig+0x534>
 800938e:	4b58      	ldr	r3, [pc, #352]	; (80094f0 <UART_SetConfig+0x634>)
 8009390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009392:	f003 0307 	and.w	r3, r3, #7
 8009396:	2b05      	cmp	r3, #5
 8009398:	d826      	bhi.n	80093e8 <UART_SetConfig+0x52c>
 800939a:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <UART_SetConfig+0x4e4>)
 800939c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a0:	080093b9 	.word	0x080093b9
 80093a4:	080093c1 	.word	0x080093c1
 80093a8:	080093c9 	.word	0x080093c9
 80093ac:	080093d1 	.word	0x080093d1
 80093b0:	080093d9 	.word	0x080093d9
 80093b4:	080093e1 	.word	0x080093e1
 80093b8:	2300      	movs	r3, #0
 80093ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093be:	e154      	b.n	800966a <UART_SetConfig+0x7ae>
 80093c0:	2304      	movs	r3, #4
 80093c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093c6:	e150      	b.n	800966a <UART_SetConfig+0x7ae>
 80093c8:	2308      	movs	r3, #8
 80093ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ce:	e14c      	b.n	800966a <UART_SetConfig+0x7ae>
 80093d0:	2310      	movs	r3, #16
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093d6:	e148      	b.n	800966a <UART_SetConfig+0x7ae>
 80093d8:	2320      	movs	r3, #32
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093de:	e144      	b.n	800966a <UART_SetConfig+0x7ae>
 80093e0:	2340      	movs	r3, #64	; 0x40
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093e6:	e140      	b.n	800966a <UART_SetConfig+0x7ae>
 80093e8:	2380      	movs	r3, #128	; 0x80
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ee:	e13c      	b.n	800966a <UART_SetConfig+0x7ae>
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a41      	ldr	r2, [pc, #260]	; (80094fc <UART_SetConfig+0x640>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	f040 8082 	bne.w	8009500 <UART_SetConfig+0x644>
 80093fc:	4b3c      	ldr	r3, [pc, #240]	; (80094f0 <UART_SetConfig+0x634>)
 80093fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009400:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009404:	2b28      	cmp	r3, #40	; 0x28
 8009406:	d86d      	bhi.n	80094e4 <UART_SetConfig+0x628>
 8009408:	a201      	add	r2, pc, #4	; (adr r2, 8009410 <UART_SetConfig+0x554>)
 800940a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940e:	bf00      	nop
 8009410:	080094b5 	.word	0x080094b5
 8009414:	080094e5 	.word	0x080094e5
 8009418:	080094e5 	.word	0x080094e5
 800941c:	080094e5 	.word	0x080094e5
 8009420:	080094e5 	.word	0x080094e5
 8009424:	080094e5 	.word	0x080094e5
 8009428:	080094e5 	.word	0x080094e5
 800942c:	080094e5 	.word	0x080094e5
 8009430:	080094bd 	.word	0x080094bd
 8009434:	080094e5 	.word	0x080094e5
 8009438:	080094e5 	.word	0x080094e5
 800943c:	080094e5 	.word	0x080094e5
 8009440:	080094e5 	.word	0x080094e5
 8009444:	080094e5 	.word	0x080094e5
 8009448:	080094e5 	.word	0x080094e5
 800944c:	080094e5 	.word	0x080094e5
 8009450:	080094c5 	.word	0x080094c5
 8009454:	080094e5 	.word	0x080094e5
 8009458:	080094e5 	.word	0x080094e5
 800945c:	080094e5 	.word	0x080094e5
 8009460:	080094e5 	.word	0x080094e5
 8009464:	080094e5 	.word	0x080094e5
 8009468:	080094e5 	.word	0x080094e5
 800946c:	080094e5 	.word	0x080094e5
 8009470:	080094cd 	.word	0x080094cd
 8009474:	080094e5 	.word	0x080094e5
 8009478:	080094e5 	.word	0x080094e5
 800947c:	080094e5 	.word	0x080094e5
 8009480:	080094e5 	.word	0x080094e5
 8009484:	080094e5 	.word	0x080094e5
 8009488:	080094e5 	.word	0x080094e5
 800948c:	080094e5 	.word	0x080094e5
 8009490:	080094d5 	.word	0x080094d5
 8009494:	080094e5 	.word	0x080094e5
 8009498:	080094e5 	.word	0x080094e5
 800949c:	080094e5 	.word	0x080094e5
 80094a0:	080094e5 	.word	0x080094e5
 80094a4:	080094e5 	.word	0x080094e5
 80094a8:	080094e5 	.word	0x080094e5
 80094ac:	080094e5 	.word	0x080094e5
 80094b0:	080094dd 	.word	0x080094dd
 80094b4:	2301      	movs	r3, #1
 80094b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ba:	e0d6      	b.n	800966a <UART_SetConfig+0x7ae>
 80094bc:	2304      	movs	r3, #4
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094c2:	e0d2      	b.n	800966a <UART_SetConfig+0x7ae>
 80094c4:	2308      	movs	r3, #8
 80094c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ca:	e0ce      	b.n	800966a <UART_SetConfig+0x7ae>
 80094cc:	2310      	movs	r3, #16
 80094ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094d2:	e0ca      	b.n	800966a <UART_SetConfig+0x7ae>
 80094d4:	2320      	movs	r3, #32
 80094d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094da:	e0c6      	b.n	800966a <UART_SetConfig+0x7ae>
 80094dc:	2340      	movs	r3, #64	; 0x40
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094e2:	e0c2      	b.n	800966a <UART_SetConfig+0x7ae>
 80094e4:	2380      	movs	r3, #128	; 0x80
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ea:	e0be      	b.n	800966a <UART_SetConfig+0x7ae>
 80094ec:	40011400 	.word	0x40011400
 80094f0:	58024400 	.word	0x58024400
 80094f4:	40007800 	.word	0x40007800
 80094f8:	40007c00 	.word	0x40007c00
 80094fc:	40011800 	.word	0x40011800
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4aad      	ldr	r2, [pc, #692]	; (80097bc <UART_SetConfig+0x900>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d176      	bne.n	80095f8 <UART_SetConfig+0x73c>
 800950a:	4bad      	ldr	r3, [pc, #692]	; (80097c0 <UART_SetConfig+0x904>)
 800950c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009512:	2b28      	cmp	r3, #40	; 0x28
 8009514:	d86c      	bhi.n	80095f0 <UART_SetConfig+0x734>
 8009516:	a201      	add	r2, pc, #4	; (adr r2, 800951c <UART_SetConfig+0x660>)
 8009518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951c:	080095c1 	.word	0x080095c1
 8009520:	080095f1 	.word	0x080095f1
 8009524:	080095f1 	.word	0x080095f1
 8009528:	080095f1 	.word	0x080095f1
 800952c:	080095f1 	.word	0x080095f1
 8009530:	080095f1 	.word	0x080095f1
 8009534:	080095f1 	.word	0x080095f1
 8009538:	080095f1 	.word	0x080095f1
 800953c:	080095c9 	.word	0x080095c9
 8009540:	080095f1 	.word	0x080095f1
 8009544:	080095f1 	.word	0x080095f1
 8009548:	080095f1 	.word	0x080095f1
 800954c:	080095f1 	.word	0x080095f1
 8009550:	080095f1 	.word	0x080095f1
 8009554:	080095f1 	.word	0x080095f1
 8009558:	080095f1 	.word	0x080095f1
 800955c:	080095d1 	.word	0x080095d1
 8009560:	080095f1 	.word	0x080095f1
 8009564:	080095f1 	.word	0x080095f1
 8009568:	080095f1 	.word	0x080095f1
 800956c:	080095f1 	.word	0x080095f1
 8009570:	080095f1 	.word	0x080095f1
 8009574:	080095f1 	.word	0x080095f1
 8009578:	080095f1 	.word	0x080095f1
 800957c:	080095d9 	.word	0x080095d9
 8009580:	080095f1 	.word	0x080095f1
 8009584:	080095f1 	.word	0x080095f1
 8009588:	080095f1 	.word	0x080095f1
 800958c:	080095f1 	.word	0x080095f1
 8009590:	080095f1 	.word	0x080095f1
 8009594:	080095f1 	.word	0x080095f1
 8009598:	080095f1 	.word	0x080095f1
 800959c:	080095e1 	.word	0x080095e1
 80095a0:	080095f1 	.word	0x080095f1
 80095a4:	080095f1 	.word	0x080095f1
 80095a8:	080095f1 	.word	0x080095f1
 80095ac:	080095f1 	.word	0x080095f1
 80095b0:	080095f1 	.word	0x080095f1
 80095b4:	080095f1 	.word	0x080095f1
 80095b8:	080095f1 	.word	0x080095f1
 80095bc:	080095e9 	.word	0x080095e9
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095c6:	e050      	b.n	800966a <UART_SetConfig+0x7ae>
 80095c8:	2304      	movs	r3, #4
 80095ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ce:	e04c      	b.n	800966a <UART_SetConfig+0x7ae>
 80095d0:	2308      	movs	r3, #8
 80095d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095d6:	e048      	b.n	800966a <UART_SetConfig+0x7ae>
 80095d8:	2310      	movs	r3, #16
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095de:	e044      	b.n	800966a <UART_SetConfig+0x7ae>
 80095e0:	2320      	movs	r3, #32
 80095e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095e6:	e040      	b.n	800966a <UART_SetConfig+0x7ae>
 80095e8:	2340      	movs	r3, #64	; 0x40
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ee:	e03c      	b.n	800966a <UART_SetConfig+0x7ae>
 80095f0:	2380      	movs	r3, #128	; 0x80
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095f6:	e038      	b.n	800966a <UART_SetConfig+0x7ae>
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a71      	ldr	r2, [pc, #452]	; (80097c4 <UART_SetConfig+0x908>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d130      	bne.n	8009664 <UART_SetConfig+0x7a8>
 8009602:	4b6f      	ldr	r3, [pc, #444]	; (80097c0 <UART_SetConfig+0x904>)
 8009604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009606:	f003 0307 	and.w	r3, r3, #7
 800960a:	2b05      	cmp	r3, #5
 800960c:	d826      	bhi.n	800965c <UART_SetConfig+0x7a0>
 800960e:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <UART_SetConfig+0x758>)
 8009610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009614:	0800962d 	.word	0x0800962d
 8009618:	08009635 	.word	0x08009635
 800961c:	0800963d 	.word	0x0800963d
 8009620:	08009645 	.word	0x08009645
 8009624:	0800964d 	.word	0x0800964d
 8009628:	08009655 	.word	0x08009655
 800962c:	2302      	movs	r3, #2
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009632:	e01a      	b.n	800966a <UART_SetConfig+0x7ae>
 8009634:	2304      	movs	r3, #4
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800963a:	e016      	b.n	800966a <UART_SetConfig+0x7ae>
 800963c:	2308      	movs	r3, #8
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009642:	e012      	b.n	800966a <UART_SetConfig+0x7ae>
 8009644:	2310      	movs	r3, #16
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800964a:	e00e      	b.n	800966a <UART_SetConfig+0x7ae>
 800964c:	2320      	movs	r3, #32
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009652:	e00a      	b.n	800966a <UART_SetConfig+0x7ae>
 8009654:	2340      	movs	r3, #64	; 0x40
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965a:	e006      	b.n	800966a <UART_SetConfig+0x7ae>
 800965c:	2380      	movs	r3, #128	; 0x80
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009662:	e002      	b.n	800966a <UART_SetConfig+0x7ae>
 8009664:	2380      	movs	r3, #128	; 0x80
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a55      	ldr	r2, [pc, #340]	; (80097c4 <UART_SetConfig+0x908>)
 8009670:	4293      	cmp	r3, r2
 8009672:	f040 80f8 	bne.w	8009866 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009676:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800967a:	2b20      	cmp	r3, #32
 800967c:	dc46      	bgt.n	800970c <UART_SetConfig+0x850>
 800967e:	2b02      	cmp	r3, #2
 8009680:	db75      	blt.n	800976e <UART_SetConfig+0x8b2>
 8009682:	3b02      	subs	r3, #2
 8009684:	2b1e      	cmp	r3, #30
 8009686:	d872      	bhi.n	800976e <UART_SetConfig+0x8b2>
 8009688:	a201      	add	r2, pc, #4	; (adr r2, 8009690 <UART_SetConfig+0x7d4>)
 800968a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968e:	bf00      	nop
 8009690:	08009713 	.word	0x08009713
 8009694:	0800976f 	.word	0x0800976f
 8009698:	0800971b 	.word	0x0800971b
 800969c:	0800976f 	.word	0x0800976f
 80096a0:	0800976f 	.word	0x0800976f
 80096a4:	0800976f 	.word	0x0800976f
 80096a8:	0800972b 	.word	0x0800972b
 80096ac:	0800976f 	.word	0x0800976f
 80096b0:	0800976f 	.word	0x0800976f
 80096b4:	0800976f 	.word	0x0800976f
 80096b8:	0800976f 	.word	0x0800976f
 80096bc:	0800976f 	.word	0x0800976f
 80096c0:	0800976f 	.word	0x0800976f
 80096c4:	0800976f 	.word	0x0800976f
 80096c8:	0800973b 	.word	0x0800973b
 80096cc:	0800976f 	.word	0x0800976f
 80096d0:	0800976f 	.word	0x0800976f
 80096d4:	0800976f 	.word	0x0800976f
 80096d8:	0800976f 	.word	0x0800976f
 80096dc:	0800976f 	.word	0x0800976f
 80096e0:	0800976f 	.word	0x0800976f
 80096e4:	0800976f 	.word	0x0800976f
 80096e8:	0800976f 	.word	0x0800976f
 80096ec:	0800976f 	.word	0x0800976f
 80096f0:	0800976f 	.word	0x0800976f
 80096f4:	0800976f 	.word	0x0800976f
 80096f8:	0800976f 	.word	0x0800976f
 80096fc:	0800976f 	.word	0x0800976f
 8009700:	0800976f 	.word	0x0800976f
 8009704:	0800976f 	.word	0x0800976f
 8009708:	08009761 	.word	0x08009761
 800970c:	2b40      	cmp	r3, #64	; 0x40
 800970e:	d02a      	beq.n	8009766 <UART_SetConfig+0x8aa>
 8009710:	e02d      	b.n	800976e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009712:	f7fe f9b7 	bl	8007a84 <HAL_RCCEx_GetD3PCLK1Freq>
 8009716:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009718:	e02f      	b.n	800977a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800971a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800971e:	4618      	mov	r0, r3
 8009720:	f7fe f9c6 	bl	8007ab0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009728:	e027      	b.n	800977a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800972a:	f107 0318 	add.w	r3, r7, #24
 800972e:	4618      	mov	r0, r3
 8009730:	f7fe fb12 	bl	8007d58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009738:	e01f      	b.n	800977a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800973a:	4b21      	ldr	r3, [pc, #132]	; (80097c0 <UART_SetConfig+0x904>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f003 0320 	and.w	r3, r3, #32
 8009742:	2b00      	cmp	r3, #0
 8009744:	d009      	beq.n	800975a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009746:	4b1e      	ldr	r3, [pc, #120]	; (80097c0 <UART_SetConfig+0x904>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	08db      	lsrs	r3, r3, #3
 800974c:	f003 0303 	and.w	r3, r3, #3
 8009750:	4a1d      	ldr	r2, [pc, #116]	; (80097c8 <UART_SetConfig+0x90c>)
 8009752:	fa22 f303 	lsr.w	r3, r2, r3
 8009756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009758:	e00f      	b.n	800977a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800975a:	4b1b      	ldr	r3, [pc, #108]	; (80097c8 <UART_SetConfig+0x90c>)
 800975c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800975e:	e00c      	b.n	800977a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009760:	4b1a      	ldr	r3, [pc, #104]	; (80097cc <UART_SetConfig+0x910>)
 8009762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009764:	e009      	b.n	800977a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800976a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800976c:	e005      	b.n	800977a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009778:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800977a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 81ee 	beq.w	8009b5e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	4a12      	ldr	r2, [pc, #72]	; (80097d0 <UART_SetConfig+0x914>)
 8009788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800978c:	461a      	mov	r2, r3
 800978e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009790:	fbb3 f3f2 	udiv	r3, r3, r2
 8009794:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	685a      	ldr	r2, [r3, #4]
 800979a:	4613      	mov	r3, r2
 800979c:	005b      	lsls	r3, r3, #1
 800979e:	4413      	add	r3, r2
 80097a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d305      	bcc.n	80097b2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d910      	bls.n	80097d4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80097b8:	e1d1      	b.n	8009b5e <UART_SetConfig+0xca2>
 80097ba:	bf00      	nop
 80097bc:	40011c00 	.word	0x40011c00
 80097c0:	58024400 	.word	0x58024400
 80097c4:	58000c00 	.word	0x58000c00
 80097c8:	03d09000 	.word	0x03d09000
 80097cc:	003d0900 	.word	0x003d0900
 80097d0:	08010ac4 	.word	0x08010ac4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d6:	2200      	movs	r2, #0
 80097d8:	60bb      	str	r3, [r7, #8]
 80097da:	60fa      	str	r2, [r7, #12]
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e0:	4ac0      	ldr	r2, [pc, #768]	; (8009ae4 <UART_SetConfig+0xc28>)
 80097e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	2200      	movs	r2, #0
 80097ea:	603b      	str	r3, [r7, #0]
 80097ec:	607a      	str	r2, [r7, #4]
 80097ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097f6:	f7f6 fddb 	bl	80003b0 <__aeabi_uldivmod>
 80097fa:	4602      	mov	r2, r0
 80097fc:	460b      	mov	r3, r1
 80097fe:	4610      	mov	r0, r2
 8009800:	4619      	mov	r1, r3
 8009802:	f04f 0200 	mov.w	r2, #0
 8009806:	f04f 0300 	mov.w	r3, #0
 800980a:	020b      	lsls	r3, r1, #8
 800980c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009810:	0202      	lsls	r2, r0, #8
 8009812:	6979      	ldr	r1, [r7, #20]
 8009814:	6849      	ldr	r1, [r1, #4]
 8009816:	0849      	lsrs	r1, r1, #1
 8009818:	2000      	movs	r0, #0
 800981a:	460c      	mov	r4, r1
 800981c:	4605      	mov	r5, r0
 800981e:	eb12 0804 	adds.w	r8, r2, r4
 8009822:	eb43 0905 	adc.w	r9, r3, r5
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	469a      	mov	sl, r3
 800982e:	4693      	mov	fp, r2
 8009830:	4652      	mov	r2, sl
 8009832:	465b      	mov	r3, fp
 8009834:	4640      	mov	r0, r8
 8009836:	4649      	mov	r1, r9
 8009838:	f7f6 fdba 	bl	80003b0 <__aeabi_uldivmod>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4613      	mov	r3, r2
 8009842:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800984a:	d308      	bcc.n	800985e <UART_SetConfig+0x9a2>
 800984c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009852:	d204      	bcs.n	800985e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800985a:	60da      	str	r2, [r3, #12]
 800985c:	e17f      	b.n	8009b5e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009864:	e17b      	b.n	8009b5e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	69db      	ldr	r3, [r3, #28]
 800986a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800986e:	f040 80bd 	bne.w	80099ec <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009872:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009876:	2b20      	cmp	r3, #32
 8009878:	dc48      	bgt.n	800990c <UART_SetConfig+0xa50>
 800987a:	2b00      	cmp	r3, #0
 800987c:	db7b      	blt.n	8009976 <UART_SetConfig+0xaba>
 800987e:	2b20      	cmp	r3, #32
 8009880:	d879      	bhi.n	8009976 <UART_SetConfig+0xaba>
 8009882:	a201      	add	r2, pc, #4	; (adr r2, 8009888 <UART_SetConfig+0x9cc>)
 8009884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009888:	08009913 	.word	0x08009913
 800988c:	0800991b 	.word	0x0800991b
 8009890:	08009977 	.word	0x08009977
 8009894:	08009977 	.word	0x08009977
 8009898:	08009923 	.word	0x08009923
 800989c:	08009977 	.word	0x08009977
 80098a0:	08009977 	.word	0x08009977
 80098a4:	08009977 	.word	0x08009977
 80098a8:	08009933 	.word	0x08009933
 80098ac:	08009977 	.word	0x08009977
 80098b0:	08009977 	.word	0x08009977
 80098b4:	08009977 	.word	0x08009977
 80098b8:	08009977 	.word	0x08009977
 80098bc:	08009977 	.word	0x08009977
 80098c0:	08009977 	.word	0x08009977
 80098c4:	08009977 	.word	0x08009977
 80098c8:	08009943 	.word	0x08009943
 80098cc:	08009977 	.word	0x08009977
 80098d0:	08009977 	.word	0x08009977
 80098d4:	08009977 	.word	0x08009977
 80098d8:	08009977 	.word	0x08009977
 80098dc:	08009977 	.word	0x08009977
 80098e0:	08009977 	.word	0x08009977
 80098e4:	08009977 	.word	0x08009977
 80098e8:	08009977 	.word	0x08009977
 80098ec:	08009977 	.word	0x08009977
 80098f0:	08009977 	.word	0x08009977
 80098f4:	08009977 	.word	0x08009977
 80098f8:	08009977 	.word	0x08009977
 80098fc:	08009977 	.word	0x08009977
 8009900:	08009977 	.word	0x08009977
 8009904:	08009977 	.word	0x08009977
 8009908:	08009969 	.word	0x08009969
 800990c:	2b40      	cmp	r3, #64	; 0x40
 800990e:	d02e      	beq.n	800996e <UART_SetConfig+0xab2>
 8009910:	e031      	b.n	8009976 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009912:	f7fc feeb 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 8009916:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009918:	e033      	b.n	8009982 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800991a:	f7fc fefd 	bl	8006718 <HAL_RCC_GetPCLK2Freq>
 800991e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009920:	e02f      	b.n	8009982 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009926:	4618      	mov	r0, r3
 8009928:	f7fe f8c2 	bl	8007ab0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009930:	e027      	b.n	8009982 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009932:	f107 0318 	add.w	r3, r7, #24
 8009936:	4618      	mov	r0, r3
 8009938:	f7fe fa0e 	bl	8007d58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009940:	e01f      	b.n	8009982 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009942:	4b69      	ldr	r3, [pc, #420]	; (8009ae8 <UART_SetConfig+0xc2c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0320 	and.w	r3, r3, #32
 800994a:	2b00      	cmp	r3, #0
 800994c:	d009      	beq.n	8009962 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800994e:	4b66      	ldr	r3, [pc, #408]	; (8009ae8 <UART_SetConfig+0xc2c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	08db      	lsrs	r3, r3, #3
 8009954:	f003 0303 	and.w	r3, r3, #3
 8009958:	4a64      	ldr	r2, [pc, #400]	; (8009aec <UART_SetConfig+0xc30>)
 800995a:	fa22 f303 	lsr.w	r3, r2, r3
 800995e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009960:	e00f      	b.n	8009982 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009962:	4b62      	ldr	r3, [pc, #392]	; (8009aec <UART_SetConfig+0xc30>)
 8009964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009966:	e00c      	b.n	8009982 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009968:	4b61      	ldr	r3, [pc, #388]	; (8009af0 <UART_SetConfig+0xc34>)
 800996a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800996c:	e009      	b.n	8009982 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800996e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009974:	e005      	b.n	8009982 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009976:	2300      	movs	r3, #0
 8009978:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009984:	2b00      	cmp	r3, #0
 8009986:	f000 80ea 	beq.w	8009b5e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998e:	4a55      	ldr	r2, [pc, #340]	; (8009ae4 <UART_SetConfig+0xc28>)
 8009990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009994:	461a      	mov	r2, r3
 8009996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009998:	fbb3 f3f2 	udiv	r3, r3, r2
 800999c:	005a      	lsls	r2, r3, #1
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	085b      	lsrs	r3, r3, #1
 80099a4:	441a      	add	r2, r3
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b2:	2b0f      	cmp	r3, #15
 80099b4:	d916      	bls.n	80099e4 <UART_SetConfig+0xb28>
 80099b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099bc:	d212      	bcs.n	80099e4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	f023 030f 	bic.w	r3, r3, #15
 80099c6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ca:	085b      	lsrs	r3, r3, #1
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	f003 0307 	and.w	r3, r3, #7
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80099d6:	4313      	orrs	r3, r2
 80099d8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80099e0:	60da      	str	r2, [r3, #12]
 80099e2:	e0bc      	b.n	8009b5e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80099ea:	e0b8      	b.n	8009b5e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80099f0:	2b20      	cmp	r3, #32
 80099f2:	dc4b      	bgt.n	8009a8c <UART_SetConfig+0xbd0>
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f2c0 8087 	blt.w	8009b08 <UART_SetConfig+0xc4c>
 80099fa:	2b20      	cmp	r3, #32
 80099fc:	f200 8084 	bhi.w	8009b08 <UART_SetConfig+0xc4c>
 8009a00:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <UART_SetConfig+0xb4c>)
 8009a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a06:	bf00      	nop
 8009a08:	08009a93 	.word	0x08009a93
 8009a0c:	08009a9b 	.word	0x08009a9b
 8009a10:	08009b09 	.word	0x08009b09
 8009a14:	08009b09 	.word	0x08009b09
 8009a18:	08009aa3 	.word	0x08009aa3
 8009a1c:	08009b09 	.word	0x08009b09
 8009a20:	08009b09 	.word	0x08009b09
 8009a24:	08009b09 	.word	0x08009b09
 8009a28:	08009ab3 	.word	0x08009ab3
 8009a2c:	08009b09 	.word	0x08009b09
 8009a30:	08009b09 	.word	0x08009b09
 8009a34:	08009b09 	.word	0x08009b09
 8009a38:	08009b09 	.word	0x08009b09
 8009a3c:	08009b09 	.word	0x08009b09
 8009a40:	08009b09 	.word	0x08009b09
 8009a44:	08009b09 	.word	0x08009b09
 8009a48:	08009ac3 	.word	0x08009ac3
 8009a4c:	08009b09 	.word	0x08009b09
 8009a50:	08009b09 	.word	0x08009b09
 8009a54:	08009b09 	.word	0x08009b09
 8009a58:	08009b09 	.word	0x08009b09
 8009a5c:	08009b09 	.word	0x08009b09
 8009a60:	08009b09 	.word	0x08009b09
 8009a64:	08009b09 	.word	0x08009b09
 8009a68:	08009b09 	.word	0x08009b09
 8009a6c:	08009b09 	.word	0x08009b09
 8009a70:	08009b09 	.word	0x08009b09
 8009a74:	08009b09 	.word	0x08009b09
 8009a78:	08009b09 	.word	0x08009b09
 8009a7c:	08009b09 	.word	0x08009b09
 8009a80:	08009b09 	.word	0x08009b09
 8009a84:	08009b09 	.word	0x08009b09
 8009a88:	08009afb 	.word	0x08009afb
 8009a8c:	2b40      	cmp	r3, #64	; 0x40
 8009a8e:	d037      	beq.n	8009b00 <UART_SetConfig+0xc44>
 8009a90:	e03a      	b.n	8009b08 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a92:	f7fc fe2b 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 8009a96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009a98:	e03c      	b.n	8009b14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a9a:	f7fc fe3d 	bl	8006718 <HAL_RCC_GetPCLK2Freq>
 8009a9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009aa0:	e038      	b.n	8009b14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe f802 	bl	8007ab0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ab0:	e030      	b.n	8009b14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ab2:	f107 0318 	add.w	r3, r7, #24
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fe f94e 	bl	8007d58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ac0:	e028      	b.n	8009b14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ac2:	4b09      	ldr	r3, [pc, #36]	; (8009ae8 <UART_SetConfig+0xc2c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 0320 	and.w	r3, r3, #32
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d012      	beq.n	8009af4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ace:	4b06      	ldr	r3, [pc, #24]	; (8009ae8 <UART_SetConfig+0xc2c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	08db      	lsrs	r3, r3, #3
 8009ad4:	f003 0303 	and.w	r3, r3, #3
 8009ad8:	4a04      	ldr	r2, [pc, #16]	; (8009aec <UART_SetConfig+0xc30>)
 8009ada:	fa22 f303 	lsr.w	r3, r2, r3
 8009ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ae0:	e018      	b.n	8009b14 <UART_SetConfig+0xc58>
 8009ae2:	bf00      	nop
 8009ae4:	08010ac4 	.word	0x08010ac4
 8009ae8:	58024400 	.word	0x58024400
 8009aec:	03d09000 	.word	0x03d09000
 8009af0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009af4:	4b24      	ldr	r3, [pc, #144]	; (8009b88 <UART_SetConfig+0xccc>)
 8009af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009af8:	e00c      	b.n	8009b14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009afa:	4b24      	ldr	r3, [pc, #144]	; (8009b8c <UART_SetConfig+0xcd0>)
 8009afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009afe:	e009      	b.n	8009b14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b06:	e005      	b.n	8009b14 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009b12:	bf00      	nop
    }

    if (pclk != 0U)
 8009b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d021      	beq.n	8009b5e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1e:	4a1c      	ldr	r2, [pc, #112]	; (8009b90 <UART_SetConfig+0xcd4>)
 8009b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b24:	461a      	mov	r2, r3
 8009b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b28:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	085b      	lsrs	r3, r3, #1
 8009b32:	441a      	add	r2, r3
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b3c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b40:	2b0f      	cmp	r3, #15
 8009b42:	d909      	bls.n	8009b58 <UART_SetConfig+0xc9c>
 8009b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b4a:	d205      	bcs.n	8009b58 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	60da      	str	r2, [r3, #12]
 8009b56:	e002      	b.n	8009b5e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2200      	movs	r2, #0
 8009b72:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	2200      	movs	r2, #0
 8009b78:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009b7a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3748      	adds	r7, #72	; 0x48
 8009b82:	46bd      	mov	sp, r7
 8009b84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b88:	03d09000 	.word	0x03d09000
 8009b8c:	003d0900 	.word	0x003d0900
 8009b90:	08010ac4 	.word	0x08010ac4

08009b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba0:	f003 0301 	and.w	r3, r3, #1
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00a      	beq.n	8009bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00a      	beq.n	8009be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be4:	f003 0304 	and.w	r3, r3, #4
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00a      	beq.n	8009c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c06:	f003 0308 	and.w	r3, r3, #8
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00a      	beq.n	8009c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	430a      	orrs	r2, r1
 8009c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c28:	f003 0310 	and.w	r3, r3, #16
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00a      	beq.n	8009c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	430a      	orrs	r2, r1
 8009c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4a:	f003 0320 	and.w	r3, r3, #32
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00a      	beq.n	8009c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	430a      	orrs	r2, r1
 8009c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d01a      	beq.n	8009caa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	430a      	orrs	r2, r1
 8009c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c92:	d10a      	bne.n	8009caa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00a      	beq.n	8009ccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	605a      	str	r2, [r3, #4]
  }
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b098      	sub	sp, #96	; 0x60
 8009cdc:	af02      	add	r7, sp, #8
 8009cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ce8:	f7fa f8f0 	bl	8003ecc <HAL_GetTick>
 8009cec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 0308 	and.w	r3, r3, #8
 8009cf8:	2b08      	cmp	r3, #8
 8009cfa:	d12f      	bne.n	8009d5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d04:	2200      	movs	r2, #0
 8009d06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f88e 	bl	8009e2c <UART_WaitOnFlagUntilTimeout>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d022      	beq.n	8009d5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1e:	e853 3f00 	ldrex	r3, [r3]
 8009d22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d2a:	653b      	str	r3, [r7, #80]	; 0x50
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	461a      	mov	r2, r3
 8009d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d34:	647b      	str	r3, [r7, #68]	; 0x44
 8009d36:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d3c:	e841 2300 	strex	r3, r2, [r1]
 8009d40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1e6      	bne.n	8009d16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e063      	b.n	8009e24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 0304 	and.w	r3, r3, #4
 8009d66:	2b04      	cmp	r3, #4
 8009d68:	d149      	bne.n	8009dfe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d72:	2200      	movs	r2, #0
 8009d74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f857 	bl	8009e2c <UART_WaitOnFlagUntilTimeout>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d03c      	beq.n	8009dfe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	e853 3f00 	ldrex	r3, [r3]
 8009d90:	623b      	str	r3, [r7, #32]
   return(result);
 8009d92:	6a3b      	ldr	r3, [r7, #32]
 8009d94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009da2:	633b      	str	r3, [r7, #48]	; 0x30
 8009da4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009daa:	e841 2300 	strex	r3, r2, [r1]
 8009dae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1e6      	bne.n	8009d84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3308      	adds	r3, #8
 8009dbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	e853 3f00 	ldrex	r3, [r3]
 8009dc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f023 0301 	bic.w	r3, r3, #1
 8009dcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3308      	adds	r3, #8
 8009dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dd6:	61fa      	str	r2, [r7, #28]
 8009dd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dda:	69b9      	ldr	r1, [r7, #24]
 8009ddc:	69fa      	ldr	r2, [r7, #28]
 8009dde:	e841 2300 	strex	r3, r2, [r1]
 8009de2:	617b      	str	r3, [r7, #20]
   return(result);
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1e5      	bne.n	8009db6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2220      	movs	r2, #32
 8009dee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e012      	b.n	8009e24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2220      	movs	r2, #32
 8009e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3758      	adds	r7, #88	; 0x58
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	603b      	str	r3, [r7, #0]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e3c:	e049      	b.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e44:	d045      	beq.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e46:	f7fa f841 	bl	8003ecc <HAL_GetTick>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	69ba      	ldr	r2, [r7, #24]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d302      	bcc.n	8009e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e048      	b.n	8009ef2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 0304 	and.w	r3, r3, #4
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d031      	beq.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	69db      	ldr	r3, [r3, #28]
 8009e74:	f003 0308 	and.w	r3, r3, #8
 8009e78:	2b08      	cmp	r3, #8
 8009e7a:	d110      	bne.n	8009e9e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2208      	movs	r2, #8
 8009e82:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 f839 	bl	8009efc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2208      	movs	r2, #8
 8009e8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e029      	b.n	8009ef2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	69db      	ldr	r3, [r3, #28]
 8009ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eac:	d111      	bne.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009eb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f000 f81f 	bl	8009efc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e00f      	b.n	8009ef2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	69da      	ldr	r2, [r3, #28]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	4013      	ands	r3, r2
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	bf0c      	ite	eq
 8009ee2:	2301      	moveq	r3, #1
 8009ee4:	2300      	movne	r3, #0
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	461a      	mov	r2, r3
 8009eea:	79fb      	ldrb	r3, [r7, #7]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d0a6      	beq.n	8009e3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b095      	sub	sp, #84	; 0x54
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0c:	e853 3f00 	ldrex	r3, [r3]
 8009f10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f22:	643b      	str	r3, [r7, #64]	; 0x40
 8009f24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f2a:	e841 2300 	strex	r3, r2, [r1]
 8009f2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1e6      	bne.n	8009f04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	3308      	adds	r3, #8
 8009f3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	e853 3f00 	ldrex	r3, [r3]
 8009f44:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f46:	69fa      	ldr	r2, [r7, #28]
 8009f48:	4b1e      	ldr	r3, [pc, #120]	; (8009fc4 <UART_EndRxTransfer+0xc8>)
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3308      	adds	r3, #8
 8009f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f5e:	e841 2300 	strex	r3, r2, [r1]
 8009f62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1e5      	bne.n	8009f36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d118      	bne.n	8009fa4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	e853 3f00 	ldrex	r3, [r3]
 8009f7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	f023 0310 	bic.w	r3, r3, #16
 8009f86:	647b      	str	r3, [r7, #68]	; 0x44
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f90:	61bb      	str	r3, [r7, #24]
 8009f92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f94:	6979      	ldr	r1, [r7, #20]
 8009f96:	69ba      	ldr	r2, [r7, #24]
 8009f98:	e841 2300 	strex	r3, r2, [r1]
 8009f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1e6      	bne.n	8009f72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009fb8:	bf00      	nop
 8009fba:	3754      	adds	r7, #84	; 0x54
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	effffffe 	.word	0xeffffffe

08009fc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d101      	bne.n	8009fde <HAL_UARTEx_DisableFifoMode+0x16>
 8009fda:	2302      	movs	r3, #2
 8009fdc:	e027      	b.n	800a02e <HAL_UARTEx_DisableFifoMode+0x66>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2224      	movs	r2, #36	; 0x24
 8009fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f022 0201 	bic.w	r2, r2, #1
 800a004:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a00c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2220      	movs	r2, #32
 800a020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d101      	bne.n	800a052 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a04e:	2302      	movs	r3, #2
 800a050:	e02d      	b.n	800a0ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2224      	movs	r2, #36	; 0x24
 800a05e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f022 0201 	bic.w	r2, r2, #1
 800a078:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	430a      	orrs	r2, r1
 800a08c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f850 	bl	800a134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2220      	movs	r2, #32
 800a0a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d101      	bne.n	800a0ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	e02d      	b.n	800a12a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2224      	movs	r2, #36	; 0x24
 800a0da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f022 0201 	bic.w	r2, r2, #1
 800a0f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	430a      	orrs	r2, r1
 800a108:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f812 	bl	800a134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2220      	movs	r2, #32
 800a11c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
	...

0800a134 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a140:	2b00      	cmp	r3, #0
 800a142:	d108      	bne.n	800a156 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a154:	e031      	b.n	800a1ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a156:	2310      	movs	r3, #16
 800a158:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a15a:	2310      	movs	r3, #16
 800a15c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	0e5b      	lsrs	r3, r3, #25
 800a166:	b2db      	uxtb	r3, r3
 800a168:	f003 0307 	and.w	r3, r3, #7
 800a16c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	0f5b      	lsrs	r3, r3, #29
 800a176:	b2db      	uxtb	r3, r3
 800a178:	f003 0307 	and.w	r3, r3, #7
 800a17c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a17e:	7bbb      	ldrb	r3, [r7, #14]
 800a180:	7b3a      	ldrb	r2, [r7, #12]
 800a182:	4911      	ldr	r1, [pc, #68]	; (800a1c8 <UARTEx_SetNbDataToProcess+0x94>)
 800a184:	5c8a      	ldrb	r2, [r1, r2]
 800a186:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a18a:	7b3a      	ldrb	r2, [r7, #12]
 800a18c:	490f      	ldr	r1, [pc, #60]	; (800a1cc <UARTEx_SetNbDataToProcess+0x98>)
 800a18e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a190:	fb93 f3f2 	sdiv	r3, r3, r2
 800a194:	b29a      	uxth	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
 800a19e:	7b7a      	ldrb	r2, [r7, #13]
 800a1a0:	4909      	ldr	r1, [pc, #36]	; (800a1c8 <UARTEx_SetNbDataToProcess+0x94>)
 800a1a2:	5c8a      	ldrb	r2, [r1, r2]
 800a1a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1a8:	7b7a      	ldrb	r2, [r7, #13]
 800a1aa:	4908      	ldr	r1, [pc, #32]	; (800a1cc <UARTEx_SetNbDataToProcess+0x98>)
 800a1ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a1ba:	bf00      	nop
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	08010adc 	.word	0x08010adc
 800a1cc:	08010ae4 	.word	0x08010ae4

0800a1d0 <ISOUDS_ClearDiagInfo>:
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60fb      	str	r3, [r7, #12]
 800a1de:	2300      	movs	r3, #0
 800a1e0:	72fb      	strb	r3, [r7, #11]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d13b      	bne.n	800a262 <ISOUDS_ClearDiagInfo+0x92>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2204      	movs	r2, #4
 800a1ee:	701a      	strb	r2, [r3, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	889b      	ldrh	r3, [r3, #4]
 800a1f4:	2b04      	cmp	r3, #4
 800a1f6:	d12d      	bne.n	800a254 <ISOUDS_ClearDiagInfo+0x84>
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	041a      	lsls	r2, r3, #16
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	3301      	adds	r3, #1
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	021b      	lsls	r3, r3, #8
 800a206:	4313      	orrs	r3, r2
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	3202      	adds	r2, #2
 800a20c:	7812      	ldrb	r2, [r2, #0]
 800a20e:	4313      	orrs	r3, r2
 800a210:	60fb      	str	r3, [r7, #12]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	791b      	ldrb	r3, [r3, #4]
 800a216:	72fb      	strb	r3, [r7, #11]
 800a218:	f7f6 fe32 	bl	8000e80 <ISOUDS_ClearDTCInfoPreCondCheck>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d114      	bne.n	800a24c <ISOUDS_ClearDiagInfo+0x7c>
 800a222:	7afb      	ldrb	r3, [r7, #11]
 800a224:	4619      	mov	r1, r3
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f7f6 fe38 	bl	8000e9c <ISOUDS_CLearDTCInfoReq>
 800a22c:	4603      	mov	r3, r0
 800a22e:	72bb      	strb	r3, [r7, #10]
 800a230:	7abb      	ldrb	r3, [r7, #10]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d106      	bne.n	800a244 <ISOUDS_ClearDiagInfo+0x74>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2201      	movs	r2, #1
 800a23a:	809a      	strh	r2, [r3, #4]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2203      	movs	r2, #3
 800a240:	701a      	strb	r2, [r3, #0]
 800a242:	e022      	b.n	800a28a <ISOUDS_ClearDiagInfo+0xba>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	7aba      	ldrb	r2, [r7, #10]
 800a248:	709a      	strb	r2, [r3, #2]
 800a24a:	e01e      	b.n	800a28a <ISOUDS_ClearDiagInfo+0xba>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2222      	movs	r2, #34	; 0x22
 800a250:	709a      	strb	r2, [r3, #2]
 800a252:	e01a      	b.n	800a28a <ISOUDS_ClearDiagInfo+0xba>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2204      	movs	r2, #4
 800a258:	701a      	strb	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2213      	movs	r2, #19
 800a25e:	709a      	strb	r2, [r3, #2]
 800a260:	e013      	b.n	800a28a <ISOUDS_ClearDiagInfo+0xba>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2204      	movs	r2, #4
 800a266:	701a      	strb	r2, [r3, #0]
 800a268:	f7f6 fe2c 	bl	8000ec4 <ISOUDS_CLearDTCInfoReqStat>
 800a26c:	4603      	mov	r3, r0
 800a26e:	72bb      	strb	r3, [r7, #10]
 800a270:	7abb      	ldrb	r3, [r7, #10]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d106      	bne.n	800a284 <ISOUDS_ClearDiagInfo+0xb4>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	809a      	strh	r2, [r3, #4]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2203      	movs	r2, #3
 800a280:	701a      	strb	r2, [r3, #0]
 800a282:	e002      	b.n	800a28a <ISOUDS_ClearDiagInfo+0xba>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	7aba      	ldrb	r2, [r7, #10]
 800a288:	709a      	strb	r2, [r3, #2]
 800a28a:	bf00      	nop
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
	...

0800a294 <ISOUDS_CntrlDTCSetting>:
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 80b0 	beq.w	800a406 <ISOUDS_CntrlDTCSetting+0x172>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2204      	movs	r2, #4
 800a2aa:	701a      	strb	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	889b      	ldrh	r3, [r3, #4]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	f240 80a5 	bls.w	800a400 <ISOUDS_CntrlDTCSetting+0x16c>
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2be:	72fb      	strb	r3, [r7, #11]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2c8:	72bb      	strb	r3, [r7, #10]
 800a2ca:	7afb      	ldrb	r3, [r7, #11]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f000 f8a5 	bl	800a41c <ISOUDS_CntrlDTCSetValidSubfun>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	f040 808f 	bne.w	800a3f8 <ISOUDS_CntrlDTCSetting+0x164>
 800a2da:	4b4d      	ldr	r3, [pc, #308]	; (800a410 <ISOUDS_CntrlDTCSetting+0x17c>)
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4a4c      	ldr	r2, [pc, #304]	; (800a414 <ISOUDS_CntrlDTCSetting+0x180>)
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	005b      	lsls	r3, r3, #1
 800a2e6:	440b      	add	r3, r1
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4413      	add	r3, r2
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	4b49      	ldr	r3, [pc, #292]	; (800a418 <ISOUDS_CntrlDTCSetting+0x184>)
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	fa42 f303 	asr.w	r3, r2, r3
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d076      	beq.n	800a3f0 <ISOUDS_CntrlDTCSetting+0x15c>
 800a302:	2301      	movs	r3, #1
 800a304:	73fb      	strb	r3, [r7, #15]
 800a306:	4b42      	ldr	r3, [pc, #264]	; (800a410 <ISOUDS_CntrlDTCSetting+0x17c>)
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	4619      	mov	r1, r3
 800a30c:	4a41      	ldr	r2, [pc, #260]	; (800a414 <ISOUDS_CntrlDTCSetting+0x180>)
 800a30e:	460b      	mov	r3, r1
 800a310:	005b      	lsls	r3, r3, #1
 800a312:	440b      	add	r3, r1
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	3302      	adds	r3, #2
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d12b      	bne.n	800a378 <ISOUDS_CntrlDTCSetting+0xe4>
 800a320:	2300      	movs	r3, #0
 800a322:	73fb      	strb	r3, [r7, #15]
 800a324:	2300      	movs	r3, #0
 800a326:	81bb      	strh	r3, [r7, #12]
 800a328:	e014      	b.n	800a354 <ISOUDS_CntrlDTCSetting+0xc0>
 800a32a:	4b39      	ldr	r3, [pc, #228]	; (800a410 <ISOUDS_CntrlDTCSetting+0x17c>)
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	4618      	mov	r0, r3
 800a330:	89ba      	ldrh	r2, [r7, #12]
 800a332:	4938      	ldr	r1, [pc, #224]	; (800a414 <ISOUDS_CntrlDTCSetting+0x180>)
 800a334:	4603      	mov	r3, r0
 800a336:	005b      	lsls	r3, r3, #1
 800a338:	4403      	add	r3, r0
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	440b      	add	r3, r1
 800a33e:	4413      	add	r3, r2
 800a340:	3304      	adds	r3, #4
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	4618      	mov	r0, r3
 800a346:	f002 fcb5 	bl	800ccb4 <ISOUDS_GetSAStLevel>
 800a34a:	4603      	mov	r3, r0
 800a34c:	73fb      	strb	r3, [r7, #15]
 800a34e:	89bb      	ldrh	r3, [r7, #12]
 800a350:	3301      	adds	r3, #1
 800a352:	81bb      	strh	r3, [r7, #12]
 800a354:	4b2e      	ldr	r3, [pc, #184]	; (800a410 <ISOUDS_CntrlDTCSetting+0x17c>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	4619      	mov	r1, r3
 800a35a:	4a2e      	ldr	r2, [pc, #184]	; (800a414 <ISOUDS_CntrlDTCSetting+0x180>)
 800a35c:	460b      	mov	r3, r1
 800a35e:	005b      	lsls	r3, r3, #1
 800a360:	440b      	add	r3, r1
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	3303      	adds	r3, #3
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	89ba      	ldrh	r2, [r7, #12]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d202      	bcs.n	800a378 <ISOUDS_CntrlDTCSetting+0xe4>
 800a372:	7bfb      	ldrb	r3, [r7, #15]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d0d8      	beq.n	800a32a <ISOUDS_CntrlDTCSetting+0x96>
 800a378:	7bfb      	ldrb	r3, [r7, #15]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d134      	bne.n	800a3e8 <ISOUDS_CntrlDTCSetting+0x154>
 800a37e:	f7f6 fdf3 	bl	8000f68 <ISOUDS_CntrlDTCSetngPreCondCheck>
 800a382:	4603      	mov	r3, r0
 800a384:	2b01      	cmp	r3, #1
 800a386:	d12b      	bne.n	800a3e0 <ISOUDS_CntrlDTCSetting+0x14c>
 800a388:	4b21      	ldr	r3, [pc, #132]	; (800a410 <ISOUDS_CntrlDTCSetting+0x17c>)
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	4619      	mov	r1, r3
 800a38e:	4a21      	ldr	r2, [pc, #132]	; (800a414 <ISOUDS_CntrlDTCSetting+0x180>)
 800a390:	460b      	mov	r3, r1
 800a392:	005b      	lsls	r3, r3, #1
 800a394:	440b      	add	r3, r1
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4413      	add	r3, r2
 800a39a:	3308      	adds	r3, #8
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	1c51      	adds	r1, r2, #1
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	8892      	ldrh	r2, [r2, #4]
 800a3a6:	3a02      	subs	r2, #2
 800a3a8:	b292      	uxth	r2, r2
 800a3aa:	7af8      	ldrb	r0, [r7, #11]
 800a3ac:	4798      	blx	r3
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	727b      	strb	r3, [r7, #9]
 800a3b2:	7a7b      	ldrb	r3, [r7, #9]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d10f      	bne.n	800a3d8 <ISOUDS_CntrlDTCSetting+0x144>
 800a3b8:	7abb      	ldrb	r3, [r7, #10]
 800a3ba:	2b80      	cmp	r3, #128	; 0x80
 800a3bc:	d009      	beq.n	800a3d2 <ISOUDS_CntrlDTCSetting+0x13e>
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	7afa      	ldrb	r2, [r7, #11]
 800a3c2:	701a      	strb	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	809a      	strh	r2, [r3, #4]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2203      	movs	r2, #3
 800a3ce:	701a      	strb	r2, [r3, #0]
 800a3d0:	e019      	b.n	800a406 <ISOUDS_CntrlDTCSetting+0x172>
 800a3d2:	f000 fd3b 	bl	800ae4c <ISOUDS_ServerRst>
 800a3d6:	e016      	b.n	800a406 <ISOUDS_CntrlDTCSetting+0x172>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	7a7a      	ldrb	r2, [r7, #9]
 800a3dc:	709a      	strb	r2, [r3, #2]
 800a3de:	e012      	b.n	800a406 <ISOUDS_CntrlDTCSetting+0x172>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2222      	movs	r2, #34	; 0x22
 800a3e4:	709a      	strb	r2, [r3, #2]
 800a3e6:	e00e      	b.n	800a406 <ISOUDS_CntrlDTCSetting+0x172>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2233      	movs	r2, #51	; 0x33
 800a3ec:	709a      	strb	r2, [r3, #2]
 800a3ee:	e00a      	b.n	800a406 <ISOUDS_CntrlDTCSetting+0x172>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	227e      	movs	r2, #126	; 0x7e
 800a3f4:	709a      	strb	r2, [r3, #2]
 800a3f6:	e006      	b.n	800a406 <ISOUDS_CntrlDTCSetting+0x172>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2212      	movs	r2, #18
 800a3fc:	709a      	strb	r2, [r3, #2]
 800a3fe:	e002      	b.n	800a406 <ISOUDS_CntrlDTCSetting+0x172>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2213      	movs	r2, #19
 800a404:	709a      	strb	r2, [r3, #2]
 800a406:	bf00      	nop
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	24001708 	.word	0x24001708
 800a414:	24000064 	.word	0x24000064
 800a418:	24001720 	.word	0x24001720

0800a41c <ISOUDS_CntrlDTCSetValidSubfun>:
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	4603      	mov	r3, r0
 800a424:	71fb      	strb	r3, [r7, #7]
 800a426:	2300      	movs	r3, #0
 800a428:	73bb      	strb	r3, [r7, #14]
 800a42a:	2300      	movs	r3, #0
 800a42c:	73fb      	strb	r3, [r7, #15]
 800a42e:	e012      	b.n	800a456 <ISOUDS_CntrlDTCSetValidSubfun+0x3a>
 800a430:	7bfa      	ldrb	r2, [r7, #15]
 800a432:	4910      	ldr	r1, [pc, #64]	; (800a474 <ISOUDS_CntrlDTCSetValidSubfun+0x58>)
 800a434:	4613      	mov	r3, r2
 800a436:	005b      	lsls	r3, r3, #1
 800a438:	4413      	add	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	440b      	add	r3, r1
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	79fa      	ldrb	r2, [r7, #7]
 800a442:	429a      	cmp	r2, r3
 800a444:	d104      	bne.n	800a450 <ISOUDS_CntrlDTCSetValidSubfun+0x34>
 800a446:	4a0c      	ldr	r2, [pc, #48]	; (800a478 <ISOUDS_CntrlDTCSetValidSubfun+0x5c>)
 800a448:	7bfb      	ldrb	r3, [r7, #15]
 800a44a:	7013      	strb	r3, [r2, #0]
 800a44c:	2301      	movs	r3, #1
 800a44e:	73bb      	strb	r3, [r7, #14]
 800a450:	7bfb      	ldrb	r3, [r7, #15]
 800a452:	3301      	adds	r3, #1
 800a454:	73fb      	strb	r3, [r7, #15]
 800a456:	f7f6 fd7f 	bl	8000f58 <ISOUDS_Get_CntrlDTCSetMaxSubFun>
 800a45a:	4603      	mov	r3, r0
 800a45c:	461a      	mov	r2, r3
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	4293      	cmp	r3, r2
 800a462:	d202      	bcs.n	800a46a <ISOUDS_CntrlDTCSetValidSubfun+0x4e>
 800a464:	7bbb      	ldrb	r3, [r7, #14]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d0e2      	beq.n	800a430 <ISOUDS_CntrlDTCSetValidSubfun+0x14>
 800a46a:	7bbb      	ldrb	r3, [r7, #14]
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	24000064 	.word	0x24000064
 800a478:	24001708 	.word	0x24001708

0800a47c <ISOUDS_CommCntrl>:
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2204      	movs	r2, #4
 800a48a:	701a      	strb	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	889b      	ldrh	r3, [r3, #4]
 800a490:	2b03      	cmp	r3, #3
 800a492:	f040 80b4 	bne.w	800a5fe <ISOUDS_CommCntrl+0x182>
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a49e:	72fb      	strb	r3, [r7, #11]
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a4a8:	72bb      	strb	r3, [r7, #10]
 800a4aa:	7afb      	ldrb	r3, [r7, #11]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f000 f8b3 	bl	800a618 <ISOUDS_ComCntValidSubfun>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	f040 809e 	bne.w	800a5f6 <ISOUDS_CommCntrl+0x17a>
 800a4ba:	4b54      	ldr	r3, [pc, #336]	; (800a60c <ISOUDS_CommCntrl+0x190>)
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	4619      	mov	r1, r3
 800a4c0:	4a53      	ldr	r2, [pc, #332]	; (800a610 <ISOUDS_CommCntrl+0x194>)
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	005b      	lsls	r3, r3, #1
 800a4c6:	440b      	add	r3, r1
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	4413      	add	r3, r2
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	4b50      	ldr	r3, [pc, #320]	; (800a614 <ISOUDS_CommCntrl+0x198>)
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	fa42 f303 	asr.w	r3, r2, r3
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 8085 	beq.w	800a5ee <ISOUDS_CommCntrl+0x172>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	73fb      	strb	r3, [r7, #15]
 800a4e8:	4b48      	ldr	r3, [pc, #288]	; (800a60c <ISOUDS_CommCntrl+0x190>)
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4a48      	ldr	r2, [pc, #288]	; (800a610 <ISOUDS_CommCntrl+0x194>)
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	005b      	lsls	r3, r3, #1
 800a4f4:	440b      	add	r3, r1
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4413      	add	r3, r2
 800a4fa:	3302      	adds	r3, #2
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d12b      	bne.n	800a55a <ISOUDS_CommCntrl+0xde>
 800a502:	2300      	movs	r3, #0
 800a504:	73fb      	strb	r3, [r7, #15]
 800a506:	2300      	movs	r3, #0
 800a508:	81bb      	strh	r3, [r7, #12]
 800a50a:	e014      	b.n	800a536 <ISOUDS_CommCntrl+0xba>
 800a50c:	4b3f      	ldr	r3, [pc, #252]	; (800a60c <ISOUDS_CommCntrl+0x190>)
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	4618      	mov	r0, r3
 800a512:	89ba      	ldrh	r2, [r7, #12]
 800a514:	493e      	ldr	r1, [pc, #248]	; (800a610 <ISOUDS_CommCntrl+0x194>)
 800a516:	4603      	mov	r3, r0
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	4403      	add	r3, r0
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	440b      	add	r3, r1
 800a520:	4413      	add	r3, r2
 800a522:	3304      	adds	r3, #4
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	4618      	mov	r0, r3
 800a528:	f002 fbc4 	bl	800ccb4 <ISOUDS_GetSAStLevel>
 800a52c:	4603      	mov	r3, r0
 800a52e:	73fb      	strb	r3, [r7, #15]
 800a530:	89bb      	ldrh	r3, [r7, #12]
 800a532:	3301      	adds	r3, #1
 800a534:	81bb      	strh	r3, [r7, #12]
 800a536:	4b35      	ldr	r3, [pc, #212]	; (800a60c <ISOUDS_CommCntrl+0x190>)
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	4619      	mov	r1, r3
 800a53c:	4a34      	ldr	r2, [pc, #208]	; (800a610 <ISOUDS_CommCntrl+0x194>)
 800a53e:	460b      	mov	r3, r1
 800a540:	005b      	lsls	r3, r3, #1
 800a542:	440b      	add	r3, r1
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	4413      	add	r3, r2
 800a548:	3303      	adds	r3, #3
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	89ba      	ldrh	r2, [r7, #12]
 800a550:	429a      	cmp	r2, r3
 800a552:	d202      	bcs.n	800a55a <ISOUDS_CommCntrl+0xde>
 800a554:	7bfb      	ldrb	r3, [r7, #15]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0d8      	beq.n	800a50c <ISOUDS_CommCntrl+0x90>
 800a55a:	7bfb      	ldrb	r3, [r7, #15]
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d13f      	bne.n	800a5e0 <ISOUDS_CommCntrl+0x164>
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	785b      	ldrb	r3, [r3, #1]
 800a564:	727b      	strb	r3, [r7, #9]
 800a566:	7a7b      	ldrb	r3, [r7, #9]
 800a568:	4618      	mov	r0, r3
 800a56a:	f7f6 fd81 	bl	8001070 <ISOUDS_CommTypeSupp>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b01      	cmp	r3, #1
 800a572:	d131      	bne.n	800a5d8 <ISOUDS_CommCntrl+0x15c>
 800a574:	f7f6 fd91 	bl	800109a <ISOUDS_CommCntlPreCondCheck>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d128      	bne.n	800a5d0 <ISOUDS_CommCntrl+0x154>
 800a57e:	4b23      	ldr	r3, [pc, #140]	; (800a60c <ISOUDS_CommCntrl+0x190>)
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	4619      	mov	r1, r3
 800a584:	4a22      	ldr	r2, [pc, #136]	; (800a610 <ISOUDS_CommCntrl+0x194>)
 800a586:	460b      	mov	r3, r1
 800a588:	005b      	lsls	r3, r3, #1
 800a58a:	440b      	add	r3, r1
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	3308      	adds	r3, #8
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	3202      	adds	r2, #2
 800a598:	7a79      	ldrb	r1, [r7, #9]
 800a59a:	7af8      	ldrb	r0, [r7, #11]
 800a59c:	4798      	blx	r3
 800a59e:	4603      	mov	r3, r0
 800a5a0:	723b      	strb	r3, [r7, #8]
 800a5a2:	7a3b      	ldrb	r3, [r7, #8]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10f      	bne.n	800a5c8 <ISOUDS_CommCntrl+0x14c>
 800a5a8:	7abb      	ldrb	r3, [r7, #10]
 800a5aa:	2b80      	cmp	r3, #128	; 0x80
 800a5ac:	d009      	beq.n	800a5c2 <ISOUDS_CommCntrl+0x146>
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	7afa      	ldrb	r2, [r7, #11]
 800a5b2:	701a      	strb	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	809a      	strh	r2, [r3, #4]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2203      	movs	r2, #3
 800a5be:	701a      	strb	r2, [r3, #0]
 800a5c0:	e020      	b.n	800a604 <ISOUDS_CommCntrl+0x188>
 800a5c2:	f000 fc43 	bl	800ae4c <ISOUDS_ServerRst>
 800a5c6:	e01d      	b.n	800a604 <ISOUDS_CommCntrl+0x188>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	7a3a      	ldrb	r2, [r7, #8]
 800a5cc:	709a      	strb	r2, [r3, #2]
 800a5ce:	e019      	b.n	800a604 <ISOUDS_CommCntrl+0x188>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2222      	movs	r2, #34	; 0x22
 800a5d4:	709a      	strb	r2, [r3, #2]
 800a5d6:	e015      	b.n	800a604 <ISOUDS_CommCntrl+0x188>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2231      	movs	r2, #49	; 0x31
 800a5dc:	709a      	strb	r2, [r3, #2]
 800a5de:	e011      	b.n	800a604 <ISOUDS_CommCntrl+0x188>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2204      	movs	r2, #4
 800a5e4:	701a      	strb	r2, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2233      	movs	r2, #51	; 0x33
 800a5ea:	709a      	strb	r2, [r3, #2]
 800a5ec:	e00a      	b.n	800a604 <ISOUDS_CommCntrl+0x188>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	227e      	movs	r2, #126	; 0x7e
 800a5f2:	709a      	strb	r2, [r3, #2]
 800a5f4:	e006      	b.n	800a604 <ISOUDS_CommCntrl+0x188>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2212      	movs	r2, #18
 800a5fa:	709a      	strb	r2, [r3, #2]
 800a5fc:	e002      	b.n	800a604 <ISOUDS_CommCntrl+0x188>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2213      	movs	r2, #19
 800a602:	709a      	strb	r2, [r3, #2]
 800a604:	bf00      	nop
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	24001709 	.word	0x24001709
 800a610:	2400007c 	.word	0x2400007c
 800a614:	24001720 	.word	0x24001720

0800a618 <ISOUDS_ComCntValidSubfun>:
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	4603      	mov	r3, r0
 800a620:	71fb      	strb	r3, [r7, #7]
 800a622:	2300      	movs	r3, #0
 800a624:	73bb      	strb	r3, [r7, #14]
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]
 800a62a:	e012      	b.n	800a652 <ISOUDS_ComCntValidSubfun+0x3a>
 800a62c:	7bfa      	ldrb	r2, [r7, #15]
 800a62e:	4910      	ldr	r1, [pc, #64]	; (800a670 <ISOUDS_ComCntValidSubfun+0x58>)
 800a630:	4613      	mov	r3, r2
 800a632:	005b      	lsls	r3, r3, #1
 800a634:	4413      	add	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	440b      	add	r3, r1
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	79fa      	ldrb	r2, [r7, #7]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d104      	bne.n	800a64c <ISOUDS_ComCntValidSubfun+0x34>
 800a642:	4a0c      	ldr	r2, [pc, #48]	; (800a674 <ISOUDS_ComCntValidSubfun+0x5c>)
 800a644:	7bfb      	ldrb	r3, [r7, #15]
 800a646:	7013      	strb	r3, [r2, #0]
 800a648:	2301      	movs	r3, #1
 800a64a:	73bb      	strb	r3, [r7, #14]
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
 800a64e:	3301      	adds	r3, #1
 800a650:	73fb      	strb	r3, [r7, #15]
 800a652:	f7f6 fd05 	bl	8001060 <ISOUDS_Get_ComContMaxSubFun>
 800a656:	4603      	mov	r3, r0
 800a658:	461a      	mov	r2, r3
 800a65a:	7bfb      	ldrb	r3, [r7, #15]
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d202      	bcs.n	800a666 <ISOUDS_ComCntValidSubfun+0x4e>
 800a660:	7bbb      	ldrb	r3, [r7, #14]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d0e2      	beq.n	800a62c <ISOUDS_ComCntValidSubfun+0x14>
 800a666:	7bbb      	ldrb	r3, [r7, #14]
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	2400007c 	.word	0x2400007c
 800a674:	24001709 	.word	0x24001709

0800a678 <ISOUDS_ECUReset>:
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
 800a682:	2300      	movs	r3, #0
 800a684:	73fb      	strb	r3, [r7, #15]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d02d      	beq.n	800a6e8 <ISOUDS_ECUReset+0x70>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2204      	movs	r2, #4
 800a690:	701a      	strb	r2, [r3, #0]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	889b      	ldrh	r3, [r3, #4]
 800a696:	2b02      	cmp	r3, #2
 800a698:	d123      	bne.n	800a6e2 <ISOUDS_ECUReset+0x6a>
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6a2:	73bb      	strb	r3, [r7, #14]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6ac:	737b      	strb	r3, [r7, #13]
 800a6ae:	7bbb      	ldrb	r3, [r7, #14]
 800a6b0:	6879      	ldr	r1, [r7, #4]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 f81c 	bl	800a6f0 <ISOUDS_ResetReqHandler>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	73fb      	strb	r3, [r7, #15]
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d112      	bne.n	800a6e8 <ISOUDS_ECUReset+0x70>
 800a6c2:	7b7b      	ldrb	r3, [r7, #13]
 800a6c4:	2b80      	cmp	r3, #128	; 0x80
 800a6c6:	d009      	beq.n	800a6dc <ISOUDS_ECUReset+0x64>
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	7bba      	ldrb	r2, [r7, #14]
 800a6cc:	701a      	strb	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	809a      	strh	r2, [r3, #4]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2203      	movs	r2, #3
 800a6d8:	701a      	strb	r2, [r3, #0]
 800a6da:	e005      	b.n	800a6e8 <ISOUDS_ECUReset+0x70>
 800a6dc:	f000 fbb6 	bl	800ae4c <ISOUDS_ServerRst>
 800a6e0:	e002      	b.n	800a6e8 <ISOUDS_ECUReset+0x70>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2213      	movs	r2, #19
 800a6e6:	709a      	strb	r2, [r3, #2]
 800a6e8:	bf00      	nop
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <ISOUDS_ResetReqHandler>:
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	6039      	str	r1, [r7, #0]
 800a6fa:	71fb      	strb	r3, [r7, #7]
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	73fb      	strb	r3, [r7, #15]
 800a700:	2300      	movs	r3, #0
 800a702:	75fb      	strb	r3, [r7, #23]
 800a704:	2300      	movs	r3, #0
 800a706:	753b      	strb	r3, [r7, #20]
 800a708:	2300      	movs	r3, #0
 800a70a:	75bb      	strb	r3, [r7, #22]
 800a70c:	e011      	b.n	800a732 <ISOUDS_ResetReqHandler+0x42>
 800a70e:	7dba      	ldrb	r2, [r7, #22]
 800a710:	494a      	ldr	r1, [pc, #296]	; (800a83c <ISOUDS_ResetReqHandler+0x14c>)
 800a712:	4613      	mov	r3, r2
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	4413      	add	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	440b      	add	r3, r1
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	79fa      	ldrb	r2, [r7, #7]
 800a720:	429a      	cmp	r2, r3
 800a722:	d103      	bne.n	800a72c <ISOUDS_ResetReqHandler+0x3c>
 800a724:	2301      	movs	r3, #1
 800a726:	753b      	strb	r3, [r7, #20]
 800a728:	7dbb      	ldrb	r3, [r7, #22]
 800a72a:	757b      	strb	r3, [r7, #21]
 800a72c:	7dbb      	ldrb	r3, [r7, #22]
 800a72e:	3301      	adds	r3, #1
 800a730:	75bb      	strb	r3, [r7, #22]
 800a732:	7dbb      	ldrb	r3, [r7, #22]
 800a734:	2b02      	cmp	r3, #2
 800a736:	d802      	bhi.n	800a73e <ISOUDS_ResetReqHandler+0x4e>
 800a738:	7d3b      	ldrb	r3, [r7, #20]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d0e7      	beq.n	800a70e <ISOUDS_ResetReqHandler+0x1e>
 800a73e:	7d3b      	ldrb	r3, [r7, #20]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d170      	bne.n	800a826 <ISOUDS_ResetReqHandler+0x136>
 800a744:	7d7a      	ldrb	r2, [r7, #21]
 800a746:	493d      	ldr	r1, [pc, #244]	; (800a83c <ISOUDS_ResetReqHandler+0x14c>)
 800a748:	4613      	mov	r3, r2
 800a74a:	005b      	lsls	r3, r3, #1
 800a74c:	4413      	add	r3, r2
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	440b      	add	r3, r1
 800a752:	3301      	adds	r3, #1
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	461a      	mov	r2, r3
 800a758:	4b39      	ldr	r3, [pc, #228]	; (800a840 <ISOUDS_ResetReqHandler+0x150>)
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	fa42 f303 	asr.w	r3, r2, r3
 800a760:	f003 0301 	and.w	r3, r3, #1
 800a764:	2b00      	cmp	r3, #0
 800a766:	d057      	beq.n	800a818 <ISOUDS_ResetReqHandler+0x128>
 800a768:	2301      	movs	r3, #1
 800a76a:	74fb      	strb	r3, [r7, #19]
 800a76c:	7d7a      	ldrb	r2, [r7, #21]
 800a76e:	4933      	ldr	r1, [pc, #204]	; (800a83c <ISOUDS_ResetReqHandler+0x14c>)
 800a770:	4613      	mov	r3, r2
 800a772:	005b      	lsls	r3, r3, #1
 800a774:	4413      	add	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	440b      	add	r3, r1
 800a77a:	3302      	adds	r3, #2
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d127      	bne.n	800a7d2 <ISOUDS_ResetReqHandler+0xe2>
 800a782:	2300      	movs	r3, #0
 800a784:	74fb      	strb	r3, [r7, #19]
 800a786:	2300      	movs	r3, #0
 800a788:	823b      	strh	r3, [r7, #16]
 800a78a:	e012      	b.n	800a7b2 <ISOUDS_ResetReqHandler+0xc2>
 800a78c:	7d7a      	ldrb	r2, [r7, #21]
 800a78e:	8a39      	ldrh	r1, [r7, #16]
 800a790:	482a      	ldr	r0, [pc, #168]	; (800a83c <ISOUDS_ResetReqHandler+0x14c>)
 800a792:	4613      	mov	r3, r2
 800a794:	005b      	lsls	r3, r3, #1
 800a796:	4413      	add	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	4403      	add	r3, r0
 800a79c:	440b      	add	r3, r1
 800a79e:	3304      	adds	r3, #4
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f002 fa86 	bl	800ccb4 <ISOUDS_GetSAStLevel>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	74fb      	strb	r3, [r7, #19]
 800a7ac:	8a3b      	ldrh	r3, [r7, #16]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	823b      	strh	r3, [r7, #16]
 800a7b2:	7d7a      	ldrb	r2, [r7, #21]
 800a7b4:	4921      	ldr	r1, [pc, #132]	; (800a83c <ISOUDS_ResetReqHandler+0x14c>)
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	005b      	lsls	r3, r3, #1
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	440b      	add	r3, r1
 800a7c0:	3303      	adds	r3, #3
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	8a3a      	ldrh	r2, [r7, #16]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d202      	bcs.n	800a7d2 <ISOUDS_ResetReqHandler+0xe2>
 800a7cc:	7cfb      	ldrb	r3, [r7, #19]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0dc      	beq.n	800a78c <ISOUDS_ResetReqHandler+0x9c>
 800a7d2:	7cfb      	ldrb	r3, [r7, #19]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d118      	bne.n	800a80a <ISOUDS_ResetReqHandler+0x11a>
 800a7d8:	7d7a      	ldrb	r2, [r7, #21]
 800a7da:	4918      	ldr	r1, [pc, #96]	; (800a83c <ISOUDS_ResetReqHandler+0x14c>)
 800a7dc:	4613      	mov	r3, r2
 800a7de:	005b      	lsls	r3, r3, #1
 800a7e0:	4413      	add	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	440b      	add	r3, r1
 800a7e6:	3308      	adds	r3, #8
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4798      	blx	r3
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73fb      	strb	r3, [r7, #15]
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d102      	bne.n	800a7fc <ISOUDS_ResetReqHandler+0x10c>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	75fb      	strb	r3, [r7, #23]
 800a7fa:	e01a      	b.n	800a832 <ISOUDS_ResetReqHandler+0x142>
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	2204      	movs	r2, #4
 800a800:	701a      	strb	r2, [r3, #0]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	7bfa      	ldrb	r2, [r7, #15]
 800a806:	709a      	strb	r2, [r3, #2]
 800a808:	e013      	b.n	800a832 <ISOUDS_ResetReqHandler+0x142>
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2204      	movs	r2, #4
 800a80e:	701a      	strb	r2, [r3, #0]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	2233      	movs	r2, #51	; 0x33
 800a814:	709a      	strb	r2, [r3, #2]
 800a816:	e00c      	b.n	800a832 <ISOUDS_ResetReqHandler+0x142>
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	2204      	movs	r2, #4
 800a81c:	701a      	strb	r2, [r3, #0]
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	227e      	movs	r2, #126	; 0x7e
 800a822:	709a      	strb	r2, [r3, #2]
 800a824:	e005      	b.n	800a832 <ISOUDS_ResetReqHandler+0x142>
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	2204      	movs	r2, #4
 800a82a:	701a      	strb	r2, [r3, #0]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	2212      	movs	r2, #18
 800a830:	709a      	strb	r2, [r3, #2]
 800a832:	7dfb      	ldrb	r3, [r7, #23]
 800a834:	4618      	mov	r0, r3
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	080106b4 	.word	0x080106b4
 800a840:	24001720 	.word	0x24001720

0800a844 <ISOUDS_IOCtrlByID>:
 800a844:	b590      	push	{r4, r7, lr}
 800a846:	b087      	sub	sp, #28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 80e3 	beq.w	800aa1c <ISOUDS_IOCtrlByID+0x1d8>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	889b      	ldrh	r3, [r3, #4]
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	f240 80d8 	bls.w	800aa10 <ISOUDS_IOCtrlByID+0x1cc>
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	b29b      	uxth	r3, r3
 800a866:	021b      	lsls	r3, r3, #8
 800a868:	b29a      	uxth	r2, r3
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	3301      	adds	r3, #1
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	b29b      	uxth	r3, r3
 800a872:	4313      	orrs	r3, r2
 800a874:	827b      	strh	r3, [r7, #18]
 800a876:	8a7b      	ldrh	r3, [r7, #18]
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 f8d9 	bl	800aa30 <ISOUDS_ValidatIOCntrlID>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b01      	cmp	r3, #1
 800a882:	f040 80be 	bne.w	800aa02 <ISOUDS_IOCtrlByID+0x1be>
 800a886:	4b67      	ldr	r3, [pc, #412]	; (800aa24 <ISOUDS_IOCtrlByID+0x1e0>)
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	4619      	mov	r1, r3
 800a88c:	4a66      	ldr	r2, [pc, #408]	; (800aa28 <ISOUDS_IOCtrlByID+0x1e4>)
 800a88e:	460b      	mov	r3, r1
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	440b      	add	r3, r1
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4413      	add	r3, r2
 800a898:	3302      	adds	r3, #2
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	461a      	mov	r2, r3
 800a89e:	4b63      	ldr	r3, [pc, #396]	; (800aa2c <ISOUDS_IOCtrlByID+0x1e8>)
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	fa42 f303 	asr.w	r3, r2, r3
 800a8a6:	f003 0301 	and.w	r3, r3, #1
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f000 80a2 	beq.w	800a9f4 <ISOUDS_IOCtrlByID+0x1b0>
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	789b      	ldrb	r3, [r3, #2]
 800a8b4:	747b      	strb	r3, [r7, #17]
 800a8b6:	4b5b      	ldr	r3, [pc, #364]	; (800aa24 <ISOUDS_IOCtrlByID+0x1e0>)
 800a8b8:	781a      	ldrb	r2, [r3, #0]
 800a8ba:	7c7b      	ldrb	r3, [r7, #17]
 800a8bc:	4611      	mov	r1, r2
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7f6 fd8a 	bl	80013d8 <ISOUDS_IOControlParameterSupp>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	f040 808d 	bne.w	800a9e6 <ISOUDS_IOCtrlByID+0x1a2>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	889a      	ldrh	r2, [r3, #4]
 800a8d0:	4b54      	ldr	r3, [pc, #336]	; (800aa24 <ISOUDS_IOCtrlByID+0x1e0>)
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	4954      	ldr	r1, [pc, #336]	; (800aa28 <ISOUDS_IOCtrlByID+0x1e4>)
 800a8d8:	4603      	mov	r3, r0
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	4403      	add	r3, r0
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	440b      	add	r3, r1
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	881b      	ldrh	r3, [r3, #0]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d176      	bne.n	800a9d8 <ISOUDS_IOCtrlByID+0x194>
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	75fb      	strb	r3, [r7, #23]
 800a8ee:	4b4d      	ldr	r3, [pc, #308]	; (800aa24 <ISOUDS_IOCtrlByID+0x1e0>)
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	4a4c      	ldr	r2, [pc, #304]	; (800aa28 <ISOUDS_IOCtrlByID+0x1e4>)
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	440b      	add	r3, r1
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	330a      	adds	r3, #10
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d12b      	bne.n	800a960 <ISOUDS_IOCtrlByID+0x11c>
 800a908:	2300      	movs	r3, #0
 800a90a:	75fb      	strb	r3, [r7, #23]
 800a90c:	2300      	movs	r3, #0
 800a90e:	82bb      	strh	r3, [r7, #20]
 800a910:	e014      	b.n	800a93c <ISOUDS_IOCtrlByID+0xf8>
 800a912:	4b44      	ldr	r3, [pc, #272]	; (800aa24 <ISOUDS_IOCtrlByID+0x1e0>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	4618      	mov	r0, r3
 800a918:	8aba      	ldrh	r2, [r7, #20]
 800a91a:	4943      	ldr	r1, [pc, #268]	; (800aa28 <ISOUDS_IOCtrlByID+0x1e4>)
 800a91c:	4603      	mov	r3, r0
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4403      	add	r3, r0
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	440b      	add	r3, r1
 800a926:	4413      	add	r3, r2
 800a928:	330c      	adds	r3, #12
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	4618      	mov	r0, r3
 800a92e:	f002 f9c1 	bl	800ccb4 <ISOUDS_GetSAStLevel>
 800a932:	4603      	mov	r3, r0
 800a934:	75fb      	strb	r3, [r7, #23]
 800a936:	8abb      	ldrh	r3, [r7, #20]
 800a938:	3301      	adds	r3, #1
 800a93a:	82bb      	strh	r3, [r7, #20]
 800a93c:	4b39      	ldr	r3, [pc, #228]	; (800aa24 <ISOUDS_IOCtrlByID+0x1e0>)
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	4619      	mov	r1, r3
 800a942:	4a39      	ldr	r2, [pc, #228]	; (800aa28 <ISOUDS_IOCtrlByID+0x1e4>)
 800a944:	460b      	mov	r3, r1
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	440b      	add	r3, r1
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	330b      	adds	r3, #11
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	b29b      	uxth	r3, r3
 800a954:	8aba      	ldrh	r2, [r7, #20]
 800a956:	429a      	cmp	r2, r3
 800a958:	d202      	bcs.n	800a960 <ISOUDS_IOCtrlByID+0x11c>
 800a95a:	7dfb      	ldrb	r3, [r7, #23]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d0d8      	beq.n	800a912 <ISOUDS_IOCtrlByID+0xce>
 800a960:	7dfb      	ldrb	r3, [r7, #23]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d131      	bne.n	800a9ca <ISOUDS_IOCtrlByID+0x186>
 800a966:	f7f6 fd73 	bl	8001450 <ISOUDS_IOCntrlPreCondCheck>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d125      	bne.n	800a9bc <ISOUDS_IOCtrlByID+0x178>
 800a970:	2300      	movs	r3, #0
 800a972:	81fb      	strh	r3, [r7, #14]
 800a974:	4b2b      	ldr	r3, [pc, #172]	; (800aa24 <ISOUDS_IOCtrlByID+0x1e0>)
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	4619      	mov	r1, r3
 800a97a:	4a2b      	ldr	r2, [pc, #172]	; (800aa28 <ISOUDS_IOCtrlByID+0x1e4>)
 800a97c:	460b      	mov	r3, r1
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	440b      	add	r3, r1
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	3310      	adds	r3, #16
 800a988:	681c      	ldr	r4, [r3, #0]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	1cda      	adds	r2, r3, #3
 800a98e:	f107 030e 	add.w	r3, r7, #14
 800a992:	7c79      	ldrb	r1, [r7, #17]
 800a994:	8a78      	ldrh	r0, [r7, #18]
 800a996:	47a0      	blx	r4
 800a998:	4603      	mov	r3, r0
 800a99a:	743b      	strb	r3, [r7, #16]
 800a99c:	7c3b      	ldrb	r3, [r7, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d108      	bne.n	800a9b4 <ISOUDS_IOCtrlByID+0x170>
 800a9a2:	89fb      	ldrh	r3, [r7, #14]
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	809a      	strh	r2, [r3, #4]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2203      	movs	r2, #3
 800a9b0:	701a      	strb	r2, [r3, #0]
 800a9b2:	e033      	b.n	800aa1c <ISOUDS_IOCtrlByID+0x1d8>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	7c3a      	ldrb	r2, [r7, #16]
 800a9b8:	709a      	strb	r2, [r3, #2]
 800a9ba:	e02f      	b.n	800aa1c <ISOUDS_IOCtrlByID+0x1d8>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2204      	movs	r2, #4
 800a9c0:	701a      	strb	r2, [r3, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2222      	movs	r2, #34	; 0x22
 800a9c6:	709a      	strb	r2, [r3, #2]
 800a9c8:	e028      	b.n	800aa1c <ISOUDS_IOCtrlByID+0x1d8>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2204      	movs	r2, #4
 800a9ce:	701a      	strb	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2233      	movs	r2, #51	; 0x33
 800a9d4:	709a      	strb	r2, [r3, #2]
 800a9d6:	e021      	b.n	800aa1c <ISOUDS_IOCtrlByID+0x1d8>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2204      	movs	r2, #4
 800a9dc:	701a      	strb	r2, [r3, #0]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2213      	movs	r2, #19
 800a9e2:	709a      	strb	r2, [r3, #2]
 800a9e4:	e01a      	b.n	800aa1c <ISOUDS_IOCtrlByID+0x1d8>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2204      	movs	r2, #4
 800a9ea:	701a      	strb	r2, [r3, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2231      	movs	r2, #49	; 0x31
 800a9f0:	709a      	strb	r2, [r3, #2]
 800a9f2:	e013      	b.n	800aa1c <ISOUDS_IOCtrlByID+0x1d8>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2204      	movs	r2, #4
 800a9f8:	701a      	strb	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2231      	movs	r2, #49	; 0x31
 800a9fe:	709a      	strb	r2, [r3, #2]
 800aa00:	e00c      	b.n	800aa1c <ISOUDS_IOCtrlByID+0x1d8>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2204      	movs	r2, #4
 800aa06:	701a      	strb	r2, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2231      	movs	r2, #49	; 0x31
 800aa0c:	709a      	strb	r2, [r3, #2]
 800aa0e:	e005      	b.n	800aa1c <ISOUDS_IOCtrlByID+0x1d8>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2204      	movs	r2, #4
 800aa14:	701a      	strb	r2, [r3, #0]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2213      	movs	r2, #19
 800aa1a:	709a      	strb	r2, [r3, #2]
 800aa1c:	bf00      	nop
 800aa1e:	371c      	adds	r7, #28
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd90      	pop	{r4, r7, pc}
 800aa24:	2400170a 	.word	0x2400170a
 800aa28:	24000184 	.word	0x24000184
 800aa2c:	24001720 	.word	0x24001720

0800aa30 <ISOUDS_ValidatIOCntrlID>:
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	80fb      	strh	r3, [r7, #6]
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	737b      	strb	r3, [r7, #13]
 800aa3e:	2300      	movs	r3, #0
 800aa40:	81fb      	strh	r3, [r7, #14]
 800aa42:	e013      	b.n	800aa6c <ISOUDS_ValidatIOCntrlID+0x3c>
 800aa44:	89fa      	ldrh	r2, [r7, #14]
 800aa46:	4911      	ldr	r1, [pc, #68]	; (800aa8c <ISOUDS_ValidatIOCntrlID+0x5c>)
 800aa48:	4613      	mov	r3, r2
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	4413      	add	r3, r2
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	440b      	add	r3, r1
 800aa52:	881b      	ldrh	r3, [r3, #0]
 800aa54:	88fa      	ldrh	r2, [r7, #6]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d105      	bne.n	800aa66 <ISOUDS_ValidatIOCntrlID+0x36>
 800aa5a:	89fb      	ldrh	r3, [r7, #14]
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	4b0c      	ldr	r3, [pc, #48]	; (800aa90 <ISOUDS_ValidatIOCntrlID+0x60>)
 800aa60:	701a      	strb	r2, [r3, #0]
 800aa62:	2301      	movs	r3, #1
 800aa64:	737b      	strb	r3, [r7, #13]
 800aa66:	89fb      	ldrh	r3, [r7, #14]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	81fb      	strh	r3, [r7, #14]
 800aa6c:	f7f6 fcab 	bl	80013c6 <ISOUDS_Get_IOContrlMaxSubFun>
 800aa70:	4603      	mov	r3, r0
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	89fa      	ldrh	r2, [r7, #14]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d202      	bcs.n	800aa80 <ISOUDS_ValidatIOCntrlID+0x50>
 800aa7a:	7b7b      	ldrb	r3, [r7, #13]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d0e1      	beq.n	800aa44 <ISOUDS_ValidatIOCntrlID+0x14>
 800aa80:	7b7b      	ldrb	r3, [r7, #13]
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	24000184 	.word	0x24000184
 800aa90:	2400170a 	.word	0x2400170a

0800aa94 <ISOUDS_Server_Init>:
 800aa94:	b580      	push	{r7, lr}
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	4b16      	ldr	r3, [pc, #88]	; (800aaf4 <ISOUDS_Server_Init+0x60>)
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	701a      	strb	r2, [r3, #0]
 800aa9e:	4b16      	ldr	r3, [pc, #88]	; (800aaf8 <ISOUDS_Server_Init+0x64>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	701a      	strb	r2, [r3, #0]
 800aaa4:	4b15      	ldr	r3, [pc, #84]	; (800aafc <ISOUDS_Server_Init+0x68>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	601a      	str	r2, [r3, #0]
 800aaaa:	4b15      	ldr	r3, [pc, #84]	; (800ab00 <ISOUDS_Server_Init+0x6c>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	601a      	str	r2, [r3, #0]
 800aab0:	f7f6 fe56 	bl	8001760 <ISOUDS_GetNRC78P2MimLim>
 800aab4:	4603      	mov	r3, r0
 800aab6:	4a13      	ldr	r2, [pc, #76]	; (800ab04 <ISOUDS_Server_Init+0x70>)
 800aab8:	6013      	str	r3, [r2, #0]
 800aaba:	f7f6 fe59 	bl	8001770 <ISOUDS_GetNRC78P2MaxLim>
 800aabe:	4603      	mov	r3, r0
 800aac0:	4a11      	ldr	r2, [pc, #68]	; (800ab08 <ISOUDS_Server_Init+0x74>)
 800aac2:	6013      	str	r3, [r2, #0]
 800aac4:	f7f6 fe5d 	bl	8001782 <ISOUDS_GetS3TimerLim>
 800aac8:	4603      	mov	r3, r0
 800aaca:	4a10      	ldr	r2, [pc, #64]	; (800ab0c <ISOUDS_Server_Init+0x78>)
 800aacc:	6013      	str	r3, [r2, #0]
 800aace:	4b10      	ldr	r3, [pc, #64]	; (800ab10 <ISOUDS_Server_Init+0x7c>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	701a      	strb	r2, [r3, #0]
 800aad4:	4b0f      	ldr	r3, [pc, #60]	; (800ab14 <ISOUDS_Server_Init+0x80>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	701a      	strb	r2, [r3, #0]
 800aada:	4b0f      	ldr	r3, [pc, #60]	; (800ab18 <ISOUDS_Server_Init+0x84>)
 800aadc:	2200      	movs	r2, #0
 800aade:	601a      	str	r2, [r3, #0]
 800aae0:	f001 fee8 	bl	800c8b4 <ISOUDS_SAInit>
 800aae4:	f003 faf2 	bl	800e0cc <ISOUDS_AUTHENInit>
 800aae8:	f7f6 fdb8 	bl	800165c <ISOUDS_ServerSetReqCANid>
 800aaec:	f7f6 fdcc 	bl	8001688 <ISOUDS_ServerSetRespCANid>
 800aaf0:	bf00      	nop
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	24001720 	.word	0x24001720
 800aaf8:	24001728 	.word	0x24001728
 800aafc:	24001710 	.word	0x24001710
 800ab00:	24001714 	.word	0x24001714
 800ab04:	24001738 	.word	0x24001738
 800ab08:	2400173c 	.word	0x2400173c
 800ab0c:	24001740 	.word	0x24001740
 800ab10:	2400171f 	.word	0x2400171f
 800ab14:	2400170c 	.word	0x2400170c
 800ab18:	24001724 	.word	0x24001724

0800ab1c <ISOUDS_ServerMsgIndi>:
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	4603      	mov	r3, r0
 800ab24:	6039      	str	r1, [r7, #0]
 800ab26:	80fb      	strh	r3, [r7, #6]
 800ab28:	4613      	mov	r3, r2
 800ab2a:	717b      	strb	r3, [r7, #5]
 800ab2c:	4b18      	ldr	r3, [pc, #96]	; (800ab90 <ISOUDS_ServerMsgIndi+0x74>)
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d003      	beq.n	800ab3c <ISOUDS_ServerMsgIndi+0x20>
 800ab34:	4b16      	ldr	r3, [pc, #88]	; (800ab90 <ISOUDS_ServerMsgIndi+0x74>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d124      	bne.n	800ab86 <ISOUDS_ServerMsgIndi+0x6a>
 800ab3c:	4a14      	ldr	r2, [pc, #80]	; (800ab90 <ISOUDS_ServerMsgIndi+0x74>)
 800ab3e:	88fb      	ldrh	r3, [r7, #6]
 800ab40:	8093      	strh	r3, [r2, #4]
 800ab42:	f000 fa7b 	bl	800b03c <ISOUDS_ResetiS3Timer>
 800ab46:	2300      	movs	r3, #0
 800ab48:	81fb      	strh	r3, [r7, #14]
 800ab4a:	e009      	b.n	800ab60 <ISOUDS_ServerMsgIndi+0x44>
 800ab4c:	89fb      	ldrh	r3, [r7, #14]
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	441a      	add	r2, r3
 800ab52:	89fb      	ldrh	r3, [r7, #14]
 800ab54:	7811      	ldrb	r1, [r2, #0]
 800ab56:	4a0f      	ldr	r2, [pc, #60]	; (800ab94 <ISOUDS_ServerMsgIndi+0x78>)
 800ab58:	54d1      	strb	r1, [r2, r3]
 800ab5a:	89fb      	ldrh	r3, [r7, #14]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	81fb      	strh	r3, [r7, #14]
 800ab60:	4b0b      	ldr	r3, [pc, #44]	; (800ab90 <ISOUDS_ServerMsgIndi+0x74>)
 800ab62:	889b      	ldrh	r3, [r3, #4]
 800ab64:	89fa      	ldrh	r2, [r7, #14]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d3f0      	bcc.n	800ab4c <ISOUDS_ServerMsgIndi+0x30>
 800ab6a:	f7f6 fdf1 	bl	8001750 <ISOUDS_GetSTDP2Limit>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	4a09      	ldr	r2, [pc, #36]	; (800ab98 <ISOUDS_ServerMsgIndi+0x7c>)
 800ab72:	6013      	str	r3, [r2, #0]
 800ab74:	4b09      	ldr	r3, [pc, #36]	; (800ab9c <ISOUDS_ServerMsgIndi+0x80>)
 800ab76:	2201      	movs	r2, #1
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	4b05      	ldr	r3, [pc, #20]	; (800ab90 <ISOUDS_ServerMsgIndi+0x74>)
 800ab7c:	2202      	movs	r2, #2
 800ab7e:	701a      	strb	r2, [r3, #0]
 800ab80:	4a03      	ldr	r2, [pc, #12]	; (800ab90 <ISOUDS_ServerMsgIndi+0x74>)
 800ab82:	797b      	ldrb	r3, [r7, #5]
 800ab84:	7193      	strb	r3, [r2, #6]
 800ab86:	bf00      	nop
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	24001728 	.word	0x24001728
 800ab94:	24000350 	.word	0x24000350
 800ab98:	24001718 	.word	0x24001718
 800ab9c:	24001710 	.word	0x24001710

0800aba0 <ISOUDS_Main_Server>:
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	2300      	movs	r3, #0
 800aba8:	71bb      	strb	r3, [r7, #6]
 800abaa:	4ba0      	ldr	r3, [pc, #640]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	2b02      	cmp	r3, #2
 800abb0:	f040 80b5 	bne.w	800ad1e <ISOUDS_Main_Server+0x17e>
 800abb4:	4b9e      	ldr	r3, [pc, #632]	; (800ae30 <ISOUDS_Main_Server+0x290>)
 800abb6:	781a      	ldrb	r2, [r3, #0]
 800abb8:	4b9c      	ldr	r3, [pc, #624]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800abba:	705a      	strb	r2, [r3, #1]
 800abbc:	2300      	movs	r3, #0
 800abbe:	71fb      	strb	r3, [r7, #7]
 800abc0:	e08e      	b.n	800ace0 <ISOUDS_Main_Server+0x140>
 800abc2:	79fb      	ldrb	r3, [r7, #7]
 800abc4:	4a9b      	ldr	r2, [pc, #620]	; (800ae34 <ISOUDS_Main_Server+0x294>)
 800abc6:	011b      	lsls	r3, r3, #4
 800abc8:	4413      	add	r3, r2
 800abca:	3301      	adds	r3, #1
 800abcc:	781a      	ldrb	r2, [r3, #0]
 800abce:	4b97      	ldr	r3, [pc, #604]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800abd0:	785b      	ldrb	r3, [r3, #1]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	f040 8081 	bne.w	800acda <ISOUDS_Main_Server+0x13a>
 800abd8:	79fb      	ldrb	r3, [r7, #7]
 800abda:	4a96      	ldr	r2, [pc, #600]	; (800ae34 <ISOUDS_Main_Server+0x294>)
 800abdc:	011b      	lsls	r3, r3, #4
 800abde:	4413      	add	r3, r2
 800abe0:	781a      	ldrb	r2, [r3, #0]
 800abe2:	4b92      	ldr	r3, [pc, #584]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800abe4:	799b      	ldrb	r3, [r3, #6]
 800abe6:	4013      	ands	r3, r2
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d075      	beq.n	800acda <ISOUDS_Main_Server+0x13a>
 800abee:	2301      	movs	r3, #1
 800abf0:	71bb      	strb	r3, [r7, #6]
 800abf2:	2301      	movs	r3, #1
 800abf4:	707b      	strb	r3, [r7, #1]
 800abf6:	79fb      	ldrb	r3, [r7, #7]
 800abf8:	4a8e      	ldr	r2, [pc, #568]	; (800ae34 <ISOUDS_Main_Server+0x294>)
 800abfa:	011b      	lsls	r3, r3, #4
 800abfc:	4413      	add	r3, r2
 800abfe:	330d      	adds	r3, #13
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d106      	bne.n	800ac14 <ISOUDS_Main_Server+0x74>
 800ac06:	f003 fac5 	bl	800e194 <ISOUDS_GetAAUTHENTICATEStatus>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d001      	beq.n	800ac14 <ISOUDS_Main_Server+0x74>
 800ac10:	2300      	movs	r3, #0
 800ac12:	707b      	strb	r3, [r7, #1]
 800ac14:	787b      	ldrb	r3, [r7, #1]
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d159      	bne.n	800acce <ISOUDS_Main_Server+0x12e>
 800ac1a:	79fb      	ldrb	r3, [r7, #7]
 800ac1c:	4a85      	ldr	r2, [pc, #532]	; (800ae34 <ISOUDS_Main_Server+0x294>)
 800ac1e:	011b      	lsls	r3, r3, #4
 800ac20:	4413      	add	r3, r2
 800ac22:	3308      	adds	r3, #8
 800ac24:	781a      	ldrb	r2, [r3, #0]
 800ac26:	4b84      	ldr	r3, [pc, #528]	; (800ae38 <ISOUDS_Main_Server+0x298>)
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	408b      	lsls	r3, r1
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	4013      	ands	r3, r2
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d042      	beq.n	800acc0 <ISOUDS_Main_Server+0x120>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	717b      	strb	r3, [r7, #5]
 800ac3e:	79fb      	ldrb	r3, [r7, #7]
 800ac40:	4a7c      	ldr	r2, [pc, #496]	; (800ae34 <ISOUDS_Main_Server+0x294>)
 800ac42:	011b      	lsls	r3, r3, #4
 800ac44:	4413      	add	r3, r2
 800ac46:	3309      	adds	r3, #9
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d121      	bne.n	800ac92 <ISOUDS_Main_Server+0xf2>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	717b      	strb	r3, [r7, #5]
 800ac52:	2300      	movs	r3, #0
 800ac54:	807b      	strh	r3, [r7, #2]
 800ac56:	e00f      	b.n	800ac78 <ISOUDS_Main_Server+0xd8>
 800ac58:	79fa      	ldrb	r2, [r7, #7]
 800ac5a:	887b      	ldrh	r3, [r7, #2]
 800ac5c:	4975      	ldr	r1, [pc, #468]	; (800ae34 <ISOUDS_Main_Server+0x294>)
 800ac5e:	0112      	lsls	r2, r2, #4
 800ac60:	440a      	add	r2, r1
 800ac62:	4413      	add	r3, r2
 800ac64:	330b      	adds	r3, #11
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f002 f823 	bl	800ccb4 <ISOUDS_GetSAStLevel>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	717b      	strb	r3, [r7, #5]
 800ac72:	887b      	ldrh	r3, [r7, #2]
 800ac74:	3301      	adds	r3, #1
 800ac76:	807b      	strh	r3, [r7, #2]
 800ac78:	79fb      	ldrb	r3, [r7, #7]
 800ac7a:	4a6e      	ldr	r2, [pc, #440]	; (800ae34 <ISOUDS_Main_Server+0x294>)
 800ac7c:	011b      	lsls	r3, r3, #4
 800ac7e:	4413      	add	r3, r2
 800ac80:	330a      	adds	r3, #10
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	887a      	ldrh	r2, [r7, #2]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d202      	bcs.n	800ac92 <ISOUDS_Main_Server+0xf2>
 800ac8c:	797b      	ldrb	r3, [r7, #5]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d0e2      	beq.n	800ac58 <ISOUDS_Main_Server+0xb8>
 800ac92:	797b      	ldrb	r3, [r7, #5]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d10c      	bne.n	800acb2 <ISOUDS_Main_Server+0x112>
 800ac98:	4a68      	ldr	r2, [pc, #416]	; (800ae3c <ISOUDS_Main_Server+0x29c>)
 800ac9a:	79fb      	ldrb	r3, [r7, #7]
 800ac9c:	7013      	strb	r3, [r2, #0]
 800ac9e:	79fb      	ldrb	r3, [r7, #7]
 800aca0:	4a64      	ldr	r2, [pc, #400]	; (800ae34 <ISOUDS_Main_Server+0x294>)
 800aca2:	011b      	lsls	r3, r3, #4
 800aca4:	4413      	add	r3, r2
 800aca6:	3304      	adds	r3, #4
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4965      	ldr	r1, [pc, #404]	; (800ae40 <ISOUDS_Main_Server+0x2a0>)
 800acac:	485f      	ldr	r0, [pc, #380]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800acae:	4798      	blx	r3
 800acb0:	e013      	b.n	800acda <ISOUDS_Main_Server+0x13a>
 800acb2:	4b5e      	ldr	r3, [pc, #376]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800acb4:	2233      	movs	r2, #51	; 0x33
 800acb6:	709a      	strb	r2, [r3, #2]
 800acb8:	4b5c      	ldr	r3, [pc, #368]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800acba:	2204      	movs	r2, #4
 800acbc:	701a      	strb	r2, [r3, #0]
 800acbe:	e00c      	b.n	800acda <ISOUDS_Main_Server+0x13a>
 800acc0:	4b5a      	ldr	r3, [pc, #360]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800acc2:	227f      	movs	r2, #127	; 0x7f
 800acc4:	709a      	strb	r2, [r3, #2]
 800acc6:	4b59      	ldr	r3, [pc, #356]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800acc8:	2204      	movs	r2, #4
 800acca:	701a      	strb	r2, [r3, #0]
 800accc:	e005      	b.n	800acda <ISOUDS_Main_Server+0x13a>
 800acce:	4b57      	ldr	r3, [pc, #348]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800acd0:	2234      	movs	r2, #52	; 0x34
 800acd2:	709a      	strb	r2, [r3, #2]
 800acd4:	4b55      	ldr	r3, [pc, #340]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800acd6:	2204      	movs	r2, #4
 800acd8:	701a      	strb	r2, [r3, #0]
 800acda:	79fb      	ldrb	r3, [r7, #7]
 800acdc:	3301      	adds	r3, #1
 800acde:	71fb      	strb	r3, [r7, #7]
 800ace0:	f7f6 fd15 	bl	800170e <ISOUDS_Get_NoOfServConfgrd>
 800ace4:	4603      	mov	r3, r0
 800ace6:	461a      	mov	r2, r3
 800ace8:	79fb      	ldrb	r3, [r7, #7]
 800acea:	4293      	cmp	r3, r2
 800acec:	d203      	bcs.n	800acf6 <ISOUDS_Main_Server+0x156>
 800acee:	79bb      	ldrb	r3, [r7, #6]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	f47f af66 	bne.w	800abc2 <ISOUDS_Main_Server+0x22>
 800acf6:	79bb      	ldrb	r3, [r7, #6]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d12a      	bne.n	800ad52 <ISOUDS_Main_Server+0x1b2>
 800acfc:	4b4b      	ldr	r3, [pc, #300]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800acfe:	799b      	ldrb	r3, [r3, #6]
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d109      	bne.n	800ad18 <ISOUDS_Main_Server+0x178>
 800ad04:	4b49      	ldr	r3, [pc, #292]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ad06:	2203      	movs	r2, #3
 800ad08:	809a      	strh	r2, [r3, #4]
 800ad0a:	4b48      	ldr	r3, [pc, #288]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ad0c:	2211      	movs	r2, #17
 800ad0e:	709a      	strb	r2, [r3, #2]
 800ad10:	4b46      	ldr	r3, [pc, #280]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ad12:	2204      	movs	r2, #4
 800ad14:	701a      	strb	r2, [r3, #0]
 800ad16:	e01c      	b.n	800ad52 <ISOUDS_Main_Server+0x1b2>
 800ad18:	f000 f898 	bl	800ae4c <ISOUDS_ServerRst>
 800ad1c:	e019      	b.n	800ad52 <ISOUDS_Main_Server+0x1b2>
 800ad1e:	4b43      	ldr	r3, [pc, #268]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	2b05      	cmp	r3, #5
 800ad24:	d115      	bne.n	800ad52 <ISOUDS_Main_Server+0x1b2>
 800ad26:	f7f6 fcf2 	bl	800170e <ISOUDS_Get_NoOfServConfgrd>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	4b43      	ldr	r3, [pc, #268]	; (800ae3c <ISOUDS_Main_Server+0x29c>)
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d90a      	bls.n	800ad4c <ISOUDS_Main_Server+0x1ac>
 800ad36:	4b41      	ldr	r3, [pc, #260]	; (800ae3c <ISOUDS_Main_Server+0x29c>)
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	4a3e      	ldr	r2, [pc, #248]	; (800ae34 <ISOUDS_Main_Server+0x294>)
 800ad3c:	011b      	lsls	r3, r3, #4
 800ad3e:	4413      	add	r3, r2
 800ad40:	3304      	adds	r3, #4
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	493e      	ldr	r1, [pc, #248]	; (800ae40 <ISOUDS_Main_Server+0x2a0>)
 800ad46:	4839      	ldr	r0, [pc, #228]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ad48:	4798      	blx	r3
 800ad4a:	e002      	b.n	800ad52 <ISOUDS_Main_Server+0x1b2>
 800ad4c:	4b37      	ldr	r3, [pc, #220]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ad4e:	2200      	movs	r2, #0
 800ad50:	701a      	strb	r2, [r3, #0]
 800ad52:	4b36      	ldr	r3, [pc, #216]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	2b03      	cmp	r3, #3
 800ad58:	d119      	bne.n	800ad8e <ISOUDS_Main_Server+0x1ee>
 800ad5a:	4b34      	ldr	r3, [pc, #208]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ad5c:	785b      	ldrb	r3, [r3, #1]
 800ad5e:	3340      	adds	r3, #64	; 0x40
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	4b33      	ldr	r3, [pc, #204]	; (800ae30 <ISOUDS_Main_Server+0x290>)
 800ad64:	701a      	strb	r2, [r3, #0]
 800ad66:	4b37      	ldr	r3, [pc, #220]	; (800ae44 <ISOUDS_Main_Server+0x2a4>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	601a      	str	r2, [r3, #0]
 800ad6c:	4b2f      	ldr	r3, [pc, #188]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ad6e:	2207      	movs	r2, #7
 800ad70:	701a      	strb	r2, [r3, #0]
 800ad72:	f7f6 fced 	bl	8001750 <ISOUDS_GetSTDP2Limit>
 800ad76:	4603      	mov	r3, r0
 800ad78:	4a33      	ldr	r2, [pc, #204]	; (800ae48 <ISOUDS_Main_Server+0x2a8>)
 800ad7a:	6013      	str	r3, [r2, #0]
 800ad7c:	f7f6 fc84 	bl	8001688 <ISOUDS_ServerSetRespCANid>
 800ad80:	4b2a      	ldr	r3, [pc, #168]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ad82:	889b      	ldrh	r3, [r3, #4]
 800ad84:	492a      	ldr	r1, [pc, #168]	; (800ae30 <ISOUDS_Main_Server+0x290>)
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7f6 fc93 	bl	80016b2 <ISOUDS_ServerTxRequest>
 800ad8c:	e039      	b.n	800ae02 <ISOUDS_Main_Server+0x262>
 800ad8e:	4b27      	ldr	r3, [pc, #156]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	2b04      	cmp	r3, #4
 800ad94:	d135      	bne.n	800ae02 <ISOUDS_Main_Server+0x262>
 800ad96:	4b25      	ldr	r3, [pc, #148]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ad98:	789b      	ldrb	r3, [r3, #2]
 800ad9a:	2b78      	cmp	r3, #120	; 0x78
 800ad9c:	d105      	bne.n	800adaa <ISOUDS_Main_Server+0x20a>
 800ad9e:	4b23      	ldr	r3, [pc, #140]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ada0:	2205      	movs	r2, #5
 800ada2:	701a      	strb	r2, [r3, #0]
 800ada4:	f000 f904 	bl	800afb0 <ISOUDS_iTxRespPend>
 800ada8:	e02b      	b.n	800ae02 <ISOUDS_Main_Server+0x262>
 800adaa:	4b20      	ldr	r3, [pc, #128]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800adac:	799b      	ldrb	r3, [r3, #6]
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d017      	beq.n	800ade2 <ISOUDS_Main_Server+0x242>
 800adb2:	4b1e      	ldr	r3, [pc, #120]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800adb4:	799b      	ldrb	r3, [r3, #6]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d121      	bne.n	800adfe <ISOUDS_Main_Server+0x25e>
 800adba:	4b1c      	ldr	r3, [pc, #112]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800adbc:	789b      	ldrb	r3, [r3, #2]
 800adbe:	2b11      	cmp	r3, #17
 800adc0:	d01d      	beq.n	800adfe <ISOUDS_Main_Server+0x25e>
 800adc2:	4b1a      	ldr	r3, [pc, #104]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800adc4:	789b      	ldrb	r3, [r3, #2]
 800adc6:	2b12      	cmp	r3, #18
 800adc8:	d019      	beq.n	800adfe <ISOUDS_Main_Server+0x25e>
 800adca:	4b18      	ldr	r3, [pc, #96]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800adcc:	789b      	ldrb	r3, [r3, #2]
 800adce:	2b7e      	cmp	r3, #126	; 0x7e
 800add0:	d015      	beq.n	800adfe <ISOUDS_Main_Server+0x25e>
 800add2:	4b16      	ldr	r3, [pc, #88]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800add4:	789b      	ldrb	r3, [r3, #2]
 800add6:	2b7f      	cmp	r3, #127	; 0x7f
 800add8:	d011      	beq.n	800adfe <ISOUDS_Main_Server+0x25e>
 800adda:	4b14      	ldr	r3, [pc, #80]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800addc:	789b      	ldrb	r3, [r3, #2]
 800adde:	2b31      	cmp	r3, #49	; 0x31
 800ade0:	d00d      	beq.n	800adfe <ISOUDS_Main_Server+0x25e>
 800ade2:	4b12      	ldr	r3, [pc, #72]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ade4:	2207      	movs	r2, #7
 800ade6:	701a      	strb	r2, [r3, #0]
 800ade8:	f7f6 fcb2 	bl	8001750 <ISOUDS_GetSTDP2Limit>
 800adec:	4603      	mov	r3, r0
 800adee:	4a16      	ldr	r2, [pc, #88]	; (800ae48 <ISOUDS_Main_Server+0x2a8>)
 800adf0:	6013      	str	r3, [r2, #0]
 800adf2:	4b14      	ldr	r3, [pc, #80]	; (800ae44 <ISOUDS_Main_Server+0x2a4>)
 800adf4:	2201      	movs	r2, #1
 800adf6:	601a      	str	r2, [r3, #0]
 800adf8:	f000 f8bc 	bl	800af74 <ISOUDS_iTxNegResp>
 800adfc:	e001      	b.n	800ae02 <ISOUDS_Main_Server+0x262>
 800adfe:	f000 f825 	bl	800ae4c <ISOUDS_ServerRst>
 800ae02:	4b0a      	ldr	r3, [pc, #40]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	2b06      	cmp	r3, #6
 800ae08:	d102      	bne.n	800ae10 <ISOUDS_Main_Server+0x270>
 800ae0a:	4b08      	ldr	r3, [pc, #32]	; (800ae2c <ISOUDS_Main_Server+0x28c>)
 800ae0c:	2205      	movs	r2, #5
 800ae0e:	701a      	strb	r2, [r3, #0]
 800ae10:	f001 fe3e 	bl	800ca90 <ISOUDS_SAChkTimer>
 800ae14:	f000 fe78 	bl	800bb08 <ISOUDS_RdDataPeriodicDIDMainFunction>
 800ae18:	f7f7 fafe 	bl	8002418 <ISOUDS_RespOnEvent_Sched>
 800ae1c:	f003 f976 	bl	800e10c <ISOUDS_AUTHENChkTimer>
 800ae20:	f000 f82c 	bl	800ae7c <ISOUDS_SrvMon>
 800ae24:	bf00      	nop
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	24001728 	.word	0x24001728
 800ae30:	24000350 	.word	0x24000350
 800ae34:	080106d8 	.word	0x080106d8
 800ae38:	24001720 	.word	0x24001720
 800ae3c:	2400170b 	.word	0x2400170b
 800ae40:	24000351 	.word	0x24000351
 800ae44:	24001710 	.word	0x24001710
 800ae48:	24001718 	.word	0x24001718

0800ae4c <ISOUDS_ServerRst>:
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	4b07      	ldr	r3, [pc, #28]	; (800ae70 <ISOUDS_ServerRst+0x24>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	701a      	strb	r2, [r3, #0]
 800ae56:	4b06      	ldr	r3, [pc, #24]	; (800ae70 <ISOUDS_ServerRst+0x24>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	705a      	strb	r2, [r3, #1]
 800ae5c:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <ISOUDS_ServerRst+0x28>)
 800ae5e:	22ff      	movs	r2, #255	; 0xff
 800ae60:	701a      	strb	r2, [r3, #0]
 800ae62:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <ISOUDS_ServerRst+0x2c>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	701a      	strb	r2, [r3, #0]
 800ae68:	f000 f8e8 	bl	800b03c <ISOUDS_ResetiS3Timer>
 800ae6c:	bf00      	nop
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	24001728 	.word	0x24001728
 800ae74:	2400170b 	.word	0x2400170b
 800ae78:	2400170c 	.word	0x2400170c

0800ae7c <ISOUDS_SrvMon>:
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	4b2c      	ldr	r3, [pc, #176]	; (800af34 <ISOUDS_SrvMon+0xb8>)
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d01e      	beq.n	800aec6 <ISOUDS_SrvMon+0x4a>
 800ae88:	4b2b      	ldr	r3, [pc, #172]	; (800af38 <ISOUDS_SrvMon+0xbc>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d01a      	beq.n	800aec6 <ISOUDS_SrvMon+0x4a>
 800ae90:	4b29      	ldr	r3, [pc, #164]	; (800af38 <ISOUDS_SrvMon+0xbc>)
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	4b29      	ldr	r3, [pc, #164]	; (800af3c <ISOUDS_SrvMon+0xc0>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d30c      	bcc.n	800aeb6 <ISOUDS_SrvMon+0x3a>
 800ae9c:	4b25      	ldr	r3, [pc, #148]	; (800af34 <ISOUDS_SrvMon+0xb8>)
 800ae9e:	2201      	movs	r2, #1
 800aea0:	701a      	strb	r2, [r3, #0]
 800aea2:	4b25      	ldr	r3, [pc, #148]	; (800af38 <ISOUDS_SrvMon+0xbc>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	601a      	str	r2, [r3, #0]
 800aea8:	f7ff ffd0 	bl	800ae4c <ISOUDS_ServerRst>
 800aeac:	f001 fedc 	bl	800cc68 <ISOUDS_SAReset>
 800aeb0:	f002 fcda 	bl	800d868 <ISOUDS_TrnsfrDaExit>
 800aeb4:	e007      	b.n	800aec6 <ISOUDS_SrvMon+0x4a>
 800aeb6:	f7f6 fc32 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800aeba:	4602      	mov	r2, r0
 800aebc:	4b1e      	ldr	r3, [pc, #120]	; (800af38 <ISOUDS_SrvMon+0xbc>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4413      	add	r3, r2
 800aec2:	4a1d      	ldr	r2, [pc, #116]	; (800af38 <ISOUDS_SrvMon+0xbc>)
 800aec4:	6013      	str	r3, [r2, #0]
 800aec6:	4b1e      	ldr	r3, [pc, #120]	; (800af40 <ISOUDS_SrvMon+0xc4>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d013      	beq.n	800aef6 <ISOUDS_SrvMon+0x7a>
 800aece:	4b1c      	ldr	r3, [pc, #112]	; (800af40 <ISOUDS_SrvMon+0xc4>)
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	4b1c      	ldr	r3, [pc, #112]	; (800af44 <ISOUDS_SrvMon+0xc8>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d305      	bcc.n	800aee6 <ISOUDS_SrvMon+0x6a>
 800aeda:	f7ff ffb7 	bl	800ae4c <ISOUDS_ServerRst>
 800aede:	4b18      	ldr	r3, [pc, #96]	; (800af40 <ISOUDS_SrvMon+0xc4>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	e007      	b.n	800aef6 <ISOUDS_SrvMon+0x7a>
 800aee6:	f7f6 fc1a 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800aeea:	4602      	mov	r2, r0
 800aeec:	4b14      	ldr	r3, [pc, #80]	; (800af40 <ISOUDS_SrvMon+0xc4>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4413      	add	r3, r2
 800aef2:	4a13      	ldr	r2, [pc, #76]	; (800af40 <ISOUDS_SrvMon+0xc4>)
 800aef4:	6013      	str	r3, [r2, #0]
 800aef6:	4b14      	ldr	r3, [pc, #80]	; (800af48 <ISOUDS_SrvMon+0xcc>)
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d117      	bne.n	800af2e <ISOUDS_SrvMon+0xb2>
 800aefe:	f7f6 fc16 	bl	800172e <ISOUDS_GetTimerThresh>
 800af02:	4602      	mov	r2, r0
 800af04:	4b11      	ldr	r3, [pc, #68]	; (800af4c <ISOUDS_SrvMon+0xd0>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d808      	bhi.n	800af1e <ISOUDS_SrvMon+0xa2>
 800af0c:	4b0e      	ldr	r3, [pc, #56]	; (800af48 <ISOUDS_SrvMon+0xcc>)
 800af0e:	2200      	movs	r2, #0
 800af10:	701a      	strb	r2, [r3, #0]
 800af12:	4b0e      	ldr	r3, [pc, #56]	; (800af4c <ISOUDS_SrvMon+0xd0>)
 800af14:	2200      	movs	r2, #0
 800af16:	601a      	str	r2, [r3, #0]
 800af18:	f7f6 fbda 	bl	80016d0 <DelayedSystemSoftwareResetIndication>
 800af1c:	e007      	b.n	800af2e <ISOUDS_SrvMon+0xb2>
 800af1e:	f7f6 fbfe 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800af22:	4602      	mov	r2, r0
 800af24:	4b09      	ldr	r3, [pc, #36]	; (800af4c <ISOUDS_SrvMon+0xd0>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4413      	add	r3, r2
 800af2a:	4a08      	ldr	r2, [pc, #32]	; (800af4c <ISOUDS_SrvMon+0xd0>)
 800af2c:	6013      	str	r3, [r2, #0]
 800af2e:	bf00      	nop
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	24001720 	.word	0x24001720
 800af38:	24001714 	.word	0x24001714
 800af3c:	24001740 	.word	0x24001740
 800af40:	24001710 	.word	0x24001710
 800af44:	24001718 	.word	0x24001718
 800af48:	2400171f 	.word	0x2400171f
 800af4c:	24001724 	.word	0x24001724

0800af50 <ISOUDS_ReqECUReset>:
 800af50:	b480      	push	{r7}
 800af52:	af00      	add	r7, sp, #0
 800af54:	4b05      	ldr	r3, [pc, #20]	; (800af6c <ISOUDS_ReqECUReset+0x1c>)
 800af56:	2201      	movs	r2, #1
 800af58:	701a      	strb	r2, [r3, #0]
 800af5a:	4b05      	ldr	r3, [pc, #20]	; (800af70 <ISOUDS_ReqECUReset+0x20>)
 800af5c:	2201      	movs	r2, #1
 800af5e:	601a      	str	r2, [r3, #0]
 800af60:	bf00      	nop
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	2400171f 	.word	0x2400171f
 800af70:	24001724 	.word	0x24001724

0800af74 <ISOUDS_iTxNegResp>:
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0
 800af78:	4b0a      	ldr	r3, [pc, #40]	; (800afa4 <ISOUDS_iTxNegResp+0x30>)
 800af7a:	227f      	movs	r2, #127	; 0x7f
 800af7c:	701a      	strb	r2, [r3, #0]
 800af7e:	4b0a      	ldr	r3, [pc, #40]	; (800afa8 <ISOUDS_iTxNegResp+0x34>)
 800af80:	785a      	ldrb	r2, [r3, #1]
 800af82:	4b08      	ldr	r3, [pc, #32]	; (800afa4 <ISOUDS_iTxNegResp+0x30>)
 800af84:	705a      	strb	r2, [r3, #1]
 800af86:	4b08      	ldr	r3, [pc, #32]	; (800afa8 <ISOUDS_iTxNegResp+0x34>)
 800af88:	789a      	ldrb	r2, [r3, #2]
 800af8a:	4b06      	ldr	r3, [pc, #24]	; (800afa4 <ISOUDS_iTxNegResp+0x30>)
 800af8c:	709a      	strb	r2, [r3, #2]
 800af8e:	4b07      	ldr	r3, [pc, #28]	; (800afac <ISOUDS_iTxNegResp+0x38>)
 800af90:	2200      	movs	r2, #0
 800af92:	601a      	str	r2, [r3, #0]
 800af94:	f7f6 fb78 	bl	8001688 <ISOUDS_ServerSetRespCANid>
 800af98:	4902      	ldr	r1, [pc, #8]	; (800afa4 <ISOUDS_iTxNegResp+0x30>)
 800af9a:	2003      	movs	r0, #3
 800af9c:	f7f6 fb89 	bl	80016b2 <ISOUDS_ServerTxRequest>
 800afa0:	bf00      	nop
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	24000350 	.word	0x24000350
 800afa8:	24001728 	.word	0x24001728
 800afac:	24001710 	.word	0x24001710

0800afb0 <ISOUDS_iTxRespPend>:
 800afb0:	b580      	push	{r7, lr}
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	4b1c      	ldr	r3, [pc, #112]	; (800b028 <ISOUDS_iTxRespPend+0x78>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	701a      	strb	r2, [r3, #0]
 800afba:	4b1b      	ldr	r3, [pc, #108]	; (800b028 <ISOUDS_iTxRespPend+0x78>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	705a      	strb	r2, [r3, #1]
 800afc0:	4b19      	ldr	r3, [pc, #100]	; (800b028 <ISOUDS_iTxRespPend+0x78>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	709a      	strb	r2, [r3, #2]
 800afc6:	f7f6 fbcb 	bl	8001760 <ISOUDS_GetNRC78P2MimLim>
 800afca:	4602      	mov	r2, r0
 800afcc:	4b17      	ldr	r3, [pc, #92]	; (800b02c <ISOUDS_iTxRespPend+0x7c>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d303      	bcc.n	800afdc <ISOUDS_iTxRespPend+0x2c>
 800afd4:	4b16      	ldr	r3, [pc, #88]	; (800b030 <ISOUDS_iTxRespPend+0x80>)
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d11f      	bne.n	800b01c <ISOUDS_iTxRespPend+0x6c>
 800afdc:	4b12      	ldr	r3, [pc, #72]	; (800b028 <ISOUDS_iTxRespPend+0x78>)
 800afde:	227f      	movs	r2, #127	; 0x7f
 800afe0:	701a      	strb	r2, [r3, #0]
 800afe2:	4b14      	ldr	r3, [pc, #80]	; (800b034 <ISOUDS_iTxRespPend+0x84>)
 800afe4:	785a      	ldrb	r2, [r3, #1]
 800afe6:	4b10      	ldr	r3, [pc, #64]	; (800b028 <ISOUDS_iTxRespPend+0x78>)
 800afe8:	705a      	strb	r2, [r3, #1]
 800afea:	4b12      	ldr	r3, [pc, #72]	; (800b034 <ISOUDS_iTxRespPend+0x84>)
 800afec:	789a      	ldrb	r2, [r3, #2]
 800afee:	4b0e      	ldr	r3, [pc, #56]	; (800b028 <ISOUDS_iTxRespPend+0x78>)
 800aff0:	709a      	strb	r2, [r3, #2]
 800aff2:	f7f6 fb49 	bl	8001688 <ISOUDS_ServerSetRespCANid>
 800aff6:	490c      	ldr	r1, [pc, #48]	; (800b028 <ISOUDS_iTxRespPend+0x78>)
 800aff8:	2003      	movs	r0, #3
 800affa:	f7f6 fb5a 	bl	80016b2 <ISOUDS_ServerTxRequest>
 800affe:	f7f6 fbb7 	bl	8001770 <ISOUDS_GetNRC78P2MaxLim>
 800b002:	4603      	mov	r3, r0
 800b004:	4a0c      	ldr	r2, [pc, #48]	; (800b038 <ISOUDS_iTxRespPend+0x88>)
 800b006:	6013      	str	r3, [r2, #0]
 800b008:	4b08      	ldr	r3, [pc, #32]	; (800b02c <ISOUDS_iTxRespPend+0x7c>)
 800b00a:	2201      	movs	r2, #1
 800b00c:	601a      	str	r2, [r3, #0]
 800b00e:	4b09      	ldr	r3, [pc, #36]	; (800b034 <ISOUDS_iTxRespPend+0x84>)
 800b010:	2206      	movs	r2, #6
 800b012:	701a      	strb	r2, [r3, #0]
 800b014:	4b06      	ldr	r3, [pc, #24]	; (800b030 <ISOUDS_iTxRespPend+0x80>)
 800b016:	2201      	movs	r2, #1
 800b018:	701a      	strb	r2, [r3, #0]
 800b01a:	e003      	b.n	800b024 <ISOUDS_iTxRespPend+0x74>
 800b01c:	4b05      	ldr	r3, [pc, #20]	; (800b034 <ISOUDS_iTxRespPend+0x84>)
 800b01e:	2205      	movs	r2, #5
 800b020:	701a      	strb	r2, [r3, #0]
 800b022:	bf00      	nop
 800b024:	bf00      	nop
 800b026:	bd80      	pop	{r7, pc}
 800b028:	2400171c 	.word	0x2400171c
 800b02c:	24001710 	.word	0x24001710
 800b030:	2400170c 	.word	0x2400170c
 800b034:	24001728 	.word	0x24001728
 800b038:	24001718 	.word	0x24001718

0800b03c <ISOUDS_ResetiS3Timer>:
 800b03c:	b480      	push	{r7}
 800b03e:	af00      	add	r7, sp, #0
 800b040:	4b05      	ldr	r3, [pc, #20]	; (800b058 <ISOUDS_ResetiS3Timer+0x1c>)
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d002      	beq.n	800b04e <ISOUDS_ResetiS3Timer+0x12>
 800b048:	4b04      	ldr	r3, [pc, #16]	; (800b05c <ISOUDS_ResetiS3Timer+0x20>)
 800b04a:	2201      	movs	r2, #1
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	bf00      	nop
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	24001720 	.word	0x24001720
 800b05c:	24001714 	.word	0x24001714

0800b060 <ISOUDS_GetUDSStat>:
 800b060:	b480      	push	{r7}
 800b062:	af00      	add	r7, sp, #0
 800b064:	4b03      	ldr	r3, [pc, #12]	; (800b074 <ISOUDS_GetUDSStat+0x14>)
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	4618      	mov	r0, r3
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	24001728 	.word	0x24001728

0800b078 <ISUDS_SessionChangeInd>:
 800b078:	b580      	push	{r7, lr}
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	f001 fdf4 	bl	800cc68 <ISOUDS_SAReset>
 800b080:	f002 fbf2 	bl	800d868 <ISOUDS_TrnsfrDaExit>
 800b084:	bf00      	nop
 800b086:	bd80      	pop	{r7, pc}

0800b088 <ISOUDS_RdDTCInf>:
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	889b      	ldrh	r3, [r3, #4]
 800b096:	2b01      	cmp	r3, #1
 800b098:	f240 80ad 	bls.w	800b1f6 <ISOUDS_RdDTCInf+0x16e>
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0a4:	73bb      	strb	r3, [r7, #14]
 800b0a6:	7bbb      	ldrb	r3, [r7, #14]
 800b0a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b0ac:	737b      	strb	r3, [r7, #13]
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 f8b1 	bl	800b218 <ISOUDS_RDDTCValidSubfun>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	f040 8095 	bne.w	800b1e8 <ISOUDS_RdDTCInf+0x160>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	889a      	ldrh	r2, [r3, #4]
 800b0c2:	4b52      	ldr	r3, [pc, #328]	; (800b20c <ISOUDS_RdDTCInf+0x184>)
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	4951      	ldr	r1, [pc, #324]	; (800b210 <ISOUDS_RdDTCInf+0x188>)
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	005b      	lsls	r3, r3, #1
 800b0ce:	4403      	add	r3, r0
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	440b      	add	r3, r1
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d17d      	bne.n	800b1da <ISOUDS_RdDTCInf+0x152>
 800b0de:	4b4b      	ldr	r3, [pc, #300]	; (800b20c <ISOUDS_RdDTCInf+0x184>)
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4a4a      	ldr	r2, [pc, #296]	; (800b210 <ISOUDS_RdDTCInf+0x188>)
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	440b      	add	r3, r1
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4413      	add	r3, r2
 800b0f0:	3302      	adds	r3, #2
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	4b47      	ldr	r3, [pc, #284]	; (800b214 <ISOUDS_RdDTCInf+0x18c>)
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	fa42 f303 	asr.w	r3, r2, r3
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	2b00      	cmp	r3, #0
 800b104:	d062      	beq.n	800b1cc <ISOUDS_RdDTCInf+0x144>
 800b106:	2301      	movs	r3, #1
 800b108:	73fb      	strb	r3, [r7, #15]
 800b10a:	4b40      	ldr	r3, [pc, #256]	; (800b20c <ISOUDS_RdDTCInf+0x184>)
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	4619      	mov	r1, r3
 800b110:	4a3f      	ldr	r2, [pc, #252]	; (800b210 <ISOUDS_RdDTCInf+0x188>)
 800b112:	460b      	mov	r3, r1
 800b114:	005b      	lsls	r3, r3, #1
 800b116:	440b      	add	r3, r1
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	3303      	adds	r3, #3
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d10f      	bne.n	800b144 <ISOUDS_RdDTCInf+0xbc>
 800b124:	4b39      	ldr	r3, [pc, #228]	; (800b20c <ISOUDS_RdDTCInf+0x184>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	4619      	mov	r1, r3
 800b12a:	4a39      	ldr	r2, [pc, #228]	; (800b210 <ISOUDS_RdDTCInf+0x188>)
 800b12c:	460b      	mov	r3, r1
 800b12e:	005b      	lsls	r3, r3, #1
 800b130:	440b      	add	r3, r1
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4413      	add	r3, r2
 800b136:	3304      	adds	r3, #4
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f001 fdba 	bl	800ccb4 <ISOUDS_GetSAStLevel>
 800b140:	4603      	mov	r3, r0
 800b142:	73fb      	strb	r3, [r7, #15]
 800b144:	7bfb      	ldrb	r3, [r7, #15]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d139      	bne.n	800b1be <ISOUDS_RdDTCInf+0x136>
 800b14a:	f7f6 fb23 	bl	8001794 <ISOUDS_RdDTCPreCondCheck>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b01      	cmp	r3, #1
 800b152:	d12d      	bne.n	800b1b0 <ISOUDS_RdDTCInf+0x128>
 800b154:	2300      	movs	r3, #0
 800b156:	817b      	strh	r3, [r7, #10]
 800b158:	4b2c      	ldr	r3, [pc, #176]	; (800b20c <ISOUDS_RdDTCInf+0x184>)
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	4619      	mov	r1, r3
 800b15e:	4a2c      	ldr	r2, [pc, #176]	; (800b210 <ISOUDS_RdDTCInf+0x188>)
 800b160:	460b      	mov	r3, r1
 800b162:	005b      	lsls	r3, r3, #1
 800b164:	440b      	add	r3, r1
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4413      	add	r3, r2
 800b16a:	3308      	adds	r3, #8
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	3201      	adds	r2, #1
 800b172:	f107 010a 	add.w	r1, r7, #10
 800b176:	4610      	mov	r0, r2
 800b178:	4798      	blx	r3
 800b17a:	4603      	mov	r3, r0
 800b17c:	733b      	strb	r3, [r7, #12]
 800b17e:	7b3b      	ldrb	r3, [r7, #12]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10e      	bne.n	800b1a2 <ISOUDS_RdDTCInf+0x11a>
 800b184:	7b7b      	ldrb	r3, [r7, #13]
 800b186:	2b80      	cmp	r3, #128	; 0x80
 800b188:	d008      	beq.n	800b19c <ISOUDS_RdDTCInf+0x114>
 800b18a:	897b      	ldrh	r3, [r7, #10]
 800b18c:	3302      	adds	r3, #2
 800b18e:	b29a      	uxth	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	809a      	strh	r2, [r3, #4]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2203      	movs	r2, #3
 800b198:	701a      	strb	r2, [r3, #0]
 800b19a:	e032      	b.n	800b202 <ISOUDS_RdDTCInf+0x17a>
 800b19c:	f7ff fe56 	bl	800ae4c <ISOUDS_ServerRst>
 800b1a0:	e02f      	b.n	800b202 <ISOUDS_RdDTCInf+0x17a>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2204      	movs	r2, #4
 800b1a6:	701a      	strb	r2, [r3, #0]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	7b3a      	ldrb	r2, [r7, #12]
 800b1ac:	709a      	strb	r2, [r3, #2]
 800b1ae:	e028      	b.n	800b202 <ISOUDS_RdDTCInf+0x17a>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2204      	movs	r2, #4
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2222      	movs	r2, #34	; 0x22
 800b1ba:	709a      	strb	r2, [r3, #2]
 800b1bc:	e021      	b.n	800b202 <ISOUDS_RdDTCInf+0x17a>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2204      	movs	r2, #4
 800b1c2:	701a      	strb	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2233      	movs	r2, #51	; 0x33
 800b1c8:	709a      	strb	r2, [r3, #2]
 800b1ca:	e01a      	b.n	800b202 <ISOUDS_RdDTCInf+0x17a>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2204      	movs	r2, #4
 800b1d0:	701a      	strb	r2, [r3, #0]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	227e      	movs	r2, #126	; 0x7e
 800b1d6:	709a      	strb	r2, [r3, #2]
 800b1d8:	e013      	b.n	800b202 <ISOUDS_RdDTCInf+0x17a>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2204      	movs	r2, #4
 800b1de:	701a      	strb	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2213      	movs	r2, #19
 800b1e4:	709a      	strb	r2, [r3, #2]
 800b1e6:	e00c      	b.n	800b202 <ISOUDS_RdDTCInf+0x17a>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2204      	movs	r2, #4
 800b1ec:	701a      	strb	r2, [r3, #0]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2212      	movs	r2, #18
 800b1f2:	709a      	strb	r2, [r3, #2]
 800b1f4:	e005      	b.n	800b202 <ISOUDS_RdDTCInf+0x17a>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2204      	movs	r2, #4
 800b1fa:	701a      	strb	r2, [r3, #0]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2213      	movs	r2, #19
 800b200:	709a      	strb	r2, [r3, #2]
 800b202:	bf00      	nop
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	24001744 	.word	0x24001744
 800b210:	240001ec 	.word	0x240001ec
 800b214:	24001720 	.word	0x24001720

0800b218 <ISOUDS_RDDTCValidSubfun>:
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	4603      	mov	r3, r0
 800b220:	71fb      	strb	r3, [r7, #7]
 800b222:	2300      	movs	r3, #0
 800b224:	73bb      	strb	r3, [r7, #14]
 800b226:	2300      	movs	r3, #0
 800b228:	73fb      	strb	r3, [r7, #15]
 800b22a:	e012      	b.n	800b252 <ISOUDS_RDDTCValidSubfun+0x3a>
 800b22c:	7bfa      	ldrb	r2, [r7, #15]
 800b22e:	490f      	ldr	r1, [pc, #60]	; (800b26c <ISOUDS_RDDTCValidSubfun+0x54>)
 800b230:	4613      	mov	r3, r2
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	4413      	add	r3, r2
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	440b      	add	r3, r1
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	79fa      	ldrb	r2, [r7, #7]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d104      	bne.n	800b24c <ISOUDS_RDDTCValidSubfun+0x34>
 800b242:	4a0b      	ldr	r2, [pc, #44]	; (800b270 <ISOUDS_RDDTCValidSubfun+0x58>)
 800b244:	7bfb      	ldrb	r3, [r7, #15]
 800b246:	7013      	strb	r3, [r2, #0]
 800b248:	2301      	movs	r3, #1
 800b24a:	73bb      	strb	r3, [r7, #14]
 800b24c:	7bfb      	ldrb	r3, [r7, #15]
 800b24e:	3301      	adds	r3, #1
 800b250:	73fb      	strb	r3, [r7, #15]
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	2b04      	cmp	r3, #4
 800b256:	d802      	bhi.n	800b25e <ISOUDS_RDDTCValidSubfun+0x46>
 800b258:	7bbb      	ldrb	r3, [r7, #14]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d0e6      	beq.n	800b22c <ISOUDS_RDDTCValidSubfun+0x14>
 800b25e:	7bbb      	ldrb	r3, [r7, #14]
 800b260:	4618      	mov	r0, r3
 800b262:	3714      	adds	r7, #20
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr
 800b26c:	240001ec 	.word	0x240001ec
 800b270:	24001744 	.word	0x24001744

0800b274 <ISOUDS_RdDaByID>:
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
 800b27e:	2300      	movs	r3, #0
 800b280:	817b      	strh	r3, [r7, #10]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	889b      	ldrh	r3, [r3, #4]
 800b286:	2b01      	cmp	r3, #1
 800b288:	f240 8084 	bls.w	800b394 <ISOUDS_RdDaByID+0x120>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	889b      	ldrh	r3, [r3, #4]
 800b290:	3b01      	subs	r3, #1
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	2b00      	cmp	r3, #0
 800b298:	d17c      	bne.n	800b394 <ISOUDS_RdDaByID+0x120>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	889b      	ldrh	r3, [r3, #4]
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	0fda      	lsrs	r2, r3, #31
 800b2a2:	4413      	add	r3, r2
 800b2a4:	105b      	asrs	r3, r3, #1
 800b2a6:	81bb      	strh	r3, [r7, #12]
 800b2a8:	f7f6 fbb3 	bl	8001a12 <ISOUDS_Get_MAXNoOfDIDAllowd>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	89bb      	ldrh	r3, [r7, #12]
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d903      	bls.n	800b2be <ISOUDS_RdDaByID+0x4a>
 800b2b6:	4b45      	ldr	r3, [pc, #276]	; (800b3cc <ISOUDS_RdDaByID+0x158>)
 800b2b8:	2231      	movs	r2, #49	; 0x31
 800b2ba:	701a      	strb	r2, [r3, #0]
 800b2bc:	e06d      	b.n	800b39a <ISOUDS_RdDaByID+0x126>
 800b2be:	2300      	movs	r3, #0
 800b2c0:	81fb      	strh	r3, [r7, #14]
 800b2c2:	e019      	b.n	800b2f8 <ISOUDS_RdDaByID+0x84>
 800b2c4:	89fb      	ldrh	r3, [r7, #14]
 800b2c6:	005b      	lsls	r3, r3, #1
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	021b      	lsls	r3, r3, #8
 800b2d4:	b299      	uxth	r1, r3
 800b2d6:	89fb      	ldrh	r3, [r7, #14]
 800b2d8:	005b      	lsls	r3, r3, #1
 800b2da:	3301      	adds	r3, #1
 800b2dc:	461a      	mov	r2, r3
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	89fb      	ldrh	r3, [r7, #14]
 800b2e8:	440a      	add	r2, r1
 800b2ea:	b291      	uxth	r1, r2
 800b2ec:	4a38      	ldr	r2, [pc, #224]	; (800b3d0 <ISOUDS_RdDaByID+0x15c>)
 800b2ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b2f2:	89fb      	ldrh	r3, [r7, #14]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	81fb      	strh	r3, [r7, #14]
 800b2f8:	89fa      	ldrh	r2, [r7, #14]
 800b2fa:	89bb      	ldrh	r3, [r7, #12]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d3e1      	bcc.n	800b2c4 <ISOUDS_RdDaByID+0x50>
 800b300:	2300      	movs	r3, #0
 800b302:	81fb      	strh	r3, [r7, #14]
 800b304:	e041      	b.n	800b38a <ISOUDS_RdDaByID+0x116>
 800b306:	89fb      	ldrh	r3, [r7, #14]
 800b308:	4a31      	ldr	r2, [pc, #196]	; (800b3d0 <ISOUDS_RdDaByID+0x15c>)
 800b30a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b30e:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 800b312:	d31f      	bcc.n	800b354 <ISOUDS_RdDaByID+0xe0>
 800b314:	89fb      	ldrh	r3, [r7, #14]
 800b316:	4a2e      	ldr	r2, [pc, #184]	; (800b3d0 <ISOUDS_RdDaByID+0x15c>)
 800b318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b31c:	f5b3 4f74 	cmp.w	r3, #62464	; 0xf400
 800b320:	d218      	bcs.n	800b354 <ISOUDS_RdDaByID+0xe0>
 800b322:	89fb      	ldrh	r3, [r7, #14]
 800b324:	4a2a      	ldr	r2, [pc, #168]	; (800b3d0 <ISOUDS_RdDaByID+0x15c>)
 800b326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f002 ff3e 	bl	800e1ac <ISOUDS_DyLookUp>
 800b330:	4603      	mov	r3, r0
 800b332:	2b01      	cmp	r3, #1
 800b334:	d10a      	bne.n	800b34c <ISOUDS_RdDaByID+0xd8>
 800b336:	89fb      	ldrh	r3, [r7, #14]
 800b338:	4a25      	ldr	r2, [pc, #148]	; (800b3d0 <ISOUDS_RdDaByID+0x15c>)
 800b33a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b33e:	f107 020a 	add.w	r2, r7, #10
 800b342:	6839      	ldr	r1, [r7, #0]
 800b344:	4618      	mov	r0, r3
 800b346:	f000 fa25 	bl	800b794 <ISOUDS_ProcessReadDyDID>
 800b34a:	e01b      	b.n	800b384 <ISOUDS_RdDaByID+0x110>
 800b34c:	4b1f      	ldr	r3, [pc, #124]	; (800b3cc <ISOUDS_RdDaByID+0x158>)
 800b34e:	2231      	movs	r2, #49	; 0x31
 800b350:	701a      	strb	r2, [r3, #0]
 800b352:	e017      	b.n	800b384 <ISOUDS_RdDaByID+0x110>
 800b354:	89fb      	ldrh	r3, [r7, #14]
 800b356:	4a1e      	ldr	r2, [pc, #120]	; (800b3d0 <ISOUDS_RdDaByID+0x15c>)
 800b358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f000 f8e5 	bl	800b52c <ISOUDS_RdLookUp>
 800b362:	4603      	mov	r3, r0
 800b364:	2b01      	cmp	r3, #1
 800b366:	d10a      	bne.n	800b37e <ISOUDS_RdDaByID+0x10a>
 800b368:	89fb      	ldrh	r3, [r7, #14]
 800b36a:	4a19      	ldr	r2, [pc, #100]	; (800b3d0 <ISOUDS_RdDaByID+0x15c>)
 800b36c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b370:	f107 020a 	add.w	r2, r7, #10
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	4618      	mov	r0, r3
 800b378:	f000 f97e 	bl	800b678 <ISOUDS_ProcessReadDID>
 800b37c:	e002      	b.n	800b384 <ISOUDS_RdDaByID+0x110>
 800b37e:	4b13      	ldr	r3, [pc, #76]	; (800b3cc <ISOUDS_RdDaByID+0x158>)
 800b380:	2231      	movs	r2, #49	; 0x31
 800b382:	701a      	strb	r2, [r3, #0]
 800b384:	89fb      	ldrh	r3, [r7, #14]
 800b386:	3301      	adds	r3, #1
 800b388:	81fb      	strh	r3, [r7, #14]
 800b38a:	89fa      	ldrh	r2, [r7, #14]
 800b38c:	89bb      	ldrh	r3, [r7, #12]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d3b9      	bcc.n	800b306 <ISOUDS_RdDaByID+0x92>
 800b392:	e002      	b.n	800b39a <ISOUDS_RdDaByID+0x126>
 800b394:	4b0d      	ldr	r3, [pc, #52]	; (800b3cc <ISOUDS_RdDaByID+0x158>)
 800b396:	2213      	movs	r2, #19
 800b398:	701a      	strb	r2, [r3, #0]
 800b39a:	4b0c      	ldr	r3, [pc, #48]	; (800b3cc <ISOUDS_RdDaByID+0x158>)
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d108      	bne.n	800b3b4 <ISOUDS_RdDaByID+0x140>
 800b3a2:	897b      	ldrh	r3, [r7, #10]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	809a      	strh	r2, [r3, #4]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2203      	movs	r2, #3
 800b3b0:	701a      	strb	r2, [r3, #0]
 800b3b2:	e006      	b.n	800b3c2 <ISOUDS_RdDaByID+0x14e>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2204      	movs	r2, #4
 800b3b8:	701a      	strb	r2, [r3, #0]
 800b3ba:	4b04      	ldr	r3, [pc, #16]	; (800b3cc <ISOUDS_RdDaByID+0x158>)
 800b3bc:	781a      	ldrb	r2, [r3, #0]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	709a      	strb	r2, [r3, #2]
 800b3c2:	bf00      	nop
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	24001746 	.word	0x24001746
 800b3d0:	24001350 	.word	0x24001350

0800b3d4 <ISOUDS_RdDidData>:
 800b3d4:	b590      	push	{r4, r7, lr}
 800b3d6:	b087      	sub	sp, #28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	4603      	mov	r3, r0
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	81fb      	strh	r3, [r7, #14]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	881b      	ldrh	r3, [r3, #0]
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	4b4d      	ldr	r3, [pc, #308]	; (800b520 <ISOUDS_RdDidData+0x14c>)
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	4a4d      	ldr	r2, [pc, #308]	; (800b524 <ISOUDS_RdDidData+0x150>)
 800b3ee:	011b      	lsls	r3, r3, #4
 800b3f0:	4413      	add	r3, r2
 800b3f2:	3302      	adds	r3, #2
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	440b      	add	r3, r1
 800b3f8:	1c9c      	adds	r4, r3, #2
 800b3fa:	f7f6 f9a0 	bl	800173e <ISOUDS_GetServerBuffSize>
 800b3fe:	4603      	mov	r3, r0
 800b400:	b29b      	uxth	r3, r3
 800b402:	429c      	cmp	r4, r3
 800b404:	f280 8083 	bge.w	800b50e <ISOUDS_RdDidData+0x13a>
 800b408:	89fb      	ldrh	r3, [r7, #14]
 800b40a:	0a1b      	lsrs	r3, r3, #8
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	881b      	ldrh	r3, [r3, #0]
 800b412:	4619      	mov	r1, r3
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	440b      	add	r3, r1
 800b418:	b2d2      	uxtb	r2, r2
 800b41a:	701a      	strb	r2, [r3, #0]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	881b      	ldrh	r3, [r3, #0]
 800b420:	3301      	adds	r3, #1
 800b422:	b29a      	uxth	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	801a      	strh	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	881b      	ldrh	r3, [r3, #0]
 800b42c:	461a      	mov	r2, r3
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	4413      	add	r3, r2
 800b432:	89fa      	ldrh	r2, [r7, #14]
 800b434:	b2d2      	uxtb	r2, r2
 800b436:	701a      	strb	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	881b      	ldrh	r3, [r3, #0]
 800b43c:	3301      	adds	r3, #1
 800b43e:	b29a      	uxth	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	801a      	strh	r2, [r3, #0]
 800b444:	4b36      	ldr	r3, [pc, #216]	; (800b520 <ISOUDS_RdDidData+0x14c>)
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	4a36      	ldr	r2, [pc, #216]	; (800b524 <ISOUDS_RdDidData+0x150>)
 800b44a:	011b      	lsls	r3, r3, #4
 800b44c:	4413      	add	r3, r2
 800b44e:	3308      	adds	r3, #8
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d028      	beq.n	800b4a8 <ISOUDS_RdDidData+0xd4>
 800b456:	4b32      	ldr	r3, [pc, #200]	; (800b520 <ISOUDS_RdDidData+0x14c>)
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	4a32      	ldr	r2, [pc, #200]	; (800b524 <ISOUDS_RdDidData+0x150>)
 800b45c:	011b      	lsls	r3, r3, #4
 800b45e:	4413      	add	r3, r2
 800b460:	3308      	adds	r3, #8
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	8812      	ldrh	r2, [r2, #0]
 800b468:	4611      	mov	r1, r2
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	1850      	adds	r0, r2, r1
 800b46e:	4a2c      	ldr	r2, [pc, #176]	; (800b520 <ISOUDS_RdDidData+0x14c>)
 800b470:	7812      	ldrb	r2, [r2, #0]
 800b472:	492c      	ldr	r1, [pc, #176]	; (800b524 <ISOUDS_RdDidData+0x150>)
 800b474:	0112      	lsls	r2, r2, #4
 800b476:	440a      	add	r2, r1
 800b478:	3202      	adds	r2, #2
 800b47a:	7812      	ldrb	r2, [r2, #0]
 800b47c:	b292      	uxth	r2, r2
 800b47e:	4611      	mov	r1, r2
 800b480:	4798      	blx	r3
 800b482:	4603      	mov	r3, r0
 800b484:	461a      	mov	r2, r3
 800b486:	4b28      	ldr	r3, [pc, #160]	; (800b528 <ISOUDS_RdDidData+0x154>)
 800b488:	701a      	strb	r2, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	881a      	ldrh	r2, [r3, #0]
 800b48e:	4b24      	ldr	r3, [pc, #144]	; (800b520 <ISOUDS_RdDidData+0x14c>)
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	4924      	ldr	r1, [pc, #144]	; (800b524 <ISOUDS_RdDidData+0x150>)
 800b494:	011b      	lsls	r3, r3, #4
 800b496:	440b      	add	r3, r1
 800b498:	3302      	adds	r3, #2
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	4413      	add	r3, r2
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	801a      	strh	r2, [r3, #0]
 800b4a6:	e035      	b.n	800b514 <ISOUDS_RdDidData+0x140>
 800b4a8:	4b1d      	ldr	r3, [pc, #116]	; (800b520 <ISOUDS_RdDidData+0x14c>)
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	4a1d      	ldr	r2, [pc, #116]	; (800b524 <ISOUDS_RdDidData+0x150>)
 800b4ae:	011b      	lsls	r3, r3, #4
 800b4b0:	4413      	add	r3, r2
 800b4b2:	3304      	adds	r3, #4
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d02c      	beq.n	800b514 <ISOUDS_RdDidData+0x140>
 800b4ba:	4b19      	ldr	r3, [pc, #100]	; (800b520 <ISOUDS_RdDidData+0x14c>)
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	4a19      	ldr	r2, [pc, #100]	; (800b524 <ISOUDS_RdDidData+0x150>)
 800b4c0:	011b      	lsls	r3, r3, #4
 800b4c2:	4413      	add	r3, r2
 800b4c4:	3302      	adds	r3, #2
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	75fb      	strb	r3, [r7, #23]
 800b4ca:	e019      	b.n	800b500 <ISOUDS_RdDidData+0x12c>
 800b4cc:	4b14      	ldr	r3, [pc, #80]	; (800b520 <ISOUDS_RdDidData+0x14c>)
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	4a14      	ldr	r2, [pc, #80]	; (800b524 <ISOUDS_RdDidData+0x150>)
 800b4d2:	011b      	lsls	r3, r3, #4
 800b4d4:	4413      	add	r3, r2
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	7dfb      	ldrb	r3, [r7, #23]
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	441a      	add	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	881b      	ldrh	r3, [r3, #0]
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	440b      	add	r3, r1
 800b4ea:	7812      	ldrb	r2, [r2, #0]
 800b4ec:	701a      	strb	r2, [r3, #0]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	881b      	ldrh	r3, [r3, #0]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	801a      	strh	r2, [r3, #0]
 800b4fa:	7dfb      	ldrb	r3, [r7, #23]
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	75fb      	strb	r3, [r7, #23]
 800b500:	7dfb      	ldrb	r3, [r7, #23]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1e2      	bne.n	800b4cc <ISOUDS_RdDidData+0xf8>
 800b506:	4b08      	ldr	r3, [pc, #32]	; (800b528 <ISOUDS_RdDidData+0x154>)
 800b508:	2200      	movs	r2, #0
 800b50a:	701a      	strb	r2, [r3, #0]
 800b50c:	e002      	b.n	800b514 <ISOUDS_RdDidData+0x140>
 800b50e:	4b06      	ldr	r3, [pc, #24]	; (800b528 <ISOUDS_RdDidData+0x154>)
 800b510:	2231      	movs	r2, #49	; 0x31
 800b512:	701a      	strb	r2, [r3, #0]
 800b514:	4b04      	ldr	r3, [pc, #16]	; (800b528 <ISOUDS_RdDidData+0x154>)
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	4618      	mov	r0, r3
 800b51a:	371c      	adds	r7, #28
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd90      	pop	{r4, r7, pc}
 800b520:	24001745 	.word	0x24001745
 800b524:	080107f8 	.word	0x080107f8
 800b528:	24001746 	.word	0x24001746

0800b52c <ISOUDS_RdLookUp>:
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	4603      	mov	r3, r0
 800b534:	80fb      	strh	r3, [r7, #6]
 800b536:	2300      	movs	r3, #0
 800b538:	73fb      	strb	r3, [r7, #15]
 800b53a:	2300      	movs	r3, #0
 800b53c:	73bb      	strb	r3, [r7, #14]
 800b53e:	e00f      	b.n	800b560 <ISOUDS_RdLookUp+0x34>
 800b540:	7bbb      	ldrb	r3, [r7, #14]
 800b542:	4a0f      	ldr	r2, [pc, #60]	; (800b580 <ISOUDS_RdLookUp+0x54>)
 800b544:	011b      	lsls	r3, r3, #4
 800b546:	4413      	add	r3, r2
 800b548:	881b      	ldrh	r3, [r3, #0]
 800b54a:	88fa      	ldrh	r2, [r7, #6]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d104      	bne.n	800b55a <ISOUDS_RdLookUp+0x2e>
 800b550:	2301      	movs	r3, #1
 800b552:	73fb      	strb	r3, [r7, #15]
 800b554:	4a0b      	ldr	r2, [pc, #44]	; (800b584 <ISOUDS_RdLookUp+0x58>)
 800b556:	7bbb      	ldrb	r3, [r7, #14]
 800b558:	7013      	strb	r3, [r2, #0]
 800b55a:	7bbb      	ldrb	r3, [r7, #14]
 800b55c:	3301      	adds	r3, #1
 800b55e:	73bb      	strb	r3, [r7, #14]
 800b560:	f7f6 fa4f 	bl	8001a02 <ISOUDS_Get_RDCONFTABSIZE>
 800b564:	4603      	mov	r3, r0
 800b566:	b2db      	uxtb	r3, r3
 800b568:	7bba      	ldrb	r2, [r7, #14]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d202      	bcs.n	800b574 <ISOUDS_RdLookUp+0x48>
 800b56e:	7bfb      	ldrb	r3, [r7, #15]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d1e5      	bne.n	800b540 <ISOUDS_RdLookUp+0x14>
 800b574:	7bfb      	ldrb	r3, [r7, #15]
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	080107f8 	.word	0x080107f8
 800b584:	24001745 	.word	0x24001745

0800b588 <ISOUDS_DDDidData_DDDID>:
 800b588:	b590      	push	{r4, r7, lr}
 800b58a:	b087      	sub	sp, #28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	4603      	mov	r3, r0
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
 800b594:	81fb      	strh	r3, [r7, #14]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	881b      	ldrh	r3, [r3, #0]
 800b59a:	4619      	mov	r1, r3
 800b59c:	4b33      	ldr	r3, [pc, #204]	; (800b66c <ISOUDS_DDDidData_DDDID+0xe4>)
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	4a33      	ldr	r2, [pc, #204]	; (800b670 <ISOUDS_DDDidData_DDDID+0xe8>)
 800b5a4:	236c      	movs	r3, #108	; 0x6c
 800b5a6:	fb00 f303 	mul.w	r3, r0, r3
 800b5aa:	4413      	add	r3, r2
 800b5ac:	3302      	adds	r3, #2
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	440b      	add	r3, r1
 800b5b2:	1c9c      	adds	r4, r3, #2
 800b5b4:	f7f6 f8c3 	bl	800173e <ISOUDS_GetServerBuffSize>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	429c      	cmp	r4, r3
 800b5be:	da4c      	bge.n	800b65a <ISOUDS_DDDidData_DDDID+0xd2>
 800b5c0:	89fb      	ldrh	r3, [r7, #14]
 800b5c2:	0a1b      	lsrs	r3, r3, #8
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	881b      	ldrh	r3, [r3, #0]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	440b      	add	r3, r1
 800b5d0:	b2d2      	uxtb	r2, r2
 800b5d2:	701a      	strb	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	b29a      	uxth	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	801a      	strh	r2, [r3, #0]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	881b      	ldrh	r3, [r3, #0]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	89fa      	ldrh	r2, [r7, #14]
 800b5ec:	b2d2      	uxtb	r2, r2
 800b5ee:	701a      	strb	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	801a      	strh	r2, [r3, #0]
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	75fb      	strb	r3, [r7, #23]
 800b600:	e01a      	b.n	800b638 <ISOUDS_DDDidData_DDDID+0xb0>
 800b602:	4b1a      	ldr	r3, [pc, #104]	; (800b66c <ISOUDS_DDDidData_DDDID+0xe4>)
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	461c      	mov	r4, r3
 800b608:	7dfa      	ldrb	r2, [r7, #23]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	4619      	mov	r1, r3
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	440b      	add	r3, r1
 800b614:	4816      	ldr	r0, [pc, #88]	; (800b670 <ISOUDS_DDDidData_DDDID+0xe8>)
 800b616:	216c      	movs	r1, #108	; 0x6c
 800b618:	fb04 f101 	mul.w	r1, r4, r1
 800b61c:	4401      	add	r1, r0
 800b61e:	440a      	add	r2, r1
 800b620:	3203      	adds	r2, #3
 800b622:	7812      	ldrb	r2, [r2, #0]
 800b624:	701a      	strb	r2, [r3, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	881b      	ldrh	r3, [r3, #0]
 800b62a:	3301      	adds	r3, #1
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	801a      	strh	r2, [r3, #0]
 800b632:	7dfb      	ldrb	r3, [r7, #23]
 800b634:	3301      	adds	r3, #1
 800b636:	75fb      	strb	r3, [r7, #23]
 800b638:	4b0c      	ldr	r3, [pc, #48]	; (800b66c <ISOUDS_DDDidData_DDDID+0xe4>)
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	4619      	mov	r1, r3
 800b63e:	4a0c      	ldr	r2, [pc, #48]	; (800b670 <ISOUDS_DDDidData_DDDID+0xe8>)
 800b640:	236c      	movs	r3, #108	; 0x6c
 800b642:	fb01 f303 	mul.w	r3, r1, r3
 800b646:	4413      	add	r3, r2
 800b648:	3302      	adds	r3, #2
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	7dfa      	ldrb	r2, [r7, #23]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d3d7      	bcc.n	800b602 <ISOUDS_DDDidData_DDDID+0x7a>
 800b652:	4b08      	ldr	r3, [pc, #32]	; (800b674 <ISOUDS_DDDidData_DDDID+0xec>)
 800b654:	2200      	movs	r2, #0
 800b656:	701a      	strb	r2, [r3, #0]
 800b658:	e002      	b.n	800b660 <ISOUDS_DDDidData_DDDID+0xd8>
 800b65a:	4b06      	ldr	r3, [pc, #24]	; (800b674 <ISOUDS_DDDidData_DDDID+0xec>)
 800b65c:	2231      	movs	r2, #49	; 0x31
 800b65e:	701a      	strb	r2, [r3, #0]
 800b660:	4b04      	ldr	r3, [pc, #16]	; (800b674 <ISOUDS_DDDidData_DDDID+0xec>)
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	4618      	mov	r0, r3
 800b666:	371c      	adds	r7, #28
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd90      	pop	{r4, r7, pc}
 800b66c:	240017fc 	.word	0x240017fc
 800b670:	240000ac 	.word	0x240000ac
 800b674:	24001747 	.word	0x24001747

0800b678 <ISOUDS_ProcessReadDID>:
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	607a      	str	r2, [r7, #4]
 800b684:	81fb      	strh	r3, [r7, #14]
 800b686:	2300      	movs	r3, #0
 800b688:	74fb      	strb	r3, [r7, #19]
 800b68a:	4b3e      	ldr	r3, [pc, #248]	; (800b784 <ISOUDS_ProcessReadDID+0x10c>)
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	4a3e      	ldr	r2, [pc, #248]	; (800b788 <ISOUDS_ProcessReadDID+0x110>)
 800b690:	011b      	lsls	r3, r3, #4
 800b692:	4413      	add	r3, r2
 800b694:	330c      	adds	r3, #12
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	461a      	mov	r2, r3
 800b69a:	4b3c      	ldr	r3, [pc, #240]	; (800b78c <ISOUDS_ProcessReadDID+0x114>)
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	fa42 f303 	asr.w	r3, r2, r3
 800b6a2:	f003 0301 	and.w	r3, r3, #1
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d063      	beq.n	800b772 <ISOUDS_ProcessReadDID+0xfa>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	75fb      	strb	r3, [r7, #23]
 800b6ae:	4b35      	ldr	r3, [pc, #212]	; (800b784 <ISOUDS_ProcessReadDID+0x10c>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	4a35      	ldr	r2, [pc, #212]	; (800b788 <ISOUDS_ProcessReadDID+0x110>)
 800b6b4:	011b      	lsls	r3, r3, #4
 800b6b6:	4413      	add	r3, r2
 800b6b8:	330d      	adds	r3, #13
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d124      	bne.n	800b70a <ISOUDS_ProcessReadDID+0x92>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	75fb      	strb	r3, [r7, #23]
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	82bb      	strh	r3, [r7, #20]
 800b6c8:	e011      	b.n	800b6ee <ISOUDS_ProcessReadDID+0x76>
 800b6ca:	4b2e      	ldr	r3, [pc, #184]	; (800b784 <ISOUDS_ProcessReadDID+0x10c>)
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	8abb      	ldrh	r3, [r7, #20]
 800b6d2:	492d      	ldr	r1, [pc, #180]	; (800b788 <ISOUDS_ProcessReadDID+0x110>)
 800b6d4:	0112      	lsls	r2, r2, #4
 800b6d6:	440a      	add	r2, r1
 800b6d8:	4413      	add	r3, r2
 800b6da:	330f      	adds	r3, #15
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f001 fae8 	bl	800ccb4 <ISOUDS_GetSAStLevel>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	75fb      	strb	r3, [r7, #23]
 800b6e8:	8abb      	ldrh	r3, [r7, #20]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	82bb      	strh	r3, [r7, #20]
 800b6ee:	4b25      	ldr	r3, [pc, #148]	; (800b784 <ISOUDS_ProcessReadDID+0x10c>)
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	4a25      	ldr	r2, [pc, #148]	; (800b788 <ISOUDS_ProcessReadDID+0x110>)
 800b6f4:	011b      	lsls	r3, r3, #4
 800b6f6:	4413      	add	r3, r2
 800b6f8:	330e      	adds	r3, #14
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	8aba      	ldrh	r2, [r7, #20]
 800b700:	429a      	cmp	r2, r3
 800b702:	d202      	bcs.n	800b70a <ISOUDS_ProcessReadDID+0x92>
 800b704:	7dfb      	ldrb	r3, [r7, #23]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d0df      	beq.n	800b6ca <ISOUDS_ProcessReadDID+0x52>
 800b70a:	7dfb      	ldrb	r3, [r7, #23]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d12c      	bne.n	800b76a <ISOUDS_ProcessReadDID+0xf2>
 800b710:	f7f5 ffe5 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800b714:	4603      	mov	r3, r0
 800b716:	2b01      	cmp	r3, #1
 800b718:	d11a      	bne.n	800b750 <ISOUDS_ProcessReadDID+0xd8>
 800b71a:	f7f5 ffe8 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b01      	cmp	r3, #1
 800b722:	d115      	bne.n	800b750 <ISOUDS_ProcessReadDID+0xd8>
 800b724:	f7f6 f97d 	bl	8001a22 <ISOUDS_CheckPreConditions>
 800b728:	4603      	mov	r3, r0
 800b72a:	74fb      	strb	r3, [r7, #19]
 800b72c:	7cfb      	ldrb	r3, [r7, #19]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d10a      	bne.n	800b748 <ISOUDS_ProcessReadDID+0xd0>
 800b732:	89fb      	ldrh	r3, [r7, #14]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	68b9      	ldr	r1, [r7, #8]
 800b738:	4618      	mov	r0, r3
 800b73a:	f7ff fe4b 	bl	800b3d4 <ISOUDS_RdDidData>
 800b73e:	4603      	mov	r3, r0
 800b740:	461a      	mov	r2, r3
 800b742:	4b13      	ldr	r3, [pc, #76]	; (800b790 <ISOUDS_ProcessReadDID+0x118>)
 800b744:	701a      	strb	r2, [r3, #0]
 800b746:	e018      	b.n	800b77a <ISOUDS_ProcessReadDID+0x102>
 800b748:	4b11      	ldr	r3, [pc, #68]	; (800b790 <ISOUDS_ProcessReadDID+0x118>)
 800b74a:	2222      	movs	r2, #34	; 0x22
 800b74c:	701a      	strb	r2, [r3, #0]
 800b74e:	e014      	b.n	800b77a <ISOUDS_ProcessReadDID+0x102>
 800b750:	f7f5 ffc5 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d103      	bne.n	800b762 <ISOUDS_ProcessReadDID+0xea>
 800b75a:	4b0d      	ldr	r3, [pc, #52]	; (800b790 <ISOUDS_ProcessReadDID+0x118>)
 800b75c:	2288      	movs	r2, #136	; 0x88
 800b75e:	701a      	strb	r2, [r3, #0]
 800b760:	e00b      	b.n	800b77a <ISOUDS_ProcessReadDID+0x102>
 800b762:	4b0b      	ldr	r3, [pc, #44]	; (800b790 <ISOUDS_ProcessReadDID+0x118>)
 800b764:	2283      	movs	r2, #131	; 0x83
 800b766:	701a      	strb	r2, [r3, #0]
 800b768:	e007      	b.n	800b77a <ISOUDS_ProcessReadDID+0x102>
 800b76a:	4b09      	ldr	r3, [pc, #36]	; (800b790 <ISOUDS_ProcessReadDID+0x118>)
 800b76c:	2233      	movs	r2, #51	; 0x33
 800b76e:	701a      	strb	r2, [r3, #0]
 800b770:	e003      	b.n	800b77a <ISOUDS_ProcessReadDID+0x102>
 800b772:	4b07      	ldr	r3, [pc, #28]	; (800b790 <ISOUDS_ProcessReadDID+0x118>)
 800b774:	2231      	movs	r2, #49	; 0x31
 800b776:	701a      	strb	r2, [r3, #0]
 800b778:	e7ff      	b.n	800b77a <ISOUDS_ProcessReadDID+0x102>
 800b77a:	bf00      	nop
 800b77c:	3718      	adds	r7, #24
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	24001745 	.word	0x24001745
 800b788:	080107f8 	.word	0x080107f8
 800b78c:	24001720 	.word	0x24001720
 800b790:	24001746 	.word	0x24001746

0800b794 <ISOUDS_ProcessReadDyDID>:
 800b794:	b580      	push	{r7, lr}
 800b796:	b086      	sub	sp, #24
 800b798:	af00      	add	r7, sp, #0
 800b79a:	4603      	mov	r3, r0
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
 800b7a0:	81fb      	strh	r3, [r7, #14]
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	74fb      	strb	r3, [r7, #19]
 800b7a6:	4b4a      	ldr	r3, [pc, #296]	; (800b8d0 <ISOUDS_ProcessReadDyDID+0x13c>)
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	4a49      	ldr	r2, [pc, #292]	; (800b8d4 <ISOUDS_ProcessReadDyDID+0x140>)
 800b7ae:	236c      	movs	r3, #108	; 0x6c
 800b7b0:	fb01 f303 	mul.w	r3, r1, r3
 800b7b4:	4413      	add	r3, r2
 800b7b6:	3367      	adds	r3, #103	; 0x67
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	4b46      	ldr	r3, [pc, #280]	; (800b8d8 <ISOUDS_ProcessReadDyDID+0x144>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	fa42 f303 	asr.w	r3, r2, r3
 800b7c4:	f003 0301 	and.w	r3, r3, #1
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d078      	beq.n	800b8be <ISOUDS_ProcessReadDyDID+0x12a>
 800b7cc:	4b40      	ldr	r3, [pc, #256]	; (800b8d0 <ISOUDS_ProcessReadDyDID+0x13c>)
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	4a40      	ldr	r2, [pc, #256]	; (800b8d4 <ISOUDS_ProcessReadDyDID+0x140>)
 800b7d4:	236c      	movs	r3, #108	; 0x6c
 800b7d6:	fb01 f303 	mul.w	r3, r1, r3
 800b7da:	4413      	add	r3, r2
 800b7dc:	3302      	adds	r3, #2
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d06c      	beq.n	800b8be <ISOUDS_ProcessReadDyDID+0x12a>
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	75fb      	strb	r3, [r7, #23]
 800b7e8:	4b39      	ldr	r3, [pc, #228]	; (800b8d0 <ISOUDS_ProcessReadDyDID+0x13c>)
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	4a39      	ldr	r2, [pc, #228]	; (800b8d4 <ISOUDS_ProcessReadDyDID+0x140>)
 800b7f0:	236c      	movs	r3, #108	; 0x6c
 800b7f2:	fb01 f303 	mul.w	r3, r1, r3
 800b7f6:	4413      	add	r3, r2
 800b7f8:	3368      	adds	r3, #104	; 0x68
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d129      	bne.n	800b854 <ISOUDS_ProcessReadDyDID+0xc0>
 800b800:	2300      	movs	r3, #0
 800b802:	75fb      	strb	r3, [r7, #23]
 800b804:	2300      	movs	r3, #0
 800b806:	82bb      	strh	r3, [r7, #20]
 800b808:	e013      	b.n	800b832 <ISOUDS_ProcessReadDyDID+0x9e>
 800b80a:	4b31      	ldr	r3, [pc, #196]	; (800b8d0 <ISOUDS_ProcessReadDyDID+0x13c>)
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	4618      	mov	r0, r3
 800b810:	8abb      	ldrh	r3, [r7, #20]
 800b812:	4930      	ldr	r1, [pc, #192]	; (800b8d4 <ISOUDS_ProcessReadDyDID+0x140>)
 800b814:	226c      	movs	r2, #108	; 0x6c
 800b816:	fb00 f202 	mul.w	r2, r0, r2
 800b81a:	440a      	add	r2, r1
 800b81c:	4413      	add	r3, r2
 800b81e:	336a      	adds	r3, #106	; 0x6a
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	4618      	mov	r0, r3
 800b824:	f001 fa46 	bl	800ccb4 <ISOUDS_GetSAStLevel>
 800b828:	4603      	mov	r3, r0
 800b82a:	75fb      	strb	r3, [r7, #23]
 800b82c:	8abb      	ldrh	r3, [r7, #20]
 800b82e:	3301      	adds	r3, #1
 800b830:	82bb      	strh	r3, [r7, #20]
 800b832:	4b27      	ldr	r3, [pc, #156]	; (800b8d0 <ISOUDS_ProcessReadDyDID+0x13c>)
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	4619      	mov	r1, r3
 800b838:	4a26      	ldr	r2, [pc, #152]	; (800b8d4 <ISOUDS_ProcessReadDyDID+0x140>)
 800b83a:	236c      	movs	r3, #108	; 0x6c
 800b83c:	fb01 f303 	mul.w	r3, r1, r3
 800b840:	4413      	add	r3, r2
 800b842:	3369      	adds	r3, #105	; 0x69
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	b29b      	uxth	r3, r3
 800b848:	8aba      	ldrh	r2, [r7, #20]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d202      	bcs.n	800b854 <ISOUDS_ProcessReadDyDID+0xc0>
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d0da      	beq.n	800b80a <ISOUDS_ProcessReadDyDID+0x76>
 800b854:	7dfb      	ldrb	r3, [r7, #23]
 800b856:	2b01      	cmp	r3, #1
 800b858:	d12c      	bne.n	800b8b4 <ISOUDS_ProcessReadDyDID+0x120>
 800b85a:	f7f5 ff40 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d11a      	bne.n	800b89a <ISOUDS_ProcessReadDyDID+0x106>
 800b864:	f7f5 ff43 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d115      	bne.n	800b89a <ISOUDS_ProcessReadDyDID+0x106>
 800b86e:	f7f6 f8d8 	bl	8001a22 <ISOUDS_CheckPreConditions>
 800b872:	4603      	mov	r3, r0
 800b874:	74fb      	strb	r3, [r7, #19]
 800b876:	7cfb      	ldrb	r3, [r7, #19]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d10a      	bne.n	800b892 <ISOUDS_ProcessReadDyDID+0xfe>
 800b87c:	89fb      	ldrh	r3, [r7, #14]
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	68b9      	ldr	r1, [r7, #8]
 800b882:	4618      	mov	r0, r3
 800b884:	f7ff fe80 	bl	800b588 <ISOUDS_DDDidData_DDDID>
 800b888:	4603      	mov	r3, r0
 800b88a:	461a      	mov	r2, r3
 800b88c:	4b13      	ldr	r3, [pc, #76]	; (800b8dc <ISOUDS_ProcessReadDyDID+0x148>)
 800b88e:	701a      	strb	r2, [r3, #0]
 800b890:	e014      	b.n	800b8bc <ISOUDS_ProcessReadDyDID+0x128>
 800b892:	4b12      	ldr	r3, [pc, #72]	; (800b8dc <ISOUDS_ProcessReadDyDID+0x148>)
 800b894:	2222      	movs	r2, #34	; 0x22
 800b896:	701a      	strb	r2, [r3, #0]
 800b898:	e010      	b.n	800b8bc <ISOUDS_ProcessReadDyDID+0x128>
 800b89a:	f7f5 ff20 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d003      	beq.n	800b8ac <ISOUDS_ProcessReadDyDID+0x118>
 800b8a4:	4b0d      	ldr	r3, [pc, #52]	; (800b8dc <ISOUDS_ProcessReadDyDID+0x148>)
 800b8a6:	2288      	movs	r2, #136	; 0x88
 800b8a8:	701a      	strb	r2, [r3, #0]
 800b8aa:	e00c      	b.n	800b8c6 <ISOUDS_ProcessReadDyDID+0x132>
 800b8ac:	4b0b      	ldr	r3, [pc, #44]	; (800b8dc <ISOUDS_ProcessReadDyDID+0x148>)
 800b8ae:	2283      	movs	r2, #131	; 0x83
 800b8b0:	701a      	strb	r2, [r3, #0]
 800b8b2:	e008      	b.n	800b8c6 <ISOUDS_ProcessReadDyDID+0x132>
 800b8b4:	4b09      	ldr	r3, [pc, #36]	; (800b8dc <ISOUDS_ProcessReadDyDID+0x148>)
 800b8b6:	2233      	movs	r2, #51	; 0x33
 800b8b8:	701a      	strb	r2, [r3, #0]
 800b8ba:	e004      	b.n	800b8c6 <ISOUDS_ProcessReadDyDID+0x132>
 800b8bc:	e003      	b.n	800b8c6 <ISOUDS_ProcessReadDyDID+0x132>
 800b8be:	4b07      	ldr	r3, [pc, #28]	; (800b8dc <ISOUDS_ProcessReadDyDID+0x148>)
 800b8c0:	2231      	movs	r2, #49	; 0x31
 800b8c2:	701a      	strb	r2, [r3, #0]
 800b8c4:	bf00      	nop
 800b8c6:	bf00      	nop
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	240017fc 	.word	0x240017fc
 800b8d4:	240000ac 	.word	0x240000ac
 800b8d8:	24001720 	.word	0x24001720
 800b8dc:	24001746 	.word	0x24001746

0800b8e0 <ISOUDS_RdPdIDLookUp>:
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	603a      	str	r2, [r7, #0]
 800b8ea:	71fb      	strb	r3, [r7, #7]
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	71bb      	strb	r3, [r7, #6]
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	73bb      	strb	r3, [r7, #14]
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	73fb      	strb	r3, [r7, #15]
 800b8f8:	e010      	b.n	800b91c <ISOUDS_RdPdIDLookUp+0x3c>
 800b8fa:	79fb      	ldrb	r3, [r7, #7]
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	7bfb      	ldrb	r3, [r7, #15]
 800b900:	490d      	ldr	r1, [pc, #52]	; (800b938 <ISOUDS_RdPdIDLookUp+0x58>)
 800b902:	011b      	lsls	r3, r3, #4
 800b904:	440b      	add	r3, r1
 800b906:	881b      	ldrh	r3, [r3, #0]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d104      	bne.n	800b916 <ISOUDS_RdPdIDLookUp+0x36>
 800b90c:	2301      	movs	r3, #1
 800b90e:	73bb      	strb	r3, [r7, #14]
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	7bfa      	ldrb	r2, [r7, #15]
 800b914:	701a      	strb	r2, [r3, #0]
 800b916:	7bfb      	ldrb	r3, [r7, #15]
 800b918:	3301      	adds	r3, #1
 800b91a:	73fb      	strb	r3, [r7, #15]
 800b91c:	7bfa      	ldrb	r2, [r7, #15]
 800b91e:	79bb      	ldrb	r3, [r7, #6]
 800b920:	429a      	cmp	r2, r3
 800b922:	d202      	bcs.n	800b92a <ISOUDS_RdPdIDLookUp+0x4a>
 800b924:	7bbb      	ldrb	r3, [r7, #14]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d0e7      	beq.n	800b8fa <ISOUDS_RdPdIDLookUp+0x1a>
 800b92a:	7bbb      	ldrb	r3, [r7, #14]
 800b92c:	4618      	mov	r0, r3
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	080108e8 	.word	0x080108e8

0800b93c <ClearPeriodicIdTimeCntr>:
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	4603      	mov	r3, r0
 800b944:	6039      	str	r1, [r7, #0]
 800b946:	80fb      	strh	r3, [r7, #6]
 800b948:	2300      	movs	r3, #0
 800b94a:	72fb      	strb	r3, [r7, #11]
 800b94c:	2300      	movs	r3, #0
 800b94e:	81fb      	strh	r3, [r7, #14]
 800b950:	e053      	b.n	800b9fa <ClearPeriodicIdTimeCntr+0xbe>
 800b952:	89fb      	ldrh	r3, [r7, #14]
 800b954:	3301      	adds	r3, #1
 800b956:	461a      	mov	r2, r3
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	4413      	add	r3, r2
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	737b      	strb	r3, [r7, #13]
 800b960:	f7f6 fc09 	bl	8002176 <ISOUDS_Get_RDPDDIDDACONFTABSIZE>
 800b964:	4603      	mov	r3, r0
 800b966:	b2d9      	uxtb	r1, r3
 800b968:	f107 020b 	add.w	r2, r7, #11
 800b96c:	7b7b      	ldrb	r3, [r7, #13]
 800b96e:	4618      	mov	r0, r3
 800b970:	f7ff ffb6 	bl	800b8e0 <ISOUDS_RdPdIDLookUp>
 800b974:	4603      	mov	r3, r0
 800b976:	733b      	strb	r3, [r7, #12]
 800b978:	7b3b      	ldrb	r3, [r7, #12]
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d13a      	bne.n	800b9f4 <ClearPeriodicIdTimeCntr+0xb8>
 800b97e:	7afb      	ldrb	r3, [r7, #11]
 800b980:	4619      	mov	r1, r3
 800b982:	4a24      	ldr	r2, [pc, #144]	; (800ba14 <ClearPeriodicIdTimeCntr+0xd8>)
 800b984:	460b      	mov	r3, r1
 800b986:	005b      	lsls	r3, r3, #1
 800b988:	440b      	add	r3, r1
 800b98a:	005b      	lsls	r3, r3, #1
 800b98c:	4413      	add	r3, r2
 800b98e:	3305      	adds	r3, #5
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	2b01      	cmp	r3, #1
 800b994:	d12b      	bne.n	800b9ee <ClearPeriodicIdTimeCntr+0xb2>
 800b996:	7afb      	ldrb	r3, [r7, #11]
 800b998:	4619      	mov	r1, r3
 800b99a:	4a1e      	ldr	r2, [pc, #120]	; (800ba14 <ClearPeriodicIdTimeCntr+0xd8>)
 800b99c:	460b      	mov	r3, r1
 800b99e:	005b      	lsls	r3, r3, #1
 800b9a0:	440b      	add	r3, r1
 800b9a2:	005b      	lsls	r3, r3, #1
 800b9a4:	4413      	add	r3, r2
 800b9a6:	3305      	adds	r3, #5
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	701a      	strb	r2, [r3, #0]
 800b9ac:	7afb      	ldrb	r3, [r7, #11]
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	4a18      	ldr	r2, [pc, #96]	; (800ba14 <ClearPeriodicIdTimeCntr+0xd8>)
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	005b      	lsls	r3, r3, #1
 800b9b6:	440b      	add	r3, r1
 800b9b8:	005b      	lsls	r3, r3, #1
 800b9ba:	4413      	add	r3, r2
 800b9bc:	3302      	adds	r3, #2
 800b9be:	2200      	movs	r2, #0
 800b9c0:	801a      	strh	r2, [r3, #0]
 800b9c2:	7afb      	ldrb	r3, [r7, #11]
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	4a13      	ldr	r2, [pc, #76]	; (800ba14 <ClearPeriodicIdTimeCntr+0xd8>)
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	005b      	lsls	r3, r3, #1
 800b9cc:	440b      	add	r3, r1
 800b9ce:	005b      	lsls	r3, r3, #1
 800b9d0:	4413      	add	r3, r2
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	801a      	strh	r2, [r3, #0]
 800b9d6:	7afb      	ldrb	r3, [r7, #11]
 800b9d8:	4619      	mov	r1, r3
 800b9da:	4a0e      	ldr	r2, [pc, #56]	; (800ba14 <ClearPeriodicIdTimeCntr+0xd8>)
 800b9dc:	460b      	mov	r3, r1
 800b9de:	005b      	lsls	r3, r3, #1
 800b9e0:	440b      	add	r3, r1
 800b9e2:	005b      	lsls	r3, r3, #1
 800b9e4:	4413      	add	r3, r2
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	701a      	strb	r2, [r3, #0]
 800b9ec:	e002      	b.n	800b9f4 <ClearPeriodicIdTimeCntr+0xb8>
 800b9ee:	4b0a      	ldr	r3, [pc, #40]	; (800ba18 <ClearPeriodicIdTimeCntr+0xdc>)
 800b9f0:	2231      	movs	r2, #49	; 0x31
 800b9f2:	701a      	strb	r2, [r3, #0]
 800b9f4:	89fb      	ldrh	r3, [r7, #14]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	81fb      	strh	r3, [r7, #14]
 800b9fa:	89fa      	ldrh	r2, [r7, #14]
 800b9fc:	88fb      	ldrh	r3, [r7, #6]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d203      	bcs.n	800ba0a <ClearPeriodicIdTimeCntr+0xce>
 800ba02:	4b05      	ldr	r3, [pc, #20]	; (800ba18 <ClearPeriodicIdTimeCntr+0xdc>)
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	2b03      	cmp	r3, #3
 800ba08:	d0a3      	beq.n	800b952 <ClearPeriodicIdTimeCntr+0x16>
 800ba0a:	bf00      	nop
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	2400174c 	.word	0x2400174c
 800ba18:	24001748 	.word	0x24001748

0800ba1c <ISOUDS_RdPdDaDidData>:
 800ba1c:	b590      	push	{r4, r7, lr}
 800ba1e:	b087      	sub	sp, #28
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	4603      	mov	r3, r0
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	73fb      	strb	r3, [r7, #15]
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	75fb      	strb	r3, [r7, #23]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	881b      	ldrh	r3, [r3, #0]
 800ba32:	4619      	mov	r1, r3
 800ba34:	7bfb      	ldrb	r3, [r7, #15]
 800ba36:	4a31      	ldr	r2, [pc, #196]	; (800bafc <ISOUDS_RdPdDaDidData+0xe0>)
 800ba38:	011b      	lsls	r3, r3, #4
 800ba3a:	4413      	add	r3, r2
 800ba3c:	3302      	adds	r3, #2
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	440b      	add	r3, r1
 800ba42:	1c9c      	adds	r4, r3, #2
 800ba44:	f7f5 fe7b 	bl	800173e <ISOUDS_GetServerBuffSize>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	429c      	cmp	r4, r3
 800ba4e:	d24d      	bcs.n	800baec <ISOUDS_RdPdDaDidData+0xd0>
 800ba50:	7bfa      	ldrb	r2, [r7, #15]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	881b      	ldrh	r3, [r3, #0]
 800ba56:	4619      	mov	r1, r3
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	4419      	add	r1, r3
 800ba5c:	4828      	ldr	r0, [pc, #160]	; (800bb00 <ISOUDS_RdPdDaDidData+0xe4>)
 800ba5e:	4613      	mov	r3, r2
 800ba60:	005b      	lsls	r3, r3, #1
 800ba62:	4413      	add	r3, r2
 800ba64:	005b      	lsls	r3, r3, #1
 800ba66:	4403      	add	r3, r0
 800ba68:	3304      	adds	r3, #4
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	700b      	strb	r3, [r1, #0]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	881b      	ldrh	r3, [r3, #0]
 800ba72:	3301      	adds	r3, #1
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	801a      	strh	r2, [r3, #0]
 800ba7a:	7bfb      	ldrb	r3, [r7, #15]
 800ba7c:	4a1f      	ldr	r2, [pc, #124]	; (800bafc <ISOUDS_RdPdDaDidData+0xe0>)
 800ba7e:	011b      	lsls	r3, r3, #4
 800ba80:	4413      	add	r3, r2
 800ba82:	3308      	adds	r3, #8
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d02c      	beq.n	800bae4 <ISOUDS_RdPdDaDidData+0xc8>
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
 800ba8c:	4a1b      	ldr	r2, [pc, #108]	; (800bafc <ISOUDS_RdPdDaDidData+0xe0>)
 800ba8e:	011b      	lsls	r3, r3, #4
 800ba90:	4413      	add	r3, r2
 800ba92:	3308      	adds	r3, #8
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	8812      	ldrh	r2, [r2, #0]
 800ba9a:	4611      	mov	r1, r2
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	1850      	adds	r0, r2, r1
 800baa0:	7bfa      	ldrb	r2, [r7, #15]
 800baa2:	4916      	ldr	r1, [pc, #88]	; (800bafc <ISOUDS_RdPdDaDidData+0xe0>)
 800baa4:	0112      	lsls	r2, r2, #4
 800baa6:	440a      	add	r2, r1
 800baa8:	3202      	adds	r2, #2
 800baaa:	7812      	ldrb	r2, [r2, #0]
 800baac:	b292      	uxth	r2, r2
 800baae:	4611      	mov	r1, r2
 800bab0:	4798      	blx	r3
 800bab2:	4603      	mov	r3, r0
 800bab4:	75fb      	strb	r3, [r7, #23]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	881a      	ldrh	r2, [r3, #0]
 800baba:	7bfb      	ldrb	r3, [r7, #15]
 800babc:	490f      	ldr	r1, [pc, #60]	; (800bafc <ISOUDS_RdPdDaDidData+0xe0>)
 800babe:	011b      	lsls	r3, r3, #4
 800bac0:	440b      	add	r3, r1
 800bac2:	3302      	adds	r3, #2
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	4413      	add	r3, r2
 800baca:	b29a      	uxth	r2, r3
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	801a      	strh	r2, [r3, #0]
 800bad0:	7dfb      	ldrb	r3, [r7, #23]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d102      	bne.n	800badc <ISOUDS_RdPdDaDidData+0xc0>
 800bad6:	2301      	movs	r3, #1
 800bad8:	75fb      	strb	r3, [r7, #23]
 800bada:	e00a      	b.n	800baf2 <ISOUDS_RdPdDaDidData+0xd6>
 800badc:	4b09      	ldr	r3, [pc, #36]	; (800bb04 <ISOUDS_RdPdDaDidData+0xe8>)
 800bade:	2222      	movs	r2, #34	; 0x22
 800bae0:	701a      	strb	r2, [r3, #0]
 800bae2:	e006      	b.n	800baf2 <ISOUDS_RdPdDaDidData+0xd6>
 800bae4:	4b07      	ldr	r3, [pc, #28]	; (800bb04 <ISOUDS_RdPdDaDidData+0xe8>)
 800bae6:	2231      	movs	r2, #49	; 0x31
 800bae8:	701a      	strb	r2, [r3, #0]
 800baea:	e002      	b.n	800baf2 <ISOUDS_RdPdDaDidData+0xd6>
 800baec:	4b05      	ldr	r3, [pc, #20]	; (800bb04 <ISOUDS_RdPdDaDidData+0xe8>)
 800baee:	2231      	movs	r2, #49	; 0x31
 800baf0:	701a      	strb	r2, [r3, #0]
 800baf2:	7dfb      	ldrb	r3, [r7, #23]
 800baf4:	4618      	mov	r0, r3
 800baf6:	371c      	adds	r7, #28
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd90      	pop	{r4, r7, pc}
 800bafc:	080108e8 	.word	0x080108e8
 800bb00:	2400174c 	.word	0x2400174c
 800bb04:	24001748 	.word	0x24001748

0800bb08 <ISOUDS_RdDataPeriodicDIDMainFunction>:
 800bb08:	b590      	push	{r4, r7, lr}
 800bb0a:	b083      	sub	sp, #12
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	2300      	movs	r3, #0
 800bb10:	71bb      	strb	r3, [r7, #6]
 800bb12:	2300      	movs	r3, #0
 800bb14:	807b      	strh	r3, [r7, #2]
 800bb16:	2300      	movs	r3, #0
 800bb18:	71fb      	strb	r3, [r7, #7]
 800bb1a:	e05d      	b.n	800bbd8 <ISOUDS_RdDataPeriodicDIDMainFunction+0xd0>
 800bb1c:	79fa      	ldrb	r2, [r7, #7]
 800bb1e:	4936      	ldr	r1, [pc, #216]	; (800bbf8 <ISOUDS_RdDataPeriodicDIDMainFunction+0xf0>)
 800bb20:	4613      	mov	r3, r2
 800bb22:	005b      	lsls	r3, r3, #1
 800bb24:	4413      	add	r3, r2
 800bb26:	005b      	lsls	r3, r3, #1
 800bb28:	440b      	add	r3, r1
 800bb2a:	3302      	adds	r3, #2
 800bb2c:	8819      	ldrh	r1, [r3, #0]
 800bb2e:	79fa      	ldrb	r2, [r7, #7]
 800bb30:	4831      	ldr	r0, [pc, #196]	; (800bbf8 <ISOUDS_RdDataPeriodicDIDMainFunction+0xf0>)
 800bb32:	4613      	mov	r3, r2
 800bb34:	005b      	lsls	r3, r3, #1
 800bb36:	4413      	add	r3, r2
 800bb38:	005b      	lsls	r3, r3, #1
 800bb3a:	4403      	add	r3, r0
 800bb3c:	881b      	ldrh	r3, [r3, #0]
 800bb3e:	4299      	cmp	r1, r3
 800bb40:	d226      	bcs.n	800bb90 <ISOUDS_RdDataPeriodicDIDMainFunction+0x88>
 800bb42:	f7ff fa8d 	bl	800b060 <ISOUDS_GetUDSStat>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d142      	bne.n	800bbd2 <ISOUDS_RdDataPeriodicDIDMainFunction+0xca>
 800bb4c:	1cba      	adds	r2, r7, #2
 800bb4e:	79fb      	ldrb	r3, [r7, #7]
 800bb50:	492a      	ldr	r1, [pc, #168]	; (800bbfc <ISOUDS_RdDataPeriodicDIDMainFunction+0xf4>)
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7ff ff62 	bl	800ba1c <ISOUDS_RdPdDaDidData>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	71bb      	strb	r3, [r7, #6]
 800bb5c:	79bb      	ldrb	r3, [r7, #6]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d112      	bne.n	800bb88 <ISOUDS_RdDataPeriodicDIDMainFunction+0x80>
 800bb62:	887b      	ldrh	r3, [r7, #2]
 800bb64:	80bb      	strh	r3, [r7, #4]
 800bb66:	f7f5 fd9d 	bl	80016a4 <ISOUDS_SrvSetPrdDatByIDCANid>
 800bb6a:	88bb      	ldrh	r3, [r7, #4]
 800bb6c:	4923      	ldr	r1, [pc, #140]	; (800bbfc <ISOUDS_RdDataPeriodicDIDMainFunction+0xf4>)
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7f5 fd9f 	bl	80016b2 <ISOUDS_ServerTxRequest>
 800bb74:	79fa      	ldrb	r2, [r7, #7]
 800bb76:	4920      	ldr	r1, [pc, #128]	; (800bbf8 <ISOUDS_RdDataPeriodicDIDMainFunction+0xf0>)
 800bb78:	4613      	mov	r3, r2
 800bb7a:	005b      	lsls	r3, r3, #1
 800bb7c:	4413      	add	r3, r2
 800bb7e:	005b      	lsls	r3, r3, #1
 800bb80:	440b      	add	r3, r1
 800bb82:	2200      	movs	r2, #0
 800bb84:	801a      	strh	r2, [r3, #0]
 800bb86:	e024      	b.n	800bbd2 <ISOUDS_RdDataPeriodicDIDMainFunction+0xca>
 800bb88:	4b1d      	ldr	r3, [pc, #116]	; (800bc00 <ISOUDS_RdDataPeriodicDIDMainFunction+0xf8>)
 800bb8a:	2222      	movs	r2, #34	; 0x22
 800bb8c:	701a      	strb	r2, [r3, #0]
 800bb8e:	e020      	b.n	800bbd2 <ISOUDS_RdDataPeriodicDIDMainFunction+0xca>
 800bb90:	79fa      	ldrb	r2, [r7, #7]
 800bb92:	4919      	ldr	r1, [pc, #100]	; (800bbf8 <ISOUDS_RdDataPeriodicDIDMainFunction+0xf0>)
 800bb94:	4613      	mov	r3, r2
 800bb96:	005b      	lsls	r3, r3, #1
 800bb98:	4413      	add	r3, r2
 800bb9a:	005b      	lsls	r3, r3, #1
 800bb9c:	440b      	add	r3, r1
 800bb9e:	3305      	adds	r3, #5
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d115      	bne.n	800bbd2 <ISOUDS_RdDataPeriodicDIDMainFunction+0xca>
 800bba6:	f7f5 fdba 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800bbaa:	79fa      	ldrb	r2, [r7, #7]
 800bbac:	4912      	ldr	r1, [pc, #72]	; (800bbf8 <ISOUDS_RdDataPeriodicDIDMainFunction+0xf0>)
 800bbae:	4613      	mov	r3, r2
 800bbb0:	005b      	lsls	r3, r3, #1
 800bbb2:	4413      	add	r3, r2
 800bbb4:	005b      	lsls	r3, r3, #1
 800bbb6:	440b      	add	r3, r1
 800bbb8:	8819      	ldrh	r1, [r3, #0]
 800bbba:	b283      	uxth	r3, r0
 800bbbc:	79fa      	ldrb	r2, [r7, #7]
 800bbbe:	440b      	add	r3, r1
 800bbc0:	b298      	uxth	r0, r3
 800bbc2:	490d      	ldr	r1, [pc, #52]	; (800bbf8 <ISOUDS_RdDataPeriodicDIDMainFunction+0xf0>)
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	005b      	lsls	r3, r3, #1
 800bbc8:	4413      	add	r3, r2
 800bbca:	005b      	lsls	r3, r3, #1
 800bbcc:	440b      	add	r3, r1
 800bbce:	4602      	mov	r2, r0
 800bbd0:	801a      	strh	r2, [r3, #0]
 800bbd2:	79fb      	ldrb	r3, [r7, #7]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	71fb      	strb	r3, [r7, #7]
 800bbd8:	79fb      	ldrb	r3, [r7, #7]
 800bbda:	b29c      	uxth	r4, r3
 800bbdc:	f7f6 facb 	bl	8002176 <ISOUDS_Get_RDPDDIDDACONFTABSIZE>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	429c      	cmp	r4, r3
 800bbe4:	d203      	bcs.n	800bbee <ISOUDS_RdDataPeriodicDIDMainFunction+0xe6>
 800bbe6:	4b07      	ldr	r3, [pc, #28]	; (800bc04 <ISOUDS_RdDataPeriodicDIDMainFunction+0xfc>)
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d096      	beq.n	800bb1c <ISOUDS_RdDataPeriodicDIDMainFunction+0x14>
 800bbee:	bf00      	nop
 800bbf0:	370c      	adds	r7, #12
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd90      	pop	{r4, r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	2400174c 	.word	0x2400174c
 800bbfc:	2400176c 	.word	0x2400176c
 800bc00:	24001748 	.word	0x24001748
 800bc04:	24001728 	.word	0x24001728

0800bc08 <ISOUDS_RdDaByPdID>:
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
 800bc12:	4b97      	ldr	r3, [pc, #604]	; (800be70 <ISOUDS_RdDaByPdID+0x268>)
 800bc14:	2203      	movs	r2, #3
 800bc16:	701a      	strb	r2, [r3, #0]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f000 8123 	beq.w	800be66 <ISOUDS_RdDaByPdID+0x25e>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	889b      	ldrh	r3, [r3, #4]
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	f240 80e0 	bls.w	800bdea <ISOUDS_RdDaByPdID+0x1e2>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	889b      	ldrh	r3, [r3, #4]
 800bc2e:	3b02      	subs	r3, #2
 800bc30:	81fb      	strh	r3, [r7, #14]
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	2b04      	cmp	r3, #4
 800bc38:	d81f      	bhi.n	800bc7a <ISOUDS_RdDaByPdID+0x72>
 800bc3a:	a201      	add	r2, pc, #4	; (adr r2, 800bc40 <ISOUDS_RdDaByPdID+0x38>)
 800bc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc40:	0800bc55 	.word	0x0800bc55
 800bc44:	0800bc5b 	.word	0x0800bc5b
 800bc48:	0800bc63 	.word	0x0800bc63
 800bc4c:	0800bc69 	.word	0x0800bc69
 800bc50:	0800bc6f 	.word	0x0800bc6f
 800bc54:	2300      	movs	r3, #0
 800bc56:	82bb      	strh	r3, [r7, #20]
 800bc58:	e013      	b.n	800bc82 <ISOUDS_RdDaByPdID+0x7a>
 800bc5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc5e:	82bb      	strh	r3, [r7, #20]
 800bc60:	e00f      	b.n	800bc82 <ISOUDS_RdDaByPdID+0x7a>
 800bc62:	2364      	movs	r3, #100	; 0x64
 800bc64:	82bb      	strh	r3, [r7, #20]
 800bc66:	e00c      	b.n	800bc82 <ISOUDS_RdDaByPdID+0x7a>
 800bc68:	230a      	movs	r3, #10
 800bc6a:	82bb      	strh	r3, [r7, #20]
 800bc6c:	e009      	b.n	800bc82 <ISOUDS_RdDaByPdID+0x7a>
 800bc6e:	89fb      	ldrh	r3, [r7, #14]
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7ff fe62 	bl	800b93c <ClearPeriodicIdTimeCntr>
 800bc78:	e003      	b.n	800bc82 <ISOUDS_RdDaByPdID+0x7a>
 800bc7a:	4b7d      	ldr	r3, [pc, #500]	; (800be70 <ISOUDS_RdDaByPdID+0x268>)
 800bc7c:	2231      	movs	r2, #49	; 0x31
 800bc7e:	701a      	strb	r2, [r3, #0]
 800bc80:	bf00      	nop
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	2b04      	cmp	r3, #4
 800bc88:	f000 80db 	beq.w	800be42 <ISOUDS_RdDaByPdID+0x23a>
 800bc8c:	4b78      	ldr	r3, [pc, #480]	; (800be70 <ISOUDS_RdDaByPdID+0x268>)
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	2b03      	cmp	r3, #3
 800bc92:	f040 80d6 	bne.w	800be42 <ISOUDS_RdDaByPdID+0x23a>
 800bc96:	f7f6 fa6e 	bl	8002176 <ISOUDS_Get_RDPDDIDDACONFTABSIZE>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	89fb      	ldrh	r3, [r7, #14]
 800bca0:	4293      	cmp	r3, r2
 800bca2:	f200 809e 	bhi.w	800bde2 <ISOUDS_RdDaByPdID+0x1da>
 800bca6:	2300      	movs	r3, #0
 800bca8:	75fb      	strb	r3, [r7, #23]
 800bcaa:	e08f      	b.n	800bdcc <ISOUDS_RdDaByPdID+0x1c4>
 800bcac:	7dfb      	ldrb	r3, [r7, #23]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	737b      	strb	r3, [r7, #13]
 800bcba:	f7f6 fa5c 	bl	8002176 <ISOUDS_Get_RDPDDIDDACONFTABSIZE>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	b2d9      	uxtb	r1, r3
 800bcc2:	f107 020c 	add.w	r2, r7, #12
 800bcc6:	7b7b      	ldrb	r3, [r7, #13]
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7ff fe09 	bl	800b8e0 <ISOUDS_RdPdIDLookUp>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d175      	bne.n	800bdc0 <ISOUDS_RdDaByPdID+0x1b8>
 800bcd4:	7b3b      	ldrb	r3, [r7, #12]
 800bcd6:	4a67      	ldr	r2, [pc, #412]	; (800be74 <ISOUDS_RdDaByPdID+0x26c>)
 800bcd8:	011b      	lsls	r3, r3, #4
 800bcda:	4413      	add	r3, r2
 800bcdc:	330c      	adds	r3, #12
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	461a      	mov	r2, r3
 800bce2:	4b65      	ldr	r3, [pc, #404]	; (800be78 <ISOUDS_RdDaByPdID+0x270>)
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	fa42 f303 	asr.w	r3, r2, r3
 800bcea:	f003 0301 	and.w	r3, r3, #1
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d062      	beq.n	800bdb8 <ISOUDS_RdDaByPdID+0x1b0>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	74bb      	strb	r3, [r7, #18]
 800bcf6:	7b3b      	ldrb	r3, [r7, #12]
 800bcf8:	4a5e      	ldr	r2, [pc, #376]	; (800be74 <ISOUDS_RdDaByPdID+0x26c>)
 800bcfa:	011b      	lsls	r3, r3, #4
 800bcfc:	4413      	add	r3, r2
 800bcfe:	330d      	adds	r3, #13
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d122      	bne.n	800bd4c <ISOUDS_RdDaByPdID+0x144>
 800bd06:	2300      	movs	r3, #0
 800bd08:	74bb      	strb	r3, [r7, #18]
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	823b      	strh	r3, [r7, #16]
 800bd0e:	e010      	b.n	800bd32 <ISOUDS_RdDaByPdID+0x12a>
 800bd10:	7b3b      	ldrb	r3, [r7, #12]
 800bd12:	461a      	mov	r2, r3
 800bd14:	8a3b      	ldrh	r3, [r7, #16]
 800bd16:	4957      	ldr	r1, [pc, #348]	; (800be74 <ISOUDS_RdDaByPdID+0x26c>)
 800bd18:	0112      	lsls	r2, r2, #4
 800bd1a:	440a      	add	r2, r1
 800bd1c:	4413      	add	r3, r2
 800bd1e:	330f      	adds	r3, #15
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f000 ffc6 	bl	800ccb4 <ISOUDS_GetSAStLevel>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	74bb      	strb	r3, [r7, #18]
 800bd2c:	8a3b      	ldrh	r3, [r7, #16]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	823b      	strh	r3, [r7, #16]
 800bd32:	7b3b      	ldrb	r3, [r7, #12]
 800bd34:	4a4f      	ldr	r2, [pc, #316]	; (800be74 <ISOUDS_RdDaByPdID+0x26c>)
 800bd36:	011b      	lsls	r3, r3, #4
 800bd38:	4413      	add	r3, r2
 800bd3a:	330e      	adds	r3, #14
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	8a3a      	ldrh	r2, [r7, #16]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d202      	bcs.n	800bd4c <ISOUDS_RdDaByPdID+0x144>
 800bd46:	7cbb      	ldrb	r3, [r7, #18]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d0e1      	beq.n	800bd10 <ISOUDS_RdDaByPdID+0x108>
 800bd4c:	7cbb      	ldrb	r3, [r7, #18]
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d12e      	bne.n	800bdb0 <ISOUDS_RdDaByPdID+0x1a8>
 800bd52:	7b3b      	ldrb	r3, [r7, #12]
 800bd54:	4619      	mov	r1, r3
 800bd56:	4a49      	ldr	r2, [pc, #292]	; (800be7c <ISOUDS_RdDaByPdID+0x274>)
 800bd58:	460b      	mov	r3, r1
 800bd5a:	005b      	lsls	r3, r3, #1
 800bd5c:	440b      	add	r3, r1
 800bd5e:	005b      	lsls	r3, r3, #1
 800bd60:	4413      	add	r3, r2
 800bd62:	3304      	adds	r3, #4
 800bd64:	7b7a      	ldrb	r2, [r7, #13]
 800bd66:	701a      	strb	r2, [r3, #0]
 800bd68:	7b3b      	ldrb	r3, [r7, #12]
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	4a43      	ldr	r2, [pc, #268]	; (800be7c <ISOUDS_RdDaByPdID+0x274>)
 800bd6e:	460b      	mov	r3, r1
 800bd70:	005b      	lsls	r3, r3, #1
 800bd72:	440b      	add	r3, r1
 800bd74:	005b      	lsls	r3, r3, #1
 800bd76:	4413      	add	r3, r2
 800bd78:	3302      	adds	r3, #2
 800bd7a:	881b      	ldrh	r3, [r3, #0]
 800bd7c:	8aba      	ldrh	r2, [r7, #20]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d021      	beq.n	800bdc6 <ISOUDS_RdDaByPdID+0x1be>
 800bd82:	7b3b      	ldrb	r3, [r7, #12]
 800bd84:	4619      	mov	r1, r3
 800bd86:	4a3d      	ldr	r2, [pc, #244]	; (800be7c <ISOUDS_RdDaByPdID+0x274>)
 800bd88:	460b      	mov	r3, r1
 800bd8a:	005b      	lsls	r3, r3, #1
 800bd8c:	440b      	add	r3, r1
 800bd8e:	005b      	lsls	r3, r3, #1
 800bd90:	4413      	add	r3, r2
 800bd92:	3302      	adds	r3, #2
 800bd94:	8aba      	ldrh	r2, [r7, #20]
 800bd96:	801a      	strh	r2, [r3, #0]
 800bd98:	7b3b      	ldrb	r3, [r7, #12]
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	4a37      	ldr	r2, [pc, #220]	; (800be7c <ISOUDS_RdDaByPdID+0x274>)
 800bd9e:	460b      	mov	r3, r1
 800bda0:	005b      	lsls	r3, r3, #1
 800bda2:	440b      	add	r3, r1
 800bda4:	005b      	lsls	r3, r3, #1
 800bda6:	4413      	add	r3, r2
 800bda8:	3305      	adds	r3, #5
 800bdaa:	2201      	movs	r2, #1
 800bdac:	701a      	strb	r2, [r3, #0]
 800bdae:	e00a      	b.n	800bdc6 <ISOUDS_RdDaByPdID+0x1be>
 800bdb0:	4b2f      	ldr	r3, [pc, #188]	; (800be70 <ISOUDS_RdDaByPdID+0x268>)
 800bdb2:	2233      	movs	r2, #51	; 0x33
 800bdb4:	701a      	strb	r2, [r3, #0]
 800bdb6:	e006      	b.n	800bdc6 <ISOUDS_RdDaByPdID+0x1be>
 800bdb8:	4b2d      	ldr	r3, [pc, #180]	; (800be70 <ISOUDS_RdDaByPdID+0x268>)
 800bdba:	227e      	movs	r2, #126	; 0x7e
 800bdbc:	701a      	strb	r2, [r3, #0]
 800bdbe:	e002      	b.n	800bdc6 <ISOUDS_RdDaByPdID+0x1be>
 800bdc0:	4b2b      	ldr	r3, [pc, #172]	; (800be70 <ISOUDS_RdDaByPdID+0x268>)
 800bdc2:	2231      	movs	r2, #49	; 0x31
 800bdc4:	701a      	strb	r2, [r3, #0]
 800bdc6:	7dfb      	ldrb	r3, [r7, #23]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	75fb      	strb	r3, [r7, #23]
 800bdcc:	7dfb      	ldrb	r3, [r7, #23]
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	89fa      	ldrh	r2, [r7, #14]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d935      	bls.n	800be42 <ISOUDS_RdDaByPdID+0x23a>
 800bdd6:	4b26      	ldr	r3, [pc, #152]	; (800be70 <ISOUDS_RdDaByPdID+0x268>)
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	f43f af66 	beq.w	800bcac <ISOUDS_RdDaByPdID+0xa4>
 800bde0:	e02f      	b.n	800be42 <ISOUDS_RdDaByPdID+0x23a>
 800bde2:	4b23      	ldr	r3, [pc, #140]	; (800be70 <ISOUDS_RdDaByPdID+0x268>)
 800bde4:	2231      	movs	r2, #49	; 0x31
 800bde6:	701a      	strb	r2, [r3, #0]
 800bde8:	e02b      	b.n	800be42 <ISOUDS_RdDaByPdID+0x23a>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	889b      	ldrh	r3, [r3, #4]
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	d124      	bne.n	800be3c <ISOUDS_RdDaByPdID+0x234>
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	2b04      	cmp	r3, #4
 800bdf8:	d120      	bne.n	800be3c <ISOUDS_RdDaByPdID+0x234>
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	74fb      	strb	r3, [r7, #19]
 800bdfe:	e016      	b.n	800be2e <ISOUDS_RdDaByPdID+0x226>
 800be00:	7cfa      	ldrb	r2, [r7, #19]
 800be02:	491e      	ldr	r1, [pc, #120]	; (800be7c <ISOUDS_RdDaByPdID+0x274>)
 800be04:	4613      	mov	r3, r2
 800be06:	005b      	lsls	r3, r3, #1
 800be08:	4413      	add	r3, r2
 800be0a:	005b      	lsls	r3, r3, #1
 800be0c:	440b      	add	r3, r1
 800be0e:	3302      	adds	r3, #2
 800be10:	2200      	movs	r2, #0
 800be12:	801a      	strh	r2, [r3, #0]
 800be14:	7cfa      	ldrb	r2, [r7, #19]
 800be16:	4919      	ldr	r1, [pc, #100]	; (800be7c <ISOUDS_RdDaByPdID+0x274>)
 800be18:	4613      	mov	r3, r2
 800be1a:	005b      	lsls	r3, r3, #1
 800be1c:	4413      	add	r3, r2
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	440b      	add	r3, r1
 800be22:	3305      	adds	r3, #5
 800be24:	2200      	movs	r2, #0
 800be26:	701a      	strb	r2, [r3, #0]
 800be28:	7cfb      	ldrb	r3, [r7, #19]
 800be2a:	3301      	adds	r3, #1
 800be2c:	74fb      	strb	r3, [r7, #19]
 800be2e:	7cfb      	ldrb	r3, [r7, #19]
 800be30:	2b04      	cmp	r3, #4
 800be32:	d9e5      	bls.n	800be00 <ISOUDS_RdDaByPdID+0x1f8>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2201      	movs	r2, #1
 800be38:	809a      	strh	r2, [r3, #4]
 800be3a:	e002      	b.n	800be42 <ISOUDS_RdDaByPdID+0x23a>
 800be3c:	4b0c      	ldr	r3, [pc, #48]	; (800be70 <ISOUDS_RdDaByPdID+0x268>)
 800be3e:	2213      	movs	r2, #19
 800be40:	701a      	strb	r2, [r3, #0]
 800be42:	4b0b      	ldr	r3, [pc, #44]	; (800be70 <ISOUDS_RdDaByPdID+0x268>)
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	2b03      	cmp	r3, #3
 800be48:	d106      	bne.n	800be58 <ISOUDS_RdDaByPdID+0x250>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2201      	movs	r2, #1
 800be4e:	809a      	strh	r2, [r3, #4]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2203      	movs	r2, #3
 800be54:	701a      	strb	r2, [r3, #0]
 800be56:	e006      	b.n	800be66 <ISOUDS_RdDaByPdID+0x25e>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2204      	movs	r2, #4
 800be5c:	701a      	strb	r2, [r3, #0]
 800be5e:	4b04      	ldr	r3, [pc, #16]	; (800be70 <ISOUDS_RdDaByPdID+0x268>)
 800be60:	781a      	ldrb	r2, [r3, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	709a      	strb	r2, [r3, #2]
 800be66:	bf00      	nop
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	24001748 	.word	0x24001748
 800be74:	080108e8 	.word	0x080108e8
 800be78:	24001720 	.word	0x24001720
 800be7c:	2400174c 	.word	0x2400174c

0800be80 <ISOUDS_RdMemByAddr>:
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f000 80fc 	beq.w	800c08a <ISOUDS_RdMemByAddr+0x20a>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	2b02      	cmp	r3, #2
 800be98:	f040 80cf 	bne.w	800c03a <ISOUDS_RdMemByAddr+0x1ba>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	889b      	ldrh	r3, [r3, #4]
 800bea0:	2b03      	cmp	r3, #3
 800bea2:	f240 80c3 	bls.w	800c02c <ISOUDS_RdMemByAddr+0x1ac>
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	f003 030f 	and.w	r3, r3, #15
 800beae:	72bb      	strb	r3, [r7, #10]
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	091b      	lsrs	r3, r3, #4
 800beb6:	727b      	strb	r3, [r7, #9]
 800beb8:	7abb      	ldrb	r3, [r7, #10]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f000 80af 	beq.w	800c01e <ISOUDS_RdMemByAddr+0x19e>
 800bec0:	7a7b      	ldrb	r3, [r7, #9]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 80ab 	beq.w	800c01e <ISOUDS_RdMemByAddr+0x19e>
 800bec8:	7aba      	ldrb	r2, [r7, #10]
 800beca:	7a7b      	ldrb	r3, [r7, #9]
 800becc:	429a      	cmp	r2, r3
 800bece:	f0c0 80a6 	bcc.w	800c01e <ISOUDS_RdMemByAddr+0x19e>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	889b      	ldrh	r3, [r3, #4]
 800bed6:	4619      	mov	r1, r3
 800bed8:	7aba      	ldrb	r2, [r7, #10]
 800beda:	7a7b      	ldrb	r3, [r7, #9]
 800bedc:	4413      	add	r3, r2
 800bede:	3302      	adds	r3, #2
 800bee0:	4299      	cmp	r1, r3
 800bee2:	f040 8095 	bne.w	800c010 <ISOUDS_RdMemByAddr+0x190>
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	1c5a      	adds	r2, r3, #1
 800beea:	7a79      	ldrb	r1, [r7, #9]
 800beec:	7abb      	ldrb	r3, [r7, #10]
 800beee:	4618      	mov	r0, r3
 800bef0:	f000 f8da 	bl	800c0a8 <ISOUDS_AddLenthLookUpTbl>
 800bef4:	4603      	mov	r3, r0
 800bef6:	723b      	strb	r3, [r7, #8]
 800bef8:	7a3b      	ldrb	r3, [r7, #8]
 800befa:	2b01      	cmp	r3, #1
 800befc:	f040 8081 	bne.w	800c002 <ISOUDS_RdMemByAddr+0x182>
 800bf00:	4b64      	ldr	r3, [pc, #400]	; (800c094 <ISOUDS_RdMemByAddr+0x214>)
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	4964      	ldr	r1, [pc, #400]	; (800c098 <ISOUDS_RdMemByAddr+0x218>)
 800bf06:	4613      	mov	r3, r2
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	4413      	add	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	440b      	add	r3, r1
 800bf10:	330c      	adds	r3, #12
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	461a      	mov	r2, r3
 800bf16:	4b61      	ldr	r3, [pc, #388]	; (800c09c <ISOUDS_RdMemByAddr+0x21c>)
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	fa42 f303 	asr.w	r3, r2, r3
 800bf1e:	f003 0301 	and.w	r3, r3, #1
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d066      	beq.n	800bff4 <ISOUDS_RdMemByAddr+0x174>
 800bf26:	2301      	movs	r3, #1
 800bf28:	73fb      	strb	r3, [r7, #15]
 800bf2a:	4b5a      	ldr	r3, [pc, #360]	; (800c094 <ISOUDS_RdMemByAddr+0x214>)
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	495a      	ldr	r1, [pc, #360]	; (800c098 <ISOUDS_RdMemByAddr+0x218>)
 800bf30:	4613      	mov	r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4413      	add	r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	440b      	add	r3, r1
 800bf3a:	330d      	adds	r3, #13
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d129      	bne.n	800bf96 <ISOUDS_RdMemByAddr+0x116>
 800bf42:	2300      	movs	r3, #0
 800bf44:	73fb      	strb	r3, [r7, #15]
 800bf46:	2300      	movs	r3, #0
 800bf48:	81bb      	strh	r3, [r7, #12]
 800bf4a:	e013      	b.n	800bf74 <ISOUDS_RdMemByAddr+0xf4>
 800bf4c:	4b51      	ldr	r3, [pc, #324]	; (800c094 <ISOUDS_RdMemByAddr+0x214>)
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	89b9      	ldrh	r1, [r7, #12]
 800bf52:	4851      	ldr	r0, [pc, #324]	; (800c098 <ISOUDS_RdMemByAddr+0x218>)
 800bf54:	4613      	mov	r3, r2
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	4413      	add	r3, r2
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	4403      	add	r3, r0
 800bf5e:	440b      	add	r3, r1
 800bf60:	330f      	adds	r3, #15
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	4618      	mov	r0, r3
 800bf66:	f000 fea5 	bl	800ccb4 <ISOUDS_GetSAStLevel>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	73fb      	strb	r3, [r7, #15]
 800bf6e:	89bb      	ldrh	r3, [r7, #12]
 800bf70:	3301      	adds	r3, #1
 800bf72:	81bb      	strh	r3, [r7, #12]
 800bf74:	4b47      	ldr	r3, [pc, #284]	; (800c094 <ISOUDS_RdMemByAddr+0x214>)
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	4947      	ldr	r1, [pc, #284]	; (800c098 <ISOUDS_RdMemByAddr+0x218>)
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	4413      	add	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	440b      	add	r3, r1
 800bf84:	330e      	adds	r3, #14
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	89ba      	ldrh	r2, [r7, #12]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d202      	bcs.n	800bf96 <ISOUDS_RdMemByAddr+0x116>
 800bf90:	7bfb      	ldrb	r3, [r7, #15]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d0da      	beq.n	800bf4c <ISOUDS_RdMemByAddr+0xcc>
 800bf96:	7bfb      	ldrb	r3, [r7, #15]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d124      	bne.n	800bfe6 <ISOUDS_RdMemByAddr+0x166>
 800bf9c:	4b3d      	ldr	r3, [pc, #244]	; (800c094 <ISOUDS_RdMemByAddr+0x214>)
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	493d      	ldr	r1, [pc, #244]	; (800c098 <ISOUDS_RdMemByAddr+0x218>)
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	4413      	add	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	440b      	add	r3, r1
 800bfac:	3310      	adds	r3, #16
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a3b      	ldr	r2, [pc, #236]	; (800c0a0 <ISOUDS_RdMemByAddr+0x220>)
 800bfb2:	6810      	ldr	r0, [r2, #0]
 800bfb4:	4a3b      	ldr	r2, [pc, #236]	; (800c0a4 <ISOUDS_RdMemByAddr+0x224>)
 800bfb6:	6811      	ldr	r1, [r2, #0]
 800bfb8:	683a      	ldr	r2, [r7, #0]
 800bfba:	3201      	adds	r2, #1
 800bfbc:	4798      	blx	r3
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	72fb      	strb	r3, [r7, #11]
 800bfc2:	7afb      	ldrb	r3, [r7, #11]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d10a      	bne.n	800bfde <ISOUDS_RdMemByAddr+0x15e>
 800bfc8:	4b36      	ldr	r3, [pc, #216]	; (800c0a4 <ISOUDS_RdMemByAddr+0x224>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	3301      	adds	r3, #1
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	809a      	strh	r2, [r3, #4]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2203      	movs	r2, #3
 800bfda:	701a      	strb	r2, [r3, #0]
 800bfdc:	e055      	b.n	800c08a <ISOUDS_RdMemByAddr+0x20a>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	7afa      	ldrb	r2, [r7, #11]
 800bfe2:	709a      	strb	r2, [r3, #2]
 800bfe4:	e051      	b.n	800c08a <ISOUDS_RdMemByAddr+0x20a>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2204      	movs	r2, #4
 800bfea:	701a      	strb	r2, [r3, #0]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2233      	movs	r2, #51	; 0x33
 800bff0:	709a      	strb	r2, [r3, #2]
 800bff2:	e04a      	b.n	800c08a <ISOUDS_RdMemByAddr+0x20a>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2204      	movs	r2, #4
 800bff8:	701a      	strb	r2, [r3, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2231      	movs	r2, #49	; 0x31
 800bffe:	709a      	strb	r2, [r3, #2]
 800c000:	e043      	b.n	800c08a <ISOUDS_RdMemByAddr+0x20a>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2204      	movs	r2, #4
 800c006:	701a      	strb	r2, [r3, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2231      	movs	r2, #49	; 0x31
 800c00c:	709a      	strb	r2, [r3, #2]
 800c00e:	e03c      	b.n	800c08a <ISOUDS_RdMemByAddr+0x20a>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2204      	movs	r2, #4
 800c014:	701a      	strb	r2, [r3, #0]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2213      	movs	r2, #19
 800c01a:	709a      	strb	r2, [r3, #2]
 800c01c:	e035      	b.n	800c08a <ISOUDS_RdMemByAddr+0x20a>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2204      	movs	r2, #4
 800c022:	701a      	strb	r2, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2231      	movs	r2, #49	; 0x31
 800c028:	709a      	strb	r2, [r3, #2]
 800c02a:	e02e      	b.n	800c08a <ISOUDS_RdMemByAddr+0x20a>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2204      	movs	r2, #4
 800c030:	701a      	strb	r2, [r3, #0]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2213      	movs	r2, #19
 800c036:	709a      	strb	r2, [r3, #2]
 800c038:	e027      	b.n	800c08a <ISOUDS_RdMemByAddr+0x20a>
 800c03a:	4b16      	ldr	r3, [pc, #88]	; (800c094 <ISOUDS_RdMemByAddr+0x214>)
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	4916      	ldr	r1, [pc, #88]	; (800c098 <ISOUDS_RdMemByAddr+0x218>)
 800c040:	4613      	mov	r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	4413      	add	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	440b      	add	r3, r1
 800c04a:	3310      	adds	r3, #16
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4a14      	ldr	r2, [pc, #80]	; (800c0a0 <ISOUDS_RdMemByAddr+0x220>)
 800c050:	6810      	ldr	r0, [r2, #0]
 800c052:	4a14      	ldr	r2, [pc, #80]	; (800c0a4 <ISOUDS_RdMemByAddr+0x224>)
 800c054:	6811      	ldr	r1, [r2, #0]
 800c056:	683a      	ldr	r2, [r7, #0]
 800c058:	3201      	adds	r2, #1
 800c05a:	4798      	blx	r3
 800c05c:	4603      	mov	r3, r0
 800c05e:	72fb      	strb	r3, [r7, #11]
 800c060:	7afb      	ldrb	r3, [r7, #11]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10a      	bne.n	800c07c <ISOUDS_RdMemByAddr+0x1fc>
 800c066:	4b0f      	ldr	r3, [pc, #60]	; (800c0a4 <ISOUDS_RdMemByAddr+0x224>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	3301      	adds	r3, #1
 800c06e:	b29a      	uxth	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	809a      	strh	r2, [r3, #4]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2203      	movs	r2, #3
 800c078:	701a      	strb	r2, [r3, #0]
 800c07a:	e006      	b.n	800c08a <ISOUDS_RdMemByAddr+0x20a>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2204      	movs	r2, #4
 800c080:	701a      	strb	r2, [r3, #0]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	7afa      	ldrb	r2, [r7, #11]
 800c086:	709a      	strb	r2, [r3, #2]
 800c088:	e7ff      	b.n	800c08a <ISOUDS_RdMemByAddr+0x20a>
 800c08a:	bf00      	nop
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	24001788 	.word	0x24001788
 800c098:	08010938 	.word	0x08010938
 800c09c:	24001720 	.word	0x24001720
 800c0a0:	24001780 	.word	0x24001780
 800c0a4:	24001784 	.word	0x24001784

0800c0a8 <ISOUDS_AddLenthLookUpTbl>:
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	603a      	str	r2, [r7, #0]
 800c0b2:	71fb      	strb	r3, [r7, #7]
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	71bb      	strb	r3, [r7, #6]
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	757b      	strb	r3, [r7, #21]
 800c0bc:	2300      	movs	r3, #0
 800c0be:	82fb      	strh	r3, [r7, #22]
 800c0c0:	e087      	b.n	800c1d2 <ISOUDS_AddLenthLookUpTbl+0x12a>
 800c0c2:	8afa      	ldrh	r2, [r7, #22]
 800c0c4:	494b      	ldr	r1, [pc, #300]	; (800c1f4 <ISOUDS_AddLenthLookUpTbl+0x14c>)
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	440b      	add	r3, r1
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	79fa      	ldrb	r2, [r7, #7]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d179      	bne.n	800c1cc <ISOUDS_AddLenthLookUpTbl+0x124>
 800c0d8:	8afa      	ldrh	r2, [r7, #22]
 800c0da:	4946      	ldr	r1, [pc, #280]	; (800c1f4 <ISOUDS_AddLenthLookUpTbl+0x14c>)
 800c0dc:	4613      	mov	r3, r2
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	440b      	add	r3, r1
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	79ba      	ldrb	r2, [r7, #6]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d16d      	bne.n	800c1cc <ISOUDS_AddLenthLookUpTbl+0x124>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	613b      	str	r3, [r7, #16]
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	60fb      	str	r3, [r7, #12]
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	753b      	strb	r3, [r7, #20]
 800c0fc:	e014      	b.n	800c128 <ISOUDS_AddLenthLookUpTbl+0x80>
 800c0fe:	79fa      	ldrb	r2, [r7, #7]
 800c100:	7d3b      	ldrb	r3, [r7, #20]
 800c102:	1ad3      	subs	r3, r2, r3
 800c104:	b2db      	uxtb	r3, r3
 800c106:	3b01      	subs	r3, #1
 800c108:	72fb      	strb	r3, [r7, #11]
 800c10a:	7d3b      	ldrb	r3, [r7, #20]
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	4413      	add	r3, r2
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	461a      	mov	r2, r3
 800c114:	7afb      	ldrb	r3, [r7, #11]
 800c116:	00db      	lsls	r3, r3, #3
 800c118:	fa02 f303 	lsl.w	r3, r2, r3
 800c11c:	693a      	ldr	r2, [r7, #16]
 800c11e:	4313      	orrs	r3, r2
 800c120:	613b      	str	r3, [r7, #16]
 800c122:	7d3b      	ldrb	r3, [r7, #20]
 800c124:	3301      	adds	r3, #1
 800c126:	753b      	strb	r3, [r7, #20]
 800c128:	7d3a      	ldrb	r2, [r7, #20]
 800c12a:	79fb      	ldrb	r3, [r7, #7]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d3e6      	bcc.n	800c0fe <ISOUDS_AddLenthLookUpTbl+0x56>
 800c130:	2300      	movs	r3, #0
 800c132:	753b      	strb	r3, [r7, #20]
 800c134:	e017      	b.n	800c166 <ISOUDS_AddLenthLookUpTbl+0xbe>
 800c136:	79ba      	ldrb	r2, [r7, #6]
 800c138:	7d3b      	ldrb	r3, [r7, #20]
 800c13a:	1ad3      	subs	r3, r2, r3
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	3b01      	subs	r3, #1
 800c140:	72fb      	strb	r3, [r7, #11]
 800c142:	79fa      	ldrb	r2, [r7, #7]
 800c144:	7d3b      	ldrb	r3, [r7, #20]
 800c146:	4413      	add	r3, r2
 800c148:	461a      	mov	r2, r3
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	4413      	add	r3, r2
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	461a      	mov	r2, r3
 800c152:	7afb      	ldrb	r3, [r7, #11]
 800c154:	00db      	lsls	r3, r3, #3
 800c156:	fa02 f303 	lsl.w	r3, r2, r3
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]
 800c160:	7d3b      	ldrb	r3, [r7, #20]
 800c162:	3301      	adds	r3, #1
 800c164:	753b      	strb	r3, [r7, #20]
 800c166:	7d3a      	ldrb	r2, [r7, #20]
 800c168:	79bb      	ldrb	r3, [r7, #6]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d3e3      	bcc.n	800c136 <ISOUDS_AddLenthLookUpTbl+0x8e>
 800c16e:	8afa      	ldrh	r2, [r7, #22]
 800c170:	4920      	ldr	r1, [pc, #128]	; (800c1f4 <ISOUDS_AddLenthLookUpTbl+0x14c>)
 800c172:	4613      	mov	r3, r2
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	4413      	add	r3, r2
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	440b      	add	r3, r1
 800c17c:	3304      	adds	r3, #4
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	429a      	cmp	r2, r3
 800c184:	d322      	bcc.n	800c1cc <ISOUDS_AddLenthLookUpTbl+0x124>
 800c186:	8afa      	ldrh	r2, [r7, #22]
 800c188:	491a      	ldr	r1, [pc, #104]	; (800c1f4 <ISOUDS_AddLenthLookUpTbl+0x14c>)
 800c18a:	4613      	mov	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4413      	add	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	440b      	add	r3, r1
 800c194:	3304      	adds	r3, #4
 800c196:	6819      	ldr	r1, [r3, #0]
 800c198:	8afa      	ldrh	r2, [r7, #22]
 800c19a:	4816      	ldr	r0, [pc, #88]	; (800c1f4 <ISOUDS_AddLenthLookUpTbl+0x14c>)
 800c19c:	4613      	mov	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	4413      	add	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4403      	add	r3, r0
 800c1a6:	3308      	adds	r3, #8
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	18ca      	adds	r2, r1, r3
 800c1ac:	6939      	ldr	r1, [r7, #16]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	440b      	add	r3, r1
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d30a      	bcc.n	800c1cc <ISOUDS_AddLenthLookUpTbl+0x124>
 800c1b6:	4a10      	ldr	r2, [pc, #64]	; (800c1f8 <ISOUDS_AddLenthLookUpTbl+0x150>)
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	6013      	str	r3, [r2, #0]
 800c1bc:	4a0f      	ldr	r2, [pc, #60]	; (800c1fc <ISOUDS_AddLenthLookUpTbl+0x154>)
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	6013      	str	r3, [r2, #0]
 800c1c2:	8afb      	ldrh	r3, [r7, #22]
 800c1c4:	4a0e      	ldr	r2, [pc, #56]	; (800c200 <ISOUDS_AddLenthLookUpTbl+0x158>)
 800c1c6:	6013      	str	r3, [r2, #0]
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	757b      	strb	r3, [r7, #21]
 800c1cc:	8afb      	ldrh	r3, [r7, #22]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	82fb      	strh	r3, [r7, #22]
 800c1d2:	f7f6 f887 	bl	80022e4 <ISOUDS_Get_RdMemByAddMaxentries>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	461a      	mov	r2, r3
 800c1da:	8afb      	ldrh	r3, [r7, #22]
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d203      	bcs.n	800c1e8 <ISOUDS_AddLenthLookUpTbl+0x140>
 800c1e0:	7d7b      	ldrb	r3, [r7, #21]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f43f af6d 	beq.w	800c0c2 <ISOUDS_AddLenthLookUpTbl+0x1a>
 800c1e8:	7d7b      	ldrb	r3, [r7, #21]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3718      	adds	r7, #24
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	08010938 	.word	0x08010938
 800c1f8:	24001780 	.word	0x24001780
 800c1fc:	24001784 	.word	0x24001784
 800c200:	24001788 	.word	0x24001788

0800c204 <ISOUDS_ReqDwnld>:
 800c204:	b580      	push	{r7, lr}
 800c206:	b086      	sub	sp, #24
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
 800c20e:	2300      	movs	r3, #0
 800c210:	74fb      	strb	r3, [r7, #19]
 800c212:	2300      	movs	r3, #0
 800c214:	74bb      	strb	r3, [r7, #18]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f000 80f4 	beq.w	800c406 <ISOUDS_ReqDwnld+0x202>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2204      	movs	r2, #4
 800c222:	701a      	strb	r2, [r3, #0]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	889b      	ldrh	r3, [r3, #4]
 800c228:	2b03      	cmp	r3, #3
 800c22a:	f240 80e9 	bls.w	800c400 <ISOUDS_ReqDwnld+0x1fc>
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	3301      	adds	r3, #1
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	f003 030f 	and.w	r3, r3, #15
 800c238:	b2da      	uxtb	r2, r3
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	3301      	adds	r3, #1
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	091b      	lsrs	r3, r3, #4
 800c242:	b2db      	uxtb	r3, r3
 800c244:	4413      	add	r3, r2
 800c246:	747b      	strb	r3, [r7, #17]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	889a      	ldrh	r2, [r3, #4]
 800c24c:	7c7b      	ldrb	r3, [r7, #17]
 800c24e:	b29b      	uxth	r3, r3
 800c250:	3303      	adds	r3, #3
 800c252:	b29b      	uxth	r3, r3
 800c254:	429a      	cmp	r2, r3
 800c256:	f040 80cf 	bne.w	800c3f8 <ISOUDS_ReqDwnld+0x1f4>
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	3301      	adds	r3, #1
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	f003 030f 	and.w	r3, r3, #15
 800c264:	b2da      	uxtb	r2, r3
 800c266:	4b6a      	ldr	r3, [pc, #424]	; (800c410 <ISOUDS_ReqDwnld+0x20c>)
 800c268:	701a      	strb	r2, [r3, #0]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	3301      	adds	r3, #1
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	091b      	lsrs	r3, r3, #4
 800c272:	b2da      	uxtb	r2, r3
 800c274:	4b67      	ldr	r3, [pc, #412]	; (800c414 <ISOUDS_ReqDwnld+0x210>)
 800c276:	701a      	strb	r2, [r3, #0]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	743b      	strb	r3, [r7, #16]
 800c27e:	4b64      	ldr	r3, [pc, #400]	; (800c410 <ISOUDS_ReqDwnld+0x20c>)
 800c280:	7819      	ldrb	r1, [r3, #0]
 800c282:	4b64      	ldr	r3, [pc, #400]	; (800c414 <ISOUDS_ReqDwnld+0x210>)
 800c284:	781a      	ldrb	r2, [r3, #0]
 800c286:	7c3b      	ldrb	r3, [r7, #16]
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 f941 	bl	800c510 <ISOUDS_ReqDownldValidParams>
 800c28e:	4603      	mov	r3, r0
 800c290:	73fb      	strb	r3, [r7, #15]
 800c292:	7bfb      	ldrb	r3, [r7, #15]
 800c294:	2b01      	cmp	r3, #1
 800c296:	f040 80ab 	bne.w	800c3f0 <ISOUDS_ReqDwnld+0x1ec>
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	3302      	adds	r3, #2
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 f8c4 	bl	800c42c <ISOUDS_ReqDownloadValidateInfo>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	74fb      	strb	r3, [r7, #19]
 800c2a8:	7cfb      	ldrb	r3, [r7, #19]
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	f040 809c 	bne.w	800c3e8 <ISOUDS_ReqDwnld+0x1e4>
 800c2b0:	4b59      	ldr	r3, [pc, #356]	; (800c418 <ISOUDS_ReqDwnld+0x214>)
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	4a59      	ldr	r2, [pc, #356]	; (800c41c <ISOUDS_ReqDwnld+0x218>)
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	005b      	lsls	r3, r3, #1
 800c2bc:	440b      	add	r3, r1
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4413      	add	r3, r2
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	4b55      	ldr	r3, [pc, #340]	; (800c420 <ISOUDS_ReqDwnld+0x21c>)
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	fa42 f303 	asr.w	r3, r2, r3
 800c2d0:	f003 0301 	and.w	r3, r3, #1
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f000 8083 	beq.w	800c3e0 <ISOUDS_ReqDwnld+0x1dc>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	75fb      	strb	r3, [r7, #23]
 800c2de:	4b4e      	ldr	r3, [pc, #312]	; (800c418 <ISOUDS_ReqDwnld+0x214>)
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	4a4d      	ldr	r2, [pc, #308]	; (800c41c <ISOUDS_ReqDwnld+0x218>)
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	440b      	add	r3, r1
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	4413      	add	r3, r2
 800c2f0:	3305      	adds	r3, #5
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d12b      	bne.n	800c350 <ISOUDS_ReqDwnld+0x14c>
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	75fb      	strb	r3, [r7, #23]
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	82bb      	strh	r3, [r7, #20]
 800c300:	e014      	b.n	800c32c <ISOUDS_ReqDwnld+0x128>
 800c302:	4b45      	ldr	r3, [pc, #276]	; (800c418 <ISOUDS_ReqDwnld+0x214>)
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	4618      	mov	r0, r3
 800c308:	8aba      	ldrh	r2, [r7, #20]
 800c30a:	4944      	ldr	r1, [pc, #272]	; (800c41c <ISOUDS_ReqDwnld+0x218>)
 800c30c:	4603      	mov	r3, r0
 800c30e:	005b      	lsls	r3, r3, #1
 800c310:	4403      	add	r3, r0
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	440b      	add	r3, r1
 800c316:	4413      	add	r3, r2
 800c318:	3307      	adds	r3, #7
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f000 fcc9 	bl	800ccb4 <ISOUDS_GetSAStLevel>
 800c322:	4603      	mov	r3, r0
 800c324:	75fb      	strb	r3, [r7, #23]
 800c326:	8abb      	ldrh	r3, [r7, #20]
 800c328:	3301      	adds	r3, #1
 800c32a:	82bb      	strh	r3, [r7, #20]
 800c32c:	4b3a      	ldr	r3, [pc, #232]	; (800c418 <ISOUDS_ReqDwnld+0x214>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	4619      	mov	r1, r3
 800c332:	4a3a      	ldr	r2, [pc, #232]	; (800c41c <ISOUDS_ReqDwnld+0x218>)
 800c334:	460b      	mov	r3, r1
 800c336:	005b      	lsls	r3, r3, #1
 800c338:	440b      	add	r3, r1
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4413      	add	r3, r2
 800c33e:	3306      	adds	r3, #6
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	b29b      	uxth	r3, r3
 800c344:	8aba      	ldrh	r2, [r7, #20]
 800c346:	429a      	cmp	r2, r3
 800c348:	d202      	bcs.n	800c350 <ISOUDS_ReqDwnld+0x14c>
 800c34a:	7dfb      	ldrb	r3, [r7, #23]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d0d8      	beq.n	800c302 <ISOUDS_ReqDwnld+0xfe>
 800c350:	7dfb      	ldrb	r3, [r7, #23]
 800c352:	2b01      	cmp	r3, #1
 800c354:	d140      	bne.n	800c3d8 <ISOUDS_ReqDwnld+0x1d4>
 800c356:	f001 fb05 	bl	800d964 <ISOUDS_ChkTrnsfrExit>
 800c35a:	4603      	mov	r3, r0
 800c35c:	74bb      	strb	r3, [r7, #18]
 800c35e:	7cbb      	ldrb	r3, [r7, #18]
 800c360:	2b01      	cmp	r3, #1
 800c362:	d135      	bne.n	800c3d0 <ISOUDS_ReqDwnld+0x1cc>
 800c364:	4b2f      	ldr	r3, [pc, #188]	; (800c424 <ISOUDS_ReqDwnld+0x220>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a2f      	ldr	r2, [pc, #188]	; (800c428 <ISOUDS_ReqDwnld+0x224>)
 800c36a:	6811      	ldr	r1, [r2, #0]
 800c36c:	2201      	movs	r2, #1
 800c36e:	4618      	mov	r0, r3
 800c370:	f001 faa0 	bl	800d8b4 <ISOUDS_ReqTrnsfrDa>
 800c374:	4603      	mov	r3, r0
 800c376:	73bb      	strb	r3, [r7, #14]
 800c378:	7bbb      	ldrb	r3, [r7, #14]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d124      	bne.n	800c3c8 <ISOUDS_ReqDwnld+0x1c4>
 800c37e:	f7f5 f9ae 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800c382:	4603      	mov	r3, r0
 800c384:	2b01      	cmp	r3, #1
 800c386:	d11b      	bne.n	800c3c0 <ISOUDS_ReqDwnld+0x1bc>
 800c388:	f7f5 f9b1 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d116      	bne.n	800c3c0 <ISOUDS_ReqDwnld+0x1bc>
 800c392:	f7f5 f9b4 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 800c396:	4603      	mov	r3, r0
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d111      	bne.n	800c3c0 <ISOUDS_ReqDwnld+0x1bc>
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	2220      	movs	r2, #32
 800c3a0:	701a      	strb	r2, [r3, #0]
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	701a      	strb	r2, [r3, #0]
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	3302      	adds	r3, #2
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	701a      	strb	r2, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2204      	movs	r2, #4
 800c3b6:	809a      	strh	r2, [r3, #4]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2203      	movs	r2, #3
 800c3bc:	701a      	strb	r2, [r3, #0]
 800c3be:	e022      	b.n	800c406 <ISOUDS_ReqDwnld+0x202>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2222      	movs	r2, #34	; 0x22
 800c3c4:	709a      	strb	r2, [r3, #2]
 800c3c6:	e01e      	b.n	800c406 <ISOUDS_ReqDwnld+0x202>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2222      	movs	r2, #34	; 0x22
 800c3cc:	709a      	strb	r2, [r3, #2]
 800c3ce:	e01a      	b.n	800c406 <ISOUDS_ReqDwnld+0x202>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2270      	movs	r2, #112	; 0x70
 800c3d4:	709a      	strb	r2, [r3, #2]
 800c3d6:	e016      	b.n	800c406 <ISOUDS_ReqDwnld+0x202>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2233      	movs	r2, #51	; 0x33
 800c3dc:	709a      	strb	r2, [r3, #2]
 800c3de:	e012      	b.n	800c406 <ISOUDS_ReqDwnld+0x202>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	227e      	movs	r2, #126	; 0x7e
 800c3e4:	709a      	strb	r2, [r3, #2]
 800c3e6:	e00e      	b.n	800c406 <ISOUDS_ReqDwnld+0x202>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2231      	movs	r2, #49	; 0x31
 800c3ec:	709a      	strb	r2, [r3, #2]
 800c3ee:	e00a      	b.n	800c406 <ISOUDS_ReqDwnld+0x202>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2231      	movs	r2, #49	; 0x31
 800c3f4:	709a      	strb	r2, [r3, #2]
 800c3f6:	e006      	b.n	800c406 <ISOUDS_ReqDwnld+0x202>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2213      	movs	r2, #19
 800c3fc:	709a      	strb	r2, [r3, #2]
 800c3fe:	e002      	b.n	800c406 <ISOUDS_ReqDwnld+0x202>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2213      	movs	r2, #19
 800c404:	709a      	strb	r2, [r3, #2]
 800c406:	bf00      	nop
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	24001794 	.word	0x24001794
 800c414:	24001795 	.word	0x24001795
 800c418:	24001796 	.word	0x24001796
 800c41c:	0801094c 	.word	0x0801094c
 800c420:	24001720 	.word	0x24001720
 800c424:	2400178c 	.word	0x2400178c
 800c428:	24001790 	.word	0x24001790

0800c42c <ISOUDS_ReqDownloadValidateInfo>:
 800c42c:	b480      	push	{r7}
 800c42e:	b087      	sub	sp, #28
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	2300      	movs	r3, #0
 800c436:	73fb      	strb	r3, [r7, #15]
 800c438:	4b31      	ldr	r3, [pc, #196]	; (800c500 <ISOUDS_ReqDownloadValidateInfo+0xd4>)
 800c43a:	2200      	movs	r2, #0
 800c43c:	601a      	str	r2, [r3, #0]
 800c43e:	4b31      	ldr	r3, [pc, #196]	; (800c504 <ISOUDS_ReqDownloadValidateInfo+0xd8>)
 800c440:	2200      	movs	r2, #0
 800c442:	601a      	str	r2, [r3, #0]
 800c444:	2300      	movs	r3, #0
 800c446:	75fb      	strb	r3, [r7, #23]
 800c448:	e016      	b.n	800c478 <ISOUDS_ReqDownloadValidateInfo+0x4c>
 800c44a:	4b2f      	ldr	r3, [pc, #188]	; (800c508 <ISOUDS_ReqDownloadValidateInfo+0xdc>)
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	461a      	mov	r2, r3
 800c450:	7dfb      	ldrb	r3, [r7, #23]
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	3b01      	subs	r3, #1
 800c456:	613b      	str	r3, [r7, #16]
 800c458:	7dfb      	ldrb	r3, [r7, #23]
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	4413      	add	r3, r2
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	461a      	mov	r2, r3
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	00db      	lsls	r3, r3, #3
 800c466:	409a      	lsls	r2, r3
 800c468:	4b25      	ldr	r3, [pc, #148]	; (800c500 <ISOUDS_ReqDownloadValidateInfo+0xd4>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4313      	orrs	r3, r2
 800c46e:	4a24      	ldr	r2, [pc, #144]	; (800c500 <ISOUDS_ReqDownloadValidateInfo+0xd4>)
 800c470:	6013      	str	r3, [r2, #0]
 800c472:	7dfb      	ldrb	r3, [r7, #23]
 800c474:	3301      	adds	r3, #1
 800c476:	75fb      	strb	r3, [r7, #23]
 800c478:	4b23      	ldr	r3, [pc, #140]	; (800c508 <ISOUDS_ReqDownloadValidateInfo+0xdc>)
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	7dfa      	ldrb	r2, [r7, #23]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d3e3      	bcc.n	800c44a <ISOUDS_ReqDownloadValidateInfo+0x1e>
 800c482:	4b20      	ldr	r3, [pc, #128]	; (800c504 <ISOUDS_ReqDownloadValidateInfo+0xd8>)
 800c484:	2200      	movs	r2, #0
 800c486:	601a      	str	r2, [r3, #0]
 800c488:	2300      	movs	r3, #0
 800c48a:	75fb      	strb	r3, [r7, #23]
 800c48c:	e01b      	b.n	800c4c6 <ISOUDS_ReqDownloadValidateInfo+0x9a>
 800c48e:	4b1f      	ldr	r3, [pc, #124]	; (800c50c <ISOUDS_ReqDownloadValidateInfo+0xe0>)
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	461a      	mov	r2, r3
 800c494:	7dfb      	ldrb	r3, [r7, #23]
 800c496:	1ad3      	subs	r3, r2, r3
 800c498:	3b01      	subs	r3, #1
 800c49a:	613b      	str	r3, [r7, #16]
 800c49c:	4b1a      	ldr	r3, [pc, #104]	; (800c508 <ISOUDS_ReqDownloadValidateInfo+0xdc>)
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	7dfb      	ldrb	r3, [r7, #23]
 800c4a4:	4413      	add	r3, r2
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	00db      	lsls	r3, r3, #3
 800c4b4:	409a      	lsls	r2, r3
 800c4b6:	4b13      	ldr	r3, [pc, #76]	; (800c504 <ISOUDS_ReqDownloadValidateInfo+0xd8>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	4a11      	ldr	r2, [pc, #68]	; (800c504 <ISOUDS_ReqDownloadValidateInfo+0xd8>)
 800c4be:	6013      	str	r3, [r2, #0]
 800c4c0:	7dfb      	ldrb	r3, [r7, #23]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	75fb      	strb	r3, [r7, #23]
 800c4c6:	4b11      	ldr	r3, [pc, #68]	; (800c50c <ISOUDS_ReqDownloadValidateInfo+0xe0>)
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	7dfa      	ldrb	r2, [r7, #23]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d3de      	bcc.n	800c48e <ISOUDS_ReqDownloadValidateInfo+0x62>
 800c4d0:	4b0b      	ldr	r3, [pc, #44]	; (800c500 <ISOUDS_ReqDownloadValidateInfo+0xd4>)
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	4b0b      	ldr	r3, [pc, #44]	; (800c504 <ISOUDS_ReqDownloadValidateInfo+0xd8>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4413      	add	r3, r2
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800c4e0:	d206      	bcs.n	800c4f0 <ISOUDS_ReqDownloadValidateInfo+0xc4>
 800c4e2:	4b07      	ldr	r3, [pc, #28]	; (800c500 <ISOUDS_ReqDownloadValidateInfo+0xd4>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c4ea:	d301      	bcc.n	800c4f0 <ISOUDS_ReqDownloadValidateInfo+0xc4>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	73fb      	strb	r3, [r7, #15]
 800c4f0:	7bfb      	ldrb	r3, [r7, #15]
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	371c      	adds	r7, #28
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr
 800c500:	2400178c 	.word	0x2400178c
 800c504:	24001790 	.word	0x24001790
 800c508:	24001794 	.word	0x24001794
 800c50c:	24001795 	.word	0x24001795

0800c510 <ISOUDS_ReqDownldValidParams>:
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	4603      	mov	r3, r0
 800c518:	71fb      	strb	r3, [r7, #7]
 800c51a:	460b      	mov	r3, r1
 800c51c:	71bb      	strb	r3, [r7, #6]
 800c51e:	4613      	mov	r3, r2
 800c520:	717b      	strb	r3, [r7, #5]
 800c522:	2300      	movs	r3, #0
 800c524:	73bb      	strb	r3, [r7, #14]
 800c526:	2300      	movs	r3, #0
 800c528:	73fb      	strb	r3, [r7, #15]
 800c52a:	e03a      	b.n	800c5a2 <ISOUDS_ReqDownldValidParams+0x92>
 800c52c:	7bfa      	ldrb	r2, [r7, #15]
 800c52e:	4923      	ldr	r1, [pc, #140]	; (800c5bc <ISOUDS_ReqDownldValidParams+0xac>)
 800c530:	4613      	mov	r3, r2
 800c532:	005b      	lsls	r3, r3, #1
 800c534:	4413      	add	r3, r2
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	440b      	add	r3, r1
 800c53a:	3303      	adds	r3, #3
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	461a      	mov	r2, r3
 800c540:	79fb      	ldrb	r3, [r7, #7]
 800c542:	f003 030f 	and.w	r3, r3, #15
 800c546:	429a      	cmp	r2, r3
 800c548:	d128      	bne.n	800c59c <ISOUDS_ReqDownldValidParams+0x8c>
 800c54a:	7bfa      	ldrb	r2, [r7, #15]
 800c54c:	491b      	ldr	r1, [pc, #108]	; (800c5bc <ISOUDS_ReqDownldValidParams+0xac>)
 800c54e:	4613      	mov	r3, r2
 800c550:	005b      	lsls	r3, r3, #1
 800c552:	4413      	add	r3, r2
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	440b      	add	r3, r1
 800c558:	3302      	adds	r3, #2
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d11d      	bne.n	800c59c <ISOUDS_ReqDownldValidParams+0x8c>
 800c560:	7bfa      	ldrb	r2, [r7, #15]
 800c562:	4916      	ldr	r1, [pc, #88]	; (800c5bc <ISOUDS_ReqDownldValidParams+0xac>)
 800c564:	4613      	mov	r3, r2
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	4413      	add	r3, r2
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	440b      	add	r3, r1
 800c56e:	781a      	ldrb	r2, [r3, #0]
 800c570:	4b13      	ldr	r3, [pc, #76]	; (800c5c0 <ISOUDS_ReqDownldValidParams+0xb0>)
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	429a      	cmp	r2, r3
 800c576:	d111      	bne.n	800c59c <ISOUDS_ReqDownldValidParams+0x8c>
 800c578:	7bfa      	ldrb	r2, [r7, #15]
 800c57a:	4910      	ldr	r1, [pc, #64]	; (800c5bc <ISOUDS_ReqDownldValidParams+0xac>)
 800c57c:	4613      	mov	r3, r2
 800c57e:	005b      	lsls	r3, r3, #1
 800c580:	4413      	add	r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	440b      	add	r3, r1
 800c586:	3301      	adds	r3, #1
 800c588:	781a      	ldrb	r2, [r3, #0]
 800c58a:	4b0e      	ldr	r3, [pc, #56]	; (800c5c4 <ISOUDS_ReqDownldValidParams+0xb4>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d104      	bne.n	800c59c <ISOUDS_ReqDownldValidParams+0x8c>
 800c592:	2301      	movs	r3, #1
 800c594:	73bb      	strb	r3, [r7, #14]
 800c596:	4a0c      	ldr	r2, [pc, #48]	; (800c5c8 <ISOUDS_ReqDownldValidParams+0xb8>)
 800c598:	7bfb      	ldrb	r3, [r7, #15]
 800c59a:	7013      	strb	r3, [r2, #0]
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
 800c59e:	3301      	adds	r3, #1
 800c5a0:	73fb      	strb	r3, [r7, #15]
 800c5a2:	7bfb      	ldrb	r3, [r7, #15]
 800c5a4:	2b10      	cmp	r3, #16
 800c5a6:	d802      	bhi.n	800c5ae <ISOUDS_ReqDownldValidParams+0x9e>
 800c5a8:	7bbb      	ldrb	r3, [r7, #14]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d0be      	beq.n	800c52c <ISOUDS_ReqDownldValidParams+0x1c>
 800c5ae:	7bbb      	ldrb	r3, [r7, #14]
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3714      	adds	r7, #20
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	0801094c 	.word	0x0801094c
 800c5c0:	24001794 	.word	0x24001794
 800c5c4:	24001795 	.word	0x24001795
 800c5c8:	24001796 	.word	0x24001796

0800c5cc <ISOUDS_RtnCntrl>:
 800c5cc:	b590      	push	{r4, r7, lr}
 800c5ce:	b089      	sub	sp, #36	; 0x24
 800c5d0:	af02      	add	r7, sp, #8
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 8131 	beq.w	800c840 <ISOUDS_RtnCntrl+0x274>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	889b      	ldrh	r3, [r3, #4]
 800c5e2:	2b03      	cmp	r3, #3
 800c5e4:	f240 8126 	bls.w	800c834 <ISOUDS_RtnCntrl+0x268>
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	021b      	lsls	r3, r3, #8
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	3302      	adds	r3, #2
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	823b      	strh	r3, [r7, #16]
 800c600:	8a3b      	ldrh	r3, [r7, #16]
 800c602:	4618      	mov	r0, r3
 800c604:	f000 f928 	bl	800c858 <ISOUDS_ValidatRtnCntrlID>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	f040 810b 	bne.w	800c826 <ISOUDS_RtnCntrl+0x25a>
 800c610:	4b8d      	ldr	r3, [pc, #564]	; (800c848 <ISOUDS_RtnCntrl+0x27c>)
 800c612:	881b      	ldrh	r3, [r3, #0]
 800c614:	4a8d      	ldr	r2, [pc, #564]	; (800c84c <ISOUDS_RtnCntrl+0x280>)
 800c616:	011b      	lsls	r3, r3, #4
 800c618:	4413      	add	r3, r2
 800c61a:	3302      	adds	r3, #2
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	461a      	mov	r2, r3
 800c620:	4b8b      	ldr	r3, [pc, #556]	; (800c850 <ISOUDS_RtnCntrl+0x284>)
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	fa42 f303 	asr.w	r3, r2, r3
 800c628:	f003 0301 	and.w	r3, r3, #1
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f000 80f3 	beq.w	800c818 <ISOUDS_RtnCntrl+0x24c>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	73fb      	strb	r3, [r7, #15]
 800c638:	4b83      	ldr	r3, [pc, #524]	; (800c848 <ISOUDS_RtnCntrl+0x27c>)
 800c63a:	881a      	ldrh	r2, [r3, #0]
 800c63c:	7bfb      	ldrb	r3, [r7, #15]
 800c63e:	4611      	mov	r1, r2
 800c640:	4618      	mov	r0, r3
 800c642:	f7f6 f979 	bl	8002938 <ISOUDS_RtnControlTypeSuppChk>
 800c646:	4603      	mov	r3, r0
 800c648:	2b01      	cmp	r3, #1
 800c64a:	f040 80de 	bne.w	800c80a <ISOUDS_RtnCntrl+0x23e>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	889a      	ldrh	r2, [r3, #4]
 800c652:	4b7d      	ldr	r3, [pc, #500]	; (800c848 <ISOUDS_RtnCntrl+0x27c>)
 800c654:	881b      	ldrh	r3, [r3, #0]
 800c656:	497d      	ldr	r1, [pc, #500]	; (800c84c <ISOUDS_RtnCntrl+0x280>)
 800c658:	011b      	lsls	r3, r3, #4
 800c65a:	440b      	add	r3, r1
 800c65c:	3306      	adds	r3, #6
 800c65e:	881b      	ldrh	r3, [r3, #0]
 800c660:	429a      	cmp	r2, r3
 800c662:	f0c0 80cb 	bcc.w	800c7fc <ISOUDS_RtnCntrl+0x230>
 800c666:	2301      	movs	r3, #1
 800c668:	75fb      	strb	r3, [r7, #23]
 800c66a:	4b77      	ldr	r3, [pc, #476]	; (800c848 <ISOUDS_RtnCntrl+0x27c>)
 800c66c:	881b      	ldrh	r3, [r3, #0]
 800c66e:	4a77      	ldr	r2, [pc, #476]	; (800c84c <ISOUDS_RtnCntrl+0x280>)
 800c670:	011b      	lsls	r3, r3, #4
 800c672:	4413      	add	r3, r2
 800c674:	3308      	adds	r3, #8
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d124      	bne.n	800c6c6 <ISOUDS_RtnCntrl+0xfa>
 800c67c:	2300      	movs	r3, #0
 800c67e:	75fb      	strb	r3, [r7, #23]
 800c680:	2300      	movs	r3, #0
 800c682:	82bb      	strh	r3, [r7, #20]
 800c684:	e011      	b.n	800c6aa <ISOUDS_RtnCntrl+0xde>
 800c686:	4b70      	ldr	r3, [pc, #448]	; (800c848 <ISOUDS_RtnCntrl+0x27c>)
 800c688:	881b      	ldrh	r3, [r3, #0]
 800c68a:	461a      	mov	r2, r3
 800c68c:	8abb      	ldrh	r3, [r7, #20]
 800c68e:	496f      	ldr	r1, [pc, #444]	; (800c84c <ISOUDS_RtnCntrl+0x280>)
 800c690:	0112      	lsls	r2, r2, #4
 800c692:	440a      	add	r2, r1
 800c694:	4413      	add	r3, r2
 800c696:	330a      	adds	r3, #10
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	4618      	mov	r0, r3
 800c69c:	f000 fb0a 	bl	800ccb4 <ISOUDS_GetSAStLevel>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	75fb      	strb	r3, [r7, #23]
 800c6a4:	8abb      	ldrh	r3, [r7, #20]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	82bb      	strh	r3, [r7, #20]
 800c6aa:	4b67      	ldr	r3, [pc, #412]	; (800c848 <ISOUDS_RtnCntrl+0x27c>)
 800c6ac:	881b      	ldrh	r3, [r3, #0]
 800c6ae:	4a67      	ldr	r2, [pc, #412]	; (800c84c <ISOUDS_RtnCntrl+0x280>)
 800c6b0:	011b      	lsls	r3, r3, #4
 800c6b2:	4413      	add	r3, r2
 800c6b4:	3309      	adds	r3, #9
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	8aba      	ldrh	r2, [r7, #20]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d202      	bcs.n	800c6c6 <ISOUDS_RtnCntrl+0xfa>
 800c6c0:	7dfb      	ldrb	r3, [r7, #23]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d0df      	beq.n	800c686 <ISOUDS_RtnCntrl+0xba>
 800c6c6:	7dfb      	ldrb	r3, [r7, #23]
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	f040 8090 	bne.w	800c7ee <ISOUDS_RtnCntrl+0x222>
 800c6ce:	f7f6 f965 	bl	800299c <ISOUDS_RtnCntrlPreCondCheck>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	f040 8083 	bne.w	800c7e0 <ISOUDS_RtnCntrl+0x214>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	81bb      	strh	r3, [r7, #12]
 800c6de:	7bfb      	ldrb	r3, [r7, #15]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d113      	bne.n	800c70c <ISOUDS_RtnCntrl+0x140>
 800c6e4:	4b58      	ldr	r3, [pc, #352]	; (800c848 <ISOUDS_RtnCntrl+0x27c>)
 800c6e6:	881b      	ldrh	r3, [r3, #0]
 800c6e8:	4a58      	ldr	r2, [pc, #352]	; (800c84c <ISOUDS_RtnCntrl+0x280>)
 800c6ea:	011b      	lsls	r3, r3, #4
 800c6ec:	4413      	add	r3, r2
 800c6ee:	330c      	adds	r3, #12
 800c6f0:	681c      	ldr	r4, [r3, #0]
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	1cd8      	adds	r0, r3, #3
 800c6f6:	7bfa      	ldrb	r2, [r7, #15]
 800c6f8:	8a39      	ldrh	r1, [r7, #16]
 800c6fa:	f107 030c 	add.w	r3, r7, #12
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	4603      	mov	r3, r0
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	47a0      	blx	r4
 800c706:	4603      	mov	r3, r0
 800c708:	74fb      	strb	r3, [r7, #19]
 800c70a:	e04a      	b.n	800c7a2 <ISOUDS_RtnCntrl+0x1d6>
 800c70c:	7bfb      	ldrb	r3, [r7, #15]
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d11d      	bne.n	800c74e <ISOUDS_RtnCntrl+0x182>
 800c712:	4b4d      	ldr	r3, [pc, #308]	; (800c848 <ISOUDS_RtnCntrl+0x27c>)
 800c714:	881b      	ldrh	r3, [r3, #0]
 800c716:	461a      	mov	r2, r3
 800c718:	4b4e      	ldr	r3, [pc, #312]	; (800c854 <ISOUDS_RtnCntrl+0x288>)
 800c71a:	5c9b      	ldrb	r3, [r3, r2]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d113      	bne.n	800c748 <ISOUDS_RtnCntrl+0x17c>
 800c720:	4b49      	ldr	r3, [pc, #292]	; (800c848 <ISOUDS_RtnCntrl+0x27c>)
 800c722:	881b      	ldrh	r3, [r3, #0]
 800c724:	4a49      	ldr	r2, [pc, #292]	; (800c84c <ISOUDS_RtnCntrl+0x280>)
 800c726:	011b      	lsls	r3, r3, #4
 800c728:	4413      	add	r3, r2
 800c72a:	330c      	adds	r3, #12
 800c72c:	681c      	ldr	r4, [r3, #0]
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	1cd8      	adds	r0, r3, #3
 800c732:	7bfa      	ldrb	r2, [r7, #15]
 800c734:	8a39      	ldrh	r1, [r7, #16]
 800c736:	f107 030c 	add.w	r3, r7, #12
 800c73a:	9300      	str	r3, [sp, #0]
 800c73c:	4603      	mov	r3, r0
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	47a0      	blx	r4
 800c742:	4603      	mov	r3, r0
 800c744:	74fb      	strb	r3, [r7, #19]
 800c746:	e02c      	b.n	800c7a2 <ISOUDS_RtnCntrl+0x1d6>
 800c748:	2324      	movs	r3, #36	; 0x24
 800c74a:	74fb      	strb	r3, [r7, #19]
 800c74c:	e029      	b.n	800c7a2 <ISOUDS_RtnCntrl+0x1d6>
 800c74e:	7bfb      	ldrb	r3, [r7, #15]
 800c750:	2b03      	cmp	r3, #3
 800c752:	d124      	bne.n	800c79e <ISOUDS_RtnCntrl+0x1d2>
 800c754:	4b3c      	ldr	r3, [pc, #240]	; (800c848 <ISOUDS_RtnCntrl+0x27c>)
 800c756:	881b      	ldrh	r3, [r3, #0]
 800c758:	461a      	mov	r2, r3
 800c75a:	4b3e      	ldr	r3, [pc, #248]	; (800c854 <ISOUDS_RtnCntrl+0x288>)
 800c75c:	5c9b      	ldrb	r3, [r3, r2]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d006      	beq.n	800c770 <ISOUDS_RtnCntrl+0x1a4>
 800c762:	4b39      	ldr	r3, [pc, #228]	; (800c848 <ISOUDS_RtnCntrl+0x27c>)
 800c764:	881b      	ldrh	r3, [r3, #0]
 800c766:	461a      	mov	r2, r3
 800c768:	4b3a      	ldr	r3, [pc, #232]	; (800c854 <ISOUDS_RtnCntrl+0x288>)
 800c76a:	5c9b      	ldrb	r3, [r3, r2]
 800c76c:	2b02      	cmp	r3, #2
 800c76e:	d113      	bne.n	800c798 <ISOUDS_RtnCntrl+0x1cc>
 800c770:	4b35      	ldr	r3, [pc, #212]	; (800c848 <ISOUDS_RtnCntrl+0x27c>)
 800c772:	881b      	ldrh	r3, [r3, #0]
 800c774:	4a35      	ldr	r2, [pc, #212]	; (800c84c <ISOUDS_RtnCntrl+0x280>)
 800c776:	011b      	lsls	r3, r3, #4
 800c778:	4413      	add	r3, r2
 800c77a:	330c      	adds	r3, #12
 800c77c:	681c      	ldr	r4, [r3, #0]
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	1cd8      	adds	r0, r3, #3
 800c782:	7bfa      	ldrb	r2, [r7, #15]
 800c784:	8a39      	ldrh	r1, [r7, #16]
 800c786:	f107 030c 	add.w	r3, r7, #12
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	4603      	mov	r3, r0
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	47a0      	blx	r4
 800c792:	4603      	mov	r3, r0
 800c794:	74fb      	strb	r3, [r7, #19]
 800c796:	e004      	b.n	800c7a2 <ISOUDS_RtnCntrl+0x1d6>
 800c798:	2324      	movs	r3, #36	; 0x24
 800c79a:	74fb      	strb	r3, [r7, #19]
 800c79c:	e001      	b.n	800c7a2 <ISOUDS_RtnCntrl+0x1d6>
 800c79e:	2312      	movs	r3, #18
 800c7a0:	74fb      	strb	r3, [r7, #19]
 800c7a2:	7cfb      	ldrb	r3, [r7, #19]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d114      	bne.n	800c7d2 <ISOUDS_RtnCntrl+0x206>
 800c7a8:	7bfb      	ldrb	r3, [r7, #15]
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d002      	beq.n	800c7b4 <ISOUDS_RtnCntrl+0x1e8>
 800c7ae:	7bfb      	ldrb	r3, [r7, #15]
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d105      	bne.n	800c7c0 <ISOUDS_RtnCntrl+0x1f4>
 800c7b4:	4b24      	ldr	r3, [pc, #144]	; (800c848 <ISOUDS_RtnCntrl+0x27c>)
 800c7b6:	881b      	ldrh	r3, [r3, #0]
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	4a26      	ldr	r2, [pc, #152]	; (800c854 <ISOUDS_RtnCntrl+0x288>)
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
 800c7be:	5453      	strb	r3, [r2, r1]
 800c7c0:	89bb      	ldrh	r3, [r7, #12]
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	809a      	strh	r2, [r3, #4]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2203      	movs	r2, #3
 800c7ce:	701a      	strb	r2, [r3, #0]
 800c7d0:	e036      	b.n	800c840 <ISOUDS_RtnCntrl+0x274>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2204      	movs	r2, #4
 800c7d6:	701a      	strb	r2, [r3, #0]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	7cfa      	ldrb	r2, [r7, #19]
 800c7dc:	709a      	strb	r2, [r3, #2]
 800c7de:	e02f      	b.n	800c840 <ISOUDS_RtnCntrl+0x274>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2204      	movs	r2, #4
 800c7e4:	701a      	strb	r2, [r3, #0]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2222      	movs	r2, #34	; 0x22
 800c7ea:	709a      	strb	r2, [r3, #2]
 800c7ec:	e028      	b.n	800c840 <ISOUDS_RtnCntrl+0x274>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2204      	movs	r2, #4
 800c7f2:	701a      	strb	r2, [r3, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2233      	movs	r2, #51	; 0x33
 800c7f8:	709a      	strb	r2, [r3, #2]
 800c7fa:	e021      	b.n	800c840 <ISOUDS_RtnCntrl+0x274>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2204      	movs	r2, #4
 800c800:	701a      	strb	r2, [r3, #0]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2213      	movs	r2, #19
 800c806:	709a      	strb	r2, [r3, #2]
 800c808:	e01a      	b.n	800c840 <ISOUDS_RtnCntrl+0x274>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2204      	movs	r2, #4
 800c80e:	701a      	strb	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2212      	movs	r2, #18
 800c814:	709a      	strb	r2, [r3, #2]
 800c816:	e013      	b.n	800c840 <ISOUDS_RtnCntrl+0x274>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2204      	movs	r2, #4
 800c81c:	701a      	strb	r2, [r3, #0]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2231      	movs	r2, #49	; 0x31
 800c822:	709a      	strb	r2, [r3, #2]
 800c824:	e00c      	b.n	800c840 <ISOUDS_RtnCntrl+0x274>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2204      	movs	r2, #4
 800c82a:	701a      	strb	r2, [r3, #0]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2231      	movs	r2, #49	; 0x31
 800c830:	709a      	strb	r2, [r3, #2]
 800c832:	e005      	b.n	800c840 <ISOUDS_RtnCntrl+0x274>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2204      	movs	r2, #4
 800c838:	701a      	strb	r2, [r3, #0]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2213      	movs	r2, #19
 800c83e:	709a      	strb	r2, [r3, #2]
 800c840:	bf00      	nop
 800c842:	371c      	adds	r7, #28
 800c844:	46bd      	mov	sp, r7
 800c846:	bd90      	pop	{r4, r7, pc}
 800c848:	24001798 	.word	0x24001798
 800c84c:	2400021c 	.word	0x2400021c
 800c850:	24001720 	.word	0x24001720
 800c854:	2400179c 	.word	0x2400179c

0800c858 <ISOUDS_ValidatRtnCntrlID>:
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	4603      	mov	r3, r0
 800c860:	80fb      	strh	r3, [r7, #6]
 800c862:	2300      	movs	r3, #0
 800c864:	737b      	strb	r3, [r7, #13]
 800c866:	2300      	movs	r3, #0
 800c868:	81fb      	strh	r3, [r7, #14]
 800c86a:	e00f      	b.n	800c88c <ISOUDS_ValidatRtnCntrlID+0x34>
 800c86c:	89fb      	ldrh	r3, [r7, #14]
 800c86e:	4a0f      	ldr	r2, [pc, #60]	; (800c8ac <ISOUDS_ValidatRtnCntrlID+0x54>)
 800c870:	011b      	lsls	r3, r3, #4
 800c872:	4413      	add	r3, r2
 800c874:	881b      	ldrh	r3, [r3, #0]
 800c876:	88fa      	ldrh	r2, [r7, #6]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d104      	bne.n	800c886 <ISOUDS_ValidatRtnCntrlID+0x2e>
 800c87c:	4a0c      	ldr	r2, [pc, #48]	; (800c8b0 <ISOUDS_ValidatRtnCntrlID+0x58>)
 800c87e:	89fb      	ldrh	r3, [r7, #14]
 800c880:	8013      	strh	r3, [r2, #0]
 800c882:	2301      	movs	r3, #1
 800c884:	737b      	strb	r3, [r7, #13]
 800c886:	89fb      	ldrh	r3, [r7, #14]
 800c888:	3301      	adds	r3, #1
 800c88a:	81fb      	strh	r3, [r7, #14]
 800c88c:	f7f6 f84c 	bl	8002928 <ISOUDS_Get_RtnContrlMaxSubFun>
 800c890:	4603      	mov	r3, r0
 800c892:	461a      	mov	r2, r3
 800c894:	89fb      	ldrh	r3, [r7, #14]
 800c896:	4293      	cmp	r3, r2
 800c898:	d202      	bcs.n	800c8a0 <ISOUDS_ValidatRtnCntrlID+0x48>
 800c89a:	7b7b      	ldrb	r3, [r7, #13]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d0e5      	beq.n	800c86c <ISOUDS_ValidatRtnCntrlID+0x14>
 800c8a0:	7b7b      	ldrb	r3, [r7, #13]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	2400021c 	.word	0x2400021c
 800c8b0:	24001798 	.word	0x24001798

0800c8b4 <ISOUDS_SAInit>:
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	4b17      	ldr	r3, [pc, #92]	; (800c918 <ISOUDS_SAInit+0x64>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	701a      	strb	r2, [r3, #0]
 800c8be:	4b17      	ldr	r3, [pc, #92]	; (800c91c <ISOUDS_SAInit+0x68>)
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	701a      	strb	r2, [r3, #0]
 800c8c4:	4b16      	ldr	r3, [pc, #88]	; (800c920 <ISOUDS_SAInit+0x6c>)
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	601a      	str	r2, [r3, #0]
 800c8ca:	4b16      	ldr	r3, [pc, #88]	; (800c924 <ISOUDS_SAInit+0x70>)
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	701a      	strb	r2, [r3, #0]
 800c8d0:	f7f6 fbde 	bl	8003090 <ISOUDS_GetSAAttempCount>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	4b13      	ldr	r3, [pc, #76]	; (800c928 <ISOUDS_SAInit+0x74>)
 800c8da:	701a      	strb	r2, [r3, #0]
 800c8dc:	4b13      	ldr	r3, [pc, #76]	; (800c92c <ISOUDS_SAInit+0x78>)
 800c8de:	2200      	movs	r2, #0
 800c8e0:	601a      	str	r2, [r3, #0]
 800c8e2:	4b13      	ldr	r3, [pc, #76]	; (800c930 <ISOUDS_SAInit+0x7c>)
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	601a      	str	r2, [r3, #0]
 800c8e8:	4b12      	ldr	r3, [pc, #72]	; (800c934 <ISOUDS_SAInit+0x80>)
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	601a      	str	r2, [r3, #0]
 800c8ee:	4b12      	ldr	r3, [pc, #72]	; (800c938 <ISOUDS_SAInit+0x84>)
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	701a      	strb	r2, [r3, #0]
 800c8f4:	4b11      	ldr	r3, [pc, #68]	; (800c93c <ISOUDS_SAInit+0x88>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	601a      	str	r2, [r3, #0]
 800c8fa:	4b11      	ldr	r3, [pc, #68]	; (800c940 <ISOUDS_SAInit+0x8c>)
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	601a      	str	r2, [r3, #0]
 800c900:	4b10      	ldr	r3, [pc, #64]	; (800c944 <ISOUDS_SAInit+0x90>)
 800c902:	2200      	movs	r2, #0
 800c904:	601a      	str	r2, [r3, #0]
 800c906:	4b10      	ldr	r3, [pc, #64]	; (800c948 <ISOUDS_SAInit+0x94>)
 800c908:	2201      	movs	r2, #1
 800c90a:	701a      	strb	r2, [r3, #0]
 800c90c:	4b0f      	ldr	r3, [pc, #60]	; (800c94c <ISOUDS_SAInit+0x98>)
 800c90e:	2201      	movs	r2, #1
 800c910:	701a      	strb	r2, [r3, #0]
 800c912:	bf00      	nop
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	240017cb 	.word	0x240017cb
 800c91c:	240017c8 	.word	0x240017c8
 800c920:	240017c4 	.word	0x240017c4
 800c924:	2400179f 	.word	0x2400179f
 800c928:	240017a0 	.word	0x240017a0
 800c92c:	240017a4 	.word	0x240017a4
 800c930:	240017a8 	.word	0x240017a8
 800c934:	240017ac 	.word	0x240017ac
 800c938:	240017b0 	.word	0x240017b0
 800c93c:	240017b4 	.word	0x240017b4
 800c940:	240017b8 	.word	0x240017b8
 800c944:	240017bc 	.word	0x240017bc
 800c948:	240017ca 	.word	0x240017ca
 800c94c:	240017c9 	.word	0x240017c9

0800c950 <ISOUDS_SA>:
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	73fb      	strb	r3, [r7, #15]
 800c960:	7bfb      	ldrb	r3, [r7, #15]
 800c962:	f003 0301 	and.w	r3, r3, #1
 800c966:	b2db      	uxtb	r3, r3
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d008      	beq.n	800c97e <ISOUDS_SA+0x2e>
 800c96c:	7bfb      	ldrb	r3, [r7, #15]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d005      	beq.n	800c97e <ISOUDS_SA+0x2e>
 800c972:	7bfb      	ldrb	r3, [r7, #15]
 800c974:	2b7d      	cmp	r3, #125	; 0x7d
 800c976:	d802      	bhi.n	800c97e <ISOUDS_SA+0x2e>
 800c978:	4b3a      	ldr	r3, [pc, #232]	; (800ca64 <ISOUDS_SA+0x114>)
 800c97a:	2201      	movs	r2, #1
 800c97c:	701a      	strb	r2, [r3, #0]
 800c97e:	4b3a      	ldr	r3, [pc, #232]	; (800ca68 <ISOUDS_SA+0x118>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	2b01      	cmp	r3, #1
 800c984:	d003      	beq.n	800c98e <ISOUDS_SA+0x3e>
 800c986:	4b39      	ldr	r3, [pc, #228]	; (800ca6c <ISOUDS_SA+0x11c>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d112      	bne.n	800c9b4 <ISOUDS_SA+0x64>
 800c98e:	7bfb      	ldrb	r3, [r7, #15]
 800c990:	f003 0301 	and.w	r3, r3, #1
 800c994:	b2db      	uxtb	r3, r3
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00c      	beq.n	800c9b4 <ISOUDS_SA+0x64>
 800c99a:	7bfb      	ldrb	r3, [r7, #15]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d009      	beq.n	800c9b4 <ISOUDS_SA+0x64>
 800c9a0:	7bfb      	ldrb	r3, [r7, #15]
 800c9a2:	2b7d      	cmp	r3, #125	; 0x7d
 800c9a4:	d806      	bhi.n	800c9b4 <ISOUDS_SA+0x64>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2204      	movs	r2, #4
 800c9aa:	701a      	strb	r2, [r3, #0]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2237      	movs	r2, #55	; 0x37
 800c9b0:	709a      	strb	r2, [r3, #2]
 800c9b2:	e053      	b.n	800ca5c <ISOUDS_SA+0x10c>
 800c9b4:	4b2b      	ldr	r3, [pc, #172]	; (800ca64 <ISOUDS_SA+0x114>)
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	2b03      	cmp	r3, #3
 800c9bc:	d847      	bhi.n	800ca4e <ISOUDS_SA+0xfe>
 800c9be:	a201      	add	r2, pc, #4	; (adr r2, 800c9c4 <ISOUDS_SA+0x74>)
 800c9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c4:	0800c9d5 	.word	0x0800c9d5
 800c9c8:	0800c9f5 	.word	0x0800c9f5
 800c9cc:	0800c9d5 	.word	0x0800c9d5
 800c9d0:	0800c9f5 	.word	0x0800c9f5
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d104      	bne.n	800c9e6 <ISOUDS_SA+0x96>
 800c9dc:	6839      	ldr	r1, [r7, #0]
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 fa84 	bl	800ceec <ISOUDS_ACState_Handler>
 800c9e4:	e03a      	b.n	800ca5c <ISOUDS_SA+0x10c>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2204      	movs	r2, #4
 800c9ea:	701a      	strb	r2, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2213      	movs	r2, #19
 800c9f0:	709a      	strb	r2, [r3, #2]
 800c9f2:	e033      	b.n	800ca5c <ISOUDS_SA+0x10c>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	d120      	bne.n	800ca3e <ISOUDS_SA+0xee>
 800c9fc:	4b19      	ldr	r3, [pc, #100]	; (800ca64 <ISOUDS_SA+0x114>)
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	2b02      	cmp	r3, #2
 800ca02:	d11c      	bne.n	800ca3e <ISOUDS_SA+0xee>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	889b      	ldrh	r3, [r3, #4]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	4b19      	ldr	r3, [pc, #100]	; (800ca70 <ISOUDS_SA+0x120>)
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	4619      	mov	r1, r3
 800ca10:	4a18      	ldr	r2, [pc, #96]	; (800ca74 <ISOUDS_SA+0x124>)
 800ca12:	460b      	mov	r3, r1
 800ca14:	005b      	lsls	r3, r3, #1
 800ca16:	440b      	add	r3, r1
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	4413      	add	r3, r2
 800ca1c:	3303      	adds	r3, #3
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	3302      	adds	r3, #2
 800ca22:	4298      	cmp	r0, r3
 800ca24:	d104      	bne.n	800ca30 <ISOUDS_SA+0xe0>
 800ca26:	6839      	ldr	r1, [r7, #0]
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 fb59 	bl	800d0e0 <ISOUDS_BDState_Handler>
 800ca2e:	e00d      	b.n	800ca4c <ISOUDS_SA+0xfc>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2204      	movs	r2, #4
 800ca34:	701a      	strb	r2, [r3, #0]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2213      	movs	r2, #19
 800ca3a:	709a      	strb	r2, [r3, #2]
 800ca3c:	e006      	b.n	800ca4c <ISOUDS_SA+0xfc>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2204      	movs	r2, #4
 800ca42:	701a      	strb	r2, [r3, #0]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2224      	movs	r2, #36	; 0x24
 800ca48:	709a      	strb	r2, [r3, #2]
 800ca4a:	e007      	b.n	800ca5c <ISOUDS_SA+0x10c>
 800ca4c:	e006      	b.n	800ca5c <ISOUDS_SA+0x10c>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2204      	movs	r2, #4
 800ca52:	701a      	strb	r2, [r3, #0]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2213      	movs	r2, #19
 800ca58:	709a      	strb	r2, [r3, #2]
 800ca5a:	bf00      	nop
 800ca5c:	bf00      	nop
 800ca5e:	3710      	adds	r7, #16
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	240017ca 	.word	0x240017ca
 800ca68:	240017bc 	.word	0x240017bc
 800ca6c:	240017c8 	.word	0x240017c8
 800ca70:	240017cc 	.word	0x240017cc
 800ca74:	08010a18 	.word	0x08010a18

0800ca78 <ISOUDS_GetSASt>:
 800ca78:	b480      	push	{r7}
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	4b03      	ldr	r3, [pc, #12]	; (800ca8c <ISOUDS_GetSASt+0x14>)
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	4618      	mov	r0, r3
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	240017cb 	.word	0x240017cb

0800ca90 <ISOUDS_SAChkTimer>:
 800ca90:	b580      	push	{r7, lr}
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	4b66      	ldr	r3, [pc, #408]	; (800cc30 <ISOUDS_SAChkTimer+0x1a0>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d015      	beq.n	800cac8 <ISOUDS_SAChkTimer+0x38>
 800ca9c:	4b64      	ldr	r3, [pc, #400]	; (800cc30 <ISOUDS_SAChkTimer+0x1a0>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a64      	ldr	r2, [pc, #400]	; (800cc34 <ISOUDS_SAChkTimer+0x1a4>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d308      	bcc.n	800cab8 <ISOUDS_SAChkTimer+0x28>
 800caa6:	f000 f8df 	bl	800cc68 <ISOUDS_SAReset>
 800caaa:	4b63      	ldr	r3, [pc, #396]	; (800cc38 <ISOUDS_SAChkTimer+0x1a8>)
 800caac:	2200      	movs	r2, #0
 800caae:	601a      	str	r2, [r3, #0]
 800cab0:	4b5f      	ldr	r3, [pc, #380]	; (800cc30 <ISOUDS_SAChkTimer+0x1a0>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	601a      	str	r2, [r3, #0]
 800cab6:	e007      	b.n	800cac8 <ISOUDS_SAChkTimer+0x38>
 800cab8:	f7f4 fe31 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800cabc:	4602      	mov	r2, r0
 800cabe:	4b5c      	ldr	r3, [pc, #368]	; (800cc30 <ISOUDS_SAChkTimer+0x1a0>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4413      	add	r3, r2
 800cac4:	4a5a      	ldr	r2, [pc, #360]	; (800cc30 <ISOUDS_SAChkTimer+0x1a0>)
 800cac6:	6013      	str	r3, [r2, #0]
 800cac8:	4b5c      	ldr	r3, [pc, #368]	; (800cc3c <ISOUDS_SAChkTimer+0x1ac>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d021      	beq.n	800cb14 <ISOUDS_SAChkTimer+0x84>
 800cad0:	4b5a      	ldr	r3, [pc, #360]	; (800cc3c <ISOUDS_SAChkTimer+0x1ac>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f241 3287 	movw	r2, #4999	; 0x1387
 800cad8:	4293      	cmp	r3, r2
 800cada:	d913      	bls.n	800cb04 <ISOUDS_SAChkTimer+0x74>
 800cadc:	f000 f8c4 	bl	800cc68 <ISOUDS_SAReset>
 800cae0:	4b57      	ldr	r3, [pc, #348]	; (800cc40 <ISOUDS_SAChkTimer+0x1b0>)
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	3301      	adds	r3, #1
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	4b55      	ldr	r3, [pc, #340]	; (800cc40 <ISOUDS_SAChkTimer+0x1b0>)
 800caea:	701a      	strb	r2, [r3, #0]
 800caec:	4b54      	ldr	r3, [pc, #336]	; (800cc40 <ISOUDS_SAChkTimer+0x1b0>)
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7f6 fad9 	bl	80030a8 <ISOUDS_SetSAAttempCount>
 800caf6:	4b53      	ldr	r3, [pc, #332]	; (800cc44 <ISOUDS_SAChkTimer+0x1b4>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	601a      	str	r2, [r3, #0]
 800cafc:	4b4f      	ldr	r3, [pc, #316]	; (800cc3c <ISOUDS_SAChkTimer+0x1ac>)
 800cafe:	2200      	movs	r2, #0
 800cb00:	601a      	str	r2, [r3, #0]
 800cb02:	e007      	b.n	800cb14 <ISOUDS_SAChkTimer+0x84>
 800cb04:	f7f4 fe0b 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	4b4c      	ldr	r3, [pc, #304]	; (800cc3c <ISOUDS_SAChkTimer+0x1ac>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4413      	add	r3, r2
 800cb10:	4a4a      	ldr	r2, [pc, #296]	; (800cc3c <ISOUDS_SAChkTimer+0x1ac>)
 800cb12:	6013      	str	r3, [r2, #0]
 800cb14:	4b4c      	ldr	r3, [pc, #304]	; (800cc48 <ISOUDS_SAChkTimer+0x1b8>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d03a      	beq.n	800cb92 <ISOUDS_SAChkTimer+0x102>
 800cb1c:	4b4a      	ldr	r3, [pc, #296]	; (800cc48 <ISOUDS_SAChkTimer+0x1b8>)
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	4b4a      	ldr	r3, [pc, #296]	; (800cc4c <ISOUDS_SAChkTimer+0x1bc>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d32c      	bcc.n	800cb82 <ISOUDS_SAChkTimer+0xf2>
 800cb28:	f7f6 fab2 	bl	8003090 <ISOUDS_GetSAAttempCount>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	461a      	mov	r2, r3
 800cb30:	4b43      	ldr	r3, [pc, #268]	; (800cc40 <ISOUDS_SAChkTimer+0x1b0>)
 800cb32:	701a      	strb	r2, [r3, #0]
 800cb34:	4b42      	ldr	r3, [pc, #264]	; (800cc40 <ISOUDS_SAChkTimer+0x1b0>)
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	2b02      	cmp	r3, #2
 800cb3a:	d910      	bls.n	800cb5e <ISOUDS_SAChkTimer+0xce>
 800cb3c:	4b40      	ldr	r3, [pc, #256]	; (800cc40 <ISOUDS_SAChkTimer+0x1b0>)
 800cb3e:	2200      	movs	r2, #0
 800cb40:	701a      	strb	r2, [r3, #0]
 800cb42:	4b3f      	ldr	r3, [pc, #252]	; (800cc40 <ISOUDS_SAChkTimer+0x1b0>)
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7f6 faae 	bl	80030a8 <ISOUDS_SetSAAttempCount>
 800cb4c:	4b40      	ldr	r3, [pc, #256]	; (800cc50 <ISOUDS_SAChkTimer+0x1c0>)
 800cb4e:	2201      	movs	r2, #1
 800cb50:	601a      	str	r2, [r3, #0]
 800cb52:	4b37      	ldr	r3, [pc, #220]	; (800cc30 <ISOUDS_SAChkTimer+0x1a0>)
 800cb54:	2200      	movs	r2, #0
 800cb56:	601a      	str	r2, [r3, #0]
 800cb58:	4b38      	ldr	r3, [pc, #224]	; (800cc3c <ISOUDS_SAChkTimer+0x1ac>)
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	601a      	str	r2, [r3, #0]
 800cb5e:	f000 f883 	bl	800cc68 <ISOUDS_SAReset>
 800cb62:	4b3c      	ldr	r3, [pc, #240]	; (800cc54 <ISOUDS_SAChkTimer+0x1c4>)
 800cb64:	2200      	movs	r2, #0
 800cb66:	601a      	str	r2, [r3, #0]
 800cb68:	4b37      	ldr	r3, [pc, #220]	; (800cc48 <ISOUDS_SAChkTimer+0x1b8>)
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	601a      	str	r2, [r3, #0]
 800cb6e:	4b38      	ldr	r3, [pc, #224]	; (800cc50 <ISOUDS_SAChkTimer+0x1c0>)
 800cb70:	2201      	movs	r2, #1
 800cb72:	601a      	str	r2, [r3, #0]
 800cb74:	4b2e      	ldr	r3, [pc, #184]	; (800cc30 <ISOUDS_SAChkTimer+0x1a0>)
 800cb76:	2200      	movs	r2, #0
 800cb78:	601a      	str	r2, [r3, #0]
 800cb7a:	4b30      	ldr	r3, [pc, #192]	; (800cc3c <ISOUDS_SAChkTimer+0x1ac>)
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	601a      	str	r2, [r3, #0]
 800cb80:	e007      	b.n	800cb92 <ISOUDS_SAChkTimer+0x102>
 800cb82:	f7f4 fdcc 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800cb86:	4602      	mov	r2, r0
 800cb88:	4b2f      	ldr	r3, [pc, #188]	; (800cc48 <ISOUDS_SAChkTimer+0x1b8>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	4a2e      	ldr	r2, [pc, #184]	; (800cc48 <ISOUDS_SAChkTimer+0x1b8>)
 800cb90:	6013      	str	r3, [r2, #0]
 800cb92:	4b2f      	ldr	r3, [pc, #188]	; (800cc50 <ISOUDS_SAChkTimer+0x1c0>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d021      	beq.n	800cbde <ISOUDS_SAChkTimer+0x14e>
 800cb9a:	4b2d      	ldr	r3, [pc, #180]	; (800cc50 <ISOUDS_SAChkTimer+0x1c0>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d913      	bls.n	800cbce <ISOUDS_SAChkTimer+0x13e>
 800cba6:	f000 f85f 	bl	800cc68 <ISOUDS_SAReset>
 800cbaa:	4b25      	ldr	r3, [pc, #148]	; (800cc40 <ISOUDS_SAChkTimer+0x1b0>)
 800cbac:	2200      	movs	r2, #0
 800cbae:	701a      	strb	r2, [r3, #0]
 800cbb0:	4b23      	ldr	r3, [pc, #140]	; (800cc40 <ISOUDS_SAChkTimer+0x1b0>)
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7f6 fa77 	bl	80030a8 <ISOUDS_SetSAAttempCount>
 800cbba:	4b26      	ldr	r3, [pc, #152]	; (800cc54 <ISOUDS_SAChkTimer+0x1c4>)
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	601a      	str	r2, [r3, #0]
 800cbc0:	4b21      	ldr	r3, [pc, #132]	; (800cc48 <ISOUDS_SAChkTimer+0x1b8>)
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	601a      	str	r2, [r3, #0]
 800cbc6:	4b22      	ldr	r3, [pc, #136]	; (800cc50 <ISOUDS_SAChkTimer+0x1c0>)
 800cbc8:	2200      	movs	r2, #0
 800cbca:	601a      	str	r2, [r3, #0]
 800cbcc:	e007      	b.n	800cbde <ISOUDS_SAChkTimer+0x14e>
 800cbce:	f7f4 fda6 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	4b1e      	ldr	r3, [pc, #120]	; (800cc50 <ISOUDS_SAChkTimer+0x1c0>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4413      	add	r3, r2
 800cbda:	4a1d      	ldr	r2, [pc, #116]	; (800cc50 <ISOUDS_SAChkTimer+0x1c0>)
 800cbdc:	6013      	str	r3, [r2, #0]
 800cbde:	4b1e      	ldr	r3, [pc, #120]	; (800cc58 <ISOUDS_SAChkTimer+0x1c8>)
 800cbe0:	781a      	ldrb	r2, [r3, #0]
 800cbe2:	4b1e      	ldr	r3, [pc, #120]	; (800cc5c <ISOUDS_SAChkTimer+0x1cc>)
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d001      	beq.n	800cbee <ISOUDS_SAChkTimer+0x15e>
 800cbea:	f000 f83d 	bl	800cc68 <ISOUDS_SAReset>
 800cbee:	4b1c      	ldr	r3, [pc, #112]	; (800cc60 <ISOUDS_SAChkTimer+0x1d0>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d015      	beq.n	800cc22 <ISOUDS_SAChkTimer+0x192>
 800cbf6:	4b1b      	ldr	r3, [pc, #108]	; (800cc64 <ISOUDS_SAChkTimer+0x1d4>)
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d111      	bne.n	800cc22 <ISOUDS_SAChkTimer+0x192>
 800cbfe:	4b18      	ldr	r3, [pc, #96]	; (800cc60 <ISOUDS_SAChkTimer+0x1d0>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f242 7210 	movw	r2, #10000	; 0x2710
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d903      	bls.n	800cc12 <ISOUDS_SAChkTimer+0x182>
 800cc0a:	4b16      	ldr	r3, [pc, #88]	; (800cc64 <ISOUDS_SAChkTimer+0x1d4>)
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	701a      	strb	r2, [r3, #0]
 800cc10:	e007      	b.n	800cc22 <ISOUDS_SAChkTimer+0x192>
 800cc12:	f7f4 fd84 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800cc16:	4602      	mov	r2, r0
 800cc18:	4b11      	ldr	r3, [pc, #68]	; (800cc60 <ISOUDS_SAChkTimer+0x1d0>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	4a10      	ldr	r2, [pc, #64]	; (800cc60 <ISOUDS_SAChkTimer+0x1d0>)
 800cc20:	6013      	str	r3, [r2, #0]
 800cc22:	4b0e      	ldr	r3, [pc, #56]	; (800cc5c <ISOUDS_SAChkTimer+0x1cc>)
 800cc24:	781a      	ldrb	r2, [r3, #0]
 800cc26:	4b0c      	ldr	r3, [pc, #48]	; (800cc58 <ISOUDS_SAChkTimer+0x1c8>)
 800cc28:	701a      	strb	r2, [r3, #0]
 800cc2a:	bf00      	nop
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	240017a4 	.word	0x240017a4
 800cc34:	0036ee80 	.word	0x0036ee80
 800cc38:	240017b4 	.word	0x240017b4
 800cc3c:	240017a8 	.word	0x240017a8
 800cc40:	240017a0 	.word	0x240017a0
 800cc44:	240017b8 	.word	0x240017b8
 800cc48:	240017ac 	.word	0x240017ac
 800cc4c:	240017d0 	.word	0x240017d0
 800cc50:	240017c0 	.word	0x240017c0
 800cc54:	240017bc 	.word	0x240017bc
 800cc58:	240017c9 	.word	0x240017c9
 800cc5c:	24001720 	.word	0x24001720
 800cc60:	240017c4 	.word	0x240017c4
 800cc64:	240017c8 	.word	0x240017c8

0800cc68 <ISOUDS_SAReset>:
 800cc68:	b480      	push	{r7}
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	4b0b      	ldr	r3, [pc, #44]	; (800cc9c <ISOUDS_SAReset+0x34>)
 800cc6e:	2200      	movs	r2, #0
 800cc70:	601a      	str	r2, [r3, #0]
 800cc72:	4b0b      	ldr	r3, [pc, #44]	; (800cca0 <ISOUDS_SAReset+0x38>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	601a      	str	r2, [r3, #0]
 800cc78:	4b0a      	ldr	r3, [pc, #40]	; (800cca4 <ISOUDS_SAReset+0x3c>)
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	601a      	str	r2, [r3, #0]
 800cc7e:	4b0a      	ldr	r3, [pc, #40]	; (800cca8 <ISOUDS_SAReset+0x40>)
 800cc80:	2200      	movs	r2, #0
 800cc82:	601a      	str	r2, [r3, #0]
 800cc84:	4b09      	ldr	r3, [pc, #36]	; (800ccac <ISOUDS_SAReset+0x44>)
 800cc86:	2201      	movs	r2, #1
 800cc88:	701a      	strb	r2, [r3, #0]
 800cc8a:	4b09      	ldr	r3, [pc, #36]	; (800ccb0 <ISOUDS_SAReset+0x48>)
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	701a      	strb	r2, [r3, #0]
 800cc90:	bf00      	nop
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	240017b4 	.word	0x240017b4
 800cca0:	240017b8 	.word	0x240017b8
 800cca4:	240017a4 	.word	0x240017a4
 800cca8:	240017a8 	.word	0x240017a8
 800ccac:	240017ca 	.word	0x240017ca
 800ccb0:	240017cb 	.word	0x240017cb

0800ccb4 <ISOUDS_GetSAStLevel>:
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	4603      	mov	r3, r0
 800ccbc:	71fb      	strb	r3, [r7, #7]
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	73fb      	strb	r3, [r7, #15]
 800ccc2:	4b0a      	ldr	r3, [pc, #40]	; (800ccec <ISOUDS_GetSAStLevel+0x38>)
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	79fa      	ldrb	r2, [r7, #7]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d106      	bne.n	800ccda <ISOUDS_GetSAStLevel+0x26>
 800cccc:	4b08      	ldr	r3, [pc, #32]	; (800ccf0 <ISOUDS_GetSAStLevel+0x3c>)
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d102      	bne.n	800ccda <ISOUDS_GetSAStLevel+0x26>
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	73fb      	strb	r3, [r7, #15]
 800ccd8:	e001      	b.n	800ccde <ISOUDS_GetSAStLevel+0x2a>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	73fb      	strb	r3, [r7, #15]
 800ccde:	7bfb      	ldrb	r3, [r7, #15]
 800cce0:	4618      	mov	r0, r3
 800cce2:	3714      	adds	r7, #20
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr
 800ccec:	2400179f 	.word	0x2400179f
 800ccf0:	240017cb 	.word	0x240017cb

0800ccf4 <ISOUDS_SA_GetSeedLenth>:
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	6039      	str	r1, [r7, #0]
 800ccfe:	71fb      	strb	r3, [r7, #7]
 800cd00:	2300      	movs	r3, #0
 800cd02:	73bb      	strb	r3, [r7, #14]
 800cd04:	2300      	movs	r3, #0
 800cd06:	73fb      	strb	r3, [r7, #15]
 800cd08:	e01a      	b.n	800cd40 <ISOUDS_SA_GetSeedLenth+0x4c>
 800cd0a:	7bfa      	ldrb	r2, [r7, #15]
 800cd0c:	4912      	ldr	r1, [pc, #72]	; (800cd58 <ISOUDS_SA_GetSeedLenth+0x64>)
 800cd0e:	4613      	mov	r3, r2
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	4413      	add	r3, r2
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	440b      	add	r3, r1
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	79fa      	ldrb	r2, [r7, #7]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d10c      	bne.n	800cd3a <ISOUDS_SA_GetSeedLenth+0x46>
 800cd20:	7bfa      	ldrb	r2, [r7, #15]
 800cd22:	490d      	ldr	r1, [pc, #52]	; (800cd58 <ISOUDS_SA_GetSeedLenth+0x64>)
 800cd24:	4613      	mov	r3, r2
 800cd26:	005b      	lsls	r3, r3, #1
 800cd28:	4413      	add	r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	440b      	add	r3, r1
 800cd2e:	3302      	adds	r3, #2
 800cd30:	781a      	ldrb	r2, [r3, #0]
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	701a      	strb	r2, [r3, #0]
 800cd36:	2301      	movs	r3, #1
 800cd38:	73bb      	strb	r3, [r7, #14]
 800cd3a:	7bfb      	ldrb	r3, [r7, #15]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	73fb      	strb	r3, [r7, #15]
 800cd40:	7bfb      	ldrb	r3, [r7, #15]
 800cd42:	2b03      	cmp	r3, #3
 800cd44:	d802      	bhi.n	800cd4c <ISOUDS_SA_GetSeedLenth+0x58>
 800cd46:	7bbb      	ldrb	r3, [r7, #14]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d0de      	beq.n	800cd0a <ISOUDS_SA_GetSeedLenth+0x16>
 800cd4c:	bf00      	nop
 800cd4e:	3714      	adds	r7, #20
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr
 800cd58:	08010a18 	.word	0x08010a18

0800cd5c <ISOUDS_SA_CheckLevelSupp>:
 800cd5c:	b480      	push	{r7}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	4603      	mov	r3, r0
 800cd64:	71fb      	strb	r3, [r7, #7]
 800cd66:	2300      	movs	r3, #0
 800cd68:	73bb      	strb	r3, [r7, #14]
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	73fb      	strb	r3, [r7, #15]
 800cd6e:	e012      	b.n	800cd96 <ISOUDS_SA_CheckLevelSupp+0x3a>
 800cd70:	7bfa      	ldrb	r2, [r7, #15]
 800cd72:	490e      	ldr	r1, [pc, #56]	; (800cdac <ISOUDS_SA_CheckLevelSupp+0x50>)
 800cd74:	4613      	mov	r3, r2
 800cd76:	005b      	lsls	r3, r3, #1
 800cd78:	4413      	add	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	440b      	add	r3, r1
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	79fa      	ldrb	r2, [r7, #7]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d104      	bne.n	800cd90 <ISOUDS_SA_CheckLevelSupp+0x34>
 800cd86:	2301      	movs	r3, #1
 800cd88:	73bb      	strb	r3, [r7, #14]
 800cd8a:	4a09      	ldr	r2, [pc, #36]	; (800cdb0 <ISOUDS_SA_CheckLevelSupp+0x54>)
 800cd8c:	7bfb      	ldrb	r3, [r7, #15]
 800cd8e:	7013      	strb	r3, [r2, #0]
 800cd90:	7bfb      	ldrb	r3, [r7, #15]
 800cd92:	3301      	adds	r3, #1
 800cd94:	73fb      	strb	r3, [r7, #15]
 800cd96:	7bfb      	ldrb	r3, [r7, #15]
 800cd98:	2b03      	cmp	r3, #3
 800cd9a:	d9e9      	bls.n	800cd70 <ISOUDS_SA_CheckLevelSupp+0x14>
 800cd9c:	7bbb      	ldrb	r3, [r7, #14]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3714      	adds	r7, #20
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr
 800cdaa:	bf00      	nop
 800cdac:	08010a18 	.word	0x08010a18
 800cdb0:	240017cc 	.word	0x240017cc

0800cdb4 <ISOUDS_GetSeed>:
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b086      	sub	sp, #24
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	4603      	mov	r3, r0
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	607a      	str	r2, [r7, #4]
 800cdc0:	73fb      	strb	r3, [r7, #15]
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	75fb      	strb	r3, [r7, #23]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	701a      	strb	r2, [r3, #0]
 800cdcc:	4b25      	ldr	r3, [pc, #148]	; (800ce64 <ISOUDS_GetSeed+0xb0>)
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	4a25      	ldr	r2, [pc, #148]	; (800ce68 <ISOUDS_GetSeed+0xb4>)
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	005b      	lsls	r3, r3, #1
 800cdd8:	440b      	add	r3, r1
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	4413      	add	r3, r2
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	7bfa      	ldrb	r2, [r7, #15]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d137      	bne.n	800ce56 <ISOUDS_GetSeed+0xa2>
 800cde6:	4b1f      	ldr	r3, [pc, #124]	; (800ce64 <ISOUDS_GetSeed+0xb0>)
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	4619      	mov	r1, r3
 800cdec:	4a1e      	ldr	r2, [pc, #120]	; (800ce68 <ISOUDS_GetSeed+0xb4>)
 800cdee:	460b      	mov	r3, r1
 800cdf0:	005b      	lsls	r3, r3, #1
 800cdf2:	440b      	add	r3, r1
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	4413      	add	r3, r2
 800cdf8:	3302      	adds	r3, #2
 800cdfa:	781a      	ldrb	r2, [r3, #0]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	701a      	strb	r2, [r3, #0]
 800ce00:	4b18      	ldr	r3, [pc, #96]	; (800ce64 <ISOUDS_GetSeed+0xb0>)
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	4619      	mov	r1, r3
 800ce06:	4a18      	ldr	r2, [pc, #96]	; (800ce68 <ISOUDS_GetSeed+0xb4>)
 800ce08:	460b      	mov	r3, r1
 800ce0a:	005b      	lsls	r3, r3, #1
 800ce0c:	440b      	add	r3, r1
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	4413      	add	r3, r2
 800ce12:	3304      	adds	r3, #4
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4815      	ldr	r0, [pc, #84]	; (800ce6c <ISOUDS_GetSeed+0xb8>)
 800ce18:	4798      	blx	r3
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	75fb      	strb	r3, [r7, #23]
 800ce1e:	2300      	movs	r3, #0
 800ce20:	75bb      	strb	r3, [r7, #22]
 800ce22:	e009      	b.n	800ce38 <ISOUDS_GetSeed+0x84>
 800ce24:	7dba      	ldrb	r2, [r7, #22]
 800ce26:	7dbb      	ldrb	r3, [r7, #22]
 800ce28:	68b9      	ldr	r1, [r7, #8]
 800ce2a:	440b      	add	r3, r1
 800ce2c:	490f      	ldr	r1, [pc, #60]	; (800ce6c <ISOUDS_GetSeed+0xb8>)
 800ce2e:	5c8a      	ldrb	r2, [r1, r2]
 800ce30:	701a      	strb	r2, [r3, #0]
 800ce32:	7dbb      	ldrb	r3, [r7, #22]
 800ce34:	3301      	adds	r3, #1
 800ce36:	75bb      	strb	r3, [r7, #22]
 800ce38:	4b0a      	ldr	r3, [pc, #40]	; (800ce64 <ISOUDS_GetSeed+0xb0>)
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	4a0a      	ldr	r2, [pc, #40]	; (800ce68 <ISOUDS_GetSeed+0xb4>)
 800ce40:	460b      	mov	r3, r1
 800ce42:	005b      	lsls	r3, r3, #1
 800ce44:	440b      	add	r3, r1
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4413      	add	r3, r2
 800ce4a:	3302      	adds	r3, #2
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	7dba      	ldrb	r2, [r7, #22]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d3e7      	bcc.n	800ce24 <ISOUDS_GetSeed+0x70>
 800ce54:	e001      	b.n	800ce5a <ISOUDS_GetSeed+0xa6>
 800ce56:	2312      	movs	r3, #18
 800ce58:	75fb      	strb	r3, [r7, #23]
 800ce5a:	7dfb      	ldrb	r3, [r7, #23]
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3718      	adds	r7, #24
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	240017cc 	.word	0x240017cc
 800ce68:	08010a18 	.word	0x08010a18
 800ce6c:	24001494 	.word	0x24001494

0800ce70 <ISOUDS_ValidateKey>:
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	70fb      	strb	r3, [r7, #3]
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	73fb      	strb	r3, [r7, #15]
 800ce80:	4b18      	ldr	r3, [pc, #96]	; (800cee4 <ISOUDS_ValidateKey+0x74>)
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	4619      	mov	r1, r3
 800ce86:	4a18      	ldr	r2, [pc, #96]	; (800cee8 <ISOUDS_ValidateKey+0x78>)
 800ce88:	460b      	mov	r3, r1
 800ce8a:	005b      	lsls	r3, r3, #1
 800ce8c:	440b      	add	r3, r1
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	4413      	add	r3, r2
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	78fa      	ldrb	r2, [r7, #3]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d11c      	bne.n	800ced4 <ISOUDS_ValidateKey+0x64>
 800ce9a:	4b12      	ldr	r3, [pc, #72]	; (800cee4 <ISOUDS_ValidateKey+0x74>)
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	4619      	mov	r1, r3
 800cea0:	4a11      	ldr	r2, [pc, #68]	; (800cee8 <ISOUDS_ValidateKey+0x78>)
 800cea2:	460b      	mov	r3, r1
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	440b      	add	r3, r1
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	4413      	add	r3, r2
 800ceac:	3308      	adds	r3, #8
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	4b0c      	ldr	r3, [pc, #48]	; (800cee4 <ISOUDS_ValidateKey+0x74>)
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	490c      	ldr	r1, [pc, #48]	; (800cee8 <ISOUDS_ValidateKey+0x78>)
 800ceb8:	4603      	mov	r3, r0
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	4403      	add	r3, r0
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	440b      	add	r3, r1
 800cec2:	3303      	adds	r3, #3
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	4619      	mov	r1, r3
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	4790      	blx	r2
 800cece:	4603      	mov	r3, r0
 800ced0:	73fb      	strb	r3, [r7, #15]
 800ced2:	e001      	b.n	800ced8 <ISOUDS_ValidateKey+0x68>
 800ced4:	2312      	movs	r3, #18
 800ced6:	73fb      	strb	r3, [r7, #15]
 800ced8:	7bfb      	ldrb	r3, [r7, #15]
 800ceda:	4618      	mov	r0, r3
 800cedc:	3710      	adds	r7, #16
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	240017cc 	.word	0x240017cc
 800cee8:	08010a18 	.word	0x08010a18

0800ceec <ISOUDS_ACState_Handler>:
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
 800cef6:	2300      	movs	r3, #0
 800cef8:	73fb      	strb	r3, [r7, #15]
 800cefa:	2300      	movs	r3, #0
 800cefc:	73bb      	strb	r3, [r7, #14]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	f000 80d4 	beq.w	800d0ae <ISOUDS_ACState_Handler+0x1c2>
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f000 80d0 	beq.w	800d0ae <ISOUDS_ACState_Handler+0x1c2>
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	781a      	ldrb	r2, [r3, #0]
 800cf12:	4b69      	ldr	r3, [pc, #420]	; (800d0b8 <ISOUDS_ACState_Handler+0x1cc>)
 800cf14:	701a      	strb	r2, [r3, #0]
 800cf16:	4b68      	ldr	r3, [pc, #416]	; (800d0b8 <ISOUDS_ACState_Handler+0x1cc>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	f003 0301 	and.w	r3, r3, #1
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	f000 80ac 	beq.w	800d07e <ISOUDS_ACState_Handler+0x192>
 800cf26:	4b64      	ldr	r3, [pc, #400]	; (800d0b8 <ISOUDS_ACState_Handler+0x1cc>)
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	f000 80a7 	beq.w	800d07e <ISOUDS_ACState_Handler+0x192>
 800cf30:	4b61      	ldr	r3, [pc, #388]	; (800d0b8 <ISOUDS_ACState_Handler+0x1cc>)
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	2b7d      	cmp	r3, #125	; 0x7d
 800cf36:	f200 80a2 	bhi.w	800d07e <ISOUDS_ACState_Handler+0x192>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	889b      	ldrh	r3, [r3, #4]
 800cf3e:	2b02      	cmp	r3, #2
 800cf40:	f040 8096 	bne.w	800d070 <ISOUDS_ACState_Handler+0x184>
 800cf44:	4b5d      	ldr	r3, [pc, #372]	; (800d0bc <ISOUDS_ACState_Handler+0x1d0>)
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d12d      	bne.n	800cfa8 <ISOUDS_ACState_Handler+0xbc>
 800cf4c:	4b5a      	ldr	r3, [pc, #360]	; (800d0b8 <ISOUDS_ACState_Handler+0x1cc>)
 800cf4e:	781a      	ldrb	r2, [r3, #0]
 800cf50:	4b5b      	ldr	r3, [pc, #364]	; (800d0c0 <ISOUDS_ACState_Handler+0x1d4>)
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d127      	bne.n	800cfa8 <ISOUDS_ACState_Handler+0xbc>
 800cf58:	4b57      	ldr	r3, [pc, #348]	; (800d0b8 <ISOUDS_ACState_Handler+0x1cc>)
 800cf5a:	781a      	ldrb	r2, [r3, #0]
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	701a      	strb	r2, [r3, #0]
 800cf60:	4b55      	ldr	r3, [pc, #340]	; (800d0b8 <ISOUDS_ACState_Handler+0x1cc>)
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	4957      	ldr	r1, [pc, #348]	; (800d0c4 <ISOUDS_ACState_Handler+0x1d8>)
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7ff fec4 	bl	800ccf4 <ISOUDS_SA_GetSeedLenth>
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	73fb      	strb	r3, [r7, #15]
 800cf70:	e007      	b.n	800cf82 <ISOUDS_ACState_Handler+0x96>
 800cf72:	7bfb      	ldrb	r3, [r7, #15]
 800cf74:	683a      	ldr	r2, [r7, #0]
 800cf76:	4413      	add	r3, r2
 800cf78:	2200      	movs	r2, #0
 800cf7a:	701a      	strb	r2, [r3, #0]
 800cf7c:	7bfb      	ldrb	r3, [r7, #15]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	73fb      	strb	r3, [r7, #15]
 800cf82:	4b50      	ldr	r3, [pc, #320]	; (800d0c4 <ISOUDS_ACState_Handler+0x1d8>)
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	7bfa      	ldrb	r2, [r7, #15]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d9f2      	bls.n	800cf72 <ISOUDS_ACState_Handler+0x86>
 800cf8c:	4b4d      	ldr	r3, [pc, #308]	; (800d0c4 <ISOUDS_ACState_Handler+0x1d8>)
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	3302      	adds	r3, #2
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	809a      	strh	r2, [r3, #4]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2203      	movs	r2, #3
 800cf9e:	701a      	strb	r2, [r3, #0]
 800cfa0:	4b49      	ldr	r3, [pc, #292]	; (800d0c8 <ISOUDS_ACState_Handler+0x1dc>)
 800cfa2:	2204      	movs	r2, #4
 800cfa4:	701a      	strb	r2, [r3, #0]
 800cfa6:	e082      	b.n	800d0ae <ISOUDS_ACState_Handler+0x1c2>
 800cfa8:	4b43      	ldr	r3, [pc, #268]	; (800d0b8 <ISOUDS_ACState_Handler+0x1cc>)
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7ff fed5 	bl	800cd5c <ISOUDS_SA_CheckLevelSupp>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	73bb      	strb	r3, [r7, #14]
 800cfb6:	7bbb      	ldrb	r3, [r7, #14]
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d152      	bne.n	800d062 <ISOUDS_ACState_Handler+0x176>
 800cfbc:	4b43      	ldr	r3, [pc, #268]	; (800d0cc <ISOUDS_ACState_Handler+0x1e0>)
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	4a43      	ldr	r2, [pc, #268]	; (800d0d0 <ISOUDS_ACState_Handler+0x1e4>)
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	005b      	lsls	r3, r3, #1
 800cfc8:	440b      	add	r3, r1
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	4413      	add	r3, r2
 800cfce:	3301      	adds	r3, #1
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	4b3f      	ldr	r3, [pc, #252]	; (800d0d4 <ISOUDS_ACState_Handler+0x1e8>)
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	fa42 f303 	asr.w	r3, r2, r3
 800cfdc:	f003 0301 	and.w	r3, r3, #1
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d037      	beq.n	800d054 <ISOUDS_ACState_Handler+0x168>
 800cfe4:	4b34      	ldr	r3, [pc, #208]	; (800d0b8 <ISOUDS_ACState_Handler+0x1cc>)
 800cfe6:	7818      	ldrb	r0, [r3, #0]
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	3301      	adds	r3, #1
 800cfec:	4a35      	ldr	r2, [pc, #212]	; (800d0c4 <ISOUDS_ACState_Handler+0x1d8>)
 800cfee:	4619      	mov	r1, r3
 800cff0:	f7ff fee0 	bl	800cdb4 <ISOUDS_GetSeed>
 800cff4:	4603      	mov	r3, r0
 800cff6:	737b      	strb	r3, [r7, #13]
 800cff8:	7b7b      	ldrb	r3, [r7, #13]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d123      	bne.n	800d046 <ISOUDS_ACState_Handler+0x15a>
 800cffe:	4b2f      	ldr	r3, [pc, #188]	; (800d0bc <ISOUDS_ACState_Handler+0x1d0>)
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	2b01      	cmp	r3, #1
 800d004:	d103      	bne.n	800d00e <ISOUDS_ACState_Handler+0x122>
 800d006:	4b30      	ldr	r3, [pc, #192]	; (800d0c8 <ISOUDS_ACState_Handler+0x1dc>)
 800d008:	2204      	movs	r2, #4
 800d00a:	701a      	strb	r2, [r3, #0]
 800d00c:	e002      	b.n	800d014 <ISOUDS_ACState_Handler+0x128>
 800d00e:	4b2e      	ldr	r3, [pc, #184]	; (800d0c8 <ISOUDS_ACState_Handler+0x1dc>)
 800d010:	2202      	movs	r2, #2
 800d012:	701a      	strb	r2, [r3, #0]
 800d014:	4b30      	ldr	r3, [pc, #192]	; (800d0d8 <ISOUDS_ACState_Handler+0x1ec>)
 800d016:	2201      	movs	r2, #1
 800d018:	601a      	str	r2, [r3, #0]
 800d01a:	4b27      	ldr	r3, [pc, #156]	; (800d0b8 <ISOUDS_ACState_Handler+0x1cc>)
 800d01c:	781a      	ldrb	r2, [r3, #0]
 800d01e:	4b28      	ldr	r3, [pc, #160]	; (800d0c0 <ISOUDS_ACState_Handler+0x1d4>)
 800d020:	701a      	strb	r2, [r3, #0]
 800d022:	4b25      	ldr	r3, [pc, #148]	; (800d0b8 <ISOUDS_ACState_Handler+0x1cc>)
 800d024:	781a      	ldrb	r2, [r3, #0]
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	701a      	strb	r2, [r3, #0]
 800d02a:	4b2c      	ldr	r3, [pc, #176]	; (800d0dc <ISOUDS_ACState_Handler+0x1f0>)
 800d02c:	2201      	movs	r2, #1
 800d02e:	601a      	str	r2, [r3, #0]
 800d030:	4b24      	ldr	r3, [pc, #144]	; (800d0c4 <ISOUDS_ACState_Handler+0x1d8>)
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	b29b      	uxth	r3, r3
 800d036:	3302      	adds	r3, #2
 800d038:	b29a      	uxth	r2, r3
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	809a      	strh	r2, [r3, #4]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2203      	movs	r2, #3
 800d042:	701a      	strb	r2, [r3, #0]
 800d044:	e033      	b.n	800d0ae <ISOUDS_ACState_Handler+0x1c2>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2204      	movs	r2, #4
 800d04a:	701a      	strb	r2, [r3, #0]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	7b7a      	ldrb	r2, [r7, #13]
 800d050:	709a      	strb	r2, [r3, #2]
 800d052:	e02c      	b.n	800d0ae <ISOUDS_ACState_Handler+0x1c2>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2204      	movs	r2, #4
 800d058:	701a      	strb	r2, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2212      	movs	r2, #18
 800d05e:	709a      	strb	r2, [r3, #2]
 800d060:	e025      	b.n	800d0ae <ISOUDS_ACState_Handler+0x1c2>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2204      	movs	r2, #4
 800d066:	701a      	strb	r2, [r3, #0]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2212      	movs	r2, #18
 800d06c:	709a      	strb	r2, [r3, #2]
 800d06e:	e01e      	b.n	800d0ae <ISOUDS_ACState_Handler+0x1c2>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2204      	movs	r2, #4
 800d074:	701a      	strb	r2, [r3, #0]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2213      	movs	r2, #19
 800d07a:	709a      	strb	r2, [r3, #2]
 800d07c:	e017      	b.n	800d0ae <ISOUDS_ACState_Handler+0x1c2>
 800d07e:	4b0e      	ldr	r3, [pc, #56]	; (800d0b8 <ISOUDS_ACState_Handler+0x1cc>)
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	3b01      	subs	r3, #1
 800d084:	b2db      	uxtb	r3, r3
 800d086:	4618      	mov	r0, r3
 800d088:	f7ff fe68 	bl	800cd5c <ISOUDS_SA_CheckLevelSupp>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d106      	bne.n	800d0a0 <ISOUDS_ACState_Handler+0x1b4>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2204      	movs	r2, #4
 800d096:	701a      	strb	r2, [r3, #0]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2224      	movs	r2, #36	; 0x24
 800d09c:	709a      	strb	r2, [r3, #2]
 800d09e:	e006      	b.n	800d0ae <ISOUDS_ACState_Handler+0x1c2>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2204      	movs	r2, #4
 800d0a4:	701a      	strb	r2, [r3, #0]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2212      	movs	r2, #18
 800d0aa:	709a      	strb	r2, [r3, #2]
 800d0ac:	e7ff      	b.n	800d0ae <ISOUDS_ACState_Handler+0x1c2>
 800d0ae:	bf00      	nop
 800d0b0:	3710      	adds	r7, #16
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	240017b0 	.word	0x240017b0
 800d0bc:	240017cb 	.word	0x240017cb
 800d0c0:	2400179f 	.word	0x2400179f
 800d0c4:	240017d4 	.word	0x240017d4
 800d0c8:	240017ca 	.word	0x240017ca
 800d0cc:	240017cc 	.word	0x240017cc
 800d0d0:	08010a18 	.word	0x08010a18
 800d0d4:	24001720 	.word	0x24001720
 800d0d8:	240017a8 	.word	0x240017a8
 800d0dc:	240017b8 	.word	0x240017b8

0800d0e0 <ISOUDS_BDState_Handler>:
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	73fb      	strb	r3, [r7, #15]
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	73bb      	strb	r3, [r7, #14]
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	737b      	strb	r3, [r7, #13]
 800d0f8:	7b7b      	ldrb	r3, [r7, #13]
 800d0fa:	3b01      	subs	r3, #1
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7ff fe2c 	bl	800cd5c <ISOUDS_SA_CheckLevelSupp>
 800d104:	4603      	mov	r3, r0
 800d106:	73bb      	strb	r3, [r7, #14]
 800d108:	7bbb      	ldrb	r3, [r7, #14]
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	f040 8094 	bne.w	800d238 <ISOUDS_BDState_Handler+0x158>
 800d110:	4b4e      	ldr	r3, [pc, #312]	; (800d24c <ISOUDS_BDState_Handler+0x16c>)
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	4619      	mov	r1, r3
 800d116:	4a4e      	ldr	r2, [pc, #312]	; (800d250 <ISOUDS_BDState_Handler+0x170>)
 800d118:	460b      	mov	r3, r1
 800d11a:	005b      	lsls	r3, r3, #1
 800d11c:	440b      	add	r3, r1
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	4413      	add	r3, r2
 800d122:	3301      	adds	r3, #1
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	461a      	mov	r2, r3
 800d128:	4b4a      	ldr	r3, [pc, #296]	; (800d254 <ISOUDS_BDState_Handler+0x174>)
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	fa42 f303 	asr.w	r3, r2, r3
 800d130:	f003 0301 	and.w	r3, r3, #1
 800d134:	2b00      	cmp	r3, #0
 800d136:	d078      	beq.n	800d22a <ISOUDS_BDState_Handler+0x14a>
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	3301      	adds	r3, #1
 800d13c:	4a46      	ldr	r2, [pc, #280]	; (800d258 <ISOUDS_BDState_Handler+0x178>)
 800d13e:	7812      	ldrb	r2, [r2, #0]
 800d140:	4611      	mov	r1, r2
 800d142:	4618      	mov	r0, r3
 800d144:	f7ff fe94 	bl	800ce70 <ISOUDS_ValidateKey>
 800d148:	4603      	mov	r3, r0
 800d14a:	73fb      	strb	r3, [r7, #15]
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d12a      	bne.n	800d1a8 <ISOUDS_BDState_Handler+0xc8>
 800d152:	4b42      	ldr	r3, [pc, #264]	; (800d25c <ISOUDS_BDState_Handler+0x17c>)
 800d154:	2201      	movs	r2, #1
 800d156:	701a      	strb	r2, [r3, #0]
 800d158:	4b3f      	ldr	r3, [pc, #252]	; (800d258 <ISOUDS_BDState_Handler+0x178>)
 800d15a:	781a      	ldrb	r2, [r3, #0]
 800d15c:	4b40      	ldr	r3, [pc, #256]	; (800d260 <ISOUDS_BDState_Handler+0x180>)
 800d15e:	701a      	strb	r2, [r3, #0]
 800d160:	4b3f      	ldr	r3, [pc, #252]	; (800d260 <ISOUDS_BDState_Handler+0x180>)
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	3301      	adds	r3, #1
 800d166:	b2da      	uxtb	r2, r3
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	701a      	strb	r2, [r3, #0]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2202      	movs	r2, #2
 800d170:	809a      	strh	r2, [r3, #4]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2203      	movs	r2, #3
 800d176:	701a      	strb	r2, [r3, #0]
 800d178:	4b3a      	ldr	r3, [pc, #232]	; (800d264 <ISOUDS_BDState_Handler+0x184>)
 800d17a:	2201      	movs	r2, #1
 800d17c:	601a      	str	r2, [r3, #0]
 800d17e:	4b3a      	ldr	r3, [pc, #232]	; (800d268 <ISOUDS_BDState_Handler+0x188>)
 800d180:	2201      	movs	r2, #1
 800d182:	601a      	str	r2, [r3, #0]
 800d184:	4b39      	ldr	r3, [pc, #228]	; (800d26c <ISOUDS_BDState_Handler+0x18c>)
 800d186:	2200      	movs	r2, #0
 800d188:	701a      	strb	r2, [r3, #0]
 800d18a:	4b38      	ldr	r3, [pc, #224]	; (800d26c <ISOUDS_BDState_Handler+0x18c>)
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	4618      	mov	r0, r3
 800d190:	f7f5 ff8a 	bl	80030a8 <ISOUDS_SetSAAttempCount>
 800d194:	4b36      	ldr	r3, [pc, #216]	; (800d270 <ISOUDS_BDState_Handler+0x190>)
 800d196:	2203      	movs	r2, #3
 800d198:	701a      	strb	r2, [r3, #0]
 800d19a:	4b36      	ldr	r3, [pc, #216]	; (800d274 <ISOUDS_BDState_Handler+0x194>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	601a      	str	r2, [r3, #0]
 800d1a0:	4b35      	ldr	r3, [pc, #212]	; (800d278 <ISOUDS_BDState_Handler+0x198>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	601a      	str	r2, [r3, #0]
 800d1a6:	e04d      	b.n	800d244 <ISOUDS_BDState_Handler+0x164>
 800d1a8:	7bfb      	ldrb	r3, [r7, #15]
 800d1aa:	2b35      	cmp	r3, #53	; 0x35
 800d1ac:	d136      	bne.n	800d21c <ISOUDS_BDState_Handler+0x13c>
 800d1ae:	4b2f      	ldr	r3, [pc, #188]	; (800d26c <ISOUDS_BDState_Handler+0x18c>)
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	b2da      	uxtb	r2, r3
 800d1b6:	4b2d      	ldr	r3, [pc, #180]	; (800d26c <ISOUDS_BDState_Handler+0x18c>)
 800d1b8:	701a      	strb	r2, [r3, #0]
 800d1ba:	4b2c      	ldr	r3, [pc, #176]	; (800d26c <ISOUDS_BDState_Handler+0x18c>)
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7f5 ff72 	bl	80030a8 <ISOUDS_SetSAAttempCount>
 800d1c4:	f7f5 ff64 	bl	8003090 <ISOUDS_GetSAAttempCount>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	4b27      	ldr	r3, [pc, #156]	; (800d26c <ISOUDS_BDState_Handler+0x18c>)
 800d1ce:	701a      	strb	r2, [r3, #0]
 800d1d0:	4b26      	ldr	r3, [pc, #152]	; (800d26c <ISOUDS_BDState_Handler+0x18c>)
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d914      	bls.n	800d202 <ISOUDS_BDState_Handler+0x122>
 800d1d8:	4b28      	ldr	r3, [pc, #160]	; (800d27c <ISOUDS_BDState_Handler+0x19c>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d109      	bne.n	800d1f4 <ISOUDS_BDState_Handler+0x114>
 800d1e0:	4b26      	ldr	r3, [pc, #152]	; (800d27c <ISOUDS_BDState_Handler+0x19c>)
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	601a      	str	r2, [r3, #0]
 800d1e6:	4b26      	ldr	r3, [pc, #152]	; (800d280 <ISOUDS_BDState_Handler+0x1a0>)
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	601a      	str	r2, [r3, #0]
 800d1ec:	4b25      	ldr	r3, [pc, #148]	; (800d284 <ISOUDS_BDState_Handler+0x1a4>)
 800d1ee:	f242 7210 	movw	r2, #10000	; 0x2710
 800d1f2:	601a      	str	r2, [r3, #0]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2204      	movs	r2, #4
 800d1f8:	701a      	strb	r2, [r3, #0]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2236      	movs	r2, #54	; 0x36
 800d1fe:	709a      	strb	r2, [r3, #2]
 800d200:	e020      	b.n	800d244 <ISOUDS_BDState_Handler+0x164>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2204      	movs	r2, #4
 800d206:	701a      	strb	r2, [r3, #0]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2235      	movs	r2, #53	; 0x35
 800d20c:	709a      	strb	r2, [r3, #2]
 800d20e:	4b19      	ldr	r3, [pc, #100]	; (800d274 <ISOUDS_BDState_Handler+0x194>)
 800d210:	2200      	movs	r2, #0
 800d212:	601a      	str	r2, [r3, #0]
 800d214:	4b18      	ldr	r3, [pc, #96]	; (800d278 <ISOUDS_BDState_Handler+0x198>)
 800d216:	2200      	movs	r2, #0
 800d218:	601a      	str	r2, [r3, #0]
 800d21a:	e013      	b.n	800d244 <ISOUDS_BDState_Handler+0x164>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2204      	movs	r2, #4
 800d220:	701a      	strb	r2, [r3, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	7bfa      	ldrb	r2, [r7, #15]
 800d226:	709a      	strb	r2, [r3, #2]
 800d228:	e00c      	b.n	800d244 <ISOUDS_BDState_Handler+0x164>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2204      	movs	r2, #4
 800d22e:	701a      	strb	r2, [r3, #0]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	227e      	movs	r2, #126	; 0x7e
 800d234:	709a      	strb	r2, [r3, #2]
 800d236:	e005      	b.n	800d244 <ISOUDS_BDState_Handler+0x164>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2204      	movs	r2, #4
 800d23c:	701a      	strb	r2, [r3, #0]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2212      	movs	r2, #18
 800d242:	709a      	strb	r2, [r3, #2]
 800d244:	bf00      	nop
 800d246:	3710      	adds	r7, #16
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	240017cc 	.word	0x240017cc
 800d250:	08010a18 	.word	0x08010a18
 800d254:	24001720 	.word	0x24001720
 800d258:	240017b0 	.word	0x240017b0
 800d25c:	240017cb 	.word	0x240017cb
 800d260:	2400179f 	.word	0x2400179f
 800d264:	240017b4 	.word	0x240017b4
 800d268:	240017a4 	.word	0x240017a4
 800d26c:	240017a0 	.word	0x240017a0
 800d270:	240017ca 	.word	0x240017ca
 800d274:	240017b8 	.word	0x240017b8
 800d278:	240017a8 	.word	0x240017a8
 800d27c:	240017ac 	.word	0x240017ac
 800d280:	240017bc 	.word	0x240017bc
 800d284:	240017d0 	.word	0x240017d0

0800d288 <ISOUDS_StrtDiagSess>:
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
 800d292:	2300      	movs	r3, #0
 800d294:	73bb      	strb	r3, [r7, #14]
 800d296:	2300      	movs	r3, #0
 800d298:	737b      	strb	r3, [r7, #13]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d045      	beq.n	800d32c <ISOUDS_StrtDiagSess+0xa4>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	889b      	ldrh	r3, [r3, #4]
 800d2a4:	2b02      	cmp	r3, #2
 800d2a6:	d111      	bne.n	800d2cc <ISOUDS_StrtDiagSess+0x44>
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2b0:	73fb      	strb	r3, [r7, #15]
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d2ba:	73bb      	strb	r3, [r7, #14]
 800d2bc:	7bfb      	ldrb	r3, [r7, #15]
 800d2be:	6879      	ldr	r1, [r7, #4]
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f000 f837 	bl	800d334 <ISOUDS_SwtSess>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	737b      	strb	r3, [r7, #13]
 800d2ca:	e005      	b.n	800d2d8 <ISOUDS_StrtDiagSess+0x50>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2204      	movs	r2, #4
 800d2d0:	701a      	strb	r2, [r3, #0]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2213      	movs	r2, #19
 800d2d6:	709a      	strb	r2, [r3, #2]
 800d2d8:	7b7b      	ldrb	r3, [r7, #13]
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d126      	bne.n	800d32c <ISOUDS_StrtDiagSess+0xa4>
 800d2de:	7bbb      	ldrb	r3, [r7, #14]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d121      	bne.n	800d328 <ISOUDS_StrtDiagSess+0xa0>
 800d2e4:	f7fd fec8 	bl	800b078 <ISUDS_SessionChangeInd>
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	7bfa      	ldrb	r2, [r7, #15]
 800d2ec:	701a      	strb	r2, [r3, #0]
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	701a      	strb	r2, [r3, #0]
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	3302      	adds	r3, #2
 800d2fa:	2232      	movs	r2, #50	; 0x32
 800d2fc:	701a      	strb	r2, [r3, #0]
 800d2fe:	23c8      	movs	r3, #200	; 0xc8
 800d300:	817b      	strh	r3, [r7, #10]
 800d302:	897b      	ldrh	r3, [r7, #10]
 800d304:	0a1b      	lsrs	r3, r3, #8
 800d306:	b29a      	uxth	r2, r3
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	3303      	adds	r3, #3
 800d30c:	b2d2      	uxtb	r2, r2
 800d30e:	701a      	strb	r2, [r3, #0]
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	3304      	adds	r3, #4
 800d314:	897a      	ldrh	r2, [r7, #10]
 800d316:	b2d2      	uxtb	r2, r2
 800d318:	701a      	strb	r2, [r3, #0]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2206      	movs	r2, #6
 800d31e:	809a      	strh	r2, [r3, #4]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2203      	movs	r2, #3
 800d324:	701a      	strb	r2, [r3, #0]
 800d326:	e001      	b.n	800d32c <ISOUDS_StrtDiagSess+0xa4>
 800d328:	f7fd fd90 	bl	800ae4c <ISOUDS_ServerRst>
 800d32c:	bf00      	nop
 800d32e:	3710      	adds	r7, #16
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <ISOUDS_SwtSess>:
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	4603      	mov	r3, r0
 800d33c:	6039      	str	r1, [r7, #0]
 800d33e:	71fb      	strb	r3, [r7, #7]
 800d340:	2300      	movs	r3, #0
 800d342:	737b      	strb	r3, [r7, #13]
 800d344:	2300      	movs	r3, #0
 800d346:	75fb      	strb	r3, [r7, #23]
 800d348:	2300      	movs	r3, #0
 800d34a:	74fb      	strb	r3, [r7, #19]
 800d34c:	2300      	movs	r3, #0
 800d34e:	74bb      	strb	r3, [r7, #18]
 800d350:	2300      	movs	r3, #0
 800d352:	74fb      	strb	r3, [r7, #19]
 800d354:	2300      	movs	r3, #0
 800d356:	75bb      	strb	r3, [r7, #22]
 800d358:	e011      	b.n	800d37e <ISOUDS_SwtSess+0x4a>
 800d35a:	7dba      	ldrb	r2, [r7, #22]
 800d35c:	4963      	ldr	r1, [pc, #396]	; (800d4ec <ISOUDS_SwtSess+0x1b8>)
 800d35e:	4613      	mov	r3, r2
 800d360:	005b      	lsls	r3, r3, #1
 800d362:	4413      	add	r3, r2
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	440b      	add	r3, r1
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	79fa      	ldrb	r2, [r7, #7]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d103      	bne.n	800d378 <ISOUDS_SwtSess+0x44>
 800d370:	2301      	movs	r3, #1
 800d372:	74fb      	strb	r3, [r7, #19]
 800d374:	7dbb      	ldrb	r3, [r7, #22]
 800d376:	757b      	strb	r3, [r7, #21]
 800d378:	7dbb      	ldrb	r3, [r7, #22]
 800d37a:	3301      	adds	r3, #1
 800d37c:	75bb      	strb	r3, [r7, #22]
 800d37e:	f7f5 fe9e 	bl	80030be <ISOUDS_Get_StrtDiagSessCfgMaxSub>
 800d382:	4603      	mov	r3, r0
 800d384:	461a      	mov	r2, r3
 800d386:	7dbb      	ldrb	r3, [r7, #22]
 800d388:	4293      	cmp	r3, r2
 800d38a:	d202      	bcs.n	800d392 <ISOUDS_SwtSess+0x5e>
 800d38c:	7cfb      	ldrb	r3, [r7, #19]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d0e3      	beq.n	800d35a <ISOUDS_SwtSess+0x26>
 800d392:	7cfb      	ldrb	r3, [r7, #19]
 800d394:	2b01      	cmp	r3, #1
 800d396:	f040 809e 	bne.w	800d4d6 <ISOUDS_SwtSess+0x1a2>
 800d39a:	2300      	movs	r3, #0
 800d39c:	74bb      	strb	r3, [r7, #18]
 800d39e:	2300      	movs	r3, #0
 800d3a0:	75bb      	strb	r3, [r7, #22]
 800d3a2:	e00f      	b.n	800d3c4 <ISOUDS_SwtSess+0x90>
 800d3a4:	7dbb      	ldrb	r3, [r7, #22]
 800d3a6:	4a52      	ldr	r2, [pc, #328]	; (800d4f0 <ISOUDS_SwtSess+0x1bc>)
 800d3a8:	005b      	lsls	r3, r3, #1
 800d3aa:	4413      	add	r3, r2
 800d3ac:	785a      	ldrb	r2, [r3, #1]
 800d3ae:	4b51      	ldr	r3, [pc, #324]	; (800d4f4 <ISOUDS_SwtSess+0x1c0>)
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d103      	bne.n	800d3be <ISOUDS_SwtSess+0x8a>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	74bb      	strb	r3, [r7, #18]
 800d3ba:	7dbb      	ldrb	r3, [r7, #22]
 800d3bc:	753b      	strb	r3, [r7, #20]
 800d3be:	7dbb      	ldrb	r3, [r7, #22]
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	75bb      	strb	r3, [r7, #22]
 800d3c4:	f7f5 fe7b 	bl	80030be <ISOUDS_Get_StrtDiagSessCfgMaxSub>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	7dbb      	ldrb	r3, [r7, #22]
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d202      	bcs.n	800d3d8 <ISOUDS_SwtSess+0xa4>
 800d3d2:	7cbb      	ldrb	r3, [r7, #18]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d0e5      	beq.n	800d3a4 <ISOUDS_SwtSess+0x70>
 800d3d8:	7cbb      	ldrb	r3, [r7, #18]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d174      	bne.n	800d4c8 <ISOUDS_SwtSess+0x194>
 800d3de:	7d3a      	ldrb	r2, [r7, #20]
 800d3e0:	4942      	ldr	r1, [pc, #264]	; (800d4ec <ISOUDS_SwtSess+0x1b8>)
 800d3e2:	4613      	mov	r3, r2
 800d3e4:	005b      	lsls	r3, r3, #1
 800d3e6:	4413      	add	r3, r2
 800d3e8:	009b      	lsls	r3, r3, #2
 800d3ea:	440b      	add	r3, r1
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	7d7b      	ldrb	r3, [r7, #21]
 800d3f4:	4a3e      	ldr	r2, [pc, #248]	; (800d4f0 <ISOUDS_SwtSess+0x1bc>)
 800d3f6:	005b      	lsls	r3, r3, #1
 800d3f8:	4413      	add	r3, r2
 800d3fa:	785b      	ldrb	r3, [r3, #1]
 800d3fc:	fa41 f303 	asr.w	r3, r1, r3
 800d400:	f003 0301 	and.w	r3, r3, #1
 800d404:	2b00      	cmp	r3, #0
 800d406:	d05f      	beq.n	800d4c8 <ISOUDS_SwtSess+0x194>
 800d408:	2301      	movs	r3, #1
 800d40a:	747b      	strb	r3, [r7, #17]
 800d40c:	7d7a      	ldrb	r2, [r7, #21]
 800d40e:	4937      	ldr	r1, [pc, #220]	; (800d4ec <ISOUDS_SwtSess+0x1b8>)
 800d410:	4613      	mov	r3, r2
 800d412:	005b      	lsls	r3, r3, #1
 800d414:	4413      	add	r3, r2
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	440b      	add	r3, r1
 800d41a:	3302      	adds	r3, #2
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d127      	bne.n	800d472 <ISOUDS_SwtSess+0x13e>
 800d422:	2300      	movs	r3, #0
 800d424:	747b      	strb	r3, [r7, #17]
 800d426:	2300      	movs	r3, #0
 800d428:	81fb      	strh	r3, [r7, #14]
 800d42a:	e012      	b.n	800d452 <ISOUDS_SwtSess+0x11e>
 800d42c:	7d7a      	ldrb	r2, [r7, #21]
 800d42e:	89f9      	ldrh	r1, [r7, #14]
 800d430:	482e      	ldr	r0, [pc, #184]	; (800d4ec <ISOUDS_SwtSess+0x1b8>)
 800d432:	4613      	mov	r3, r2
 800d434:	005b      	lsls	r3, r3, #1
 800d436:	4413      	add	r3, r2
 800d438:	009b      	lsls	r3, r3, #2
 800d43a:	4403      	add	r3, r0
 800d43c:	440b      	add	r3, r1
 800d43e:	3304      	adds	r3, #4
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	4618      	mov	r0, r3
 800d444:	f7ff fc36 	bl	800ccb4 <ISOUDS_GetSAStLevel>
 800d448:	4603      	mov	r3, r0
 800d44a:	747b      	strb	r3, [r7, #17]
 800d44c:	89fb      	ldrh	r3, [r7, #14]
 800d44e:	3301      	adds	r3, #1
 800d450:	81fb      	strh	r3, [r7, #14]
 800d452:	7d3a      	ldrb	r2, [r7, #20]
 800d454:	4925      	ldr	r1, [pc, #148]	; (800d4ec <ISOUDS_SwtSess+0x1b8>)
 800d456:	4613      	mov	r3, r2
 800d458:	005b      	lsls	r3, r3, #1
 800d45a:	4413      	add	r3, r2
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	440b      	add	r3, r1
 800d460:	3303      	adds	r3, #3
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	b29b      	uxth	r3, r3
 800d466:	89fa      	ldrh	r2, [r7, #14]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d202      	bcs.n	800d472 <ISOUDS_SwtSess+0x13e>
 800d46c:	7c7b      	ldrb	r3, [r7, #17]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d0dc      	beq.n	800d42c <ISOUDS_SwtSess+0xf8>
 800d472:	7c7b      	ldrb	r3, [r7, #17]
 800d474:	2b01      	cmp	r3, #1
 800d476:	d120      	bne.n	800d4ba <ISOUDS_SwtSess+0x186>
 800d478:	7d7a      	ldrb	r2, [r7, #21]
 800d47a:	491c      	ldr	r1, [pc, #112]	; (800d4ec <ISOUDS_SwtSess+0x1b8>)
 800d47c:	4613      	mov	r3, r2
 800d47e:	005b      	lsls	r3, r3, #1
 800d480:	4413      	add	r3, r2
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	440b      	add	r3, r1
 800d486:	3308      	adds	r3, #8
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	6838      	ldr	r0, [r7, #0]
 800d48c:	4798      	blx	r3
 800d48e:	4603      	mov	r3, r0
 800d490:	737b      	strb	r3, [r7, #13]
 800d492:	7b7b      	ldrb	r3, [r7, #13]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d109      	bne.n	800d4ac <ISOUDS_SwtSess+0x178>
 800d498:	7d7b      	ldrb	r3, [r7, #21]
 800d49a:	4a15      	ldr	r2, [pc, #84]	; (800d4f0 <ISOUDS_SwtSess+0x1bc>)
 800d49c:	005b      	lsls	r3, r3, #1
 800d49e:	4413      	add	r3, r2
 800d4a0:	785a      	ldrb	r2, [r3, #1]
 800d4a2:	4b14      	ldr	r3, [pc, #80]	; (800d4f4 <ISOUDS_SwtSess+0x1c0>)
 800d4a4:	701a      	strb	r2, [r3, #0]
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	75fb      	strb	r3, [r7, #23]
 800d4aa:	e01a      	b.n	800d4e2 <ISOUDS_SwtSess+0x1ae>
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	2204      	movs	r2, #4
 800d4b0:	701a      	strb	r2, [r3, #0]
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	7b7a      	ldrb	r2, [r7, #13]
 800d4b6:	709a      	strb	r2, [r3, #2]
 800d4b8:	e013      	b.n	800d4e2 <ISOUDS_SwtSess+0x1ae>
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	2204      	movs	r2, #4
 800d4be:	701a      	strb	r2, [r3, #0]
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	2233      	movs	r2, #51	; 0x33
 800d4c4:	709a      	strb	r2, [r3, #2]
 800d4c6:	e00c      	b.n	800d4e2 <ISOUDS_SwtSess+0x1ae>
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	2204      	movs	r2, #4
 800d4cc:	701a      	strb	r2, [r3, #0]
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	227e      	movs	r2, #126	; 0x7e
 800d4d2:	709a      	strb	r2, [r3, #2]
 800d4d4:	e005      	b.n	800d4e2 <ISOUDS_SwtSess+0x1ae>
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	2204      	movs	r2, #4
 800d4da:	701a      	strb	r2, [r3, #0]
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	2212      	movs	r2, #18
 800d4e0:	709a      	strb	r2, [r3, #2]
 800d4e2:	7dfb      	ldrb	r3, [r7, #23]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3718      	adds	r7, #24
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	2400024c 	.word	0x2400024c
 800d4f0:	08010a48 	.word	0x08010a48
 800d4f4:	24001720 	.word	0x24001720

0800d4f8 <ISOUDS_TrnsfrDa>:
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
 800d502:	2300      	movs	r3, #0
 800d504:	737b      	strb	r3, [r7, #13]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f000 819f 	beq.w	800d84c <ISOUDS_TrnsfrDa+0x354>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	889b      	ldrh	r3, [r3, #4]
 800d512:	2b01      	cmp	r3, #1
 800d514:	f240 8193 	bls.w	800d83e <ISOUDS_TrnsfrDa+0x346>
 800d518:	4b85      	ldr	r3, [pc, #532]	; (800d730 <ISOUDS_TrnsfrDa+0x238>)
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d106      	bne.n	800d52e <ISOUDS_TrnsfrDa+0x36>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2224      	movs	r2, #36	; 0x24
 800d524:	709a      	strb	r2, [r3, #2]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2204      	movs	r2, #4
 800d52a:	701a      	strb	r2, [r3, #0]
 800d52c:	e18e      	b.n	800d84c <ISOUDS_TrnsfrDa+0x354>
 800d52e:	4b80      	ldr	r3, [pc, #512]	; (800d730 <ISOUDS_TrnsfrDa+0x238>)
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	2b03      	cmp	r3, #3
 800d534:	dc02      	bgt.n	800d53c <ISOUDS_TrnsfrDa+0x44>
 800d536:	2b00      	cmp	r3, #0
 800d538:	dc05      	bgt.n	800d546 <ISOUDS_TrnsfrDa+0x4e>
 800d53a:	e17c      	b.n	800d836 <ISOUDS_TrnsfrDa+0x33e>
 800d53c:	3b04      	subs	r3, #4
 800d53e:	2b02      	cmp	r3, #2
 800d540:	f200 8179 	bhi.w	800d836 <ISOUDS_TrnsfrDa+0x33e>
 800d544:	e0d6      	b.n	800d6f4 <ISOUDS_TrnsfrDa+0x1fc>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	889b      	ldrh	r3, [r3, #4]
 800d54a:	3b02      	subs	r3, #2
 800d54c:	81fb      	strh	r3, [r7, #14]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	2b05      	cmp	r3, #5
 800d554:	d131      	bne.n	800d5ba <ISOUDS_TrnsfrDa+0xc2>
 800d556:	f7f5 fe79 	bl	800324c <ISOUDS_GetTrnsfrReqstDwnldStat>
 800d55a:	4603      	mov	r3, r0
 800d55c:	737b      	strb	r3, [r7, #13]
 800d55e:	7b7b      	ldrb	r3, [r7, #13]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d123      	bne.n	800d5ac <ISOUDS_TrnsfrDa+0xb4>
 800d564:	89fa      	ldrh	r2, [r7, #14]
 800d566:	4b73      	ldr	r3, [pc, #460]	; (800d734 <ISOUDS_TrnsfrDa+0x23c>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4413      	add	r3, r2
 800d56c:	4a71      	ldr	r2, [pc, #452]	; (800d734 <ISOUDS_TrnsfrDa+0x23c>)
 800d56e:	6013      	str	r3, [r2, #0]
 800d570:	4b71      	ldr	r3, [pc, #452]	; (800d738 <ISOUDS_TrnsfrDa+0x240>)
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	89fb      	ldrh	r3, [r7, #14]
 800d576:	1ad3      	subs	r3, r2, r3
 800d578:	4a6f      	ldr	r2, [pc, #444]	; (800d738 <ISOUDS_TrnsfrDa+0x240>)
 800d57a:	6013      	str	r3, [r2, #0]
 800d57c:	4b6f      	ldr	r3, [pc, #444]	; (800d73c <ISOUDS_TrnsfrDa+0x244>)
 800d57e:	781a      	ldrb	r2, [r3, #0]
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	701a      	strb	r2, [r3, #0]
 800d584:	4b6d      	ldr	r3, [pc, #436]	; (800d73c <ISOUDS_TrnsfrDa+0x244>)
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	3301      	adds	r3, #1
 800d58a:	b2da      	uxtb	r2, r3
 800d58c:	4b6b      	ldr	r3, [pc, #428]	; (800d73c <ISOUDS_TrnsfrDa+0x244>)
 800d58e:	701a      	strb	r2, [r3, #0]
 800d590:	4b69      	ldr	r3, [pc, #420]	; (800d738 <ISOUDS_TrnsfrDa+0x240>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d102      	bne.n	800d59e <ISOUDS_TrnsfrDa+0xa6>
 800d598:	4b65      	ldr	r3, [pc, #404]	; (800d730 <ISOUDS_TrnsfrDa+0x238>)
 800d59a:	2203      	movs	r2, #3
 800d59c:	701a      	strb	r2, [r3, #0]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2202      	movs	r2, #2
 800d5a2:	809a      	strh	r2, [r3, #4]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2203      	movs	r2, #3
 800d5a8:	701a      	strb	r2, [r3, #0]
 800d5aa:	e14f      	b.n	800d84c <ISOUDS_TrnsfrDa+0x354>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	7b7a      	ldrb	r2, [r7, #13]
 800d5b0:	709a      	strb	r2, [r3, #2]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2205      	movs	r2, #5
 800d5b6:	701a      	strb	r2, [r3, #0]
 800d5b8:	e148      	b.n	800d84c <ISOUDS_TrnsfrDa+0x354>
 800d5ba:	4b5d      	ldr	r3, [pc, #372]	; (800d730 <ISOUDS_TrnsfrDa+0x238>)
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	2b03      	cmp	r3, #3
 800d5c0:	d06d      	beq.n	800d69e <ISOUDS_TrnsfrDa+0x1a6>
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	781a      	ldrb	r2, [r3, #0]
 800d5c6:	4b5d      	ldr	r3, [pc, #372]	; (800d73c <ISOUDS_TrnsfrDa+0x244>)
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d167      	bne.n	800d69e <ISOUDS_TrnsfrDa+0x1a6>
 800d5ce:	89fa      	ldrh	r2, [r7, #14]
 800d5d0:	4b59      	ldr	r3, [pc, #356]	; (800d738 <ISOUDS_TrnsfrDa+0x240>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d85a      	bhi.n	800d68e <ISOUDS_TrnsfrDa+0x196>
 800d5d8:	f7f4 f881 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d151      	bne.n	800d686 <ISOUDS_TrnsfrDa+0x18e>
 800d5e2:	f7f4 f884 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d14c      	bne.n	800d686 <ISOUDS_TrnsfrDa+0x18e>
 800d5ec:	f7f4 f887 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d147      	bne.n	800d686 <ISOUDS_TrnsfrDa+0x18e>
 800d5f6:	4b4f      	ldr	r3, [pc, #316]	; (800d734 <ISOUDS_TrnsfrDa+0x23c>)
 800d5f8:	6818      	ldr	r0, [r3, #0]
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	1c5a      	adds	r2, r3, #1
 800d5fe:	89fb      	ldrh	r3, [r7, #14]
 800d600:	4619      	mov	r1, r3
 800d602:	f7f5 fe13 	bl	800322c <ISOUDS_TransferDataDownloadReq>
 800d606:	4603      	mov	r3, r0
 800d608:	737b      	strb	r3, [r7, #13]
 800d60a:	7b7b      	ldrb	r3, [r7, #13]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d126      	bne.n	800d65e <ISOUDS_TrnsfrDa+0x166>
 800d610:	89fa      	ldrh	r2, [r7, #14]
 800d612:	4b48      	ldr	r3, [pc, #288]	; (800d734 <ISOUDS_TrnsfrDa+0x23c>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4413      	add	r3, r2
 800d618:	4a46      	ldr	r2, [pc, #280]	; (800d734 <ISOUDS_TrnsfrDa+0x23c>)
 800d61a:	6013      	str	r3, [r2, #0]
 800d61c:	4b46      	ldr	r3, [pc, #280]	; (800d738 <ISOUDS_TrnsfrDa+0x240>)
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	89fb      	ldrh	r3, [r7, #14]
 800d622:	1ad3      	subs	r3, r2, r3
 800d624:	4a44      	ldr	r2, [pc, #272]	; (800d738 <ISOUDS_TrnsfrDa+0x240>)
 800d626:	6013      	str	r3, [r2, #0]
 800d628:	4b44      	ldr	r3, [pc, #272]	; (800d73c <ISOUDS_TrnsfrDa+0x244>)
 800d62a:	781a      	ldrb	r2, [r3, #0]
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	701a      	strb	r2, [r3, #0]
 800d630:	4b42      	ldr	r3, [pc, #264]	; (800d73c <ISOUDS_TrnsfrDa+0x244>)
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	3301      	adds	r3, #1
 800d636:	b2da      	uxtb	r2, r3
 800d638:	4b40      	ldr	r3, [pc, #256]	; (800d73c <ISOUDS_TrnsfrDa+0x244>)
 800d63a:	701a      	strb	r2, [r3, #0]
 800d63c:	4b3e      	ldr	r3, [pc, #248]	; (800d738 <ISOUDS_TrnsfrDa+0x240>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d102      	bne.n	800d64a <ISOUDS_TrnsfrDa+0x152>
 800d644:	4b3a      	ldr	r3, [pc, #232]	; (800d730 <ISOUDS_TrnsfrDa+0x238>)
 800d646:	2203      	movs	r2, #3
 800d648:	701a      	strb	r2, [r3, #0]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2202      	movs	r2, #2
 800d64e:	809a      	strh	r2, [r3, #4]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2203      	movs	r2, #3
 800d654:	701a      	strb	r2, [r3, #0]
 800d656:	4b36      	ldr	r3, [pc, #216]	; (800d730 <ISOUDS_TrnsfrDa+0x238>)
 800d658:	2202      	movs	r2, #2
 800d65a:	701a      	strb	r2, [r3, #0]
 800d65c:	e01e      	b.n	800d69c <ISOUDS_TrnsfrDa+0x1a4>
 800d65e:	7b7b      	ldrb	r3, [r7, #13]
 800d660:	2b78      	cmp	r3, #120	; 0x78
 800d662:	d109      	bne.n	800d678 <ISOUDS_TrnsfrDa+0x180>
 800d664:	4b32      	ldr	r3, [pc, #200]	; (800d730 <ISOUDS_TrnsfrDa+0x238>)
 800d666:	2202      	movs	r2, #2
 800d668:	701a      	strb	r2, [r3, #0]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2278      	movs	r2, #120	; 0x78
 800d66e:	709a      	strb	r2, [r3, #2]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2204      	movs	r2, #4
 800d674:	701a      	strb	r2, [r3, #0]
 800d676:	e011      	b.n	800d69c <ISOUDS_TrnsfrDa+0x1a4>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	7b7a      	ldrb	r2, [r7, #13]
 800d67c:	709a      	strb	r2, [r3, #2]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2204      	movs	r2, #4
 800d682:	701a      	strb	r2, [r3, #0]
 800d684:	e00a      	b.n	800d69c <ISOUDS_TrnsfrDa+0x1a4>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2222      	movs	r2, #34	; 0x22
 800d68a:	709a      	strb	r2, [r3, #2]
 800d68c:	e031      	b.n	800d6f2 <ISOUDS_TrnsfrDa+0x1fa>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2271      	movs	r2, #113	; 0x71
 800d692:	709a      	strb	r2, [r3, #2]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2204      	movs	r2, #4
 800d698:	701a      	strb	r2, [r3, #0]
 800d69a:	e02a      	b.n	800d6f2 <ISOUDS_TrnsfrDa+0x1fa>
 800d69c:	e029      	b.n	800d6f2 <ISOUDS_TrnsfrDa+0x1fa>
 800d69e:	4b24      	ldr	r3, [pc, #144]	; (800d730 <ISOUDS_TrnsfrDa+0x238>)
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d013      	beq.n	800d6ce <ISOUDS_TrnsfrDa+0x1d6>
 800d6a6:	4b25      	ldr	r3, [pc, #148]	; (800d73c <ISOUDS_TrnsfrDa+0x244>)
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	3b01      	subs	r3, #1
 800d6ac:	683a      	ldr	r2, [r7, #0]
 800d6ae:	7812      	ldrb	r2, [r2, #0]
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d10c      	bne.n	800d6ce <ISOUDS_TrnsfrDa+0x1d6>
 800d6b4:	4b21      	ldr	r3, [pc, #132]	; (800d73c <ISOUDS_TrnsfrDa+0x244>)
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	b2da      	uxtb	r2, r3
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	701a      	strb	r2, [r3, #0]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2202      	movs	r2, #2
 800d6c4:	809a      	strh	r2, [r3, #4]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2203      	movs	r2, #3
 800d6ca:	701a      	strb	r2, [r3, #0]
 800d6cc:	e011      	b.n	800d6f2 <ISOUDS_TrnsfrDa+0x1fa>
 800d6ce:	4b18      	ldr	r3, [pc, #96]	; (800d730 <ISOUDS_TrnsfrDa+0x238>)
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	d106      	bne.n	800d6e4 <ISOUDS_TrnsfrDa+0x1ec>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2224      	movs	r2, #36	; 0x24
 800d6da:	709a      	strb	r2, [r3, #2]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2204      	movs	r2, #4
 800d6e0:	701a      	strb	r2, [r3, #0]
 800d6e2:	e0b3      	b.n	800d84c <ISOUDS_TrnsfrDa+0x354>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2273      	movs	r2, #115	; 0x73
 800d6e8:	709a      	strb	r2, [r3, #2]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2204      	movs	r2, #4
 800d6ee:	701a      	strb	r2, [r3, #0]
 800d6f0:	e0ac      	b.n	800d84c <ISOUDS_TrnsfrDa+0x354>
 800d6f2:	e0ab      	b.n	800d84c <ISOUDS_TrnsfrDa+0x354>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	889b      	ldrh	r3, [r3, #4]
 800d6f8:	2b02      	cmp	r3, #2
 800d6fa:	f040 8094 	bne.w	800d826 <ISOUDS_TrnsfrDa+0x32e>
 800d6fe:	4b0c      	ldr	r3, [pc, #48]	; (800d730 <ISOUDS_TrnsfrDa+0x238>)
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	2b06      	cmp	r3, #6
 800d704:	d062      	beq.n	800d7cc <ISOUDS_TrnsfrDa+0x2d4>
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	781a      	ldrb	r2, [r3, #0]
 800d70a:	4b0d      	ldr	r3, [pc, #52]	; (800d740 <ISOUDS_TrnsfrDa+0x248>)
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d15c      	bne.n	800d7cc <ISOUDS_TrnsfrDa+0x2d4>
 800d712:	f7f4 f814 	bl	800173e <ISOUDS_GetServerBuffSize>
 800d716:	4603      	mov	r3, r0
 800d718:	1e9a      	subs	r2, r3, #2
 800d71a:	4b07      	ldr	r3, [pc, #28]	; (800d738 <ISOUDS_TrnsfrDa+0x240>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d210      	bcs.n	800d744 <ISOUDS_TrnsfrDa+0x24c>
 800d722:	f7f4 f80c 	bl	800173e <ISOUDS_GetServerBuffSize>
 800d726:	4603      	mov	r3, r0
 800d728:	b29b      	uxth	r3, r3
 800d72a:	3b02      	subs	r3, #2
 800d72c:	81fb      	strh	r3, [r7, #14]
 800d72e:	e00c      	b.n	800d74a <ISOUDS_TrnsfrDa+0x252>
 800d730:	240017d7 	.word	0x240017d7
 800d734:	240017dc 	.word	0x240017dc
 800d738:	240017d8 	.word	0x240017d8
 800d73c:	240017d5 	.word	0x240017d5
 800d740:	240017d6 	.word	0x240017d6
 800d744:	4b43      	ldr	r3, [pc, #268]	; (800d854 <ISOUDS_TrnsfrDa+0x35c>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	81fb      	strh	r3, [r7, #14]
 800d74a:	4b43      	ldr	r3, [pc, #268]	; (800d858 <ISOUDS_TrnsfrDa+0x360>)
 800d74c:	6818      	ldr	r0, [r3, #0]
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	1c5a      	adds	r2, r3, #1
 800d752:	89fb      	ldrh	r3, [r7, #14]
 800d754:	4619      	mov	r1, r3
 800d756:	f7f5 fd85 	bl	8003264 <ISOUDS_TranferDataUploadRequest>
 800d75a:	4603      	mov	r3, r0
 800d75c:	737b      	strb	r3, [r7, #13]
 800d75e:	7b7b      	ldrb	r3, [r7, #13]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d12c      	bne.n	800d7be <ISOUDS_TrnsfrDa+0x2c6>
 800d764:	4b3b      	ldr	r3, [pc, #236]	; (800d854 <ISOUDS_TrnsfrDa+0x35c>)
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	89fb      	ldrh	r3, [r7, #14]
 800d76a:	1ad3      	subs	r3, r2, r3
 800d76c:	4a39      	ldr	r2, [pc, #228]	; (800d854 <ISOUDS_TrnsfrDa+0x35c>)
 800d76e:	6013      	str	r3, [r2, #0]
 800d770:	89fa      	ldrh	r2, [r7, #14]
 800d772:	4b39      	ldr	r3, [pc, #228]	; (800d858 <ISOUDS_TrnsfrDa+0x360>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4413      	add	r3, r2
 800d778:	4a37      	ldr	r2, [pc, #220]	; (800d858 <ISOUDS_TrnsfrDa+0x360>)
 800d77a:	6013      	str	r3, [r2, #0]
 800d77c:	4a37      	ldr	r2, [pc, #220]	; (800d85c <ISOUDS_TrnsfrDa+0x364>)
 800d77e:	89fb      	ldrh	r3, [r7, #14]
 800d780:	8013      	strh	r3, [r2, #0]
 800d782:	4b37      	ldr	r3, [pc, #220]	; (800d860 <ISOUDS_TrnsfrDa+0x368>)
 800d784:	781a      	ldrb	r2, [r3, #0]
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	701a      	strb	r2, [r3, #0]
 800d78a:	4b35      	ldr	r3, [pc, #212]	; (800d860 <ISOUDS_TrnsfrDa+0x368>)
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	3301      	adds	r3, #1
 800d790:	b2da      	uxtb	r2, r3
 800d792:	4b33      	ldr	r3, [pc, #204]	; (800d860 <ISOUDS_TrnsfrDa+0x368>)
 800d794:	701a      	strb	r2, [r3, #0]
 800d796:	4b2f      	ldr	r3, [pc, #188]	; (800d854 <ISOUDS_TrnsfrDa+0x35c>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d103      	bne.n	800d7a6 <ISOUDS_TrnsfrDa+0x2ae>
 800d79e:	4b31      	ldr	r3, [pc, #196]	; (800d864 <ISOUDS_TrnsfrDa+0x36c>)
 800d7a0:	2206      	movs	r2, #6
 800d7a2:	701a      	strb	r2, [r3, #0]
 800d7a4:	e002      	b.n	800d7ac <ISOUDS_TrnsfrDa+0x2b4>
 800d7a6:	4b2f      	ldr	r3, [pc, #188]	; (800d864 <ISOUDS_TrnsfrDa+0x36c>)
 800d7a8:	2205      	movs	r2, #5
 800d7aa:	701a      	strb	r2, [r3, #0]
 800d7ac:	89fb      	ldrh	r3, [r7, #14]
 800d7ae:	3302      	adds	r3, #2
 800d7b0:	b29a      	uxth	r2, r3
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	809a      	strh	r2, [r3, #4]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2203      	movs	r2, #3
 800d7ba:	701a      	strb	r2, [r3, #0]
 800d7bc:	e03a      	b.n	800d834 <ISOUDS_TrnsfrDa+0x33c>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	7b7a      	ldrb	r2, [r7, #13]
 800d7c2:	709a      	strb	r2, [r3, #2]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2205      	movs	r2, #5
 800d7c8:	701a      	strb	r2, [r3, #0]
 800d7ca:	e033      	b.n	800d834 <ISOUDS_TrnsfrDa+0x33c>
 800d7cc:	4b25      	ldr	r3, [pc, #148]	; (800d864 <ISOUDS_TrnsfrDa+0x36c>)
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	2b04      	cmp	r3, #4
 800d7d2:	d016      	beq.n	800d802 <ISOUDS_TrnsfrDa+0x30a>
 800d7d4:	4b22      	ldr	r3, [pc, #136]	; (800d860 <ISOUDS_TrnsfrDa+0x368>)
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	683a      	ldr	r2, [r7, #0]
 800d7dc:	7812      	ldrb	r2, [r2, #0]
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d10f      	bne.n	800d802 <ISOUDS_TrnsfrDa+0x30a>
 800d7e2:	4b1f      	ldr	r3, [pc, #124]	; (800d860 <ISOUDS_TrnsfrDa+0x368>)
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	b2da      	uxtb	r2, r3
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	701a      	strb	r2, [r3, #0]
 800d7ee:	4b1b      	ldr	r3, [pc, #108]	; (800d85c <ISOUDS_TrnsfrDa+0x364>)
 800d7f0:	881b      	ldrh	r3, [r3, #0]
 800d7f2:	3302      	adds	r3, #2
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	809a      	strh	r2, [r3, #4]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2203      	movs	r2, #3
 800d7fe:	701a      	strb	r2, [r3, #0]
 800d800:	e018      	b.n	800d834 <ISOUDS_TrnsfrDa+0x33c>
 800d802:	4b18      	ldr	r3, [pc, #96]	; (800d864 <ISOUDS_TrnsfrDa+0x36c>)
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	2b06      	cmp	r3, #6
 800d808:	d106      	bne.n	800d818 <ISOUDS_TrnsfrDa+0x320>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2224      	movs	r2, #36	; 0x24
 800d80e:	709a      	strb	r2, [r3, #2]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2204      	movs	r2, #4
 800d814:	701a      	strb	r2, [r3, #0]
 800d816:	e019      	b.n	800d84c <ISOUDS_TrnsfrDa+0x354>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2273      	movs	r2, #115	; 0x73
 800d81c:	709a      	strb	r2, [r3, #2]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2204      	movs	r2, #4
 800d822:	701a      	strb	r2, [r3, #0]
 800d824:	e012      	b.n	800d84c <ISOUDS_TrnsfrDa+0x354>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2213      	movs	r2, #19
 800d82a:	709a      	strb	r2, [r3, #2]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2204      	movs	r2, #4
 800d830:	701a      	strb	r2, [r3, #0]
 800d832:	e00b      	b.n	800d84c <ISOUDS_TrnsfrDa+0x354>
 800d834:	e00a      	b.n	800d84c <ISOUDS_TrnsfrDa+0x354>
 800d836:	4b0b      	ldr	r3, [pc, #44]	; (800d864 <ISOUDS_TrnsfrDa+0x36c>)
 800d838:	2200      	movs	r2, #0
 800d83a:	701a      	strb	r2, [r3, #0]
 800d83c:	e006      	b.n	800d84c <ISOUDS_TrnsfrDa+0x354>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2213      	movs	r2, #19
 800d842:	709a      	strb	r2, [r3, #2]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2204      	movs	r2, #4
 800d848:	701a      	strb	r2, [r3, #0]
 800d84a:	e7ff      	b.n	800d84c <ISOUDS_TrnsfrDa+0x354>
 800d84c:	bf00      	nop
 800d84e:	3710      	adds	r7, #16
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	240017d8 	.word	0x240017d8
 800d858:	240017dc 	.word	0x240017dc
 800d85c:	240017e0 	.word	0x240017e0
 800d860:	240017d6 	.word	0x240017d6
 800d864:	240017d7 	.word	0x240017d7

0800d868 <ISOUDS_TrnsfrDaExit>:
 800d868:	b480      	push	{r7}
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	4b0b      	ldr	r3, [pc, #44]	; (800d89c <ISOUDS_TrnsfrDaExit+0x34>)
 800d86e:	2200      	movs	r2, #0
 800d870:	701a      	strb	r2, [r3, #0]
 800d872:	4b0b      	ldr	r3, [pc, #44]	; (800d8a0 <ISOUDS_TrnsfrDaExit+0x38>)
 800d874:	2200      	movs	r2, #0
 800d876:	601a      	str	r2, [r3, #0]
 800d878:	4b0a      	ldr	r3, [pc, #40]	; (800d8a4 <ISOUDS_TrnsfrDaExit+0x3c>)
 800d87a:	2200      	movs	r2, #0
 800d87c:	601a      	str	r2, [r3, #0]
 800d87e:	4b0a      	ldr	r3, [pc, #40]	; (800d8a8 <ISOUDS_TrnsfrDaExit+0x40>)
 800d880:	2200      	movs	r2, #0
 800d882:	701a      	strb	r2, [r3, #0]
 800d884:	4b09      	ldr	r3, [pc, #36]	; (800d8ac <ISOUDS_TrnsfrDaExit+0x44>)
 800d886:	2200      	movs	r2, #0
 800d888:	701a      	strb	r2, [r3, #0]
 800d88a:	4b09      	ldr	r3, [pc, #36]	; (800d8b0 <ISOUDS_TrnsfrDaExit+0x48>)
 800d88c:	2200      	movs	r2, #0
 800d88e:	801a      	strh	r2, [r3, #0]
 800d890:	bf00      	nop
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr
 800d89a:	bf00      	nop
 800d89c:	240017d7 	.word	0x240017d7
 800d8a0:	240017dc 	.word	0x240017dc
 800d8a4:	240017d8 	.word	0x240017d8
 800d8a8:	240017d5 	.word	0x240017d5
 800d8ac:	240017d6 	.word	0x240017d6
 800d8b0:	240017e0 	.word	0x240017e0

0800d8b4 <ISOUDS_ReqTrnsfrDa>:
 800d8b4:	b480      	push	{r7}
 800d8b6:	b087      	sub	sp, #28
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	71fb      	strb	r3, [r7, #7]
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	75fb      	strb	r3, [r7, #23]
 800d8c6:	4b21      	ldr	r3, [pc, #132]	; (800d94c <ISOUDS_ReqTrnsfrDa+0x98>)
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d00b      	beq.n	800d8e6 <ISOUDS_ReqTrnsfrDa+0x32>
 800d8ce:	4b1f      	ldr	r3, [pc, #124]	; (800d94c <ISOUDS_ReqTrnsfrDa+0x98>)
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	2b03      	cmp	r3, #3
 800d8d4:	d007      	beq.n	800d8e6 <ISOUDS_ReqTrnsfrDa+0x32>
 800d8d6:	4b1d      	ldr	r3, [pc, #116]	; (800d94c <ISOUDS_ReqTrnsfrDa+0x98>)
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	2b05      	cmp	r3, #5
 800d8dc:	d003      	beq.n	800d8e6 <ISOUDS_ReqTrnsfrDa+0x32>
 800d8de:	4b1b      	ldr	r3, [pc, #108]	; (800d94c <ISOUDS_ReqTrnsfrDa+0x98>)
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	2b06      	cmp	r3, #6
 800d8e4:	d102      	bne.n	800d8ec <ISOUDS_ReqTrnsfrDa+0x38>
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	75fb      	strb	r3, [r7, #23]
 800d8ea:	e027      	b.n	800d93c <ISOUDS_ReqTrnsfrDa+0x88>
 800d8ec:	79fb      	ldrb	r3, [r7, #7]
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d109      	bne.n	800d906 <ISOUDS_ReqTrnsfrDa+0x52>
 800d8f2:	4b16      	ldr	r3, [pc, #88]	; (800d94c <ISOUDS_ReqTrnsfrDa+0x98>)
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	701a      	strb	r2, [r3, #0]
 800d8f8:	4b15      	ldr	r3, [pc, #84]	; (800d950 <ISOUDS_ReqTrnsfrDa+0x9c>)
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	701a      	strb	r2, [r3, #0]
 800d8fe:	4b15      	ldr	r3, [pc, #84]	; (800d954 <ISOUDS_ReqTrnsfrDa+0xa0>)
 800d900:	2200      	movs	r2, #0
 800d902:	701a      	strb	r2, [r3, #0]
 800d904:	e00f      	b.n	800d926 <ISOUDS_ReqTrnsfrDa+0x72>
 800d906:	79fb      	ldrb	r3, [r7, #7]
 800d908:	2b04      	cmp	r3, #4
 800d90a:	d109      	bne.n	800d920 <ISOUDS_ReqTrnsfrDa+0x6c>
 800d90c:	4b0f      	ldr	r3, [pc, #60]	; (800d94c <ISOUDS_ReqTrnsfrDa+0x98>)
 800d90e:	2204      	movs	r2, #4
 800d910:	701a      	strb	r2, [r3, #0]
 800d912:	4b10      	ldr	r3, [pc, #64]	; (800d954 <ISOUDS_ReqTrnsfrDa+0xa0>)
 800d914:	2201      	movs	r2, #1
 800d916:	701a      	strb	r2, [r3, #0]
 800d918:	4b0d      	ldr	r3, [pc, #52]	; (800d950 <ISOUDS_ReqTrnsfrDa+0x9c>)
 800d91a:	2200      	movs	r2, #0
 800d91c:	701a      	strb	r2, [r3, #0]
 800d91e:	e002      	b.n	800d926 <ISOUDS_ReqTrnsfrDa+0x72>
 800d920:	4b0a      	ldr	r3, [pc, #40]	; (800d94c <ISOUDS_ReqTrnsfrDa+0x98>)
 800d922:	2200      	movs	r2, #0
 800d924:	701a      	strb	r2, [r3, #0]
 800d926:	4a0c      	ldr	r2, [pc, #48]	; (800d958 <ISOUDS_ReqTrnsfrDa+0xa4>)
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	6013      	str	r3, [r2, #0]
 800d92c:	4a0b      	ldr	r2, [pc, #44]	; (800d95c <ISOUDS_ReqTrnsfrDa+0xa8>)
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	6013      	str	r3, [r2, #0]
 800d932:	4b0b      	ldr	r3, [pc, #44]	; (800d960 <ISOUDS_ReqTrnsfrDa+0xac>)
 800d934:	2200      	movs	r2, #0
 800d936:	801a      	strh	r2, [r3, #0]
 800d938:	2301      	movs	r3, #1
 800d93a:	75fb      	strb	r3, [r7, #23]
 800d93c:	7dfb      	ldrb	r3, [r7, #23]
 800d93e:	4618      	mov	r0, r3
 800d940:	371c      	adds	r7, #28
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr
 800d94a:	bf00      	nop
 800d94c:	240017d7 	.word	0x240017d7
 800d950:	240017d5 	.word	0x240017d5
 800d954:	240017d6 	.word	0x240017d6
 800d958:	240017dc 	.word	0x240017dc
 800d95c:	240017d8 	.word	0x240017d8
 800d960:	240017e0 	.word	0x240017e0

0800d964 <ISOUDS_ChkTrnsfrExit>:
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
 800d96a:	4b0c      	ldr	r3, [pc, #48]	; (800d99c <ISOUDS_ChkTrnsfrExit+0x38>)
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d10a      	bne.n	800d988 <ISOUDS_ChkTrnsfrExit+0x24>
 800d972:	4b0b      	ldr	r3, [pc, #44]	; (800d9a0 <ISOUDS_ChkTrnsfrExit+0x3c>)
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d106      	bne.n	800d988 <ISOUDS_ChkTrnsfrExit+0x24>
 800d97a:	4b0a      	ldr	r3, [pc, #40]	; (800d9a4 <ISOUDS_ChkTrnsfrExit+0x40>)
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d102      	bne.n	800d988 <ISOUDS_ChkTrnsfrExit+0x24>
 800d982:	2301      	movs	r3, #1
 800d984:	71fb      	strb	r3, [r7, #7]
 800d986:	e001      	b.n	800d98c <ISOUDS_ChkTrnsfrExit+0x28>
 800d988:	2300      	movs	r3, #0
 800d98a:	71fb      	strb	r3, [r7, #7]
 800d98c:	79fb      	ldrb	r3, [r7, #7]
 800d98e:	4618      	mov	r0, r3
 800d990:	370c      	adds	r7, #12
 800d992:	46bd      	mov	sp, r7
 800d994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d998:	4770      	bx	lr
 800d99a:	bf00      	nop
 800d99c:	240017d7 	.word	0x240017d7
 800d9a0:	240017d5 	.word	0x240017d5
 800d9a4:	240017d6 	.word	0x240017d6

0800d9a8 <ISOUDS_TrnsfrExit>:
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d02a      	beq.n	800da0e <ISOUDS_TrnsfrExit+0x66>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	889b      	ldrh	r3, [r3, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d020      	beq.n	800da02 <ISOUDS_TrnsfrExit+0x5a>
 800d9c0:	f7ff ffd0 	bl	800d964 <ISOUDS_ChkTrnsfrExit>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d114      	bne.n	800d9f4 <ISOUDS_TrnsfrExit+0x4c>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	889b      	ldrh	r3, [r3, #4]
 800d9ce:	3b01      	subs	r3, #1
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	6838      	ldr	r0, [r7, #0]
 800d9d6:	f7f5 fc55 	bl	8003284 <ISOUDS_TrnsfrExitInd>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	81fb      	strh	r3, [r7, #14]
 800d9de:	f7ff ff43 	bl	800d868 <ISOUDS_TrnsfrDaExit>
 800d9e2:	89fb      	ldrh	r3, [r7, #14]
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	809a      	strh	r2, [r3, #4]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2203      	movs	r2, #3
 800d9f0:	701a      	strb	r2, [r3, #0]
 800d9f2:	e00c      	b.n	800da0e <ISOUDS_TrnsfrExit+0x66>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2224      	movs	r2, #36	; 0x24
 800d9f8:	709a      	strb	r2, [r3, #2]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2204      	movs	r2, #4
 800d9fe:	701a      	strb	r2, [r3, #0]
 800da00:	e005      	b.n	800da0e <ISOUDS_TrnsfrExit+0x66>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2213      	movs	r2, #19
 800da06:	709a      	strb	r2, [r3, #2]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2204      	movs	r2, #4
 800da0c:	701a      	strb	r2, [r3, #0]
 800da0e:	bf00      	nop
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}

0800da16 <ISOUDS_TstrPrsnt>:
 800da16:	b580      	push	{r7, lr}
 800da18:	b084      	sub	sp, #16
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	6078      	str	r0, [r7, #4]
 800da1e:	6039      	str	r1, [r7, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d02f      	beq.n	800da86 <ISOUDS_TstrPrsnt+0x70>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	889b      	ldrh	r3, [r3, #4]
 800da2a:	2b02      	cmp	r3, #2
 800da2c:	d125      	bne.n	800da7a <ISOUDS_TstrPrsnt+0x64>
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da36:	73fb      	strb	r3, [r7, #15]
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800da40:	73bb      	strb	r3, [r7, #14]
 800da42:	7bfb      	ldrb	r3, [r7, #15]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d111      	bne.n	800da6c <ISOUDS_TstrPrsnt+0x56>
 800da48:	f7fd faf8 	bl	800b03c <ISOUDS_ResetiS3Timer>
 800da4c:	7bbb      	ldrb	r3, [r7, #14]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d109      	bne.n	800da66 <ISOUDS_TstrPrsnt+0x50>
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	7bfa      	ldrb	r2, [r7, #15]
 800da56:	701a      	strb	r2, [r3, #0]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2202      	movs	r2, #2
 800da5c:	809a      	strh	r2, [r3, #4]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2203      	movs	r2, #3
 800da62:	701a      	strb	r2, [r3, #0]
 800da64:	e00f      	b.n	800da86 <ISOUDS_TstrPrsnt+0x70>
 800da66:	f7fd f9f1 	bl	800ae4c <ISOUDS_ServerRst>
 800da6a:	e00c      	b.n	800da86 <ISOUDS_TstrPrsnt+0x70>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2204      	movs	r2, #4
 800da70:	701a      	strb	r2, [r3, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2212      	movs	r2, #18
 800da76:	709a      	strb	r2, [r3, #2]
 800da78:	e005      	b.n	800da86 <ISOUDS_TstrPrsnt+0x70>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2204      	movs	r2, #4
 800da7e:	701a      	strb	r2, [r3, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2213      	movs	r2, #19
 800da84:	709a      	strb	r2, [r3, #2]
 800da86:	bf00      	nop
 800da88:	3710      	adds	r7, #16
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
	...

0800da90 <ISOUDS_WrDaByID>:
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	f000 80e3 	beq.w	800dc68 <ISOUDS_WrDaByID+0x1d8>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	889b      	ldrh	r3, [r3, #4]
 800daa6:	2b03      	cmp	r3, #3
 800daa8:	f240 80d7 	bls.w	800dc5a <ISOUDS_WrDaByID+0x1ca>
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	021b      	lsls	r3, r3, #8
 800dab4:	b29a      	uxth	r2, r3
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	3301      	adds	r3, #1
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	4413      	add	r3, r2
 800dac0:	817b      	strh	r3, [r7, #10]
 800dac2:	897b      	ldrh	r3, [r7, #10]
 800dac4:	4618      	mov	r0, r3
 800dac6:	f000 f8d9 	bl	800dc7c <ISOUDS_WrLookUp>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b01      	cmp	r3, #1
 800dace:	f040 80bd 	bne.w	800dc4c <ISOUDS_WrDaByID+0x1bc>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	889b      	ldrh	r3, [r3, #4]
 800dad6:	4619      	mov	r1, r3
 800dad8:	4b65      	ldr	r3, [pc, #404]	; (800dc70 <ISOUDS_WrDaByID+0x1e0>)
 800dada:	881b      	ldrh	r3, [r3, #0]
 800dadc:	4a65      	ldr	r2, [pc, #404]	; (800dc74 <ISOUDS_WrDaByID+0x1e4>)
 800dade:	011b      	lsls	r3, r3, #4
 800dae0:	4413      	add	r3, r2
 800dae2:	3302      	adds	r3, #2
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	3303      	adds	r3, #3
 800dae8:	4299      	cmp	r1, r3
 800daea:	f040 80a8 	bne.w	800dc3e <ISOUDS_WrDaByID+0x1ae>
 800daee:	4b60      	ldr	r3, [pc, #384]	; (800dc70 <ISOUDS_WrDaByID+0x1e0>)
 800daf0:	881b      	ldrh	r3, [r3, #0]
 800daf2:	4a60      	ldr	r2, [pc, #384]	; (800dc74 <ISOUDS_WrDaByID+0x1e4>)
 800daf4:	011b      	lsls	r3, r3, #4
 800daf6:	4413      	add	r3, r2
 800daf8:	3308      	adds	r3, #8
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	461a      	mov	r2, r3
 800dafe:	4b5e      	ldr	r3, [pc, #376]	; (800dc78 <ISOUDS_WrDaByID+0x1e8>)
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	fa42 f303 	asr.w	r3, r2, r3
 800db06:	f003 0301 	and.w	r3, r3, #1
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	f000 8090 	beq.w	800dc30 <ISOUDS_WrDaByID+0x1a0>
 800db10:	2301      	movs	r3, #1
 800db12:	73fb      	strb	r3, [r7, #15]
 800db14:	4b56      	ldr	r3, [pc, #344]	; (800dc70 <ISOUDS_WrDaByID+0x1e0>)
 800db16:	881b      	ldrh	r3, [r3, #0]
 800db18:	4a56      	ldr	r2, [pc, #344]	; (800dc74 <ISOUDS_WrDaByID+0x1e4>)
 800db1a:	011b      	lsls	r3, r3, #4
 800db1c:	4413      	add	r3, r2
 800db1e:	3309      	adds	r3, #9
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d124      	bne.n	800db70 <ISOUDS_WrDaByID+0xe0>
 800db26:	2300      	movs	r3, #0
 800db28:	73fb      	strb	r3, [r7, #15]
 800db2a:	2300      	movs	r3, #0
 800db2c:	81bb      	strh	r3, [r7, #12]
 800db2e:	e011      	b.n	800db54 <ISOUDS_WrDaByID+0xc4>
 800db30:	4b4f      	ldr	r3, [pc, #316]	; (800dc70 <ISOUDS_WrDaByID+0x1e0>)
 800db32:	881b      	ldrh	r3, [r3, #0]
 800db34:	461a      	mov	r2, r3
 800db36:	89bb      	ldrh	r3, [r7, #12]
 800db38:	494e      	ldr	r1, [pc, #312]	; (800dc74 <ISOUDS_WrDaByID+0x1e4>)
 800db3a:	0112      	lsls	r2, r2, #4
 800db3c:	440a      	add	r2, r1
 800db3e:	4413      	add	r3, r2
 800db40:	330b      	adds	r3, #11
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	4618      	mov	r0, r3
 800db46:	f7ff f8b5 	bl	800ccb4 <ISOUDS_GetSAStLevel>
 800db4a:	4603      	mov	r3, r0
 800db4c:	73fb      	strb	r3, [r7, #15]
 800db4e:	89bb      	ldrh	r3, [r7, #12]
 800db50:	3301      	adds	r3, #1
 800db52:	81bb      	strh	r3, [r7, #12]
 800db54:	4b46      	ldr	r3, [pc, #280]	; (800dc70 <ISOUDS_WrDaByID+0x1e0>)
 800db56:	881b      	ldrh	r3, [r3, #0]
 800db58:	4a46      	ldr	r2, [pc, #280]	; (800dc74 <ISOUDS_WrDaByID+0x1e4>)
 800db5a:	011b      	lsls	r3, r3, #4
 800db5c:	4413      	add	r3, r2
 800db5e:	330a      	adds	r3, #10
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	b29b      	uxth	r3, r3
 800db64:	89ba      	ldrh	r2, [r7, #12]
 800db66:	429a      	cmp	r2, r3
 800db68:	d202      	bcs.n	800db70 <ISOUDS_WrDaByID+0xe0>
 800db6a:	7bfb      	ldrb	r3, [r7, #15]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d0df      	beq.n	800db30 <ISOUDS_WrDaByID+0xa0>
 800db70:	7bfb      	ldrb	r3, [r7, #15]
 800db72:	2b01      	cmp	r3, #1
 800db74:	d155      	bne.n	800dc22 <ISOUDS_WrDaByID+0x192>
 800db76:	f7f3 fdb2 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d149      	bne.n	800dc14 <ISOUDS_WrDaByID+0x184>
 800db80:	f7f3 fdb5 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 800db84:	4603      	mov	r3, r0
 800db86:	2b01      	cmp	r3, #1
 800db88:	d144      	bne.n	800dc14 <ISOUDS_WrDaByID+0x184>
 800db8a:	f7f3 fdb8 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b01      	cmp	r3, #1
 800db92:	d13f      	bne.n	800dc14 <ISOUDS_WrDaByID+0x184>
 800db94:	4b36      	ldr	r3, [pc, #216]	; (800dc70 <ISOUDS_WrDaByID+0x1e0>)
 800db96:	881b      	ldrh	r3, [r3, #0]
 800db98:	4a36      	ldr	r2, [pc, #216]	; (800dc74 <ISOUDS_WrDaByID+0x1e4>)
 800db9a:	011b      	lsls	r3, r3, #4
 800db9c:	4413      	add	r3, r2
 800db9e:	3304      	adds	r3, #4
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d02f      	beq.n	800dc06 <ISOUDS_WrDaByID+0x176>
 800dba6:	4b32      	ldr	r3, [pc, #200]	; (800dc70 <ISOUDS_WrDaByID+0x1e0>)
 800dba8:	881b      	ldrh	r3, [r3, #0]
 800dbaa:	4a32      	ldr	r2, [pc, #200]	; (800dc74 <ISOUDS_WrDaByID+0x1e4>)
 800dbac:	011b      	lsls	r3, r3, #4
 800dbae:	4413      	add	r3, r2
 800dbb0:	3304      	adds	r3, #4
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	683a      	ldr	r2, [r7, #0]
 800dbb6:	1c90      	adds	r0, r2, #2
 800dbb8:	4a2d      	ldr	r2, [pc, #180]	; (800dc70 <ISOUDS_WrDaByID+0x1e0>)
 800dbba:	8812      	ldrh	r2, [r2, #0]
 800dbbc:	492d      	ldr	r1, [pc, #180]	; (800dc74 <ISOUDS_WrDaByID+0x1e4>)
 800dbbe:	0112      	lsls	r2, r2, #4
 800dbc0:	440a      	add	r2, r1
 800dbc2:	3202      	adds	r2, #2
 800dbc4:	7812      	ldrb	r2, [r2, #0]
 800dbc6:	4611      	mov	r1, r2
 800dbc8:	4798      	blx	r3
 800dbca:	4603      	mov	r3, r0
 800dbcc:	727b      	strb	r3, [r7, #9]
 800dbce:	7a7b      	ldrb	r3, [r7, #9]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d111      	bne.n	800dbf8 <ISOUDS_WrDaByID+0x168>
 800dbd4:	897b      	ldrh	r3, [r7, #10]
 800dbd6:	0a1b      	lsrs	r3, r3, #8
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	b2da      	uxtb	r2, r3
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	701a      	strb	r2, [r3, #0]
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	897a      	ldrh	r2, [r7, #10]
 800dbe6:	b2d2      	uxtb	r2, r2
 800dbe8:	701a      	strb	r2, [r3, #0]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2203      	movs	r2, #3
 800dbee:	809a      	strh	r2, [r3, #4]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2203      	movs	r2, #3
 800dbf4:	701a      	strb	r2, [r3, #0]
 800dbf6:	e037      	b.n	800dc68 <ISOUDS_WrDaByID+0x1d8>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2204      	movs	r2, #4
 800dbfc:	701a      	strb	r2, [r3, #0]
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	7a7a      	ldrb	r2, [r7, #9]
 800dc02:	709a      	strb	r2, [r3, #2]
 800dc04:	e030      	b.n	800dc68 <ISOUDS_WrDaByID+0x1d8>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2204      	movs	r2, #4
 800dc0a:	701a      	strb	r2, [r3, #0]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2231      	movs	r2, #49	; 0x31
 800dc10:	709a      	strb	r2, [r3, #2]
 800dc12:	e029      	b.n	800dc68 <ISOUDS_WrDaByID+0x1d8>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2204      	movs	r2, #4
 800dc18:	701a      	strb	r2, [r3, #0]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2222      	movs	r2, #34	; 0x22
 800dc1e:	709a      	strb	r2, [r3, #2]
 800dc20:	e022      	b.n	800dc68 <ISOUDS_WrDaByID+0x1d8>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2204      	movs	r2, #4
 800dc26:	701a      	strb	r2, [r3, #0]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2233      	movs	r2, #51	; 0x33
 800dc2c:	709a      	strb	r2, [r3, #2]
 800dc2e:	e01b      	b.n	800dc68 <ISOUDS_WrDaByID+0x1d8>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2204      	movs	r2, #4
 800dc34:	701a      	strb	r2, [r3, #0]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2231      	movs	r2, #49	; 0x31
 800dc3a:	709a      	strb	r2, [r3, #2]
 800dc3c:	e014      	b.n	800dc68 <ISOUDS_WrDaByID+0x1d8>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2204      	movs	r2, #4
 800dc42:	701a      	strb	r2, [r3, #0]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2213      	movs	r2, #19
 800dc48:	709a      	strb	r2, [r3, #2]
 800dc4a:	e00d      	b.n	800dc68 <ISOUDS_WrDaByID+0x1d8>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2204      	movs	r2, #4
 800dc50:	701a      	strb	r2, [r3, #0]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2231      	movs	r2, #49	; 0x31
 800dc56:	709a      	strb	r2, [r3, #2]
 800dc58:	e006      	b.n	800dc68 <ISOUDS_WrDaByID+0x1d8>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2204      	movs	r2, #4
 800dc5e:	701a      	strb	r2, [r3, #0]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2213      	movs	r2, #19
 800dc64:	709a      	strb	r2, [r3, #2]
 800dc66:	e7ff      	b.n	800dc68 <ISOUDS_WrDaByID+0x1d8>
 800dc68:	bf00      	nop
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	240017e2 	.word	0x240017e2
 800dc74:	08010a50 	.word	0x08010a50
 800dc78:	24001720 	.word	0x24001720

0800dc7c <ISOUDS_WrLookUp>:
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	4603      	mov	r3, r0
 800dc84:	80fb      	strh	r3, [r7, #6]
 800dc86:	2300      	movs	r3, #0
 800dc88:	73fb      	strb	r3, [r7, #15]
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	81bb      	strh	r3, [r7, #12]
 800dc8e:	e00f      	b.n	800dcb0 <ISOUDS_WrLookUp+0x34>
 800dc90:	89bb      	ldrh	r3, [r7, #12]
 800dc92:	4a0f      	ldr	r2, [pc, #60]	; (800dcd0 <ISOUDS_WrLookUp+0x54>)
 800dc94:	011b      	lsls	r3, r3, #4
 800dc96:	4413      	add	r3, r2
 800dc98:	881b      	ldrh	r3, [r3, #0]
 800dc9a:	88fa      	ldrh	r2, [r7, #6]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d104      	bne.n	800dcaa <ISOUDS_WrLookUp+0x2e>
 800dca0:	2301      	movs	r3, #1
 800dca2:	73fb      	strb	r3, [r7, #15]
 800dca4:	4a0b      	ldr	r2, [pc, #44]	; (800dcd4 <ISOUDS_WrLookUp+0x58>)
 800dca6:	89bb      	ldrh	r3, [r7, #12]
 800dca8:	8013      	strh	r3, [r2, #0]
 800dcaa:	89bb      	ldrh	r3, [r7, #12]
 800dcac:	3301      	adds	r3, #1
 800dcae:	81bb      	strh	r3, [r7, #12]
 800dcb0:	f7f5 faf7 	bl	80032a2 <ISOUDS_Get_WRCONFTABSIZE>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	89bb      	ldrh	r3, [r7, #12]
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d202      	bcs.n	800dcc4 <ISOUDS_WrLookUp+0x48>
 800dcbe:	7bfb      	ldrb	r3, [r7, #15]
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d1e5      	bne.n	800dc90 <ISOUDS_WrLookUp+0x14>
 800dcc4:	7bfb      	ldrb	r3, [r7, #15]
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	08010a50 	.word	0x08010a50
 800dcd4:	240017e2 	.word	0x240017e2

0800dcd8 <ISOUDS_WrtMemByAddr>:
 800dcd8:	b590      	push	{r4, r7, lr}
 800dcda:	b085      	sub	sp, #20
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	f000 8134 	beq.w	800df52 <ISOUDS_WrtMemByAddr+0x27a>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	2b02      	cmp	r3, #2
 800dcf0:	f040 80f8 	bne.w	800dee4 <ISOUDS_WrtMemByAddr+0x20c>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2204      	movs	r2, #4
 800dcf8:	701a      	strb	r2, [r3, #0]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	889b      	ldrh	r3, [r3, #4]
 800dcfe:	2b03      	cmp	r3, #3
 800dd00:	f240 80ec 	bls.w	800dedc <ISOUDS_WrtMemByAddr+0x204>
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	f003 030f 	and.w	r3, r3, #15
 800dd0c:	72fb      	strb	r3, [r7, #11]
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	091b      	lsrs	r3, r3, #4
 800dd14:	72bb      	strb	r3, [r7, #10]
 800dd16:	7afb      	ldrb	r3, [r7, #11]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f000 80db 	beq.w	800ded4 <ISOUDS_WrtMemByAddr+0x1fc>
 800dd1e:	7abb      	ldrb	r3, [r7, #10]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	f000 80d7 	beq.w	800ded4 <ISOUDS_WrtMemByAddr+0x1fc>
 800dd26:	7afa      	ldrb	r2, [r7, #11]
 800dd28:	7abb      	ldrb	r3, [r7, #10]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	f0c0 80d2 	bcc.w	800ded4 <ISOUDS_WrtMemByAddr+0x1fc>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	889b      	ldrh	r3, [r3, #4]
 800dd34:	4619      	mov	r1, r3
 800dd36:	7afa      	ldrb	r2, [r7, #11]
 800dd38:	7abb      	ldrb	r3, [r7, #10]
 800dd3a:	4413      	add	r3, r2
 800dd3c:	3302      	adds	r3, #2
 800dd3e:	4299      	cmp	r1, r3
 800dd40:	f340 80c3 	ble.w	800deca <ISOUDS_WrtMemByAddr+0x1f2>
 800dd44:	7ab9      	ldrb	r1, [r7, #10]
 800dd46:	7afb      	ldrb	r3, [r7, #11]
 800dd48:	683a      	ldr	r2, [r7, #0]
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f000 f910 	bl	800df70 <ISOUDS_WrtAddLenthLookUpTbl>
 800dd50:	4603      	mov	r3, r0
 800dd52:	723b      	strb	r3, [r7, #8]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	889b      	ldrh	r3, [r3, #4]
 800dd58:	4619      	mov	r1, r3
 800dd5a:	7afa      	ldrb	r2, [r7, #11]
 800dd5c:	7abb      	ldrb	r3, [r7, #10]
 800dd5e:	4413      	add	r3, r2
 800dd60:	3302      	adds	r3, #2
 800dd62:	4a7e      	ldr	r2, [pc, #504]	; (800df5c <ISOUDS_WrtMemByAddr+0x284>)
 800dd64:	6812      	ldr	r2, [r2, #0]
 800dd66:	b292      	uxth	r2, r2
 800dd68:	4413      	add	r3, r2
 800dd6a:	4299      	cmp	r1, r3
 800dd6c:	f040 80a9 	bne.w	800dec2 <ISOUDS_WrtMemByAddr+0x1ea>
 800dd70:	7a3b      	ldrb	r3, [r7, #8]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	f040 80a1 	bne.w	800deba <ISOUDS_WrtMemByAddr+0x1e2>
 800dd78:	4b79      	ldr	r3, [pc, #484]	; (800df60 <ISOUDS_WrtMemByAddr+0x288>)
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	4979      	ldr	r1, [pc, #484]	; (800df64 <ISOUDS_WrtMemByAddr+0x28c>)
 800dd7e:	4613      	mov	r3, r2
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	4413      	add	r3, r2
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	440b      	add	r3, r1
 800dd88:	330c      	adds	r3, #12
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	4b76      	ldr	r3, [pc, #472]	; (800df68 <ISOUDS_WrtMemByAddr+0x290>)
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	fa42 f303 	asr.w	r3, r2, r3
 800dd96:	f003 0301 	and.w	r3, r3, #1
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f000 8089 	beq.w	800deb2 <ISOUDS_WrtMemByAddr+0x1da>
 800dda0:	2301      	movs	r3, #1
 800dda2:	73fb      	strb	r3, [r7, #15]
 800dda4:	4b6e      	ldr	r3, [pc, #440]	; (800df60 <ISOUDS_WrtMemByAddr+0x288>)
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	496e      	ldr	r1, [pc, #440]	; (800df64 <ISOUDS_WrtMemByAddr+0x28c>)
 800ddaa:	4613      	mov	r3, r2
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	4413      	add	r3, r2
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	440b      	add	r3, r1
 800ddb4:	330d      	adds	r3, #13
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d129      	bne.n	800de10 <ISOUDS_WrtMemByAddr+0x138>
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	73fb      	strb	r3, [r7, #15]
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	81bb      	strh	r3, [r7, #12]
 800ddc4:	e013      	b.n	800ddee <ISOUDS_WrtMemByAddr+0x116>
 800ddc6:	4b66      	ldr	r3, [pc, #408]	; (800df60 <ISOUDS_WrtMemByAddr+0x288>)
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	89b9      	ldrh	r1, [r7, #12]
 800ddcc:	4865      	ldr	r0, [pc, #404]	; (800df64 <ISOUDS_WrtMemByAddr+0x28c>)
 800ddce:	4613      	mov	r3, r2
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	4413      	add	r3, r2
 800ddd4:	009b      	lsls	r3, r3, #2
 800ddd6:	4403      	add	r3, r0
 800ddd8:	440b      	add	r3, r1
 800ddda:	330f      	adds	r3, #15
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fe ff68 	bl	800ccb4 <ISOUDS_GetSAStLevel>
 800dde4:	4603      	mov	r3, r0
 800dde6:	73fb      	strb	r3, [r7, #15]
 800dde8:	89bb      	ldrh	r3, [r7, #12]
 800ddea:	3301      	adds	r3, #1
 800ddec:	81bb      	strh	r3, [r7, #12]
 800ddee:	4b5c      	ldr	r3, [pc, #368]	; (800df60 <ISOUDS_WrtMemByAddr+0x288>)
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	495c      	ldr	r1, [pc, #368]	; (800df64 <ISOUDS_WrtMemByAddr+0x28c>)
 800ddf4:	4613      	mov	r3, r2
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	4413      	add	r3, r2
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	440b      	add	r3, r1
 800ddfe:	330e      	adds	r3, #14
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	b29b      	uxth	r3, r3
 800de04:	89ba      	ldrh	r2, [r7, #12]
 800de06:	429a      	cmp	r2, r3
 800de08:	d202      	bcs.n	800de10 <ISOUDS_WrtMemByAddr+0x138>
 800de0a:	7bfb      	ldrb	r3, [r7, #15]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d0da      	beq.n	800ddc6 <ISOUDS_WrtMemByAddr+0xee>
 800de10:	7bfb      	ldrb	r3, [r7, #15]
 800de12:	2b01      	cmp	r3, #1
 800de14:	d146      	bne.n	800dea4 <ISOUDS_WrtMemByAddr+0x1cc>
 800de16:	f7f3 fc62 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d13a      	bne.n	800de96 <ISOUDS_WrtMemByAddr+0x1be>
 800de20:	f7f3 fc65 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 800de24:	4603      	mov	r3, r0
 800de26:	2b01      	cmp	r3, #1
 800de28:	d135      	bne.n	800de96 <ISOUDS_WrtMemByAddr+0x1be>
 800de2a:	f7f3 fc68 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b01      	cmp	r3, #1
 800de32:	d130      	bne.n	800de96 <ISOUDS_WrtMemByAddr+0x1be>
 800de34:	4b4a      	ldr	r3, [pc, #296]	; (800df60 <ISOUDS_WrtMemByAddr+0x288>)
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	494a      	ldr	r1, [pc, #296]	; (800df64 <ISOUDS_WrtMemByAddr+0x28c>)
 800de3a:	4613      	mov	r3, r2
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	4413      	add	r3, r2
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	440b      	add	r3, r1
 800de44:	3310      	adds	r3, #16
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	4a48      	ldr	r2, [pc, #288]	; (800df6c <ISOUDS_WrtMemByAddr+0x294>)
 800de4a:	6810      	ldr	r0, [r2, #0]
 800de4c:	4a43      	ldr	r2, [pc, #268]	; (800df5c <ISOUDS_WrtMemByAddr+0x284>)
 800de4e:	6814      	ldr	r4, [r2, #0]
 800de50:	7afa      	ldrb	r2, [r7, #11]
 800de52:	1c51      	adds	r1, r2, #1
 800de54:	7aba      	ldrb	r2, [r7, #10]
 800de56:	440a      	add	r2, r1
 800de58:	4611      	mov	r1, r2
 800de5a:	683a      	ldr	r2, [r7, #0]
 800de5c:	440a      	add	r2, r1
 800de5e:	4621      	mov	r1, r4
 800de60:	4798      	blx	r3
 800de62:	4603      	mov	r3, r0
 800de64:	727b      	strb	r3, [r7, #9]
 800de66:	7a7b      	ldrb	r3, [r7, #9]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d10d      	bne.n	800de88 <ISOUDS_WrtMemByAddr+0x1b0>
 800de6c:	7afb      	ldrb	r3, [r7, #11]
 800de6e:	b29a      	uxth	r2, r3
 800de70:	7abb      	ldrb	r3, [r7, #10]
 800de72:	b29b      	uxth	r3, r3
 800de74:	4413      	add	r3, r2
 800de76:	b29b      	uxth	r3, r3
 800de78:	3302      	adds	r3, #2
 800de7a:	b29a      	uxth	r2, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	809a      	strh	r2, [r3, #4]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2203      	movs	r2, #3
 800de84:	701a      	strb	r2, [r3, #0]
 800de86:	e024      	b.n	800ded2 <ISOUDS_WrtMemByAddr+0x1fa>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2204      	movs	r2, #4
 800de8c:	701a      	strb	r2, [r3, #0]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	7a7a      	ldrb	r2, [r7, #9]
 800de92:	709a      	strb	r2, [r3, #2]
 800de94:	e01d      	b.n	800ded2 <ISOUDS_WrtMemByAddr+0x1fa>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2204      	movs	r2, #4
 800de9a:	701a      	strb	r2, [r3, #0]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2222      	movs	r2, #34	; 0x22
 800dea0:	709a      	strb	r2, [r3, #2]
 800dea2:	e056      	b.n	800df52 <ISOUDS_WrtMemByAddr+0x27a>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2204      	movs	r2, #4
 800dea8:	701a      	strb	r2, [r3, #0]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2233      	movs	r2, #51	; 0x33
 800deae:	709a      	strb	r2, [r3, #2]
 800deb0:	e04f      	b.n	800df52 <ISOUDS_WrtMemByAddr+0x27a>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2231      	movs	r2, #49	; 0x31
 800deb6:	709a      	strb	r2, [r3, #2]
 800deb8:	e04b      	b.n	800df52 <ISOUDS_WrtMemByAddr+0x27a>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2231      	movs	r2, #49	; 0x31
 800debe:	709a      	strb	r2, [r3, #2]
 800dec0:	e047      	b.n	800df52 <ISOUDS_WrtMemByAddr+0x27a>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2213      	movs	r2, #19
 800dec6:	709a      	strb	r2, [r3, #2]
 800dec8:	e043      	b.n	800df52 <ISOUDS_WrtMemByAddr+0x27a>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2213      	movs	r2, #19
 800dece:	709a      	strb	r2, [r3, #2]
 800ded0:	e03f      	b.n	800df52 <ISOUDS_WrtMemByAddr+0x27a>
 800ded2:	e03e      	b.n	800df52 <ISOUDS_WrtMemByAddr+0x27a>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2231      	movs	r2, #49	; 0x31
 800ded8:	709a      	strb	r2, [r3, #2]
 800deda:	e03a      	b.n	800df52 <ISOUDS_WrtMemByAddr+0x27a>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2213      	movs	r2, #19
 800dee0:	709a      	strb	r2, [r3, #2]
 800dee2:	e036      	b.n	800df52 <ISOUDS_WrtMemByAddr+0x27a>
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	f003 030f 	and.w	r3, r3, #15
 800deec:	72fb      	strb	r3, [r7, #11]
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	091b      	lsrs	r3, r3, #4
 800def4:	72bb      	strb	r3, [r7, #10]
 800def6:	4b1a      	ldr	r3, [pc, #104]	; (800df60 <ISOUDS_WrtMemByAddr+0x288>)
 800def8:	681a      	ldr	r2, [r3, #0]
 800defa:	491a      	ldr	r1, [pc, #104]	; (800df64 <ISOUDS_WrtMemByAddr+0x28c>)
 800defc:	4613      	mov	r3, r2
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	4413      	add	r3, r2
 800df02:	009b      	lsls	r3, r3, #2
 800df04:	440b      	add	r3, r1
 800df06:	3310      	adds	r3, #16
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a18      	ldr	r2, [pc, #96]	; (800df6c <ISOUDS_WrtMemByAddr+0x294>)
 800df0c:	6810      	ldr	r0, [r2, #0]
 800df0e:	4a13      	ldr	r2, [pc, #76]	; (800df5c <ISOUDS_WrtMemByAddr+0x284>)
 800df10:	6814      	ldr	r4, [r2, #0]
 800df12:	7afa      	ldrb	r2, [r7, #11]
 800df14:	1c51      	adds	r1, r2, #1
 800df16:	7aba      	ldrb	r2, [r7, #10]
 800df18:	440a      	add	r2, r1
 800df1a:	4611      	mov	r1, r2
 800df1c:	683a      	ldr	r2, [r7, #0]
 800df1e:	440a      	add	r2, r1
 800df20:	4621      	mov	r1, r4
 800df22:	4798      	blx	r3
 800df24:	4603      	mov	r3, r0
 800df26:	727b      	strb	r3, [r7, #9]
 800df28:	7a7b      	ldrb	r3, [r7, #9]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d10d      	bne.n	800df4a <ISOUDS_WrtMemByAddr+0x272>
 800df2e:	7afb      	ldrb	r3, [r7, #11]
 800df30:	b29a      	uxth	r2, r3
 800df32:	7abb      	ldrb	r3, [r7, #10]
 800df34:	b29b      	uxth	r3, r3
 800df36:	4413      	add	r3, r2
 800df38:	b29b      	uxth	r3, r3
 800df3a:	3301      	adds	r3, #1
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	809a      	strh	r2, [r3, #4]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2203      	movs	r2, #3
 800df46:	701a      	strb	r2, [r3, #0]
 800df48:	e003      	b.n	800df52 <ISOUDS_WrtMemByAddr+0x27a>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	7a7a      	ldrb	r2, [r7, #9]
 800df4e:	709a      	strb	r2, [r3, #2]
 800df50:	e7ff      	b.n	800df52 <ISOUDS_WrtMemByAddr+0x27a>
 800df52:	bf00      	nop
 800df54:	3714      	adds	r7, #20
 800df56:	46bd      	mov	sp, r7
 800df58:	bd90      	pop	{r4, r7, pc}
 800df5a:	bf00      	nop
 800df5c:	240017e8 	.word	0x240017e8
 800df60:	240017ec 	.word	0x240017ec
 800df64:	08010a90 	.word	0x08010a90
 800df68:	24001720 	.word	0x24001720
 800df6c:	240017e4 	.word	0x240017e4

0800df70 <ISOUDS_WrtAddLenthLookUpTbl>:
 800df70:	b580      	push	{r7, lr}
 800df72:	b086      	sub	sp, #24
 800df74:	af00      	add	r7, sp, #0
 800df76:	4603      	mov	r3, r0
 800df78:	603a      	str	r2, [r7, #0]
 800df7a:	71fb      	strb	r3, [r7, #7]
 800df7c:	460b      	mov	r3, r1
 800df7e:	71bb      	strb	r3, [r7, #6]
 800df80:	2300      	movs	r3, #0
 800df82:	757b      	strb	r3, [r7, #21]
 800df84:	2300      	movs	r3, #0
 800df86:	82fb      	strh	r3, [r7, #22]
 800df88:	e088      	b.n	800e09c <ISOUDS_WrtAddLenthLookUpTbl+0x12c>
 800df8a:	8afa      	ldrh	r2, [r7, #22]
 800df8c:	494b      	ldr	r1, [pc, #300]	; (800e0bc <ISOUDS_WrtAddLenthLookUpTbl+0x14c>)
 800df8e:	4613      	mov	r3, r2
 800df90:	009b      	lsls	r3, r3, #2
 800df92:	4413      	add	r3, r2
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	440b      	add	r3, r1
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	79fa      	ldrb	r2, [r7, #7]
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d17a      	bne.n	800e096 <ISOUDS_WrtAddLenthLookUpTbl+0x126>
 800dfa0:	8afa      	ldrh	r2, [r7, #22]
 800dfa2:	4946      	ldr	r1, [pc, #280]	; (800e0bc <ISOUDS_WrtAddLenthLookUpTbl+0x14c>)
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	4413      	add	r3, r2
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	440b      	add	r3, r1
 800dfae:	3301      	adds	r3, #1
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	79ba      	ldrb	r2, [r7, #6]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d16e      	bne.n	800e096 <ISOUDS_WrtAddLenthLookUpTbl+0x126>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	613b      	str	r3, [r7, #16]
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	753b      	strb	r3, [r7, #20]
 800dfc0:	e015      	b.n	800dfee <ISOUDS_WrtAddLenthLookUpTbl+0x7e>
 800dfc2:	79fa      	ldrb	r2, [r7, #7]
 800dfc4:	7d3b      	ldrb	r3, [r7, #20]
 800dfc6:	1ad3      	subs	r3, r2, r3
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	3b01      	subs	r3, #1
 800dfcc:	72fb      	strb	r3, [r7, #11]
 800dfce:	7d3b      	ldrb	r3, [r7, #20]
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	683a      	ldr	r2, [r7, #0]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	461a      	mov	r2, r3
 800dfda:	7afb      	ldrb	r3, [r7, #11]
 800dfdc:	00db      	lsls	r3, r3, #3
 800dfde:	fa02 f303 	lsl.w	r3, r2, r3
 800dfe2:	693a      	ldr	r2, [r7, #16]
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	613b      	str	r3, [r7, #16]
 800dfe8:	7d3b      	ldrb	r3, [r7, #20]
 800dfea:	3301      	adds	r3, #1
 800dfec:	753b      	strb	r3, [r7, #20]
 800dfee:	7d3a      	ldrb	r2, [r7, #20]
 800dff0:	79fb      	ldrb	r3, [r7, #7]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d3e5      	bcc.n	800dfc2 <ISOUDS_WrtAddLenthLookUpTbl+0x52>
 800dff6:	2300      	movs	r3, #0
 800dff8:	60fb      	str	r3, [r7, #12]
 800dffa:	2300      	movs	r3, #0
 800dffc:	753b      	strb	r3, [r7, #20]
 800dffe:	e017      	b.n	800e030 <ISOUDS_WrtAddLenthLookUpTbl+0xc0>
 800e000:	79ba      	ldrb	r2, [r7, #6]
 800e002:	7d3b      	ldrb	r3, [r7, #20]
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	b2db      	uxtb	r3, r3
 800e008:	3b01      	subs	r3, #1
 800e00a:	72fb      	strb	r3, [r7, #11]
 800e00c:	79fa      	ldrb	r2, [r7, #7]
 800e00e:	7d3b      	ldrb	r3, [r7, #20]
 800e010:	4413      	add	r3, r2
 800e012:	3301      	adds	r3, #1
 800e014:	683a      	ldr	r2, [r7, #0]
 800e016:	4413      	add	r3, r2
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	461a      	mov	r2, r3
 800e01c:	7afb      	ldrb	r3, [r7, #11]
 800e01e:	00db      	lsls	r3, r3, #3
 800e020:	fa02 f303 	lsl.w	r3, r2, r3
 800e024:	68fa      	ldr	r2, [r7, #12]
 800e026:	4313      	orrs	r3, r2
 800e028:	60fb      	str	r3, [r7, #12]
 800e02a:	7d3b      	ldrb	r3, [r7, #20]
 800e02c:	3301      	adds	r3, #1
 800e02e:	753b      	strb	r3, [r7, #20]
 800e030:	7d3a      	ldrb	r2, [r7, #20]
 800e032:	79bb      	ldrb	r3, [r7, #6]
 800e034:	429a      	cmp	r2, r3
 800e036:	d3e3      	bcc.n	800e000 <ISOUDS_WrtAddLenthLookUpTbl+0x90>
 800e038:	8afa      	ldrh	r2, [r7, #22]
 800e03a:	4920      	ldr	r1, [pc, #128]	; (800e0bc <ISOUDS_WrtAddLenthLookUpTbl+0x14c>)
 800e03c:	4613      	mov	r3, r2
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	4413      	add	r3, r2
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	440b      	add	r3, r1
 800e046:	3304      	adds	r3, #4
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	693a      	ldr	r2, [r7, #16]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d322      	bcc.n	800e096 <ISOUDS_WrtAddLenthLookUpTbl+0x126>
 800e050:	8afa      	ldrh	r2, [r7, #22]
 800e052:	491a      	ldr	r1, [pc, #104]	; (800e0bc <ISOUDS_WrtAddLenthLookUpTbl+0x14c>)
 800e054:	4613      	mov	r3, r2
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	4413      	add	r3, r2
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	440b      	add	r3, r1
 800e05e:	3304      	adds	r3, #4
 800e060:	6819      	ldr	r1, [r3, #0]
 800e062:	8afa      	ldrh	r2, [r7, #22]
 800e064:	4815      	ldr	r0, [pc, #84]	; (800e0bc <ISOUDS_WrtAddLenthLookUpTbl+0x14c>)
 800e066:	4613      	mov	r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	4413      	add	r3, r2
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	4403      	add	r3, r0
 800e070:	3308      	adds	r3, #8
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	18ca      	adds	r2, r1, r3
 800e076:	6939      	ldr	r1, [r7, #16]
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	440b      	add	r3, r1
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d30a      	bcc.n	800e096 <ISOUDS_WrtAddLenthLookUpTbl+0x126>
 800e080:	4a0f      	ldr	r2, [pc, #60]	; (800e0c0 <ISOUDS_WrtAddLenthLookUpTbl+0x150>)
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	6013      	str	r3, [r2, #0]
 800e086:	4a0f      	ldr	r2, [pc, #60]	; (800e0c4 <ISOUDS_WrtAddLenthLookUpTbl+0x154>)
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6013      	str	r3, [r2, #0]
 800e08c:	8afb      	ldrh	r3, [r7, #22]
 800e08e:	4a0e      	ldr	r2, [pc, #56]	; (800e0c8 <ISOUDS_WrtAddLenthLookUpTbl+0x158>)
 800e090:	6013      	str	r3, [r2, #0]
 800e092:	2301      	movs	r3, #1
 800e094:	757b      	strb	r3, [r7, #21]
 800e096:	8afb      	ldrh	r3, [r7, #22]
 800e098:	3301      	adds	r3, #1
 800e09a:	82fb      	strh	r3, [r7, #22]
 800e09c:	f7f5 f945 	bl	800332a <ISOUDS_Get_WrtMemByAddMaxentries>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	8afb      	ldrh	r3, [r7, #22]
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d203      	bcs.n	800e0b2 <ISOUDS_WrtAddLenthLookUpTbl+0x142>
 800e0aa:	7d7b      	ldrb	r3, [r7, #21]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f43f af6c 	beq.w	800df8a <ISOUDS_WrtAddLenthLookUpTbl+0x1a>
 800e0b2:	7d7b      	ldrb	r3, [r7, #21]
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3718      	adds	r7, #24
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	08010a90 	.word	0x08010a90
 800e0c0:	240017e4 	.word	0x240017e4
 800e0c4:	240017e8 	.word	0x240017e8
 800e0c8:	240017ec 	.word	0x240017ec

0800e0cc <ISOUDS_AUTHENInit>:
 800e0cc:	b480      	push	{r7}
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	4b09      	ldr	r3, [pc, #36]	; (800e0f8 <ISOUDS_AUTHENInit+0x2c>)
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	701a      	strb	r2, [r3, #0]
 800e0d6:	4b09      	ldr	r3, [pc, #36]	; (800e0fc <ISOUDS_AUTHENInit+0x30>)
 800e0d8:	2200      	movs	r2, #0
 800e0da:	701a      	strb	r2, [r3, #0]
 800e0dc:	4b08      	ldr	r3, [pc, #32]	; (800e100 <ISOUDS_AUTHENInit+0x34>)
 800e0de:	2200      	movs	r2, #0
 800e0e0:	701a      	strb	r2, [r3, #0]
 800e0e2:	4b08      	ldr	r3, [pc, #32]	; (800e104 <ISOUDS_AUTHENInit+0x38>)
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	601a      	str	r2, [r3, #0]
 800e0e8:	4b07      	ldr	r3, [pc, #28]	; (800e108 <ISOUDS_AUTHENInit+0x3c>)
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	701a      	strb	r2, [r3, #0]
 800e0ee:	bf00      	nop
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr
 800e0f8:	240017f1 	.word	0x240017f1
 800e0fc:	24000291 	.word	0x24000291
 800e100:	240017f0 	.word	0x240017f0
 800e104:	240017f4 	.word	0x240017f4
 800e108:	240017f2 	.word	0x240017f2

0800e10c <ISOUDS_AUTHENChkTimer>:
 800e10c:	b580      	push	{r7, lr}
 800e10e:	af00      	add	r7, sp, #0
 800e110:	4b11      	ldr	r3, [pc, #68]	; (800e158 <ISOUDS_AUTHENChkTimer+0x4c>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d007      	beq.n	800e128 <ISOUDS_AUTHENChkTimer+0x1c>
 800e118:	f000 f826 	bl	800e168 <ISOUDS_AUTHENReset>
 800e11c:	4b0f      	ldr	r3, [pc, #60]	; (800e15c <ISOUDS_AUTHENChkTimer+0x50>)
 800e11e:	2200      	movs	r2, #0
 800e120:	701a      	strb	r2, [r3, #0]
 800e122:	4b0d      	ldr	r3, [pc, #52]	; (800e158 <ISOUDS_AUTHENChkTimer+0x4c>)
 800e124:	2200      	movs	r2, #0
 800e126:	601a      	str	r2, [r3, #0]
 800e128:	4b0d      	ldr	r3, [pc, #52]	; (800e160 <ISOUDS_AUTHENChkTimer+0x54>)
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d110      	bne.n	800e152 <ISOUDS_AUTHENChkTimer+0x46>
 800e130:	4b0c      	ldr	r3, [pc, #48]	; (800e164 <ISOUDS_AUTHENChkTimer+0x58>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800e138:	4293      	cmp	r3, r2
 800e13a:	d905      	bls.n	800e148 <ISOUDS_AUTHENChkTimer+0x3c>
 800e13c:	f000 f814 	bl	800e168 <ISOUDS_AUTHENReset>
 800e140:	4b08      	ldr	r3, [pc, #32]	; (800e164 <ISOUDS_AUTHENChkTimer+0x58>)
 800e142:	2200      	movs	r2, #0
 800e144:	601a      	str	r2, [r3, #0]
 800e146:	e004      	b.n	800e152 <ISOUDS_AUTHENChkTimer+0x46>
 800e148:	4b06      	ldr	r3, [pc, #24]	; (800e164 <ISOUDS_AUTHENChkTimer+0x58>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	330a      	adds	r3, #10
 800e14e:	4a05      	ldr	r2, [pc, #20]	; (800e164 <ISOUDS_AUTHENChkTimer+0x58>)
 800e150:	6013      	str	r3, [r2, #0]
 800e152:	bf00      	nop
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	240017f4 	.word	0x240017f4
 800e15c:	240017f2 	.word	0x240017f2
 800e160:	240017f1 	.word	0x240017f1
 800e164:	240017f8 	.word	0x240017f8

0800e168 <ISOUDS_AUTHENReset>:
 800e168:	b480      	push	{r7}
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	4b06      	ldr	r3, [pc, #24]	; (800e188 <ISOUDS_AUTHENReset+0x20>)
 800e16e:	2200      	movs	r2, #0
 800e170:	701a      	strb	r2, [r3, #0]
 800e172:	4b06      	ldr	r3, [pc, #24]	; (800e18c <ISOUDS_AUTHENReset+0x24>)
 800e174:	2200      	movs	r2, #0
 800e176:	701a      	strb	r2, [r3, #0]
 800e178:	4b05      	ldr	r3, [pc, #20]	; (800e190 <ISOUDS_AUTHENReset+0x28>)
 800e17a:	2200      	movs	r2, #0
 800e17c:	701a      	strb	r2, [r3, #0]
 800e17e:	bf00      	nop
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr
 800e188:	240017f1 	.word	0x240017f1
 800e18c:	24000291 	.word	0x24000291
 800e190:	240017f0 	.word	0x240017f0

0800e194 <ISOUDS_GetAAUTHENTICATEStatus>:
 800e194:	b480      	push	{r7}
 800e196:	af00      	add	r7, sp, #0
 800e198:	4b03      	ldr	r3, [pc, #12]	; (800e1a8 <ISOUDS_GetAAUTHENTICATEStatus+0x14>)
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	4618      	mov	r0, r3
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	240017f1 	.word	0x240017f1

0800e1ac <ISOUDS_DyLookUp>:
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	80fb      	strh	r3, [r7, #6]
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	73fb      	strb	r3, [r7, #15]
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	73bb      	strb	r3, [r7, #14]
 800e1be:	e011      	b.n	800e1e4 <ISOUDS_DyLookUp+0x38>
 800e1c0:	7bbb      	ldrb	r3, [r7, #14]
 800e1c2:	4a10      	ldr	r2, [pc, #64]	; (800e204 <ISOUDS_DyLookUp+0x58>)
 800e1c4:	216c      	movs	r1, #108	; 0x6c
 800e1c6:	fb01 f303 	mul.w	r3, r1, r3
 800e1ca:	4413      	add	r3, r2
 800e1cc:	881b      	ldrh	r3, [r3, #0]
 800e1ce:	88fa      	ldrh	r2, [r7, #6]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d104      	bne.n	800e1de <ISOUDS_DyLookUp+0x32>
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	73fb      	strb	r3, [r7, #15]
 800e1d8:	4a0b      	ldr	r2, [pc, #44]	; (800e208 <ISOUDS_DyLookUp+0x5c>)
 800e1da:	7bbb      	ldrb	r3, [r7, #14]
 800e1dc:	7013      	strb	r3, [r2, #0]
 800e1de:	7bbb      	ldrb	r3, [r7, #14]
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	73bb      	strb	r3, [r7, #14]
 800e1e4:	f7f3 f823 	bl	800122e <ISOUDS_Get_DYDDCONFTABSIZE>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	7bba      	ldrb	r2, [r7, #14]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d202      	bcs.n	800e1f8 <ISOUDS_DyLookUp+0x4c>
 800e1f2:	7bfb      	ldrb	r3, [r7, #15]
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d1e3      	bne.n	800e1c0 <ISOUDS_DyLookUp+0x14>
 800e1f8:	7bfb      	ldrb	r3, [r7, #15]
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3710      	adds	r7, #16
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
 800e202:	bf00      	nop
 800e204:	240000ac 	.word	0x240000ac
 800e208:	240017fc 	.word	0x240017fc

0800e20c <ISOTP_Init>:
 800e20c:	b480      	push	{r7}
 800e20e:	af00      	add	r7, sp, #0
 800e210:	4b0e      	ldr	r3, [pc, #56]	; (800e24c <ISOTP_Init+0x40>)
 800e212:	2200      	movs	r2, #0
 800e214:	701a      	strb	r2, [r3, #0]
 800e216:	4b0e      	ldr	r3, [pc, #56]	; (800e250 <ISOTP_Init+0x44>)
 800e218:	2200      	movs	r2, #0
 800e21a:	701a      	strb	r2, [r3, #0]
 800e21c:	4b0d      	ldr	r3, [pc, #52]	; (800e254 <ISOTP_Init+0x48>)
 800e21e:	2200      	movs	r2, #0
 800e220:	601a      	str	r2, [r3, #0]
 800e222:	4b0d      	ldr	r3, [pc, #52]	; (800e258 <ISOTP_Init+0x4c>)
 800e224:	2200      	movs	r2, #0
 800e226:	601a      	str	r2, [r3, #0]
 800e228:	4b0c      	ldr	r3, [pc, #48]	; (800e25c <ISOTP_Init+0x50>)
 800e22a:	2200      	movs	r2, #0
 800e22c:	601a      	str	r2, [r3, #0]
 800e22e:	4b0c      	ldr	r3, [pc, #48]	; (800e260 <ISOTP_Init+0x54>)
 800e230:	2200      	movs	r2, #0
 800e232:	701a      	strb	r2, [r3, #0]
 800e234:	4b0b      	ldr	r3, [pc, #44]	; (800e264 <ISOTP_Init+0x58>)
 800e236:	2200      	movs	r2, #0
 800e238:	801a      	strh	r2, [r3, #0]
 800e23a:	4b0b      	ldr	r3, [pc, #44]	; (800e268 <ISOTP_Init+0x5c>)
 800e23c:	2200      	movs	r2, #0
 800e23e:	801a      	strh	r2, [r3, #0]
 800e240:	bf00      	nop
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop
 800e24c:	24001834 	.word	0x24001834
 800e250:	24001820 	.word	0x24001820
 800e254:	24001808 	.word	0x24001808
 800e258:	2400180c 	.word	0x2400180c
 800e25c:	24001810 	.word	0x24001810
 800e260:	240017fd 	.word	0x240017fd
 800e264:	24001802 	.word	0x24001802
 800e268:	24001836 	.word	0x24001836

0800e26c <ISOTP_RxMsgCbk>:
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b086      	sub	sp, #24
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	607b      	str	r3, [r7, #4]
 800e276:	460b      	mov	r3, r1
 800e278:	72fb      	strb	r3, [r7, #11]
 800e27a:	4613      	mov	r3, r2
 800e27c:	72bb      	strb	r3, [r7, #10]
 800e27e:	7afb      	ldrb	r3, [r7, #11]
 800e280:	4619      	mov	r1, r3
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	f7f2 fcc4 	bl	8000c10 <ISOTP_CheckReqType>
 800e288:	4603      	mov	r3, r0
 800e28a:	75fb      	strb	r3, [r7, #23]
 800e28c:	f7f2 fd5b 	bl	8000d46 <ISOTP_STPadding>
 800e290:	4603      	mov	r3, r0
 800e292:	2b00      	cmp	r3, #0
 800e294:	d102      	bne.n	800e29c <ISOTP_RxMsgCbk+0x30>
 800e296:	7abb      	ldrb	r3, [r7, #10]
 800e298:	2b08      	cmp	r3, #8
 800e29a:	d002      	beq.n	800e2a2 <ISOTP_RxMsgCbk+0x36>
 800e29c:	7abb      	ldrb	r3, [r7, #10]
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d92f      	bls.n	800e302 <ISOTP_RxMsgCbk+0x96>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	f023 030f 	bic.w	r3, r3, #15
 800e2aa:	75bb      	strb	r3, [r7, #22]
 800e2ac:	7dbb      	ldrb	r3, [r7, #22]
 800e2ae:	2b30      	cmp	r3, #48	; 0x30
 800e2b0:	d01f      	beq.n	800e2f2 <ISOTP_RxMsgCbk+0x86>
 800e2b2:	2b30      	cmp	r3, #48	; 0x30
 800e2b4:	dc24      	bgt.n	800e300 <ISOTP_RxMsgCbk+0x94>
 800e2b6:	2b20      	cmp	r3, #32
 800e2b8:	d014      	beq.n	800e2e4 <ISOTP_RxMsgCbk+0x78>
 800e2ba:	2b20      	cmp	r3, #32
 800e2bc:	dc20      	bgt.n	800e300 <ISOTP_RxMsgCbk+0x94>
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d002      	beq.n	800e2c8 <ISOTP_RxMsgCbk+0x5c>
 800e2c2:	2b10      	cmp	r3, #16
 800e2c4:	d007      	beq.n	800e2d6 <ISOTP_RxMsgCbk+0x6a>
 800e2c6:	e01b      	b.n	800e300 <ISOTP_RxMsgCbk+0x94>
 800e2c8:	7dfa      	ldrb	r2, [r7, #23]
 800e2ca:	7abb      	ldrb	r3, [r7, #10]
 800e2cc:	6879      	ldr	r1, [r7, #4]
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f000 fa92 	bl	800e7f8 <ISOTP_RxMsgCbk_SF>
 800e2d4:	e015      	b.n	800e302 <ISOTP_RxMsgCbk+0x96>
 800e2d6:	7dfa      	ldrb	r2, [r7, #23]
 800e2d8:	7abb      	ldrb	r3, [r7, #10]
 800e2da:	6879      	ldr	r1, [r7, #4]
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f000 faf9 	bl	800e8d4 <ISOTP_RxMsgCbk_FF>
 800e2e2:	e00e      	b.n	800e302 <ISOTP_RxMsgCbk+0x96>
 800e2e4:	7dfa      	ldrb	r2, [r7, #23]
 800e2e6:	7abb      	ldrb	r3, [r7, #10]
 800e2e8:	6879      	ldr	r1, [r7, #4]
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f000 fba6 	bl	800ea3c <ISOTP_RxMsgCbk_CF>
 800e2f0:	e007      	b.n	800e302 <ISOTP_RxMsgCbk+0x96>
 800e2f2:	7dfa      	ldrb	r2, [r7, #23]
 800e2f4:	7abb      	ldrb	r3, [r7, #10]
 800e2f6:	6879      	ldr	r1, [r7, #4]
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f000 fc75 	bl	800ebe8 <ISOTP_RxMsgCbk_FC>
 800e2fe:	e000      	b.n	800e302 <ISOTP_RxMsgCbk+0x96>
 800e300:	bf00      	nop
 800e302:	bf00      	nop
 800e304:	3718      	adds	r7, #24
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
	...

0800e30c <ISOTP_TxRequest>:
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	4603      	mov	r3, r0
 800e314:	6039      	str	r1, [r7, #0]
 800e316:	80fb      	strh	r3, [r7, #6]
 800e318:	4b64      	ldr	r3, [pc, #400]	; (800e4ac <ISOTP_TxRequest+0x1a0>)
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f040 80bd 	bne.w	800e49c <ISOTP_TxRequest+0x190>
 800e322:	f7f2 fd07 	bl	8000d34 <ISOTP_GetBUFFSIZE>
 800e326:	4603      	mov	r3, r0
 800e328:	b29b      	uxth	r3, r3
 800e32a:	88fa      	ldrh	r2, [r7, #6]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	f200 80b5 	bhi.w	800e49c <ISOTP_TxRequest+0x190>
 800e332:	88fb      	ldrh	r3, [r7, #6]
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 80b1 	beq.w	800e49c <ISOTP_TxRequest+0x190>
 800e33a:	4b5d      	ldr	r3, [pc, #372]	; (800e4b0 <ISOTP_TxRequest+0x1a4>)
 800e33c:	2203      	movs	r2, #3
 800e33e:	701a      	strb	r2, [r3, #0]
 800e340:	4b5c      	ldr	r3, [pc, #368]	; (800e4b4 <ISOTP_TxRequest+0x1a8>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a5c      	ldr	r2, [pc, #368]	; (800e4b8 <ISOTP_TxRequest+0x1ac>)
 800e346:	6013      	str	r3, [r2, #0]
 800e348:	4b5c      	ldr	r3, [pc, #368]	; (800e4bc <ISOTP_TxRequest+0x1b0>)
 800e34a:	2201      	movs	r2, #1
 800e34c:	601a      	str	r2, [r3, #0]
 800e34e:	88fb      	ldrh	r3, [r7, #6]
 800e350:	2b07      	cmp	r3, #7
 800e352:	d846      	bhi.n	800e3e2 <ISOTP_TxRequest+0xd6>
 800e354:	4b55      	ldr	r3, [pc, #340]	; (800e4ac <ISOTP_TxRequest+0x1a0>)
 800e356:	2202      	movs	r2, #2
 800e358:	701a      	strb	r2, [r3, #0]
 800e35a:	4a59      	ldr	r2, [pc, #356]	; (800e4c0 <ISOTP_TxRequest+0x1b4>)
 800e35c:	88fb      	ldrh	r3, [r7, #6]
 800e35e:	8053      	strh	r3, [r2, #2]
 800e360:	88fb      	ldrh	r3, [r7, #6]
 800e362:	b2da      	uxtb	r2, r3
 800e364:	4b57      	ldr	r3, [pc, #348]	; (800e4c4 <ISOTP_TxRequest+0x1b8>)
 800e366:	715a      	strb	r2, [r3, #5]
 800e368:	2300      	movs	r3, #0
 800e36a:	81bb      	strh	r3, [r7, #12]
 800e36c:	e015      	b.n	800e39a <ISOTP_TxRequest+0x8e>
 800e36e:	89bb      	ldrh	r3, [r7, #12]
 800e370:	683a      	ldr	r2, [r7, #0]
 800e372:	441a      	add	r2, r3
 800e374:	89bb      	ldrh	r3, [r7, #12]
 800e376:	7811      	ldrb	r1, [r2, #0]
 800e378:	4a51      	ldr	r2, [pc, #324]	; (800e4c0 <ISOTP_TxRequest+0x1b4>)
 800e37a:	4413      	add	r3, r2
 800e37c:	460a      	mov	r2, r1
 800e37e:	711a      	strb	r2, [r3, #4]
 800e380:	89bb      	ldrh	r3, [r7, #12]
 800e382:	89ba      	ldrh	r2, [r7, #12]
 800e384:	3201      	adds	r2, #1
 800e386:	4611      	mov	r1, r2
 800e388:	4a4d      	ldr	r2, [pc, #308]	; (800e4c0 <ISOTP_TxRequest+0x1b4>)
 800e38a:	4413      	add	r3, r2
 800e38c:	791a      	ldrb	r2, [r3, #4]
 800e38e:	4b4d      	ldr	r3, [pc, #308]	; (800e4c4 <ISOTP_TxRequest+0x1b8>)
 800e390:	440b      	add	r3, r1
 800e392:	715a      	strb	r2, [r3, #5]
 800e394:	89bb      	ldrh	r3, [r7, #12]
 800e396:	3301      	adds	r3, #1
 800e398:	81bb      	strh	r3, [r7, #12]
 800e39a:	89ba      	ldrh	r2, [r7, #12]
 800e39c:	88fb      	ldrh	r3, [r7, #6]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d3e5      	bcc.n	800e36e <ISOTP_TxRequest+0x62>
 800e3a2:	f7f2 fcd0 	bl	8000d46 <ISOTP_STPadding>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d10a      	bne.n	800e3c2 <ISOTP_TxRequest+0xb6>
 800e3ac:	88fb      	ldrh	r3, [r7, #6]
 800e3ae:	2b06      	cmp	r3, #6
 800e3b0:	d803      	bhi.n	800e3ba <ISOTP_TxRequest+0xae>
 800e3b2:	88fb      	ldrh	r3, [r7, #6]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f000 fa01 	bl	800e7bc <ISOTP_PrfrmPad>
 800e3ba:	4b42      	ldr	r3, [pc, #264]	; (800e4c4 <ISOTP_TxRequest+0x1b8>)
 800e3bc:	2208      	movs	r2, #8
 800e3be:	711a      	strb	r2, [r3, #4]
 800e3c0:	e005      	b.n	800e3ce <ISOTP_TxRequest+0xc2>
 800e3c2:	88fb      	ldrh	r3, [r7, #6]
 800e3c4:	b2db      	uxtb	r3, r3
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	b2da      	uxtb	r2, r3
 800e3ca:	4b3e      	ldr	r3, [pc, #248]	; (800e4c4 <ISOTP_TxRequest+0x1b8>)
 800e3cc:	711a      	strb	r2, [r3, #4]
 800e3ce:	4b3e      	ldr	r3, [pc, #248]	; (800e4c8 <ISOTP_TxRequest+0x1bc>)
 800e3d0:	6818      	ldr	r0, [r3, #0]
 800e3d2:	4b3e      	ldr	r3, [pc, #248]	; (800e4cc <ISOTP_TxRequest+0x1c0>)
 800e3d4:	7819      	ldrb	r1, [r3, #0]
 800e3d6:	4b3b      	ldr	r3, [pc, #236]	; (800e4c4 <ISOTP_TxRequest+0x1b8>)
 800e3d8:	791a      	ldrb	r2, [r3, #4]
 800e3da:	4b3d      	ldr	r3, [pc, #244]	; (800e4d0 <ISOTP_TxRequest+0x1c4>)
 800e3dc:	f7f2 fd08 	bl	8000df0 <ISOTP_HAL_CANMesgTxnReq_Stub>
 800e3e0:	e059      	b.n	800e496 <ISOTP_TxRequest+0x18a>
 800e3e2:	4b32      	ldr	r3, [pc, #200]	; (800e4ac <ISOTP_TxRequest+0x1a0>)
 800e3e4:	2208      	movs	r2, #8
 800e3e6:	701a      	strb	r2, [r3, #0]
 800e3e8:	4a35      	ldr	r2, [pc, #212]	; (800e4c0 <ISOTP_TxRequest+0x1b4>)
 800e3ea:	88fb      	ldrh	r3, [r7, #6]
 800e3ec:	8053      	strh	r3, [r2, #2]
 800e3ee:	4b34      	ldr	r3, [pc, #208]	; (800e4c0 <ISOTP_TxRequest+0x1b4>)
 800e3f0:	885b      	ldrh	r3, [r3, #2]
 800e3f2:	0a1b      	lsrs	r3, r3, #8
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	b25b      	sxtb	r3, r3
 800e3f8:	f003 030f 	and.w	r3, r3, #15
 800e3fc:	b25b      	sxtb	r3, r3
 800e3fe:	f043 0310 	orr.w	r3, r3, #16
 800e402:	b25b      	sxtb	r3, r3
 800e404:	b2da      	uxtb	r2, r3
 800e406:	4b2e      	ldr	r3, [pc, #184]	; (800e4c0 <ISOTP_TxRequest+0x1b4>)
 800e408:	701a      	strb	r2, [r3, #0]
 800e40a:	4b2d      	ldr	r3, [pc, #180]	; (800e4c0 <ISOTP_TxRequest+0x1b4>)
 800e40c:	2200      	movs	r2, #0
 800e40e:	705a      	strb	r2, [r3, #1]
 800e410:	2300      	movs	r3, #0
 800e412:	81bb      	strh	r3, [r7, #12]
 800e414:	e00b      	b.n	800e42e <ISOTP_TxRequest+0x122>
 800e416:	89bb      	ldrh	r3, [r7, #12]
 800e418:	683a      	ldr	r2, [r7, #0]
 800e41a:	441a      	add	r2, r3
 800e41c:	89bb      	ldrh	r3, [r7, #12]
 800e41e:	7811      	ldrb	r1, [r2, #0]
 800e420:	4a27      	ldr	r2, [pc, #156]	; (800e4c0 <ISOTP_TxRequest+0x1b4>)
 800e422:	4413      	add	r3, r2
 800e424:	460a      	mov	r2, r1
 800e426:	711a      	strb	r2, [r3, #4]
 800e428:	89bb      	ldrh	r3, [r7, #12]
 800e42a:	3301      	adds	r3, #1
 800e42c:	81bb      	strh	r3, [r7, #12]
 800e42e:	89ba      	ldrh	r2, [r7, #12]
 800e430:	88fb      	ldrh	r3, [r7, #6]
 800e432:	429a      	cmp	r2, r3
 800e434:	d3ef      	bcc.n	800e416 <ISOTP_TxRequest+0x10a>
 800e436:	4b1f      	ldr	r3, [pc, #124]	; (800e4b4 <ISOTP_TxRequest+0x1a8>)
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	4a26      	ldr	r2, [pc, #152]	; (800e4d4 <ISOTP_TxRequest+0x1c8>)
 800e43c:	6013      	str	r3, [r2, #0]
 800e43e:	4b1d      	ldr	r3, [pc, #116]	; (800e4b4 <ISOTP_TxRequest+0x1a8>)
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	4a25      	ldr	r2, [pc, #148]	; (800e4d8 <ISOTP_TxRequest+0x1cc>)
 800e444:	6013      	str	r3, [r2, #0]
 800e446:	4b1e      	ldr	r3, [pc, #120]	; (800e4c0 <ISOTP_TxRequest+0x1b4>)
 800e448:	781a      	ldrb	r2, [r3, #0]
 800e44a:	4b1e      	ldr	r3, [pc, #120]	; (800e4c4 <ISOTP_TxRequest+0x1b8>)
 800e44c:	715a      	strb	r2, [r3, #5]
 800e44e:	4b1c      	ldr	r3, [pc, #112]	; (800e4c0 <ISOTP_TxRequest+0x1b4>)
 800e450:	885b      	ldrh	r3, [r3, #2]
 800e452:	b2da      	uxtb	r2, r3
 800e454:	4b1b      	ldr	r3, [pc, #108]	; (800e4c4 <ISOTP_TxRequest+0x1b8>)
 800e456:	719a      	strb	r2, [r3, #6]
 800e458:	2300      	movs	r3, #0
 800e45a:	81bb      	strh	r3, [r7, #12]
 800e45c:	e00c      	b.n	800e478 <ISOTP_TxRequest+0x16c>
 800e45e:	89bb      	ldrh	r3, [r7, #12]
 800e460:	89ba      	ldrh	r2, [r7, #12]
 800e462:	3202      	adds	r2, #2
 800e464:	4611      	mov	r1, r2
 800e466:	4a16      	ldr	r2, [pc, #88]	; (800e4c0 <ISOTP_TxRequest+0x1b4>)
 800e468:	4413      	add	r3, r2
 800e46a:	791a      	ldrb	r2, [r3, #4]
 800e46c:	4b15      	ldr	r3, [pc, #84]	; (800e4c4 <ISOTP_TxRequest+0x1b8>)
 800e46e:	440b      	add	r3, r1
 800e470:	715a      	strb	r2, [r3, #5]
 800e472:	89bb      	ldrh	r3, [r7, #12]
 800e474:	3301      	adds	r3, #1
 800e476:	81bb      	strh	r3, [r7, #12]
 800e478:	89bb      	ldrh	r3, [r7, #12]
 800e47a:	2b05      	cmp	r3, #5
 800e47c:	d9ef      	bls.n	800e45e <ISOTP_TxRequest+0x152>
 800e47e:	4b11      	ldr	r3, [pc, #68]	; (800e4c4 <ISOTP_TxRequest+0x1b8>)
 800e480:	2208      	movs	r2, #8
 800e482:	711a      	strb	r2, [r3, #4]
 800e484:	4b10      	ldr	r3, [pc, #64]	; (800e4c8 <ISOTP_TxRequest+0x1bc>)
 800e486:	6818      	ldr	r0, [r3, #0]
 800e488:	4b10      	ldr	r3, [pc, #64]	; (800e4cc <ISOTP_TxRequest+0x1c0>)
 800e48a:	7819      	ldrb	r1, [r3, #0]
 800e48c:	4b0d      	ldr	r3, [pc, #52]	; (800e4c4 <ISOTP_TxRequest+0x1b8>)
 800e48e:	791a      	ldrb	r2, [r3, #4]
 800e490:	4b0f      	ldr	r3, [pc, #60]	; (800e4d0 <ISOTP_TxRequest+0x1c4>)
 800e492:	f7f2 fcad 	bl	8000df0 <ISOTP_HAL_CANMesgTxnReq_Stub>
 800e496:	2301      	movs	r3, #1
 800e498:	73fb      	strb	r3, [r7, #15]
 800e49a:	e001      	b.n	800e4a0 <ISOTP_TxRequest+0x194>
 800e49c:	2300      	movs	r3, #0
 800e49e:	73fb      	strb	r3, [r7, #15]
 800e4a0:	7bfb      	ldrb	r3, [r7, #15]
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3710      	adds	r7, #16
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
 800e4aa:	bf00      	nop
 800e4ac:	24001834 	.word	0x24001834
 800e4b0:	24001820 	.word	0x24001820
 800e4b4:	0801069c 	.word	0x0801069c
 800e4b8:	24001814 	.word	0x24001814
 800e4bc:	24001808 	.word	0x24001808
 800e4c0:	24001838 	.word	0x24001838
 800e4c4:	24001824 	.word	0x24001824
 800e4c8:	2400033c 	.word	0x2400033c
 800e4cc:	24000340 	.word	0x24000340
 800e4d0:	24001829 	.word	0x24001829
 800e4d4:	24001818 	.word	0x24001818
 800e4d8:	2400181c 	.word	0x2400181c

0800e4dc <ISOTP_Main>:
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	4b5a      	ldr	r3, [pc, #360]	; (800e64c <ISOTP_Main+0x170>)
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	2b0b      	cmp	r3, #11
 800e4e8:	d16b      	bne.n	800e5c2 <ISOTP_Main+0xe6>
 800e4ea:	4b59      	ldr	r3, [pc, #356]	; (800e650 <ISOTP_Main+0x174>)
 800e4ec:	881b      	ldrh	r3, [r3, #0]
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	4b58      	ldr	r3, [pc, #352]	; (800e654 <ISOTP_Main+0x178>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	f200 80a3 	bhi.w	800e640 <ISOTP_Main+0x164>
 800e4fa:	4b57      	ldr	r3, [pc, #348]	; (800e658 <ISOTP_Main+0x17c>)
 800e4fc:	781a      	ldrb	r2, [r3, #0]
 800e4fe:	4b57      	ldr	r3, [pc, #348]	; (800e65c <ISOTP_Main+0x180>)
 800e500:	715a      	strb	r2, [r3, #5]
 800e502:	4b55      	ldr	r3, [pc, #340]	; (800e658 <ISOTP_Main+0x17c>)
 800e504:	885b      	ldrh	r3, [r3, #2]
 800e506:	2b06      	cmp	r3, #6
 800e508:	d82e      	bhi.n	800e568 <ISOTP_Main+0x8c>
 800e50a:	2300      	movs	r3, #0
 800e50c:	80fb      	strh	r3, [r7, #6]
 800e50e:	e010      	b.n	800e532 <ISOTP_Main+0x56>
 800e510:	4b53      	ldr	r3, [pc, #332]	; (800e660 <ISOTP_Main+0x184>)
 800e512:	881b      	ldrh	r3, [r3, #0]
 800e514:	461a      	mov	r2, r3
 800e516:	88fb      	ldrh	r3, [r7, #6]
 800e518:	4413      	add	r3, r2
 800e51a:	88fa      	ldrh	r2, [r7, #6]
 800e51c:	3201      	adds	r2, #1
 800e51e:	4611      	mov	r1, r2
 800e520:	4a4d      	ldr	r2, [pc, #308]	; (800e658 <ISOTP_Main+0x17c>)
 800e522:	4413      	add	r3, r2
 800e524:	791a      	ldrb	r2, [r3, #4]
 800e526:	4b4d      	ldr	r3, [pc, #308]	; (800e65c <ISOTP_Main+0x180>)
 800e528:	440b      	add	r3, r1
 800e52a:	715a      	strb	r2, [r3, #5]
 800e52c:	88fb      	ldrh	r3, [r7, #6]
 800e52e:	3301      	adds	r3, #1
 800e530:	80fb      	strh	r3, [r7, #6]
 800e532:	4b49      	ldr	r3, [pc, #292]	; (800e658 <ISOTP_Main+0x17c>)
 800e534:	885b      	ldrh	r3, [r3, #2]
 800e536:	88fa      	ldrh	r2, [r7, #6]
 800e538:	429a      	cmp	r2, r3
 800e53a:	d3e9      	bcc.n	800e510 <ISOTP_Main+0x34>
 800e53c:	f7f2 fc03 	bl	8000d46 <ISOTP_STPadding>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d108      	bne.n	800e558 <ISOTP_Main+0x7c>
 800e546:	4b44      	ldr	r3, [pc, #272]	; (800e658 <ISOTP_Main+0x17c>)
 800e548:	885b      	ldrh	r3, [r3, #2]
 800e54a:	4618      	mov	r0, r3
 800e54c:	f000 f936 	bl	800e7bc <ISOTP_PrfrmPad>
 800e550:	4b42      	ldr	r3, [pc, #264]	; (800e65c <ISOTP_Main+0x180>)
 800e552:	2208      	movs	r2, #8
 800e554:	711a      	strb	r2, [r3, #4]
 800e556:	e021      	b.n	800e59c <ISOTP_Main+0xc0>
 800e558:	4b3f      	ldr	r3, [pc, #252]	; (800e658 <ISOTP_Main+0x17c>)
 800e55a:	885b      	ldrh	r3, [r3, #2]
 800e55c:	b2db      	uxtb	r3, r3
 800e55e:	3301      	adds	r3, #1
 800e560:	b2da      	uxtb	r2, r3
 800e562:	4b3e      	ldr	r3, [pc, #248]	; (800e65c <ISOTP_Main+0x180>)
 800e564:	711a      	strb	r2, [r3, #4]
 800e566:	e019      	b.n	800e59c <ISOTP_Main+0xc0>
 800e568:	2300      	movs	r3, #0
 800e56a:	80fb      	strh	r3, [r7, #6]
 800e56c:	e010      	b.n	800e590 <ISOTP_Main+0xb4>
 800e56e:	4b3c      	ldr	r3, [pc, #240]	; (800e660 <ISOTP_Main+0x184>)
 800e570:	881b      	ldrh	r3, [r3, #0]
 800e572:	461a      	mov	r2, r3
 800e574:	88fb      	ldrh	r3, [r7, #6]
 800e576:	441a      	add	r2, r3
 800e578:	88fb      	ldrh	r3, [r7, #6]
 800e57a:	3301      	adds	r3, #1
 800e57c:	4936      	ldr	r1, [pc, #216]	; (800e658 <ISOTP_Main+0x17c>)
 800e57e:	440a      	add	r2, r1
 800e580:	7911      	ldrb	r1, [r2, #4]
 800e582:	4a36      	ldr	r2, [pc, #216]	; (800e65c <ISOTP_Main+0x180>)
 800e584:	4413      	add	r3, r2
 800e586:	460a      	mov	r2, r1
 800e588:	715a      	strb	r2, [r3, #5]
 800e58a:	88fb      	ldrh	r3, [r7, #6]
 800e58c:	3301      	adds	r3, #1
 800e58e:	80fb      	strh	r3, [r7, #6]
 800e590:	88fb      	ldrh	r3, [r7, #6]
 800e592:	2b06      	cmp	r3, #6
 800e594:	d9eb      	bls.n	800e56e <ISOTP_Main+0x92>
 800e596:	4b31      	ldr	r3, [pc, #196]	; (800e65c <ISOTP_Main+0x180>)
 800e598:	2208      	movs	r2, #8
 800e59a:	711a      	strb	r2, [r3, #4]
 800e59c:	4b2d      	ldr	r3, [pc, #180]	; (800e654 <ISOTP_Main+0x178>)
 800e59e:	2200      	movs	r2, #0
 800e5a0:	601a      	str	r2, [r3, #0]
 800e5a2:	4b30      	ldr	r3, [pc, #192]	; (800e664 <ISOTP_Main+0x188>)
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	601a      	str	r2, [r3, #0]
 800e5a8:	4b28      	ldr	r3, [pc, #160]	; (800e64c <ISOTP_Main+0x170>)
 800e5aa:	220a      	movs	r2, #10
 800e5ac:	701a      	strb	r2, [r3, #0]
 800e5ae:	4b2e      	ldr	r3, [pc, #184]	; (800e668 <ISOTP_Main+0x18c>)
 800e5b0:	6818      	ldr	r0, [r3, #0]
 800e5b2:	4b2e      	ldr	r3, [pc, #184]	; (800e66c <ISOTP_Main+0x190>)
 800e5b4:	7819      	ldrb	r1, [r3, #0]
 800e5b6:	4b29      	ldr	r3, [pc, #164]	; (800e65c <ISOTP_Main+0x180>)
 800e5b8:	791a      	ldrb	r2, [r3, #4]
 800e5ba:	4b2d      	ldr	r3, [pc, #180]	; (800e670 <ISOTP_Main+0x194>)
 800e5bc:	f7f2 fc18 	bl	8000df0 <ISOTP_HAL_CANMesgTxnReq_Stub>
 800e5c0:	e03e      	b.n	800e640 <ISOTP_Main+0x164>
 800e5c2:	4b22      	ldr	r3, [pc, #136]	; (800e64c <ISOTP_Main+0x170>)
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	2b05      	cmp	r3, #5
 800e5c8:	d13a      	bne.n	800e640 <ISOTP_Main+0x164>
 800e5ca:	4b23      	ldr	r3, [pc, #140]	; (800e658 <ISOTP_Main+0x17c>)
 800e5cc:	781a      	ldrb	r2, [r3, #0]
 800e5ce:	4b23      	ldr	r3, [pc, #140]	; (800e65c <ISOTP_Main+0x180>)
 800e5d0:	715a      	strb	r2, [r3, #5]
 800e5d2:	f7f2 fba7 	bl	8000d24 <ISOTP_GetFCBS>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	461a      	mov	r2, r3
 800e5da:	4b20      	ldr	r3, [pc, #128]	; (800e65c <ISOTP_Main+0x180>)
 800e5dc:	719a      	strb	r2, [r3, #6]
 800e5de:	f7f2 fba1 	bl	8000d24 <ISOTP_GetFCBS>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	00d2      	lsls	r2, r2, #3
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	b29a      	uxth	r2, r3
 800e5ee:	4b21      	ldr	r3, [pc, #132]	; (800e674 <ISOTP_Main+0x198>)
 800e5f0:	801a      	strh	r2, [r3, #0]
 800e5f2:	f7f2 fb87 	bl	8000d04 <ISOTP_GetFCSTMIN>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	4b18      	ldr	r3, [pc, #96]	; (800e65c <ISOTP_Main+0x180>)
 800e5fc:	71da      	strb	r2, [r3, #7]
 800e5fe:	f7f2 fba2 	bl	8000d46 <ISOTP_STPadding>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d106      	bne.n	800e616 <ISOTP_Main+0x13a>
 800e608:	2002      	movs	r0, #2
 800e60a:	f000 f8d7 	bl	800e7bc <ISOTP_PrfrmPad>
 800e60e:	4b13      	ldr	r3, [pc, #76]	; (800e65c <ISOTP_Main+0x180>)
 800e610:	2208      	movs	r2, #8
 800e612:	711a      	strb	r2, [r3, #4]
 800e614:	e002      	b.n	800e61c <ISOTP_Main+0x140>
 800e616:	4b11      	ldr	r3, [pc, #68]	; (800e65c <ISOTP_Main+0x180>)
 800e618:	2203      	movs	r2, #3
 800e61a:	711a      	strb	r2, [r3, #4]
 800e61c:	4b16      	ldr	r3, [pc, #88]	; (800e678 <ISOTP_Main+0x19c>)
 800e61e:	2200      	movs	r2, #0
 800e620:	601a      	str	r2, [r3, #0]
 800e622:	4b10      	ldr	r3, [pc, #64]	; (800e664 <ISOTP_Main+0x188>)
 800e624:	2201      	movs	r2, #1
 800e626:	601a      	str	r2, [r3, #0]
 800e628:	4b08      	ldr	r3, [pc, #32]	; (800e64c <ISOTP_Main+0x170>)
 800e62a:	2204      	movs	r2, #4
 800e62c:	701a      	strb	r2, [r3, #0]
 800e62e:	4b0e      	ldr	r3, [pc, #56]	; (800e668 <ISOTP_Main+0x18c>)
 800e630:	6818      	ldr	r0, [r3, #0]
 800e632:	4b0e      	ldr	r3, [pc, #56]	; (800e66c <ISOTP_Main+0x190>)
 800e634:	7819      	ldrb	r1, [r3, #0]
 800e636:	4b09      	ldr	r3, [pc, #36]	; (800e65c <ISOTP_Main+0x180>)
 800e638:	791a      	ldrb	r2, [r3, #4]
 800e63a:	4b0d      	ldr	r3, [pc, #52]	; (800e670 <ISOTP_Main+0x194>)
 800e63c:	f7f2 fbd8 	bl	8000df0 <ISOTP_HAL_CANMesgTxnReq_Stub>
 800e640:	f000 f852 	bl	800e6e8 <ISOTP_iTmrMon>
 800e644:	bf00      	nop
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	24001834 	.word	0x24001834
 800e650:	24001800 	.word	0x24001800
 800e654:	24001810 	.word	0x24001810
 800e658:	24001838 	.word	0x24001838
 800e65c:	24001824 	.word	0x24001824
 800e660:	24001802 	.word	0x24001802
 800e664:	24001808 	.word	0x24001808
 800e668:	2400033c 	.word	0x2400033c
 800e66c:	24000340 	.word	0x24000340
 800e670:	24001829 	.word	0x24001829
 800e674:	24001804 	.word	0x24001804
 800e678:	2400180c 	.word	0x2400180c

0800e67c <ISOTP_GetStatus>:
 800e67c:	b480      	push	{r7}
 800e67e:	af00      	add	r7, sp, #0
 800e680:	4b03      	ldr	r3, [pc, #12]	; (800e690 <ISOTP_GetStatus+0x14>)
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	4618      	mov	r0, r3
 800e686:	46bd      	mov	sp, r7
 800e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68c:	4770      	bx	lr
 800e68e:	bf00      	nop
 800e690:	24001834 	.word	0x24001834

0800e694 <ISOTP_Rst>:
 800e694:	b580      	push	{r7, lr}
 800e696:	af00      	add	r7, sp, #0
 800e698:	4b0d      	ldr	r3, [pc, #52]	; (800e6d0 <ISOTP_Rst+0x3c>)
 800e69a:	2200      	movs	r2, #0
 800e69c:	801a      	strh	r2, [r3, #0]
 800e69e:	4b0d      	ldr	r3, [pc, #52]	; (800e6d4 <ISOTP_Rst+0x40>)
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	701a      	strb	r2, [r3, #0]
 800e6a4:	4b0c      	ldr	r3, [pc, #48]	; (800e6d8 <ISOTP_Rst+0x44>)
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	801a      	strh	r2, [r3, #0]
 800e6aa:	4b0c      	ldr	r3, [pc, #48]	; (800e6dc <ISOTP_Rst+0x48>)
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	701a      	strb	r2, [r3, #0]
 800e6b0:	4b0a      	ldr	r3, [pc, #40]	; (800e6dc <ISOTP_Rst+0x48>)
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	705a      	strb	r2, [r3, #1]
 800e6b6:	4b09      	ldr	r3, [pc, #36]	; (800e6dc <ISOTP_Rst+0x48>)
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	805a      	strh	r2, [r3, #2]
 800e6bc:	4b08      	ldr	r3, [pc, #32]	; (800e6e0 <ISOTP_Rst+0x4c>)
 800e6be:	2200      	movs	r2, #0
 800e6c0:	801a      	strh	r2, [r3, #0]
 800e6c2:	4b08      	ldr	r3, [pc, #32]	; (800e6e4 <ISOTP_Rst+0x50>)
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	701a      	strb	r2, [r3, #0]
 800e6c8:	f7f2 fb84 	bl	8000dd4 <ISOTP_HAL_Reset>
 800e6cc:	bf00      	nop
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	24001804 	.word	0x24001804
 800e6d4:	240017fd 	.word	0x240017fd
 800e6d8:	24001802 	.word	0x24001802
 800e6dc:	24001838 	.word	0x24001838
 800e6e0:	24001836 	.word	0x24001836
 800e6e4:	24001834 	.word	0x24001834

0800e6e8 <ISOTP_iTmrMon>:
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	4b2c      	ldr	r3, [pc, #176]	; (800e7a0 <ISOTP_iTmrMon+0xb8>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d018      	beq.n	800e726 <ISOTP_iTmrMon+0x3e>
 800e6f4:	4b2a      	ldr	r3, [pc, #168]	; (800e7a0 <ISOTP_iTmrMon+0xb8>)
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	4b2a      	ldr	r3, [pc, #168]	; (800e7a4 <ISOTP_iTmrMon+0xbc>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d30a      	bcc.n	800e716 <ISOTP_iTmrMon+0x2e>
 800e700:	f7ff ffc8 	bl	800e694 <ISOTP_Rst>
 800e704:	f7f2 fb6d 	bl	8000de2 <ISOTP_HAL_TimeoutInd>
 800e708:	4b25      	ldr	r3, [pc, #148]	; (800e7a0 <ISOTP_iTmrMon+0xb8>)
 800e70a:	2200      	movs	r2, #0
 800e70c:	601a      	str	r2, [r3, #0]
 800e70e:	4b26      	ldr	r3, [pc, #152]	; (800e7a8 <ISOTP_iTmrMon+0xc0>)
 800e710:	2200      	movs	r2, #0
 800e712:	701a      	strb	r2, [r3, #0]
 800e714:	e007      	b.n	800e726 <ISOTP_iTmrMon+0x3e>
 800e716:	f7f2 faed 	bl	8000cf4 <ISOTP_GetSchedPeriod>
 800e71a:	4602      	mov	r2, r0
 800e71c:	4b20      	ldr	r3, [pc, #128]	; (800e7a0 <ISOTP_iTmrMon+0xb8>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	4413      	add	r3, r2
 800e722:	4a1f      	ldr	r2, [pc, #124]	; (800e7a0 <ISOTP_iTmrMon+0xb8>)
 800e724:	6013      	str	r3, [r2, #0]
 800e726:	4b21      	ldr	r3, [pc, #132]	; (800e7ac <ISOTP_iTmrMon+0xc4>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d018      	beq.n	800e760 <ISOTP_iTmrMon+0x78>
 800e72e:	4b1f      	ldr	r3, [pc, #124]	; (800e7ac <ISOTP_iTmrMon+0xc4>)
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	4b1f      	ldr	r3, [pc, #124]	; (800e7b0 <ISOTP_iTmrMon+0xc8>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	429a      	cmp	r2, r3
 800e738:	d30a      	bcc.n	800e750 <ISOTP_iTmrMon+0x68>
 800e73a:	f7ff ffab 	bl	800e694 <ISOTP_Rst>
 800e73e:	f7f2 fb50 	bl	8000de2 <ISOTP_HAL_TimeoutInd>
 800e742:	4b1a      	ldr	r3, [pc, #104]	; (800e7ac <ISOTP_iTmrMon+0xc4>)
 800e744:	2200      	movs	r2, #0
 800e746:	601a      	str	r2, [r3, #0]
 800e748:	4b17      	ldr	r3, [pc, #92]	; (800e7a8 <ISOTP_iTmrMon+0xc0>)
 800e74a:	2200      	movs	r2, #0
 800e74c:	701a      	strb	r2, [r3, #0]
 800e74e:	e007      	b.n	800e760 <ISOTP_iTmrMon+0x78>
 800e750:	f7f2 fad0 	bl	8000cf4 <ISOTP_GetSchedPeriod>
 800e754:	4602      	mov	r2, r0
 800e756:	4b15      	ldr	r3, [pc, #84]	; (800e7ac <ISOTP_iTmrMon+0xc4>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4413      	add	r3, r2
 800e75c:	4a13      	ldr	r2, [pc, #76]	; (800e7ac <ISOTP_iTmrMon+0xc4>)
 800e75e:	6013      	str	r3, [r2, #0]
 800e760:	4b14      	ldr	r3, [pc, #80]	; (800e7b4 <ISOTP_iTmrMon+0xcc>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d018      	beq.n	800e79a <ISOTP_iTmrMon+0xb2>
 800e768:	4b12      	ldr	r3, [pc, #72]	; (800e7b4 <ISOTP_iTmrMon+0xcc>)
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	4b12      	ldr	r3, [pc, #72]	; (800e7b8 <ISOTP_iTmrMon+0xd0>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	429a      	cmp	r2, r3
 800e772:	d30a      	bcc.n	800e78a <ISOTP_iTmrMon+0xa2>
 800e774:	f7ff ff8e 	bl	800e694 <ISOTP_Rst>
 800e778:	f7f2 fb33 	bl	8000de2 <ISOTP_HAL_TimeoutInd>
 800e77c:	4b0d      	ldr	r3, [pc, #52]	; (800e7b4 <ISOTP_iTmrMon+0xcc>)
 800e77e:	2200      	movs	r2, #0
 800e780:	601a      	str	r2, [r3, #0]
 800e782:	4b09      	ldr	r3, [pc, #36]	; (800e7a8 <ISOTP_iTmrMon+0xc0>)
 800e784:	2200      	movs	r2, #0
 800e786:	701a      	strb	r2, [r3, #0]
 800e788:	e007      	b.n	800e79a <ISOTP_iTmrMon+0xb2>
 800e78a:	f7f2 fab3 	bl	8000cf4 <ISOTP_GetSchedPeriod>
 800e78e:	4602      	mov	r2, r0
 800e790:	4b08      	ldr	r3, [pc, #32]	; (800e7b4 <ISOTP_iTmrMon+0xcc>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4413      	add	r3, r2
 800e796:	4a07      	ldr	r2, [pc, #28]	; (800e7b4 <ISOTP_iTmrMon+0xcc>)
 800e798:	6013      	str	r3, [r2, #0]
 800e79a:	bf00      	nop
 800e79c:	bd80      	pop	{r7, pc}
 800e79e:	bf00      	nop
 800e7a0:	24001808 	.word	0x24001808
 800e7a4:	24001814 	.word	0x24001814
 800e7a8:	24001820 	.word	0x24001820
 800e7ac:	2400180c 	.word	0x2400180c
 800e7b0:	24001818 	.word	0x24001818
 800e7b4:	24001810 	.word	0x24001810
 800e7b8:	2400181c 	.word	0x2400181c

0800e7bc <ISOTP_PrfrmPad>:
 800e7bc:	b590      	push	{r4, r7, lr}
 800e7be:	b085      	sub	sp, #20
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	80fb      	strh	r3, [r7, #6]
 800e7c6:	88fb      	ldrh	r3, [r7, #6]
 800e7c8:	73fb      	strb	r3, [r7, #15]
 800e7ca:	e00b      	b.n	800e7e4 <ISOTP_PrfrmPad+0x28>
 800e7cc:	7bfb      	ldrb	r3, [r7, #15]
 800e7ce:	1c5c      	adds	r4, r3, #1
 800e7d0:	f7f2 faa0 	bl	8000d14 <ISOTP_GetPADVal>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	4b06      	ldr	r3, [pc, #24]	; (800e7f4 <ISOTP_PrfrmPad+0x38>)
 800e7da:	4423      	add	r3, r4
 800e7dc:	715a      	strb	r2, [r3, #5]
 800e7de:	7bfb      	ldrb	r3, [r7, #15]
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	73fb      	strb	r3, [r7, #15]
 800e7e4:	7bfb      	ldrb	r3, [r7, #15]
 800e7e6:	2b06      	cmp	r3, #6
 800e7e8:	d9f0      	bls.n	800e7cc <ISOTP_PrfrmPad+0x10>
 800e7ea:	bf00      	nop
 800e7ec:	bf00      	nop
 800e7ee:	3714      	adds	r7, #20
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd90      	pop	{r4, r7, pc}
 800e7f4:	24001824 	.word	0x24001824

0800e7f8 <ISOTP_RxMsgCbk_SF>:
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	4603      	mov	r3, r0
 800e800:	6039      	str	r1, [r7, #0]
 800e802:	71fb      	strb	r3, [r7, #7]
 800e804:	4613      	mov	r3, r2
 800e806:	71bb      	strb	r3, [r7, #6]
 800e808:	4b2c      	ldr	r3, [pc, #176]	; (800e8bc <ISOTP_RxMsgCbk_SF+0xc4>)
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	2b03      	cmp	r3, #3
 800e80e:	d050      	beq.n	800e8b2 <ISOTP_RxMsgCbk_SF+0xba>
 800e810:	4b2a      	ldr	r3, [pc, #168]	; (800e8bc <ISOTP_RxMsgCbk_SF+0xc4>)
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	2b02      	cmp	r3, #2
 800e816:	d04c      	beq.n	800e8b2 <ISOTP_RxMsgCbk_SF+0xba>
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	f003 030f 	and.w	r3, r3, #15
 800e822:	81bb      	strh	r3, [r7, #12]
 800e824:	89bb      	ldrh	r3, [r7, #12]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d043      	beq.n	800e8b2 <ISOTP_RxMsgCbk_SF+0xba>
 800e82a:	89bb      	ldrh	r3, [r7, #12]
 800e82c:	2b07      	cmp	r3, #7
 800e82e:	d840      	bhi.n	800e8b2 <ISOTP_RxMsgCbk_SF+0xba>
 800e830:	f7f2 fa89 	bl	8000d46 <ISOTP_STPadding>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d004      	beq.n	800e844 <ISOTP_RxMsgCbk_SF+0x4c>
 800e83a:	79fa      	ldrb	r2, [r7, #7]
 800e83c:	89bb      	ldrh	r3, [r7, #12]
 800e83e:	3301      	adds	r3, #1
 800e840:	429a      	cmp	r2, r3
 800e842:	d202      	bcs.n	800e84a <ISOTP_RxMsgCbk_SF+0x52>
 800e844:	79fb      	ldrb	r3, [r7, #7]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d033      	beq.n	800e8b2 <ISOTP_RxMsgCbk_SF+0xba>
 800e84a:	4b1d      	ldr	r3, [pc, #116]	; (800e8c0 <ISOTP_RxMsgCbk_SF+0xc8>)
 800e84c:	781b      	ldrb	r3, [r3, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d00a      	beq.n	800e868 <ISOTP_RxMsgCbk_SF+0x70>
 800e852:	4b1c      	ldr	r3, [pc, #112]	; (800e8c4 <ISOTP_RxMsgCbk_SF+0xcc>)
 800e854:	2200      	movs	r2, #0
 800e856:	601a      	str	r2, [r3, #0]
 800e858:	4b1b      	ldr	r3, [pc, #108]	; (800e8c8 <ISOTP_RxMsgCbk_SF+0xd0>)
 800e85a:	2200      	movs	r2, #0
 800e85c:	601a      	str	r2, [r3, #0]
 800e85e:	4b1b      	ldr	r3, [pc, #108]	; (800e8cc <ISOTP_RxMsgCbk_SF+0xd4>)
 800e860:	2200      	movs	r2, #0
 800e862:	601a      	str	r2, [r3, #0]
 800e864:	f7ff ff16 	bl	800e694 <ISOTP_Rst>
 800e868:	4b15      	ldr	r3, [pc, #84]	; (800e8c0 <ISOTP_RxMsgCbk_SF+0xc8>)
 800e86a:	2201      	movs	r2, #1
 800e86c:	701a      	strb	r2, [r3, #0]
 800e86e:	4a18      	ldr	r2, [pc, #96]	; (800e8d0 <ISOTP_RxMsgCbk_SF+0xd8>)
 800e870:	89bb      	ldrh	r3, [r7, #12]
 800e872:	8053      	strh	r3, [r2, #2]
 800e874:	2300      	movs	r3, #0
 800e876:	81fb      	strh	r3, [r7, #14]
 800e878:	e00c      	b.n	800e894 <ISOTP_RxMsgCbk_SF+0x9c>
 800e87a:	89fb      	ldrh	r3, [r7, #14]
 800e87c:	3301      	adds	r3, #1
 800e87e:	683a      	ldr	r2, [r7, #0]
 800e880:	441a      	add	r2, r3
 800e882:	89fb      	ldrh	r3, [r7, #14]
 800e884:	7811      	ldrb	r1, [r2, #0]
 800e886:	4a12      	ldr	r2, [pc, #72]	; (800e8d0 <ISOTP_RxMsgCbk_SF+0xd8>)
 800e888:	4413      	add	r3, r2
 800e88a:	460a      	mov	r2, r1
 800e88c:	711a      	strb	r2, [r3, #4]
 800e88e:	89fb      	ldrh	r3, [r7, #14]
 800e890:	3301      	adds	r3, #1
 800e892:	81fb      	strh	r3, [r7, #14]
 800e894:	89fa      	ldrh	r2, [r7, #14]
 800e896:	89bb      	ldrh	r3, [r7, #12]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d3ee      	bcc.n	800e87a <ISOTP_RxMsgCbk_SF+0x82>
 800e89c:	4b0c      	ldr	r3, [pc, #48]	; (800e8d0 <ISOTP_RxMsgCbk_SF+0xd8>)
 800e89e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	79bb      	ldrb	r3, [r7, #6]
 800e8a6:	70d3      	strb	r3, [r2, #3]
 800e8a8:	4809      	ldr	r0, [pc, #36]	; (800e8d0 <ISOTP_RxMsgCbk_SF+0xd8>)
 800e8aa:	f7f2 fa55 	bl	8000d58 <ISOTP_HAL_MsgIndi>
 800e8ae:	f7ff fef1 	bl	800e694 <ISOTP_Rst>
 800e8b2:	bf00      	nop
 800e8b4:	3710      	adds	r7, #16
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	24001820 	.word	0x24001820
 800e8c0:	24001834 	.word	0x24001834
 800e8c4:	24001808 	.word	0x24001808
 800e8c8:	2400180c 	.word	0x2400180c
 800e8cc:	24001810 	.word	0x24001810
 800e8d0:	24001838 	.word	0x24001838

0800e8d4 <ISOTP_RxMsgCbk_FF>:
 800e8d4:	b590      	push	{r4, r7, lr}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	4603      	mov	r3, r0
 800e8dc:	6039      	str	r1, [r7, #0]
 800e8de:	71fb      	strb	r3, [r7, #7]
 800e8e0:	4613      	mov	r3, r2
 800e8e2:	71bb      	strb	r3, [r7, #6]
 800e8e4:	4b48      	ldr	r3, [pc, #288]	; (800ea08 <ISOTP_RxMsgCbk_FF+0x134>)
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	2b03      	cmp	r3, #3
 800e8ea:	f000 8088 	beq.w	800e9fe <ISOTP_RxMsgCbk_FF+0x12a>
 800e8ee:	4b46      	ldr	r3, [pc, #280]	; (800ea08 <ISOTP_RxMsgCbk_FF+0x134>)
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	2b02      	cmp	r3, #2
 800e8f4:	f000 8083 	beq.w	800e9fe <ISOTP_RxMsgCbk_FF+0x12a>
 800e8f8:	f7f2 fa25 	bl	8000d46 <ISOTP_STPadding>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d002      	beq.n	800e908 <ISOTP_RxMsgCbk_FF+0x34>
 800e902:	79fb      	ldrb	r3, [r7, #7]
 800e904:	2b08      	cmp	r3, #8
 800e906:	d002      	beq.n	800e90e <ISOTP_RxMsgCbk_FF+0x3a>
 800e908:	79fb      	ldrb	r3, [r7, #7]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d077      	beq.n	800e9fe <ISOTP_RxMsgCbk_FF+0x12a>
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	b29b      	uxth	r3, r3
 800e914:	021b      	lsls	r3, r3, #8
 800e916:	b29b      	uxth	r3, r3
 800e918:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e91c:	b29a      	uxth	r2, r3
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	3301      	adds	r3, #1
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	b29b      	uxth	r3, r3
 800e926:	4413      	add	r3, r2
 800e928:	81bb      	strh	r3, [r7, #12]
 800e92a:	89bc      	ldrh	r4, [r7, #12]
 800e92c:	f7f2 fa02 	bl	8000d34 <ISOTP_GetBUFFSIZE>
 800e930:	4603      	mov	r3, r0
 800e932:	429c      	cmp	r4, r3
 800e934:	d861      	bhi.n	800e9fa <ISOTP_RxMsgCbk_FF+0x126>
 800e936:	89bb      	ldrh	r3, [r7, #12]
 800e938:	2b07      	cmp	r3, #7
 800e93a:	d95b      	bls.n	800e9f4 <ISOTP_RxMsgCbk_FF+0x120>
 800e93c:	4b33      	ldr	r3, [pc, #204]	; (800ea0c <ISOTP_RxMsgCbk_FF+0x138>)
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d00a      	beq.n	800e95a <ISOTP_RxMsgCbk_FF+0x86>
 800e944:	4b32      	ldr	r3, [pc, #200]	; (800ea10 <ISOTP_RxMsgCbk_FF+0x13c>)
 800e946:	2200      	movs	r2, #0
 800e948:	601a      	str	r2, [r3, #0]
 800e94a:	4b32      	ldr	r3, [pc, #200]	; (800ea14 <ISOTP_RxMsgCbk_FF+0x140>)
 800e94c:	2200      	movs	r2, #0
 800e94e:	601a      	str	r2, [r3, #0]
 800e950:	4b31      	ldr	r3, [pc, #196]	; (800ea18 <ISOTP_RxMsgCbk_FF+0x144>)
 800e952:	2200      	movs	r2, #0
 800e954:	601a      	str	r2, [r3, #0]
 800e956:	f7ff fe9d 	bl	800e694 <ISOTP_Rst>
 800e95a:	4a30      	ldr	r2, [pc, #192]	; (800ea1c <ISOTP_RxMsgCbk_FF+0x148>)
 800e95c:	89bb      	ldrh	r3, [r7, #12]
 800e95e:	8053      	strh	r3, [r2, #2]
 800e960:	4a2f      	ldr	r2, [pc, #188]	; (800ea20 <ISOTP_RxMsgCbk_FF+0x14c>)
 800e962:	89bb      	ldrh	r3, [r7, #12]
 800e964:	8013      	strh	r3, [r2, #0]
 800e966:	4b2d      	ldr	r3, [pc, #180]	; (800ea1c <ISOTP_RxMsgCbk_FF+0x148>)
 800e968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e96c:	461a      	mov	r2, r3
 800e96e:	79bb      	ldrb	r3, [r7, #6]
 800e970:	70d3      	strb	r3, [r2, #3]
 800e972:	482a      	ldr	r0, [pc, #168]	; (800ea1c <ISOTP_RxMsgCbk_FF+0x148>)
 800e974:	f7f2 fa24 	bl	8000dc0 <ISOTP_HAL_FFIndi>
 800e978:	4b23      	ldr	r3, [pc, #140]	; (800ea08 <ISOTP_RxMsgCbk_FF+0x134>)
 800e97a:	2201      	movs	r2, #1
 800e97c:	701a      	strb	r2, [r3, #0]
 800e97e:	2300      	movs	r3, #0
 800e980:	81fb      	strh	r3, [r7, #14]
 800e982:	e00c      	b.n	800e99e <ISOTP_RxMsgCbk_FF+0xca>
 800e984:	89fb      	ldrh	r3, [r7, #14]
 800e986:	3302      	adds	r3, #2
 800e988:	683a      	ldr	r2, [r7, #0]
 800e98a:	441a      	add	r2, r3
 800e98c:	89fb      	ldrh	r3, [r7, #14]
 800e98e:	7811      	ldrb	r1, [r2, #0]
 800e990:	4a22      	ldr	r2, [pc, #136]	; (800ea1c <ISOTP_RxMsgCbk_FF+0x148>)
 800e992:	4413      	add	r3, r2
 800e994:	460a      	mov	r2, r1
 800e996:	711a      	strb	r2, [r3, #4]
 800e998:	89fb      	ldrh	r3, [r7, #14]
 800e99a:	3301      	adds	r3, #1
 800e99c:	81fb      	strh	r3, [r7, #14]
 800e99e:	89fb      	ldrh	r3, [r7, #14]
 800e9a0:	2b05      	cmp	r3, #5
 800e9a2:	d9ef      	bls.n	800e984 <ISOTP_RxMsgCbk_FF+0xb0>
 800e9a4:	4a1f      	ldr	r2, [pc, #124]	; (800ea24 <ISOTP_RxMsgCbk_FF+0x150>)
 800e9a6:	89fb      	ldrh	r3, [r7, #14]
 800e9a8:	8013      	strh	r3, [r2, #0]
 800e9aa:	4b1c      	ldr	r3, [pc, #112]	; (800ea1c <ISOTP_RxMsgCbk_FF+0x148>)
 800e9ac:	885b      	ldrh	r3, [r3, #2]
 800e9ae:	3b06      	subs	r3, #6
 800e9b0:	b29a      	uxth	r2, r3
 800e9b2:	4b1a      	ldr	r3, [pc, #104]	; (800ea1c <ISOTP_RxMsgCbk_FF+0x148>)
 800e9b4:	805a      	strh	r2, [r3, #2]
 800e9b6:	4b19      	ldr	r3, [pc, #100]	; (800ea1c <ISOTP_RxMsgCbk_FF+0x148>)
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	705a      	strb	r2, [r3, #1]
 800e9bc:	4b17      	ldr	r3, [pc, #92]	; (800ea1c <ISOTP_RxMsgCbk_FF+0x148>)
 800e9be:	2230      	movs	r2, #48	; 0x30
 800e9c0:	701a      	strb	r2, [r3, #0]
 800e9c2:	4b19      	ldr	r3, [pc, #100]	; (800ea28 <ISOTP_RxMsgCbk_FF+0x154>)
 800e9c4:	68db      	ldr	r3, [r3, #12]
 800e9c6:	4a19      	ldr	r2, [pc, #100]	; (800ea2c <ISOTP_RxMsgCbk_FF+0x158>)
 800e9c8:	6013      	str	r3, [r2, #0]
 800e9ca:	4b17      	ldr	r3, [pc, #92]	; (800ea28 <ISOTP_RxMsgCbk_FF+0x154>)
 800e9cc:	691b      	ldr	r3, [r3, #16]
 800e9ce:	4a18      	ldr	r2, [pc, #96]	; (800ea30 <ISOTP_RxMsgCbk_FF+0x15c>)
 800e9d0:	6013      	str	r3, [r2, #0]
 800e9d2:	4b15      	ldr	r3, [pc, #84]	; (800ea28 <ISOTP_RxMsgCbk_FF+0x154>)
 800e9d4:	695b      	ldr	r3, [r3, #20]
 800e9d6:	4a17      	ldr	r2, [pc, #92]	; (800ea34 <ISOTP_RxMsgCbk_FF+0x160>)
 800e9d8:	6013      	str	r3, [r2, #0]
 800e9da:	4b0e      	ldr	r3, [pc, #56]	; (800ea14 <ISOTP_RxMsgCbk_FF+0x140>)
 800e9dc:	2201      	movs	r2, #1
 800e9de:	601a      	str	r2, [r3, #0]
 800e9e0:	4b0a      	ldr	r3, [pc, #40]	; (800ea0c <ISOTP_RxMsgCbk_FF+0x138>)
 800e9e2:	2205      	movs	r2, #5
 800e9e4:	701a      	strb	r2, [r3, #0]
 800e9e6:	2303      	movs	r3, #3
 800e9e8:	4a13      	ldr	r2, [pc, #76]	; (800ea38 <ISOTP_RxMsgCbk_FF+0x164>)
 800e9ea:	4611      	mov	r1, r2
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7ff fc8d 	bl	800e30c <ISOTP_TxRequest>
 800e9f2:	e004      	b.n	800e9fe <ISOTP_RxMsgCbk_FF+0x12a>
 800e9f4:	f7ff fe4e 	bl	800e694 <ISOTP_Rst>
 800e9f8:	e001      	b.n	800e9fe <ISOTP_RxMsgCbk_FF+0x12a>
 800e9fa:	f7ff fe4b 	bl	800e694 <ISOTP_Rst>
 800e9fe:	bf00      	nop
 800ea00:	3714      	adds	r7, #20
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd90      	pop	{r4, r7, pc}
 800ea06:	bf00      	nop
 800ea08:	24001820 	.word	0x24001820
 800ea0c:	24001834 	.word	0x24001834
 800ea10:	24001808 	.word	0x24001808
 800ea14:	2400180c 	.word	0x2400180c
 800ea18:	24001810 	.word	0x24001810
 800ea1c:	24001838 	.word	0x24001838
 800ea20:	24001836 	.word	0x24001836
 800ea24:	24001802 	.word	0x24001802
 800ea28:	0801069c 	.word	0x0801069c
 800ea2c:	24001814 	.word	0x24001814
 800ea30:	24001818 	.word	0x24001818
 800ea34:	2400181c 	.word	0x2400181c
 800ea38:	24000294 	.word	0x24000294

0800ea3c <ISOTP_RxMsgCbk_CF>:
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	4603      	mov	r3, r0
 800ea44:	6039      	str	r1, [r7, #0]
 800ea46:	71fb      	strb	r3, [r7, #7]
 800ea48:	4613      	mov	r3, r2
 800ea4a:	71bb      	strb	r3, [r7, #6]
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	737b      	strb	r3, [r7, #13]
 800ea50:	4b5d      	ldr	r3, [pc, #372]	; (800ebc8 <ISOTP_RxMsgCbk_CF+0x18c>)
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	f040 80b2 	bne.w	800ebbe <ISOTP_RxMsgCbk_CF+0x182>
 800ea5a:	4b5c      	ldr	r3, [pc, #368]	; (800ebcc <ISOTP_RxMsgCbk_CF+0x190>)
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	2b06      	cmp	r3, #6
 800ea60:	f040 80ad 	bne.w	800ebbe <ISOTP_RxMsgCbk_CF+0x182>
 800ea64:	f7f2 f96f 	bl	8000d46 <ISOTP_STPadding>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d014      	beq.n	800ea98 <ISOTP_RxMsgCbk_CF+0x5c>
 800ea6e:	2300      	movs	r3, #0
 800ea70:	737b      	strb	r3, [r7, #13]
 800ea72:	4b57      	ldr	r3, [pc, #348]	; (800ebd0 <ISOTP_RxMsgCbk_CF+0x194>)
 800ea74:	885b      	ldrh	r3, [r3, #2]
 800ea76:	2b07      	cmp	r3, #7
 800ea78:	d809      	bhi.n	800ea8e <ISOTP_RxMsgCbk_CF+0x52>
 800ea7a:	79fa      	ldrb	r2, [r7, #7]
 800ea7c:	4b54      	ldr	r3, [pc, #336]	; (800ebd0 <ISOTP_RxMsgCbk_CF+0x194>)
 800ea7e:	885b      	ldrh	r3, [r3, #2]
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	3301      	adds	r3, #1
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d307      	bcc.n	800ea98 <ISOTP_RxMsgCbk_CF+0x5c>
 800ea88:	2301      	movs	r3, #1
 800ea8a:	737b      	strb	r3, [r7, #13]
 800ea8c:	e004      	b.n	800ea98 <ISOTP_RxMsgCbk_CF+0x5c>
 800ea8e:	79fb      	ldrb	r3, [r7, #7]
 800ea90:	2b08      	cmp	r3, #8
 800ea92:	d101      	bne.n	800ea98 <ISOTP_RxMsgCbk_CF+0x5c>
 800ea94:	2301      	movs	r3, #1
 800ea96:	737b      	strb	r3, [r7, #13]
 800ea98:	7b7b      	ldrb	r3, [r7, #13]
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d003      	beq.n	800eaa6 <ISOTP_RxMsgCbk_CF+0x6a>
 800ea9e:	79fb      	ldrb	r3, [r7, #7]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	f000 808c 	beq.w	800ebbe <ISOTP_RxMsgCbk_CF+0x182>
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	f003 030f 	and.w	r3, r3, #15
 800eaae:	733b      	strb	r3, [r7, #12]
 800eab0:	4b48      	ldr	r3, [pc, #288]	; (800ebd4 <ISOTP_RxMsgCbk_CF+0x198>)
 800eab2:	2200      	movs	r2, #0
 800eab4:	601a      	str	r2, [r3, #0]
 800eab6:	7b3a      	ldrb	r2, [r7, #12]
 800eab8:	4b45      	ldr	r3, [pc, #276]	; (800ebd0 <ISOTP_RxMsgCbk_CF+0x194>)
 800eaba:	785b      	ldrb	r3, [r3, #1]
 800eabc:	3301      	adds	r3, #1
 800eabe:	f003 030f 	and.w	r3, r3, #15
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d176      	bne.n	800ebb4 <ISOTP_RxMsgCbk_CF+0x178>
 800eac6:	4a42      	ldr	r2, [pc, #264]	; (800ebd0 <ISOTP_RxMsgCbk_CF+0x194>)
 800eac8:	7b3b      	ldrb	r3, [r7, #12]
 800eaca:	7053      	strb	r3, [r2, #1]
 800eacc:	4b3f      	ldr	r3, [pc, #252]	; (800ebcc <ISOTP_RxMsgCbk_CF+0x190>)
 800eace:	2207      	movs	r2, #7
 800ead0:	701a      	strb	r2, [r3, #0]
 800ead2:	4b3f      	ldr	r3, [pc, #252]	; (800ebd0 <ISOTP_RxMsgCbk_CF+0x194>)
 800ead4:	885b      	ldrh	r3, [r3, #2]
 800ead6:	2b06      	cmp	r3, #6
 800ead8:	d924      	bls.n	800eb24 <ISOTP_RxMsgCbk_CF+0xe8>
 800eada:	4b3d      	ldr	r3, [pc, #244]	; (800ebd0 <ISOTP_RxMsgCbk_CF+0x194>)
 800eadc:	885b      	ldrh	r3, [r3, #2]
 800eade:	3b07      	subs	r3, #7
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	4b3b      	ldr	r3, [pc, #236]	; (800ebd0 <ISOTP_RxMsgCbk_CF+0x194>)
 800eae4:	805a      	strh	r2, [r3, #2]
 800eae6:	2300      	movs	r3, #0
 800eae8:	81fb      	strh	r3, [r7, #14]
 800eaea:	e010      	b.n	800eb0e <ISOTP_RxMsgCbk_CF+0xd2>
 800eaec:	89fb      	ldrh	r3, [r7, #14]
 800eaee:	3301      	adds	r3, #1
 800eaf0:	683a      	ldr	r2, [r7, #0]
 800eaf2:	441a      	add	r2, r3
 800eaf4:	4b38      	ldr	r3, [pc, #224]	; (800ebd8 <ISOTP_RxMsgCbk_CF+0x19c>)
 800eaf6:	881b      	ldrh	r3, [r3, #0]
 800eaf8:	4619      	mov	r1, r3
 800eafa:	89fb      	ldrh	r3, [r7, #14]
 800eafc:	440b      	add	r3, r1
 800eafe:	7811      	ldrb	r1, [r2, #0]
 800eb00:	4a33      	ldr	r2, [pc, #204]	; (800ebd0 <ISOTP_RxMsgCbk_CF+0x194>)
 800eb02:	4413      	add	r3, r2
 800eb04:	460a      	mov	r2, r1
 800eb06:	711a      	strb	r2, [r3, #4]
 800eb08:	89fb      	ldrh	r3, [r7, #14]
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	81fb      	strh	r3, [r7, #14]
 800eb0e:	89fb      	ldrh	r3, [r7, #14]
 800eb10:	2b06      	cmp	r3, #6
 800eb12:	d9eb      	bls.n	800eaec <ISOTP_RxMsgCbk_CF+0xb0>
 800eb14:	4b30      	ldr	r3, [pc, #192]	; (800ebd8 <ISOTP_RxMsgCbk_CF+0x19c>)
 800eb16:	881a      	ldrh	r2, [r3, #0]
 800eb18:	89fb      	ldrh	r3, [r7, #14]
 800eb1a:	4413      	add	r3, r2
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	4b2e      	ldr	r3, [pc, #184]	; (800ebd8 <ISOTP_RxMsgCbk_CF+0x19c>)
 800eb20:	801a      	strh	r2, [r3, #0]
 800eb22:	e01b      	b.n	800eb5c <ISOTP_RxMsgCbk_CF+0x120>
 800eb24:	2300      	movs	r3, #0
 800eb26:	81fb      	strh	r3, [r7, #14]
 800eb28:	e010      	b.n	800eb4c <ISOTP_RxMsgCbk_CF+0x110>
 800eb2a:	89fb      	ldrh	r3, [r7, #14]
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	683a      	ldr	r2, [r7, #0]
 800eb30:	441a      	add	r2, r3
 800eb32:	4b29      	ldr	r3, [pc, #164]	; (800ebd8 <ISOTP_RxMsgCbk_CF+0x19c>)
 800eb34:	881b      	ldrh	r3, [r3, #0]
 800eb36:	4619      	mov	r1, r3
 800eb38:	89fb      	ldrh	r3, [r7, #14]
 800eb3a:	440b      	add	r3, r1
 800eb3c:	7811      	ldrb	r1, [r2, #0]
 800eb3e:	4a24      	ldr	r2, [pc, #144]	; (800ebd0 <ISOTP_RxMsgCbk_CF+0x194>)
 800eb40:	4413      	add	r3, r2
 800eb42:	460a      	mov	r2, r1
 800eb44:	711a      	strb	r2, [r3, #4]
 800eb46:	89fb      	ldrh	r3, [r7, #14]
 800eb48:	3301      	adds	r3, #1
 800eb4a:	81fb      	strh	r3, [r7, #14]
 800eb4c:	4b20      	ldr	r3, [pc, #128]	; (800ebd0 <ISOTP_RxMsgCbk_CF+0x194>)
 800eb4e:	885b      	ldrh	r3, [r3, #2]
 800eb50:	89fa      	ldrh	r2, [r7, #14]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d3e9      	bcc.n	800eb2a <ISOTP_RxMsgCbk_CF+0xee>
 800eb56:	4b1e      	ldr	r3, [pc, #120]	; (800ebd0 <ISOTP_RxMsgCbk_CF+0x194>)
 800eb58:	2200      	movs	r2, #0
 800eb5a:	805a      	strh	r2, [r3, #2]
 800eb5c:	4b1f      	ldr	r3, [pc, #124]	; (800ebdc <ISOTP_RxMsgCbk_CF+0x1a0>)
 800eb5e:	881b      	ldrh	r3, [r3, #0]
 800eb60:	3b07      	subs	r3, #7
 800eb62:	b29a      	uxth	r2, r3
 800eb64:	4b1d      	ldr	r3, [pc, #116]	; (800ebdc <ISOTP_RxMsgCbk_CF+0x1a0>)
 800eb66:	801a      	strh	r2, [r3, #0]
 800eb68:	4b19      	ldr	r3, [pc, #100]	; (800ebd0 <ISOTP_RxMsgCbk_CF+0x194>)
 800eb6a:	885b      	ldrh	r3, [r3, #2]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d10f      	bne.n	800eb90 <ISOTP_RxMsgCbk_CF+0x154>
 800eb70:	4b1b      	ldr	r3, [pc, #108]	; (800ebe0 <ISOTP_RxMsgCbk_CF+0x1a4>)
 800eb72:	881a      	ldrh	r2, [r3, #0]
 800eb74:	4b16      	ldr	r3, [pc, #88]	; (800ebd0 <ISOTP_RxMsgCbk_CF+0x194>)
 800eb76:	805a      	strh	r2, [r3, #2]
 800eb78:	4b15      	ldr	r3, [pc, #84]	; (800ebd0 <ISOTP_RxMsgCbk_CF+0x194>)
 800eb7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb7e:	461a      	mov	r2, r3
 800eb80:	79bb      	ldrb	r3, [r7, #6]
 800eb82:	70d3      	strb	r3, [r2, #3]
 800eb84:	4812      	ldr	r0, [pc, #72]	; (800ebd0 <ISOTP_RxMsgCbk_CF+0x194>)
 800eb86:	f7f2 f8e7 	bl	8000d58 <ISOTP_HAL_MsgIndi>
 800eb8a:	f7ff fd83 	bl	800e694 <ISOTP_Rst>
 800eb8e:	e016      	b.n	800ebbe <ISOTP_RxMsgCbk_CF+0x182>
 800eb90:	4b12      	ldr	r3, [pc, #72]	; (800ebdc <ISOTP_RxMsgCbk_CF+0x1a0>)
 800eb92:	881b      	ldrh	r3, [r3, #0]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d006      	beq.n	800eba6 <ISOTP_RxMsgCbk_CF+0x16a>
 800eb98:	4b0e      	ldr	r3, [pc, #56]	; (800ebd4 <ISOTP_RxMsgCbk_CF+0x198>)
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	601a      	str	r2, [r3, #0]
 800eb9e:	4b0b      	ldr	r3, [pc, #44]	; (800ebcc <ISOTP_RxMsgCbk_CF+0x190>)
 800eba0:	2206      	movs	r2, #6
 800eba2:	701a      	strb	r2, [r3, #0]
 800eba4:	e00b      	b.n	800ebbe <ISOTP_RxMsgCbk_CF+0x182>
 800eba6:	4b0f      	ldr	r3, [pc, #60]	; (800ebe4 <ISOTP_RxMsgCbk_CF+0x1a8>)
 800eba8:	2201      	movs	r2, #1
 800ebaa:	601a      	str	r2, [r3, #0]
 800ebac:	4b07      	ldr	r3, [pc, #28]	; (800ebcc <ISOTP_RxMsgCbk_CF+0x190>)
 800ebae:	2205      	movs	r2, #5
 800ebb0:	701a      	strb	r2, [r3, #0]
 800ebb2:	e004      	b.n	800ebbe <ISOTP_RxMsgCbk_CF+0x182>
 800ebb4:	f7ff fd6e 	bl	800e694 <ISOTP_Rst>
 800ebb8:	4b03      	ldr	r3, [pc, #12]	; (800ebc8 <ISOTP_RxMsgCbk_CF+0x18c>)
 800ebba:	2200      	movs	r2, #0
 800ebbc:	701a      	strb	r2, [r3, #0]
 800ebbe:	bf00      	nop
 800ebc0:	3710      	adds	r7, #16
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	24001820 	.word	0x24001820
 800ebcc:	24001834 	.word	0x24001834
 800ebd0:	24001838 	.word	0x24001838
 800ebd4:	24001810 	.word	0x24001810
 800ebd8:	24001802 	.word	0x24001802
 800ebdc:	24001804 	.word	0x24001804
 800ebe0:	24001836 	.word	0x24001836
 800ebe4:	2400180c 	.word	0x2400180c

0800ebe8 <ISOTP_RxMsgCbk_FC>:
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	4603      	mov	r3, r0
 800ebf0:	6039      	str	r1, [r7, #0]
 800ebf2:	71fb      	strb	r3, [r7, #7]
 800ebf4:	4613      	mov	r3, r2
 800ebf6:	71bb      	strb	r3, [r7, #6]
 800ebf8:	4b6e      	ldr	r3, [pc, #440]	; (800edb4 <ISOTP_RxMsgCbk_FC+0x1cc>)
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	2b03      	cmp	r3, #3
 800ebfe:	f040 80d4 	bne.w	800edaa <ISOTP_RxMsgCbk_FC+0x1c2>
 800ec02:	4b6d      	ldr	r3, [pc, #436]	; (800edb8 <ISOTP_RxMsgCbk_FC+0x1d0>)
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	2b09      	cmp	r3, #9
 800ec08:	f040 80cf 	bne.w	800edaa <ISOTP_RxMsgCbk_FC+0x1c2>
 800ec0c:	f7f2 f89b 	bl	8000d46 <ISOTP_STPadding>
 800ec10:	4603      	mov	r3, r0
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d002      	beq.n	800ec1c <ISOTP_RxMsgCbk_FC+0x34>
 800ec16:	79fb      	ldrb	r3, [r7, #7]
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	d803      	bhi.n	800ec24 <ISOTP_RxMsgCbk_FC+0x3c>
 800ec1c:	79fb      	ldrb	r3, [r7, #7]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f000 80c3 	beq.w	800edaa <ISOTP_RxMsgCbk_FC+0x1c2>
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	f003 030f 	and.w	r3, r3, #15
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	f040 80aa 	bne.w	800ed86 <ISOTP_RxMsgCbk_FC+0x19e>
 800ec32:	4b62      	ldr	r3, [pc, #392]	; (800edbc <ISOTP_RxMsgCbk_FC+0x1d4>)
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d12a      	bne.n	800ec90 <ISOTP_RxMsgCbk_FC+0xa8>
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	781a      	ldrb	r2, [r3, #0]
 800ec40:	4b5f      	ldr	r3, [pc, #380]	; (800edc0 <ISOTP_RxMsgCbk_FC+0x1d8>)
 800ec42:	701a      	strb	r2, [r3, #0]
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	3302      	adds	r3, #2
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	2bf0      	cmp	r3, #240	; 0xf0
 800ec4c:	d90d      	bls.n	800ec6a <ISOTP_RxMsgCbk_FC+0x82>
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	3302      	adds	r3, #2
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	2bf9      	cmp	r3, #249	; 0xf9
 800ec56:	d808      	bhi.n	800ec6a <ISOTP_RxMsgCbk_FC+0x82>
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	3302      	adds	r3, #2
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	3bf0      	subs	r3, #240	; 0xf0
 800ec62:	b29a      	uxth	r2, r3
 800ec64:	4b57      	ldr	r3, [pc, #348]	; (800edc4 <ISOTP_RxMsgCbk_FC+0x1dc>)
 800ec66:	801a      	strh	r2, [r3, #0]
 800ec68:	e00f      	b.n	800ec8a <ISOTP_RxMsgCbk_FC+0xa2>
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	3302      	adds	r3, #2
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	b25b      	sxtb	r3, r3
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	da03      	bge.n	800ec7e <ISOTP_RxMsgCbk_FC+0x96>
 800ec76:	4b53      	ldr	r3, [pc, #332]	; (800edc4 <ISOTP_RxMsgCbk_FC+0x1dc>)
 800ec78:	227f      	movs	r2, #127	; 0x7f
 800ec7a:	801a      	strh	r2, [r3, #0]
 800ec7c:	e005      	b.n	800ec8a <ISOTP_RxMsgCbk_FC+0xa2>
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	3302      	adds	r3, #2
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	b29a      	uxth	r2, r3
 800ec86:	4b4f      	ldr	r3, [pc, #316]	; (800edc4 <ISOTP_RxMsgCbk_FC+0x1dc>)
 800ec88:	801a      	strh	r2, [r3, #0]
 800ec8a:	4b4c      	ldr	r3, [pc, #304]	; (800edbc <ISOTP_RxMsgCbk_FC+0x1d4>)
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	701a      	strb	r2, [r3, #0]
 800ec90:	4b4b      	ldr	r3, [pc, #300]	; (800edc0 <ISOTP_RxMsgCbk_FC+0x1d8>)
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d104      	bne.n	800eca2 <ISOTP_RxMsgCbk_FC+0xba>
 800ec98:	4b4b      	ldr	r3, [pc, #300]	; (800edc8 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800ec9a:	885a      	ldrh	r2, [r3, #2]
 800ec9c:	4b4b      	ldr	r3, [pc, #300]	; (800edcc <ISOTP_RxMsgCbk_FC+0x1e4>)
 800ec9e:	801a      	strh	r2, [r3, #0]
 800eca0:	e008      	b.n	800ecb4 <ISOTP_RxMsgCbk_FC+0xcc>
 800eca2:	4b47      	ldr	r3, [pc, #284]	; (800edc0 <ISOTP_RxMsgCbk_FC+0x1d8>)
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	461a      	mov	r2, r3
 800ecaa:	00d2      	lsls	r2, r2, #3
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	b29a      	uxth	r2, r3
 800ecb0:	4b46      	ldr	r3, [pc, #280]	; (800edcc <ISOTP_RxMsgCbk_FC+0x1e4>)
 800ecb2:	801a      	strh	r2, [r3, #0]
 800ecb4:	4b43      	ldr	r3, [pc, #268]	; (800edc4 <ISOTP_RxMsgCbk_FC+0x1dc>)
 800ecb6:	881b      	ldrh	r3, [r3, #0]
 800ecb8:	461a      	mov	r2, r3
 800ecba:	4b45      	ldr	r3, [pc, #276]	; (800edd0 <ISOTP_RxMsgCbk_FC+0x1e8>)
 800ecbc:	601a      	str	r2, [r3, #0]
 800ecbe:	4b45      	ldr	r3, [pc, #276]	; (800edd4 <ISOTP_RxMsgCbk_FC+0x1ec>)
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	601a      	str	r2, [r3, #0]
 800ecc4:	4b3c      	ldr	r3, [pc, #240]	; (800edb8 <ISOTP_RxMsgCbk_FC+0x1d0>)
 800ecc6:	220a      	movs	r2, #10
 800ecc8:	701a      	strb	r2, [r3, #0]
 800ecca:	4b3f      	ldr	r3, [pc, #252]	; (800edc8 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800eccc:	781a      	ldrb	r2, [r3, #0]
 800ecce:	4b42      	ldr	r3, [pc, #264]	; (800edd8 <ISOTP_RxMsgCbk_FC+0x1f0>)
 800ecd0:	715a      	strb	r2, [r3, #5]
 800ecd2:	4b3d      	ldr	r3, [pc, #244]	; (800edc8 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800ecd4:	885b      	ldrh	r3, [r3, #2]
 800ecd6:	2b06      	cmp	r3, #6
 800ecd8:	d82e      	bhi.n	800ed38 <ISOTP_RxMsgCbk_FC+0x150>
 800ecda:	2300      	movs	r3, #0
 800ecdc:	81fb      	strh	r3, [r7, #14]
 800ecde:	e010      	b.n	800ed02 <ISOTP_RxMsgCbk_FC+0x11a>
 800ece0:	4b3e      	ldr	r3, [pc, #248]	; (800eddc <ISOTP_RxMsgCbk_FC+0x1f4>)
 800ece2:	881b      	ldrh	r3, [r3, #0]
 800ece4:	461a      	mov	r2, r3
 800ece6:	89fb      	ldrh	r3, [r7, #14]
 800ece8:	4413      	add	r3, r2
 800ecea:	89fa      	ldrh	r2, [r7, #14]
 800ecec:	3201      	adds	r2, #1
 800ecee:	4611      	mov	r1, r2
 800ecf0:	4a35      	ldr	r2, [pc, #212]	; (800edc8 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800ecf2:	4413      	add	r3, r2
 800ecf4:	791a      	ldrb	r2, [r3, #4]
 800ecf6:	4b38      	ldr	r3, [pc, #224]	; (800edd8 <ISOTP_RxMsgCbk_FC+0x1f0>)
 800ecf8:	440b      	add	r3, r1
 800ecfa:	715a      	strb	r2, [r3, #5]
 800ecfc:	89fb      	ldrh	r3, [r7, #14]
 800ecfe:	3301      	adds	r3, #1
 800ed00:	81fb      	strh	r3, [r7, #14]
 800ed02:	4b31      	ldr	r3, [pc, #196]	; (800edc8 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800ed04:	885b      	ldrh	r3, [r3, #2]
 800ed06:	89fa      	ldrh	r2, [r7, #14]
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d3e9      	bcc.n	800ece0 <ISOTP_RxMsgCbk_FC+0xf8>
 800ed0c:	f7f2 f81b 	bl	8000d46 <ISOTP_STPadding>
 800ed10:	4603      	mov	r3, r0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d108      	bne.n	800ed28 <ISOTP_RxMsgCbk_FC+0x140>
 800ed16:	4b2c      	ldr	r3, [pc, #176]	; (800edc8 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800ed18:	885b      	ldrh	r3, [r3, #2]
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7ff fd4e 	bl	800e7bc <ISOTP_PrfrmPad>
 800ed20:	4b2d      	ldr	r3, [pc, #180]	; (800edd8 <ISOTP_RxMsgCbk_FC+0x1f0>)
 800ed22:	2208      	movs	r2, #8
 800ed24:	711a      	strb	r2, [r3, #4]
 800ed26:	e021      	b.n	800ed6c <ISOTP_RxMsgCbk_FC+0x184>
 800ed28:	4b27      	ldr	r3, [pc, #156]	; (800edc8 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800ed2a:	885b      	ldrh	r3, [r3, #2]
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	3301      	adds	r3, #1
 800ed30:	b2da      	uxtb	r2, r3
 800ed32:	4b29      	ldr	r3, [pc, #164]	; (800edd8 <ISOTP_RxMsgCbk_FC+0x1f0>)
 800ed34:	711a      	strb	r2, [r3, #4]
 800ed36:	e019      	b.n	800ed6c <ISOTP_RxMsgCbk_FC+0x184>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	81fb      	strh	r3, [r7, #14]
 800ed3c:	e010      	b.n	800ed60 <ISOTP_RxMsgCbk_FC+0x178>
 800ed3e:	4b27      	ldr	r3, [pc, #156]	; (800eddc <ISOTP_RxMsgCbk_FC+0x1f4>)
 800ed40:	881b      	ldrh	r3, [r3, #0]
 800ed42:	461a      	mov	r2, r3
 800ed44:	89fb      	ldrh	r3, [r7, #14]
 800ed46:	4413      	add	r3, r2
 800ed48:	89fa      	ldrh	r2, [r7, #14]
 800ed4a:	3201      	adds	r2, #1
 800ed4c:	4611      	mov	r1, r2
 800ed4e:	4a1e      	ldr	r2, [pc, #120]	; (800edc8 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800ed50:	4413      	add	r3, r2
 800ed52:	791a      	ldrb	r2, [r3, #4]
 800ed54:	4b20      	ldr	r3, [pc, #128]	; (800edd8 <ISOTP_RxMsgCbk_FC+0x1f0>)
 800ed56:	440b      	add	r3, r1
 800ed58:	715a      	strb	r2, [r3, #5]
 800ed5a:	89fb      	ldrh	r3, [r7, #14]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	81fb      	strh	r3, [r7, #14]
 800ed60:	89fb      	ldrh	r3, [r7, #14]
 800ed62:	2b06      	cmp	r3, #6
 800ed64:	d9eb      	bls.n	800ed3e <ISOTP_RxMsgCbk_FC+0x156>
 800ed66:	4b1c      	ldr	r3, [pc, #112]	; (800edd8 <ISOTP_RxMsgCbk_FC+0x1f0>)
 800ed68:	2208      	movs	r2, #8
 800ed6a:	711a      	strb	r2, [r3, #4]
 800ed6c:	4b1c      	ldr	r3, [pc, #112]	; (800ede0 <ISOTP_RxMsgCbk_FC+0x1f8>)
 800ed6e:	2201      	movs	r2, #1
 800ed70:	601a      	str	r2, [r3, #0]
 800ed72:	4b1c      	ldr	r3, [pc, #112]	; (800ede4 <ISOTP_RxMsgCbk_FC+0x1fc>)
 800ed74:	6818      	ldr	r0, [r3, #0]
 800ed76:	4b1c      	ldr	r3, [pc, #112]	; (800ede8 <ISOTP_RxMsgCbk_FC+0x200>)
 800ed78:	7819      	ldrb	r1, [r3, #0]
 800ed7a:	4b17      	ldr	r3, [pc, #92]	; (800edd8 <ISOTP_RxMsgCbk_FC+0x1f0>)
 800ed7c:	791a      	ldrb	r2, [r3, #4]
 800ed7e:	4b1b      	ldr	r3, [pc, #108]	; (800edec <ISOTP_RxMsgCbk_FC+0x204>)
 800ed80:	f7f2 f836 	bl	8000df0 <ISOTP_HAL_CANMesgTxnReq_Stub>
 800ed84:	e011      	b.n	800edaa <ISOTP_RxMsgCbk_FC+0x1c2>
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	f003 030f 	and.w	r3, r3, #15
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d103      	bne.n	800ed9a <ISOTP_RxMsgCbk_FC+0x1b2>
 800ed92:	4b10      	ldr	r3, [pc, #64]	; (800edd4 <ISOTP_RxMsgCbk_FC+0x1ec>)
 800ed94:	2201      	movs	r2, #1
 800ed96:	601a      	str	r2, [r3, #0]
 800ed98:	e007      	b.n	800edaa <ISOTP_RxMsgCbk_FC+0x1c2>
 800ed9a:	4b0e      	ldr	r3, [pc, #56]	; (800edd4 <ISOTP_RxMsgCbk_FC+0x1ec>)
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	601a      	str	r2, [r3, #0]
 800eda0:	f7ff fc78 	bl	800e694 <ISOTP_Rst>
 800eda4:	4b03      	ldr	r3, [pc, #12]	; (800edb4 <ISOTP_RxMsgCbk_FC+0x1cc>)
 800eda6:	2200      	movs	r2, #0
 800eda8:	701a      	strb	r2, [r3, #0]
 800edaa:	bf00      	nop
 800edac:	3710      	adds	r7, #16
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	24001820 	.word	0x24001820
 800edb8:	24001834 	.word	0x24001834
 800edbc:	240017fd 	.word	0x240017fd
 800edc0:	240017fe 	.word	0x240017fe
 800edc4:	24001800 	.word	0x24001800
 800edc8:	24001838 	.word	0x24001838
 800edcc:	24001804 	.word	0x24001804
 800edd0:	2400181c 	.word	0x2400181c
 800edd4:	2400180c 	.word	0x2400180c
 800edd8:	24001824 	.word	0x24001824
 800eddc:	24001802 	.word	0x24001802
 800ede0:	24001808 	.word	0x24001808
 800ede4:	2400033c 	.word	0x2400033c
 800ede8:	24000340 	.word	0x24000340
 800edec:	24001829 	.word	0x24001829

0800edf0 <FCM_Init>:
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	4b0e      	ldr	r3, [pc, #56]	; (800ee30 <FCM_Init+0x40>)
 800edf8:	2200      	movs	r2, #0
 800edfa:	701a      	strb	r2, [r3, #0]
 800edfc:	2300      	movs	r3, #0
 800edfe:	71fb      	strb	r3, [r7, #7]
 800ee00:	e00a      	b.n	800ee18 <FCM_Init+0x28>
 800ee02:	79fb      	ldrb	r3, [r7, #7]
 800ee04:	4a0b      	ldr	r2, [pc, #44]	; (800ee34 <FCM_Init+0x44>)
 800ee06:	2101      	movs	r1, #1
 800ee08:	54d1      	strb	r1, [r2, r3]
 800ee0a:	79fb      	ldrb	r3, [r7, #7]
 800ee0c:	4a0a      	ldr	r2, [pc, #40]	; (800ee38 <FCM_Init+0x48>)
 800ee0e:	2101      	movs	r1, #1
 800ee10:	54d1      	strb	r1, [r2, r3]
 800ee12:	79fb      	ldrb	r3, [r7, #7]
 800ee14:	3301      	adds	r3, #1
 800ee16:	71fb      	strb	r3, [r7, #7]
 800ee18:	79fb      	ldrb	r3, [r7, #7]
 800ee1a:	2b02      	cmp	r3, #2
 800ee1c:	d9f1      	bls.n	800ee02 <FCM_Init+0x12>
 800ee1e:	4b07      	ldr	r3, [pc, #28]	; (800ee3c <FCM_Init+0x4c>)
 800ee20:	2201      	movs	r2, #1
 800ee22:	701a      	strb	r2, [r3, #0]
 800ee24:	f7f1 fd44 	bl	80008b0 <FCM_Init_DTC_Info>
 800ee28:	bf00      	nop
 800ee2a:	3708      	adds	r7, #8
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	2400030c 	.word	0x2400030c
 800ee34:	24000298 	.word	0x24000298
 800ee38:	2400029c 	.word	0x2400029c
 800ee3c:	2400029f 	.word	0x2400029f

0800ee40 <FCM_FindDTCIndex>:
 800ee40:	b480      	push	{r7}
 800ee42:	b085      	sub	sp, #20
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	2300      	movs	r3, #0
 800ee4a:	73fb      	strb	r3, [r7, #15]
 800ee4c:	e00d      	b.n	800ee6a <FCM_FindDTCIndex+0x2a>
 800ee4e:	7bfa      	ldrb	r2, [r7, #15]
 800ee50:	490c      	ldr	r1, [pc, #48]	; (800ee84 <FCM_FindDTCIndex+0x44>)
 800ee52:	4613      	mov	r3, r2
 800ee54:	005b      	lsls	r3, r3, #1
 800ee56:	4413      	add	r3, r2
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	440b      	add	r3, r1
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	687a      	ldr	r2, [r7, #4]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d006      	beq.n	800ee72 <FCM_FindDTCIndex+0x32>
 800ee64:	7bfb      	ldrb	r3, [r7, #15]
 800ee66:	3301      	adds	r3, #1
 800ee68:	73fb      	strb	r3, [r7, #15]
 800ee6a:	7bfb      	ldrb	r3, [r7, #15]
 800ee6c:	2b20      	cmp	r3, #32
 800ee6e:	d9ee      	bls.n	800ee4e <FCM_FindDTCIndex+0xe>
 800ee70:	e000      	b.n	800ee74 <FCM_FindDTCIndex+0x34>
 800ee72:	bf00      	nop
 800ee74:	7bfb      	ldrb	r3, [r7, #15]
 800ee76:	4618      	mov	r0, r3
 800ee78:	3714      	adds	r7, #20
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	0800ffe8 	.word	0x0800ffe8

0800ee88 <FCM_UpdateOperationCycle>:
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	4603      	mov	r3, r0
 800ee90:	460a      	mov	r2, r1
 800ee92:	71fb      	strb	r3, [r7, #7]
 800ee94:	4613      	mov	r3, r2
 800ee96:	71bb      	strb	r3, [r7, #6]
 800ee98:	f7f1 fc08 	bl	80006ac <HAL_FCM_InitStatus>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b01      	cmp	r3, #1
 800eea0:	f040 8122 	bne.w	800f0e8 <FCM_UpdateOperationCycle+0x260>
 800eea4:	79fb      	ldrb	r3, [r7, #7]
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d809      	bhi.n	800eebe <FCM_UpdateOperationCycle+0x36>
 800eeaa:	79bb      	ldrb	r3, [r7, #6]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d002      	beq.n	800eeb6 <FCM_UpdateOperationCycle+0x2e>
 800eeb0:	79bb      	ldrb	r3, [r7, #6]
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	d103      	bne.n	800eebe <FCM_UpdateOperationCycle+0x36>
 800eeb6:	79fb      	ldrb	r3, [r7, #7]
 800eeb8:	498d      	ldr	r1, [pc, #564]	; (800f0f0 <FCM_UpdateOperationCycle+0x268>)
 800eeba:	79ba      	ldrb	r2, [r7, #6]
 800eebc:	54ca      	strb	r2, [r1, r3]
 800eebe:	4b8d      	ldr	r3, [pc, #564]	; (800f0f4 <FCM_UpdateOperationCycle+0x26c>)
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	f040 8110 	bne.w	800f0e8 <FCM_UpdateOperationCycle+0x260>
 800eec8:	2300      	movs	r3, #0
 800eeca:	73fb      	strb	r3, [r7, #15]
 800eecc:	e108      	b.n	800f0e0 <FCM_UpdateOperationCycle+0x258>
 800eece:	7bfb      	ldrb	r3, [r7, #15]
 800eed0:	4a87      	ldr	r2, [pc, #540]	; (800f0f0 <FCM_UpdateOperationCycle+0x268>)
 800eed2:	5cd2      	ldrb	r2, [r2, r3]
 800eed4:	7bfb      	ldrb	r3, [r7, #15]
 800eed6:	4988      	ldr	r1, [pc, #544]	; (800f0f8 <FCM_UpdateOperationCycle+0x270>)
 800eed8:	5ccb      	ldrb	r3, [r1, r3]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	f000 80fd 	beq.w	800f0da <FCM_UpdateOperationCycle+0x252>
 800eee0:	7bfb      	ldrb	r3, [r7, #15]
 800eee2:	4a83      	ldr	r2, [pc, #524]	; (800f0f0 <FCM_UpdateOperationCycle+0x268>)
 800eee4:	5cd3      	ldrb	r3, [r2, r3]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d002      	beq.n	800eef0 <FCM_UpdateOperationCycle+0x68>
 800eeea:	2b01      	cmp	r3, #1
 800eeec:	d03d      	beq.n	800ef6a <FCM_UpdateOperationCycle+0xe2>
 800eeee:	e0ee      	b.n	800f0ce <FCM_UpdateOperationCycle+0x246>
 800eef0:	7bfb      	ldrb	r3, [r7, #15]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d104      	bne.n	800ef00 <FCM_UpdateOperationCycle+0x78>
 800eef6:	2300      	movs	r3, #0
 800eef8:	737b      	strb	r3, [r7, #13]
 800eefa:	2321      	movs	r3, #33	; 0x21
 800eefc:	733b      	strb	r3, [r7, #12]
 800eefe:	e00b      	b.n	800ef18 <FCM_UpdateOperationCycle+0x90>
 800ef00:	7bfb      	ldrb	r3, [r7, #15]
 800ef02:	2b01      	cmp	r3, #1
 800ef04:	d104      	bne.n	800ef10 <FCM_UpdateOperationCycle+0x88>
 800ef06:	2321      	movs	r3, #33	; 0x21
 800ef08:	737b      	strb	r3, [r7, #13]
 800ef0a:	2321      	movs	r3, #33	; 0x21
 800ef0c:	733b      	strb	r3, [r7, #12]
 800ef0e:	e003      	b.n	800ef18 <FCM_UpdateOperationCycle+0x90>
 800ef10:	2321      	movs	r3, #33	; 0x21
 800ef12:	737b      	strb	r3, [r7, #13]
 800ef14:	2321      	movs	r3, #33	; 0x21
 800ef16:	733b      	strb	r3, [r7, #12]
 800ef18:	7b7b      	ldrb	r3, [r7, #13]
 800ef1a:	73bb      	strb	r3, [r7, #14]
 800ef1c:	e020      	b.n	800ef60 <FCM_UpdateOperationCycle+0xd8>
 800ef1e:	7bba      	ldrb	r2, [r7, #14]
 800ef20:	4976      	ldr	r1, [pc, #472]	; (800f0fc <FCM_UpdateOperationCycle+0x274>)
 800ef22:	4613      	mov	r3, r2
 800ef24:	005b      	lsls	r3, r3, #1
 800ef26:	4413      	add	r3, r2
 800ef28:	18ca      	adds	r2, r1, r3
 800ef2a:	7853      	ldrb	r3, [r2, #1]
 800ef2c:	f36f 13c7 	bfc	r3, #7, #1
 800ef30:	7053      	strb	r3, [r2, #1]
 800ef32:	7bba      	ldrb	r2, [r7, #14]
 800ef34:	4971      	ldr	r1, [pc, #452]	; (800f0fc <FCM_UpdateOperationCycle+0x274>)
 800ef36:	4613      	mov	r3, r2
 800ef38:	005b      	lsls	r3, r3, #1
 800ef3a:	4413      	add	r3, r2
 800ef3c:	18ca      	adds	r2, r1, r3
 800ef3e:	7853      	ldrb	r3, [r2, #1]
 800ef40:	f36f 1386 	bfc	r3, #6, #1
 800ef44:	7053      	strb	r3, [r2, #1]
 800ef46:	7bba      	ldrb	r2, [r7, #14]
 800ef48:	496c      	ldr	r1, [pc, #432]	; (800f0fc <FCM_UpdateOperationCycle+0x274>)
 800ef4a:	4613      	mov	r3, r2
 800ef4c:	005b      	lsls	r3, r3, #1
 800ef4e:	4413      	add	r3, r2
 800ef50:	18ca      	adds	r2, r1, r3
 800ef52:	7853      	ldrb	r3, [r2, #1]
 800ef54:	f043 0302 	orr.w	r3, r3, #2
 800ef58:	7053      	strb	r3, [r2, #1]
 800ef5a:	7bbb      	ldrb	r3, [r7, #14]
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	73bb      	strb	r3, [r7, #14]
 800ef60:	7bba      	ldrb	r2, [r7, #14]
 800ef62:	7b3b      	ldrb	r3, [r7, #12]
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d3da      	bcc.n	800ef1e <FCM_UpdateOperationCycle+0x96>
 800ef68:	e0b1      	b.n	800f0ce <FCM_UpdateOperationCycle+0x246>
 800ef6a:	7bfb      	ldrb	r3, [r7, #15]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d104      	bne.n	800ef7a <FCM_UpdateOperationCycle+0xf2>
 800ef70:	2300      	movs	r3, #0
 800ef72:	737b      	strb	r3, [r7, #13]
 800ef74:	2321      	movs	r3, #33	; 0x21
 800ef76:	733b      	strb	r3, [r7, #12]
 800ef78:	e00b      	b.n	800ef92 <FCM_UpdateOperationCycle+0x10a>
 800ef7a:	7bfb      	ldrb	r3, [r7, #15]
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	d104      	bne.n	800ef8a <FCM_UpdateOperationCycle+0x102>
 800ef80:	2321      	movs	r3, #33	; 0x21
 800ef82:	737b      	strb	r3, [r7, #13]
 800ef84:	2321      	movs	r3, #33	; 0x21
 800ef86:	733b      	strb	r3, [r7, #12]
 800ef88:	e003      	b.n	800ef92 <FCM_UpdateOperationCycle+0x10a>
 800ef8a:	2321      	movs	r3, #33	; 0x21
 800ef8c:	737b      	strb	r3, [r7, #13]
 800ef8e:	2321      	movs	r3, #33	; 0x21
 800ef90:	733b      	strb	r3, [r7, #12]
 800ef92:	7b7b      	ldrb	r3, [r7, #13]
 800ef94:	73bb      	strb	r3, [r7, #14]
 800ef96:	e094      	b.n	800f0c2 <FCM_UpdateOperationCycle+0x23a>
 800ef98:	7bba      	ldrb	r2, [r7, #14]
 800ef9a:	4958      	ldr	r1, [pc, #352]	; (800f0fc <FCM_UpdateOperationCycle+0x274>)
 800ef9c:	4613      	mov	r3, r2
 800ef9e:	005b      	lsls	r3, r3, #1
 800efa0:	4413      	add	r3, r2
 800efa2:	440b      	add	r3, r1
 800efa4:	785b      	ldrb	r3, [r3, #1]
 800efa6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800efaa:	b2db      	uxtb	r3, r3
 800efac:	2b00      	cmp	r3, #0
 800efae:	f040 8085 	bne.w	800f0bc <FCM_UpdateOperationCycle+0x234>
 800efb2:	7bba      	ldrb	r2, [r7, #14]
 800efb4:	4951      	ldr	r1, [pc, #324]	; (800f0fc <FCM_UpdateOperationCycle+0x274>)
 800efb6:	4613      	mov	r3, r2
 800efb8:	005b      	lsls	r3, r3, #1
 800efba:	4413      	add	r3, r2
 800efbc:	440b      	add	r3, r1
 800efbe:	785b      	ldrb	r3, [r3, #1]
 800efc0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800efc4:	b2db      	uxtb	r3, r3
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d178      	bne.n	800f0bc <FCM_UpdateOperationCycle+0x234>
 800efca:	7bba      	ldrb	r2, [r7, #14]
 800efcc:	494b      	ldr	r1, [pc, #300]	; (800f0fc <FCM_UpdateOperationCycle+0x274>)
 800efce:	4613      	mov	r3, r2
 800efd0:	005b      	lsls	r3, r3, #1
 800efd2:	4413      	add	r3, r2
 800efd4:	18ca      	adds	r2, r1, r3
 800efd6:	7853      	ldrb	r3, [r2, #1]
 800efd8:	f36f 1345 	bfc	r3, #5, #1
 800efdc:	7053      	strb	r3, [r2, #1]
 800efde:	7bba      	ldrb	r2, [r7, #14]
 800efe0:	4946      	ldr	r1, [pc, #280]	; (800f0fc <FCM_UpdateOperationCycle+0x274>)
 800efe2:	4613      	mov	r3, r2
 800efe4:	005b      	lsls	r3, r3, #1
 800efe6:	4413      	add	r3, r2
 800efe8:	440b      	add	r3, r1
 800efea:	2200      	movs	r2, #0
 800efec:	701a      	strb	r2, [r3, #0]
 800efee:	7bba      	ldrb	r2, [r7, #14]
 800eff0:	4942      	ldr	r1, [pc, #264]	; (800f0fc <FCM_UpdateOperationCycle+0x274>)
 800eff2:	4613      	mov	r3, r2
 800eff4:	005b      	lsls	r3, r3, #1
 800eff6:	4413      	add	r3, r2
 800eff8:	440b      	add	r3, r1
 800effa:	785b      	ldrb	r3, [r3, #1]
 800effc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f000:	b2db      	uxtb	r3, r3
 800f002:	2b01      	cmp	r3, #1
 800f004:	d154      	bne.n	800f0b0 <FCM_UpdateOperationCycle+0x228>
 800f006:	7bba      	ldrb	r2, [r7, #14]
 800f008:	493c      	ldr	r1, [pc, #240]	; (800f0fc <FCM_UpdateOperationCycle+0x274>)
 800f00a:	4613      	mov	r3, r2
 800f00c:	005b      	lsls	r3, r3, #1
 800f00e:	4413      	add	r3, r2
 800f010:	440b      	add	r3, r1
 800f012:	3302      	adds	r3, #2
 800f014:	7819      	ldrb	r1, [r3, #0]
 800f016:	7bba      	ldrb	r2, [r7, #14]
 800f018:	4839      	ldr	r0, [pc, #228]	; (800f100 <FCM_UpdateOperationCycle+0x278>)
 800f01a:	4613      	mov	r3, r2
 800f01c:	005b      	lsls	r3, r3, #1
 800f01e:	4413      	add	r3, r2
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	4403      	add	r3, r0
 800f024:	3306      	adds	r3, #6
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	4299      	cmp	r1, r3
 800f02a:	d21b      	bcs.n	800f064 <FCM_UpdateOperationCycle+0x1dc>
 800f02c:	7bba      	ldrb	r2, [r7, #14]
 800f02e:	4933      	ldr	r1, [pc, #204]	; (800f0fc <FCM_UpdateOperationCycle+0x274>)
 800f030:	4613      	mov	r3, r2
 800f032:	005b      	lsls	r3, r3, #1
 800f034:	4413      	add	r3, r2
 800f036:	440b      	add	r3, r1
 800f038:	3302      	adds	r3, #2
 800f03a:	7819      	ldrb	r1, [r3, #0]
 800f03c:	7bba      	ldrb	r2, [r7, #14]
 800f03e:	4830      	ldr	r0, [pc, #192]	; (800f100 <FCM_UpdateOperationCycle+0x278>)
 800f040:	4613      	mov	r3, r2
 800f042:	005b      	lsls	r3, r3, #1
 800f044:	4413      	add	r3, r2
 800f046:	009b      	lsls	r3, r3, #2
 800f048:	4403      	add	r3, r0
 800f04a:	3307      	adds	r3, #7
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	7bba      	ldrb	r2, [r7, #14]
 800f050:	440b      	add	r3, r1
 800f052:	b2d8      	uxtb	r0, r3
 800f054:	4929      	ldr	r1, [pc, #164]	; (800f0fc <FCM_UpdateOperationCycle+0x274>)
 800f056:	4613      	mov	r3, r2
 800f058:	005b      	lsls	r3, r3, #1
 800f05a:	4413      	add	r3, r2
 800f05c:	440b      	add	r3, r1
 800f05e:	3302      	adds	r3, #2
 800f060:	4602      	mov	r2, r0
 800f062:	701a      	strb	r2, [r3, #0]
 800f064:	7bba      	ldrb	r2, [r7, #14]
 800f066:	4925      	ldr	r1, [pc, #148]	; (800f0fc <FCM_UpdateOperationCycle+0x274>)
 800f068:	4613      	mov	r3, r2
 800f06a:	005b      	lsls	r3, r3, #1
 800f06c:	4413      	add	r3, r2
 800f06e:	440b      	add	r3, r1
 800f070:	3302      	adds	r3, #2
 800f072:	7819      	ldrb	r1, [r3, #0]
 800f074:	7bba      	ldrb	r2, [r7, #14]
 800f076:	4822      	ldr	r0, [pc, #136]	; (800f100 <FCM_UpdateOperationCycle+0x278>)
 800f078:	4613      	mov	r3, r2
 800f07a:	005b      	lsls	r3, r3, #1
 800f07c:	4413      	add	r3, r2
 800f07e:	009b      	lsls	r3, r3, #2
 800f080:	4403      	add	r3, r0
 800f082:	3306      	adds	r3, #6
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	4299      	cmp	r1, r3
 800f088:	d312      	bcc.n	800f0b0 <FCM_UpdateOperationCycle+0x228>
 800f08a:	7bba      	ldrb	r2, [r7, #14]
 800f08c:	491b      	ldr	r1, [pc, #108]	; (800f0fc <FCM_UpdateOperationCycle+0x274>)
 800f08e:	4613      	mov	r3, r2
 800f090:	005b      	lsls	r3, r3, #1
 800f092:	4413      	add	r3, r2
 800f094:	18ca      	adds	r2, r1, r3
 800f096:	7853      	ldrb	r3, [r2, #1]
 800f098:	f36f 1304 	bfc	r3, #4, #1
 800f09c:	7053      	strb	r3, [r2, #1]
 800f09e:	7bba      	ldrb	r2, [r7, #14]
 800f0a0:	4916      	ldr	r1, [pc, #88]	; (800f0fc <FCM_UpdateOperationCycle+0x274>)
 800f0a2:	4613      	mov	r3, r2
 800f0a4:	005b      	lsls	r3, r3, #1
 800f0a6:	4413      	add	r3, r2
 800f0a8:	440b      	add	r3, r1
 800f0aa:	3302      	adds	r3, #2
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	701a      	strb	r2, [r3, #0]
 800f0b0:	7bbb      	ldrb	r3, [r7, #14]
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	4911      	ldr	r1, [pc, #68]	; (800f0fc <FCM_UpdateOperationCycle+0x274>)
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7f1 fd92 	bl	8000be0 <FCM_DTC_WriteDTCToEEPROM>
 800f0bc:	7bbb      	ldrb	r3, [r7, #14]
 800f0be:	3301      	adds	r3, #1
 800f0c0:	73bb      	strb	r3, [r7, #14]
 800f0c2:	7bba      	ldrb	r2, [r7, #14]
 800f0c4:	7b3b      	ldrb	r3, [r7, #12]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	f4ff af66 	bcc.w	800ef98 <FCM_UpdateOperationCycle+0x110>
 800f0cc:	bf00      	nop
 800f0ce:	7bfa      	ldrb	r2, [r7, #15]
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	4907      	ldr	r1, [pc, #28]	; (800f0f0 <FCM_UpdateOperationCycle+0x268>)
 800f0d4:	5c89      	ldrb	r1, [r1, r2]
 800f0d6:	4a08      	ldr	r2, [pc, #32]	; (800f0f8 <FCM_UpdateOperationCycle+0x270>)
 800f0d8:	54d1      	strb	r1, [r2, r3]
 800f0da:	7bfb      	ldrb	r3, [r7, #15]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	73fb      	strb	r3, [r7, #15]
 800f0e0:	7bfb      	ldrb	r3, [r7, #15]
 800f0e2:	2b02      	cmp	r3, #2
 800f0e4:	f67f aef3 	bls.w	800eece <FCM_UpdateOperationCycle+0x46>
 800f0e8:	bf00      	nop
 800f0ea:	3710      	adds	r7, #16
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	24000298 	.word	0x24000298
 800f0f4:	2400029f 	.word	0x2400029f
 800f0f8:	2400029c 	.word	0x2400029c
 800f0fc:	24000000 	.word	0x24000000
 800f100:	0800ffe8 	.word	0x0800ffe8

0800f104 <FCM_ClearAllDTCInfo>:
 800f104:	b580      	push	{r7, lr}
 800f106:	b082      	sub	sp, #8
 800f108:	af00      	add	r7, sp, #0
 800f10a:	f7f1 facf 	bl	80006ac <HAL_FCM_InitStatus>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b01      	cmp	r3, #1
 800f112:	f040 80b0 	bne.w	800f276 <FCM_ClearAllDTCInfo+0x172>
 800f116:	2301      	movs	r3, #1
 800f118:	71bb      	strb	r3, [r7, #6]
 800f11a:	2300      	movs	r3, #0
 800f11c:	71fb      	strb	r3, [r7, #7]
 800f11e:	e00a      	b.n	800f136 <FCM_ClearAllDTCInfo+0x32>
 800f120:	79fb      	ldrb	r3, [r7, #7]
 800f122:	4a58      	ldr	r2, [pc, #352]	; (800f284 <FCM_ClearAllDTCInfo+0x180>)
 800f124:	2101      	movs	r1, #1
 800f126:	54d1      	strb	r1, [r2, r3]
 800f128:	79fb      	ldrb	r3, [r7, #7]
 800f12a:	4a57      	ldr	r2, [pc, #348]	; (800f288 <FCM_ClearAllDTCInfo+0x184>)
 800f12c:	2101      	movs	r1, #1
 800f12e:	54d1      	strb	r1, [r2, r3]
 800f130:	79fb      	ldrb	r3, [r7, #7]
 800f132:	3301      	adds	r3, #1
 800f134:	71fb      	strb	r3, [r7, #7]
 800f136:	79fb      	ldrb	r3, [r7, #7]
 800f138:	2b02      	cmp	r3, #2
 800f13a:	d9f1      	bls.n	800f120 <FCM_ClearAllDTCInfo+0x1c>
 800f13c:	2300      	movs	r3, #0
 800f13e:	71fb      	strb	r3, [r7, #7]
 800f140:	e06e      	b.n	800f220 <FCM_ClearAllDTCInfo+0x11c>
 800f142:	79fa      	ldrb	r2, [r7, #7]
 800f144:	4951      	ldr	r1, [pc, #324]	; (800f28c <FCM_ClearAllDTCInfo+0x188>)
 800f146:	4613      	mov	r3, r2
 800f148:	005b      	lsls	r3, r3, #1
 800f14a:	4413      	add	r3, r2
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	440b      	add	r3, r1
 800f150:	3309      	adds	r3, #9
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d160      	bne.n	800f21a <FCM_ClearAllDTCInfo+0x116>
 800f158:	79fa      	ldrb	r2, [r7, #7]
 800f15a:	494d      	ldr	r1, [pc, #308]	; (800f290 <FCM_ClearAllDTCInfo+0x18c>)
 800f15c:	4613      	mov	r3, r2
 800f15e:	005b      	lsls	r3, r3, #1
 800f160:	4413      	add	r3, r2
 800f162:	18ca      	adds	r2, r1, r3
 800f164:	7853      	ldrb	r3, [r2, #1]
 800f166:	f36f 13c7 	bfc	r3, #7, #1
 800f16a:	7053      	strb	r3, [r2, #1]
 800f16c:	79fa      	ldrb	r2, [r7, #7]
 800f16e:	4948      	ldr	r1, [pc, #288]	; (800f290 <FCM_ClearAllDTCInfo+0x18c>)
 800f170:	4613      	mov	r3, r2
 800f172:	005b      	lsls	r3, r3, #1
 800f174:	4413      	add	r3, r2
 800f176:	18ca      	adds	r2, r1, r3
 800f178:	7853      	ldrb	r3, [r2, #1]
 800f17a:	f36f 1386 	bfc	r3, #6, #1
 800f17e:	7053      	strb	r3, [r2, #1]
 800f180:	79fa      	ldrb	r2, [r7, #7]
 800f182:	4943      	ldr	r1, [pc, #268]	; (800f290 <FCM_ClearAllDTCInfo+0x18c>)
 800f184:	4613      	mov	r3, r2
 800f186:	005b      	lsls	r3, r3, #1
 800f188:	4413      	add	r3, r2
 800f18a:	18ca      	adds	r2, r1, r3
 800f18c:	7853      	ldrb	r3, [r2, #1]
 800f18e:	f36f 1345 	bfc	r3, #5, #1
 800f192:	7053      	strb	r3, [r2, #1]
 800f194:	79fa      	ldrb	r2, [r7, #7]
 800f196:	493e      	ldr	r1, [pc, #248]	; (800f290 <FCM_ClearAllDTCInfo+0x18c>)
 800f198:	4613      	mov	r3, r2
 800f19a:	005b      	lsls	r3, r3, #1
 800f19c:	4413      	add	r3, r2
 800f19e:	18ca      	adds	r2, r1, r3
 800f1a0:	7853      	ldrb	r3, [r2, #1]
 800f1a2:	f36f 1304 	bfc	r3, #4, #1
 800f1a6:	7053      	strb	r3, [r2, #1]
 800f1a8:	79fa      	ldrb	r2, [r7, #7]
 800f1aa:	4939      	ldr	r1, [pc, #228]	; (800f290 <FCM_ClearAllDTCInfo+0x18c>)
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	005b      	lsls	r3, r3, #1
 800f1b0:	4413      	add	r3, r2
 800f1b2:	18ca      	adds	r2, r1, r3
 800f1b4:	7853      	ldrb	r3, [r2, #1]
 800f1b6:	f36f 03c3 	bfc	r3, #3, #1
 800f1ba:	7053      	strb	r3, [r2, #1]
 800f1bc:	79fa      	ldrb	r2, [r7, #7]
 800f1be:	4934      	ldr	r1, [pc, #208]	; (800f290 <FCM_ClearAllDTCInfo+0x18c>)
 800f1c0:	4613      	mov	r3, r2
 800f1c2:	005b      	lsls	r3, r3, #1
 800f1c4:	4413      	add	r3, r2
 800f1c6:	18ca      	adds	r2, r1, r3
 800f1c8:	7853      	ldrb	r3, [r2, #1]
 800f1ca:	f36f 0382 	bfc	r3, #2, #1
 800f1ce:	7053      	strb	r3, [r2, #1]
 800f1d0:	79fa      	ldrb	r2, [r7, #7]
 800f1d2:	492f      	ldr	r1, [pc, #188]	; (800f290 <FCM_ClearAllDTCInfo+0x18c>)
 800f1d4:	4613      	mov	r3, r2
 800f1d6:	005b      	lsls	r3, r3, #1
 800f1d8:	4413      	add	r3, r2
 800f1da:	18ca      	adds	r2, r1, r3
 800f1dc:	7853      	ldrb	r3, [r2, #1]
 800f1de:	f043 0302 	orr.w	r3, r3, #2
 800f1e2:	7053      	strb	r3, [r2, #1]
 800f1e4:	79fa      	ldrb	r2, [r7, #7]
 800f1e6:	492a      	ldr	r1, [pc, #168]	; (800f290 <FCM_ClearAllDTCInfo+0x18c>)
 800f1e8:	4613      	mov	r3, r2
 800f1ea:	005b      	lsls	r3, r3, #1
 800f1ec:	4413      	add	r3, r2
 800f1ee:	18ca      	adds	r2, r1, r3
 800f1f0:	7853      	ldrb	r3, [r2, #1]
 800f1f2:	f36f 0300 	bfc	r3, #0, #1
 800f1f6:	7053      	strb	r3, [r2, #1]
 800f1f8:	79fa      	ldrb	r2, [r7, #7]
 800f1fa:	4925      	ldr	r1, [pc, #148]	; (800f290 <FCM_ClearAllDTCInfo+0x18c>)
 800f1fc:	4613      	mov	r3, r2
 800f1fe:	005b      	lsls	r3, r3, #1
 800f200:	4413      	add	r3, r2
 800f202:	440b      	add	r3, r1
 800f204:	3302      	adds	r3, #2
 800f206:	2200      	movs	r2, #0
 800f208:	701a      	strb	r2, [r3, #0]
 800f20a:	79fa      	ldrb	r2, [r7, #7]
 800f20c:	4920      	ldr	r1, [pc, #128]	; (800f290 <FCM_ClearAllDTCInfo+0x18c>)
 800f20e:	4613      	mov	r3, r2
 800f210:	005b      	lsls	r3, r3, #1
 800f212:	4413      	add	r3, r2
 800f214:	440b      	add	r3, r1
 800f216:	2200      	movs	r2, #0
 800f218:	701a      	strb	r2, [r3, #0]
 800f21a:	79fb      	ldrb	r3, [r7, #7]
 800f21c:	3301      	adds	r3, #1
 800f21e:	71fb      	strb	r3, [r7, #7]
 800f220:	79fb      	ldrb	r3, [r7, #7]
 800f222:	2b20      	cmp	r3, #32
 800f224:	d98d      	bls.n	800f142 <FCM_ClearAllDTCInfo+0x3e>
 800f226:	4b1b      	ldr	r3, [pc, #108]	; (800f294 <FCM_ClearAllDTCInfo+0x190>)
 800f228:	2200      	movs	r2, #0
 800f22a:	701a      	strb	r2, [r3, #0]
 800f22c:	4b1a      	ldr	r3, [pc, #104]	; (800f298 <FCM_ClearAllDTCInfo+0x194>)
 800f22e:	2200      	movs	r2, #0
 800f230:	601a      	str	r2, [r3, #0]
 800f232:	4b19      	ldr	r3, [pc, #100]	; (800f298 <FCM_ClearAllDTCInfo+0x194>)
 800f234:	2200      	movs	r2, #0
 800f236:	715a      	strb	r2, [r3, #5]
 800f238:	4b18      	ldr	r3, [pc, #96]	; (800f29c <FCM_ClearAllDTCInfo+0x198>)
 800f23a:	2200      	movs	r2, #0
 800f23c:	701a      	strb	r2, [r3, #0]
 800f23e:	4b18      	ldr	r3, [pc, #96]	; (800f2a0 <FCM_ClearAllDTCInfo+0x19c>)
 800f240:	2200      	movs	r2, #0
 800f242:	601a      	str	r2, [r3, #0]
 800f244:	4b16      	ldr	r3, [pc, #88]	; (800f2a0 <FCM_ClearAllDTCInfo+0x19c>)
 800f246:	2200      	movs	r2, #0
 800f248:	715a      	strb	r2, [r3, #5]
 800f24a:	4b16      	ldr	r3, [pc, #88]	; (800f2a4 <FCM_ClearAllDTCInfo+0x1a0>)
 800f24c:	2200      	movs	r2, #0
 800f24e:	701a      	strb	r2, [r3, #0]
 800f250:	4b15      	ldr	r3, [pc, #84]	; (800f2a8 <FCM_ClearAllDTCInfo+0x1a4>)
 800f252:	2200      	movs	r2, #0
 800f254:	601a      	str	r2, [r3, #0]
 800f256:	4b14      	ldr	r3, [pc, #80]	; (800f2a8 <FCM_ClearAllDTCInfo+0x1a4>)
 800f258:	2200      	movs	r2, #0
 800f25a:	601a      	str	r2, [r3, #0]
 800f25c:	4b13      	ldr	r3, [pc, #76]	; (800f2ac <FCM_ClearAllDTCInfo+0x1a8>)
 800f25e:	2200      	movs	r2, #0
 800f260:	701a      	strb	r2, [r3, #0]
 800f262:	4b13      	ldr	r3, [pc, #76]	; (800f2b0 <FCM_ClearAllDTCInfo+0x1ac>)
 800f264:	2200      	movs	r2, #0
 800f266:	601a      	str	r2, [r3, #0]
 800f268:	4b11      	ldr	r3, [pc, #68]	; (800f2b0 <FCM_ClearAllDTCInfo+0x1ac>)
 800f26a:	2200      	movs	r2, #0
 800f26c:	715a      	strb	r2, [r3, #5]
 800f26e:	4808      	ldr	r0, [pc, #32]	; (800f290 <FCM_ClearAllDTCInfo+0x18c>)
 800f270:	f7f1 faf0 	bl	8000854 <HAL_FCM_ClearAllDTC>
 800f274:	e001      	b.n	800f27a <FCM_ClearAllDTCInfo+0x176>
 800f276:	2300      	movs	r3, #0
 800f278:	71bb      	strb	r3, [r7, #6]
 800f27a:	79bb      	ldrb	r3, [r7, #6]
 800f27c:	4618      	mov	r0, r3
 800f27e:	3708      	adds	r7, #8
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}
 800f284:	24000298 	.word	0x24000298
 800f288:	2400029c 	.word	0x2400029c
 800f28c:	0800ffe8 	.word	0x0800ffe8
 800f290:	24000000 	.word	0x24000000
 800f294:	2400030e 	.word	0x2400030e
 800f298:	24000310 	.word	0x24000310
 800f29c:	24000318 	.word	0x24000318
 800f2a0:	2400031c 	.word	0x2400031c
 800f2a4:	24000324 	.word	0x24000324
 800f2a8:	24000328 	.word	0x24000328
 800f2ac:	24000330 	.word	0x24000330
 800f2b0:	24000334 	.word	0x24000334

0800f2b4 <FCM_CopyDTCStatusByDTCNumber>:
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f7ff fdbe 	bl	800ee40 <FCM_FindDTCIndex>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	81fb      	strh	r3, [r7, #14]
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d035      	beq.n	800f33a <FCM_CopyDTCStatusByDTCNumber+0x86>
 800f2ce:	89fb      	ldrh	r3, [r7, #14]
 800f2d0:	2b20      	cmp	r3, #32
 800f2d2:	d832      	bhi.n	800f33a <FCM_CopyDTCStatusByDTCNumber+0x86>
 800f2d4:	89fa      	ldrh	r2, [r7, #14]
 800f2d6:	491b      	ldr	r1, [pc, #108]	; (800f344 <FCM_CopyDTCStatusByDTCNumber+0x90>)
 800f2d8:	4613      	mov	r3, r2
 800f2da:	005b      	lsls	r3, r3, #1
 800f2dc:	4413      	add	r3, r2
 800f2de:	009b      	lsls	r3, r3, #2
 800f2e0:	440b      	add	r3, r1
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	0c1b      	lsrs	r3, r3, #16
 800f2e6:	b2da      	uxtb	r2, r3
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	701a      	strb	r2, [r3, #0]
 800f2ec:	89fa      	ldrh	r2, [r7, #14]
 800f2ee:	4915      	ldr	r1, [pc, #84]	; (800f344 <FCM_CopyDTCStatusByDTCNumber+0x90>)
 800f2f0:	4613      	mov	r3, r2
 800f2f2:	005b      	lsls	r3, r3, #1
 800f2f4:	4413      	add	r3, r2
 800f2f6:	009b      	lsls	r3, r3, #2
 800f2f8:	440b      	add	r3, r1
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	0a1a      	lsrs	r2, r3, #8
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	3301      	adds	r3, #1
 800f302:	b2d2      	uxtb	r2, r2
 800f304:	701a      	strb	r2, [r3, #0]
 800f306:	89fa      	ldrh	r2, [r7, #14]
 800f308:	490e      	ldr	r1, [pc, #56]	; (800f344 <FCM_CopyDTCStatusByDTCNumber+0x90>)
 800f30a:	4613      	mov	r3, r2
 800f30c:	005b      	lsls	r3, r3, #1
 800f30e:	4413      	add	r3, r2
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	440b      	add	r3, r1
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	3302      	adds	r3, #2
 800f31a:	b2d2      	uxtb	r2, r2
 800f31c:	701a      	strb	r2, [r3, #0]
 800f31e:	89fa      	ldrh	r2, [r7, #14]
 800f320:	4909      	ldr	r1, [pc, #36]	; (800f348 <FCM_CopyDTCStatusByDTCNumber+0x94>)
 800f322:	4613      	mov	r3, r2
 800f324:	005b      	lsls	r3, r3, #1
 800f326:	4413      	add	r3, r2
 800f328:	440b      	add	r3, r1
 800f32a:	3301      	adds	r3, #1
 800f32c:	781a      	ldrb	r2, [r3, #0]
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	3303      	adds	r3, #3
 800f332:	f002 026f 	and.w	r2, r2, #111	; 0x6f
 800f336:	b2d2      	uxtb	r2, r2
 800f338:	701a      	strb	r2, [r3, #0]
 800f33a:	bf00      	nop
 800f33c:	3710      	adds	r7, #16
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	0800ffe8 	.word	0x0800ffe8
 800f348:	24000000 	.word	0x24000000

0800f34c <FCM_ReportNoOfDTCByStatusMask>:
 800f34c:	b480      	push	{r7}
 800f34e:	b085      	sub	sp, #20
 800f350:	af00      	add	r7, sp, #0
 800f352:	4603      	mov	r3, r0
 800f354:	71fb      	strb	r3, [r7, #7]
 800f356:	2300      	movs	r3, #0
 800f358:	81bb      	strh	r3, [r7, #12]
 800f35a:	2300      	movs	r3, #0
 800f35c:	81fb      	strh	r3, [r7, #14]
 800f35e:	e014      	b.n	800f38a <FCM_ReportNoOfDTCByStatusMask+0x3e>
 800f360:	89fa      	ldrh	r2, [r7, #14]
 800f362:	490f      	ldr	r1, [pc, #60]	; (800f3a0 <FCM_ReportNoOfDTCByStatusMask+0x54>)
 800f364:	4613      	mov	r3, r2
 800f366:	005b      	lsls	r3, r3, #1
 800f368:	4413      	add	r3, r2
 800f36a:	440b      	add	r3, r1
 800f36c:	3301      	adds	r3, #1
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	461a      	mov	r2, r3
 800f372:	79fb      	ldrb	r3, [r7, #7]
 800f374:	4013      	ands	r3, r2
 800f376:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d002      	beq.n	800f384 <FCM_ReportNoOfDTCByStatusMask+0x38>
 800f37e:	89bb      	ldrh	r3, [r7, #12]
 800f380:	3301      	adds	r3, #1
 800f382:	81bb      	strh	r3, [r7, #12]
 800f384:	89fb      	ldrh	r3, [r7, #14]
 800f386:	3301      	adds	r3, #1
 800f388:	81fb      	strh	r3, [r7, #14]
 800f38a:	89fb      	ldrh	r3, [r7, #14]
 800f38c:	2b20      	cmp	r3, #32
 800f38e:	d9e7      	bls.n	800f360 <FCM_ReportNoOfDTCByStatusMask+0x14>
 800f390:	89bb      	ldrh	r3, [r7, #12]
 800f392:	4618      	mov	r0, r3
 800f394:	3714      	adds	r7, #20
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr
 800f39e:	bf00      	nop
 800f3a0:	24000000 	.word	0x24000000

0800f3a4 <FCM_ReportDTCByStatusMask>:
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	6039      	str	r1, [r7, #0]
 800f3ae:	71fb      	strb	r3, [r7, #7]
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	81bb      	strh	r3, [r7, #12]
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d05a      	beq.n	800f470 <FCM_ReportDTCByStatusMask+0xcc>
 800f3ba:	f7f1 f977 	bl	80006ac <HAL_FCM_InitStatus>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d155      	bne.n	800f470 <FCM_ReportDTCByStatusMask+0xcc>
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	81fb      	strh	r3, [r7, #14]
 800f3c8:	e04f      	b.n	800f46a <FCM_ReportDTCByStatusMask+0xc6>
 800f3ca:	89fa      	ldrh	r2, [r7, #14]
 800f3cc:	492b      	ldr	r1, [pc, #172]	; (800f47c <FCM_ReportDTCByStatusMask+0xd8>)
 800f3ce:	4613      	mov	r3, r2
 800f3d0:	005b      	lsls	r3, r3, #1
 800f3d2:	4413      	add	r3, r2
 800f3d4:	440b      	add	r3, r1
 800f3d6:	3301      	adds	r3, #1
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	461a      	mov	r2, r3
 800f3dc:	79fb      	ldrb	r3, [r7, #7]
 800f3de:	4013      	ands	r3, r2
 800f3e0:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d03d      	beq.n	800f464 <FCM_ReportDTCByStatusMask+0xc0>
 800f3e8:	89fa      	ldrh	r2, [r7, #14]
 800f3ea:	4925      	ldr	r1, [pc, #148]	; (800f480 <FCM_ReportDTCByStatusMask+0xdc>)
 800f3ec:	4613      	mov	r3, r2
 800f3ee:	005b      	lsls	r3, r3, #1
 800f3f0:	4413      	add	r3, r2
 800f3f2:	009b      	lsls	r3, r3, #2
 800f3f4:	440b      	add	r3, r1
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	0c19      	lsrs	r1, r3, #16
 800f3fa:	89bb      	ldrh	r3, [r7, #12]
 800f3fc:	683a      	ldr	r2, [r7, #0]
 800f3fe:	4413      	add	r3, r2
 800f400:	b2ca      	uxtb	r2, r1
 800f402:	701a      	strb	r2, [r3, #0]
 800f404:	89fa      	ldrh	r2, [r7, #14]
 800f406:	491e      	ldr	r1, [pc, #120]	; (800f480 <FCM_ReportDTCByStatusMask+0xdc>)
 800f408:	4613      	mov	r3, r2
 800f40a:	005b      	lsls	r3, r3, #1
 800f40c:	4413      	add	r3, r2
 800f40e:	009b      	lsls	r3, r3, #2
 800f410:	440b      	add	r3, r1
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	0a19      	lsrs	r1, r3, #8
 800f416:	89bb      	ldrh	r3, [r7, #12]
 800f418:	3301      	adds	r3, #1
 800f41a:	683a      	ldr	r2, [r7, #0]
 800f41c:	4413      	add	r3, r2
 800f41e:	b2ca      	uxtb	r2, r1
 800f420:	701a      	strb	r2, [r3, #0]
 800f422:	89fa      	ldrh	r2, [r7, #14]
 800f424:	4916      	ldr	r1, [pc, #88]	; (800f480 <FCM_ReportDTCByStatusMask+0xdc>)
 800f426:	4613      	mov	r3, r2
 800f428:	005b      	lsls	r3, r3, #1
 800f42a:	4413      	add	r3, r2
 800f42c:	009b      	lsls	r3, r3, #2
 800f42e:	440b      	add	r3, r1
 800f430:	6819      	ldr	r1, [r3, #0]
 800f432:	89bb      	ldrh	r3, [r7, #12]
 800f434:	3302      	adds	r3, #2
 800f436:	683a      	ldr	r2, [r7, #0]
 800f438:	4413      	add	r3, r2
 800f43a:	b2ca      	uxtb	r2, r1
 800f43c:	701a      	strb	r2, [r3, #0]
 800f43e:	89fa      	ldrh	r2, [r7, #14]
 800f440:	490e      	ldr	r1, [pc, #56]	; (800f47c <FCM_ReportDTCByStatusMask+0xd8>)
 800f442:	4613      	mov	r3, r2
 800f444:	005b      	lsls	r3, r3, #1
 800f446:	4413      	add	r3, r2
 800f448:	440b      	add	r3, r1
 800f44a:	3301      	adds	r3, #1
 800f44c:	781a      	ldrb	r2, [r3, #0]
 800f44e:	89bb      	ldrh	r3, [r7, #12]
 800f450:	3303      	adds	r3, #3
 800f452:	6839      	ldr	r1, [r7, #0]
 800f454:	440b      	add	r3, r1
 800f456:	f002 026f 	and.w	r2, r2, #111	; 0x6f
 800f45a:	b2d2      	uxtb	r2, r2
 800f45c:	701a      	strb	r2, [r3, #0]
 800f45e:	89bb      	ldrh	r3, [r7, #12]
 800f460:	3304      	adds	r3, #4
 800f462:	81bb      	strh	r3, [r7, #12]
 800f464:	89fb      	ldrh	r3, [r7, #14]
 800f466:	3301      	adds	r3, #1
 800f468:	81fb      	strh	r3, [r7, #14]
 800f46a:	89fb      	ldrh	r3, [r7, #14]
 800f46c:	2b20      	cmp	r3, #32
 800f46e:	d9ac      	bls.n	800f3ca <FCM_ReportDTCByStatusMask+0x26>
 800f470:	89bb      	ldrh	r3, [r7, #12]
 800f472:	4618      	mov	r0, r3
 800f474:	3710      	adds	r7, #16
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	24000000 	.word	0x24000000
 800f480:	0800ffe8 	.word	0x0800ffe8

0800f484 <FCM_ReportSupportedDTCs>:
 800f484:	b480      	push	{r7}
 800f486:	b085      	sub	sp, #20
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	2300      	movs	r3, #0
 800f48e:	81bb      	strh	r3, [r7, #12]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d04a      	beq.n	800f52c <FCM_ReportSupportedDTCs+0xa8>
 800f496:	2300      	movs	r3, #0
 800f498:	81fb      	strh	r3, [r7, #14]
 800f49a:	e044      	b.n	800f526 <FCM_ReportSupportedDTCs+0xa2>
 800f49c:	89fa      	ldrh	r2, [r7, #14]
 800f49e:	4927      	ldr	r1, [pc, #156]	; (800f53c <FCM_ReportSupportedDTCs+0xb8>)
 800f4a0:	4613      	mov	r3, r2
 800f4a2:	005b      	lsls	r3, r3, #1
 800f4a4:	4413      	add	r3, r2
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	440b      	add	r3, r1
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	0c19      	lsrs	r1, r3, #16
 800f4ae:	89fb      	ldrh	r3, [r7, #14]
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	4413      	add	r3, r2
 800f4b6:	b2ca      	uxtb	r2, r1
 800f4b8:	701a      	strb	r2, [r3, #0]
 800f4ba:	89fa      	ldrh	r2, [r7, #14]
 800f4bc:	491f      	ldr	r1, [pc, #124]	; (800f53c <FCM_ReportSupportedDTCs+0xb8>)
 800f4be:	4613      	mov	r3, r2
 800f4c0:	005b      	lsls	r3, r3, #1
 800f4c2:	4413      	add	r3, r2
 800f4c4:	009b      	lsls	r3, r3, #2
 800f4c6:	440b      	add	r3, r1
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	0a19      	lsrs	r1, r3, #8
 800f4cc:	89fb      	ldrh	r3, [r7, #14]
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	3301      	adds	r3, #1
 800f4d2:	687a      	ldr	r2, [r7, #4]
 800f4d4:	4413      	add	r3, r2
 800f4d6:	b2ca      	uxtb	r2, r1
 800f4d8:	701a      	strb	r2, [r3, #0]
 800f4da:	89fa      	ldrh	r2, [r7, #14]
 800f4dc:	4917      	ldr	r1, [pc, #92]	; (800f53c <FCM_ReportSupportedDTCs+0xb8>)
 800f4de:	4613      	mov	r3, r2
 800f4e0:	005b      	lsls	r3, r3, #1
 800f4e2:	4413      	add	r3, r2
 800f4e4:	009b      	lsls	r3, r3, #2
 800f4e6:	440b      	add	r3, r1
 800f4e8:	6819      	ldr	r1, [r3, #0]
 800f4ea:	89fb      	ldrh	r3, [r7, #14]
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	3302      	adds	r3, #2
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	4413      	add	r3, r2
 800f4f4:	b2ca      	uxtb	r2, r1
 800f4f6:	701a      	strb	r2, [r3, #0]
 800f4f8:	89fa      	ldrh	r2, [r7, #14]
 800f4fa:	4911      	ldr	r1, [pc, #68]	; (800f540 <FCM_ReportSupportedDTCs+0xbc>)
 800f4fc:	4613      	mov	r3, r2
 800f4fe:	005b      	lsls	r3, r3, #1
 800f500:	4413      	add	r3, r2
 800f502:	440b      	add	r3, r1
 800f504:	3301      	adds	r3, #1
 800f506:	781a      	ldrb	r2, [r3, #0]
 800f508:	89fb      	ldrh	r3, [r7, #14]
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	3303      	adds	r3, #3
 800f50e:	6879      	ldr	r1, [r7, #4]
 800f510:	440b      	add	r3, r1
 800f512:	f002 026f 	and.w	r2, r2, #111	; 0x6f
 800f516:	b2d2      	uxtb	r2, r2
 800f518:	701a      	strb	r2, [r3, #0]
 800f51a:	89bb      	ldrh	r3, [r7, #12]
 800f51c:	3304      	adds	r3, #4
 800f51e:	81bb      	strh	r3, [r7, #12]
 800f520:	89fb      	ldrh	r3, [r7, #14]
 800f522:	3301      	adds	r3, #1
 800f524:	81fb      	strh	r3, [r7, #14]
 800f526:	89fb      	ldrh	r3, [r7, #14]
 800f528:	2b20      	cmp	r3, #32
 800f52a:	d9b7      	bls.n	800f49c <FCM_ReportSupportedDTCs+0x18>
 800f52c:	89bb      	ldrh	r3, [r7, #12]
 800f52e:	4618      	mov	r0, r3
 800f530:	3714      	adds	r7, #20
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr
 800f53a:	bf00      	nop
 800f53c:	0800ffe8 	.word	0x0800ffe8
 800f540:	24000000 	.word	0x24000000

0800f544 <FCM_UpdateCntrolDTCSetting>:
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	4603      	mov	r3, r0
 800f54c:	71fb      	strb	r3, [r7, #7]
 800f54e:	4a04      	ldr	r2, [pc, #16]	; (800f560 <FCM_UpdateCntrolDTCSetting+0x1c>)
 800f550:	79fb      	ldrb	r3, [r7, #7]
 800f552:	7013      	strb	r3, [r2, #0]
 800f554:	bf00      	nop
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr
 800f560:	2400029f 	.word	0x2400029f

0800f564 <siprintf>:
 800f564:	b40e      	push	{r1, r2, r3}
 800f566:	b500      	push	{lr}
 800f568:	b09c      	sub	sp, #112	; 0x70
 800f56a:	ab1d      	add	r3, sp, #116	; 0x74
 800f56c:	9002      	str	r0, [sp, #8]
 800f56e:	9006      	str	r0, [sp, #24]
 800f570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f574:	4809      	ldr	r0, [pc, #36]	; (800f59c <siprintf+0x38>)
 800f576:	9107      	str	r1, [sp, #28]
 800f578:	9104      	str	r1, [sp, #16]
 800f57a:	4909      	ldr	r1, [pc, #36]	; (800f5a0 <siprintf+0x3c>)
 800f57c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f580:	9105      	str	r1, [sp, #20]
 800f582:	6800      	ldr	r0, [r0, #0]
 800f584:	9301      	str	r3, [sp, #4]
 800f586:	a902      	add	r1, sp, #8
 800f588:	f000 f9a0 	bl	800f8cc <_svfiprintf_r>
 800f58c:	9b02      	ldr	r3, [sp, #8]
 800f58e:	2200      	movs	r2, #0
 800f590:	701a      	strb	r2, [r3, #0]
 800f592:	b01c      	add	sp, #112	; 0x70
 800f594:	f85d eb04 	ldr.w	lr, [sp], #4
 800f598:	b003      	add	sp, #12
 800f59a:	4770      	bx	lr
 800f59c:	240002ec 	.word	0x240002ec
 800f5a0:	ffff0208 	.word	0xffff0208

0800f5a4 <memset>:
 800f5a4:	4402      	add	r2, r0
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d100      	bne.n	800f5ae <memset+0xa>
 800f5ac:	4770      	bx	lr
 800f5ae:	f803 1b01 	strb.w	r1, [r3], #1
 800f5b2:	e7f9      	b.n	800f5a8 <memset+0x4>

0800f5b4 <__errno>:
 800f5b4:	4b01      	ldr	r3, [pc, #4]	; (800f5bc <__errno+0x8>)
 800f5b6:	6818      	ldr	r0, [r3, #0]
 800f5b8:	4770      	bx	lr
 800f5ba:	bf00      	nop
 800f5bc:	240002ec 	.word	0x240002ec

0800f5c0 <__libc_init_array>:
 800f5c0:	b570      	push	{r4, r5, r6, lr}
 800f5c2:	4d0d      	ldr	r5, [pc, #52]	; (800f5f8 <__libc_init_array+0x38>)
 800f5c4:	4c0d      	ldr	r4, [pc, #52]	; (800f5fc <__libc_init_array+0x3c>)
 800f5c6:	1b64      	subs	r4, r4, r5
 800f5c8:	10a4      	asrs	r4, r4, #2
 800f5ca:	2600      	movs	r6, #0
 800f5cc:	42a6      	cmp	r6, r4
 800f5ce:	d109      	bne.n	800f5e4 <__libc_init_array+0x24>
 800f5d0:	4d0b      	ldr	r5, [pc, #44]	; (800f600 <__libc_init_array+0x40>)
 800f5d2:	4c0c      	ldr	r4, [pc, #48]	; (800f604 <__libc_init_array+0x44>)
 800f5d4:	f000 fc6a 	bl	800feac <_init>
 800f5d8:	1b64      	subs	r4, r4, r5
 800f5da:	10a4      	asrs	r4, r4, #2
 800f5dc:	2600      	movs	r6, #0
 800f5de:	42a6      	cmp	r6, r4
 800f5e0:	d105      	bne.n	800f5ee <__libc_init_array+0x2e>
 800f5e2:	bd70      	pop	{r4, r5, r6, pc}
 800f5e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5e8:	4798      	blx	r3
 800f5ea:	3601      	adds	r6, #1
 800f5ec:	e7ee      	b.n	800f5cc <__libc_init_array+0xc>
 800f5ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5f2:	4798      	blx	r3
 800f5f4:	3601      	adds	r6, #1
 800f5f6:	e7f2      	b.n	800f5de <__libc_init_array+0x1e>
 800f5f8:	08010b28 	.word	0x08010b28
 800f5fc:	08010b28 	.word	0x08010b28
 800f600:	08010b28 	.word	0x08010b28
 800f604:	08010b2c 	.word	0x08010b2c

0800f608 <__retarget_lock_acquire_recursive>:
 800f608:	4770      	bx	lr

0800f60a <__retarget_lock_release_recursive>:
 800f60a:	4770      	bx	lr

0800f60c <memcpy>:
 800f60c:	440a      	add	r2, r1
 800f60e:	4291      	cmp	r1, r2
 800f610:	f100 33ff 	add.w	r3, r0, #4294967295
 800f614:	d100      	bne.n	800f618 <memcpy+0xc>
 800f616:	4770      	bx	lr
 800f618:	b510      	push	{r4, lr}
 800f61a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f61e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f622:	4291      	cmp	r1, r2
 800f624:	d1f9      	bne.n	800f61a <memcpy+0xe>
 800f626:	bd10      	pop	{r4, pc}

0800f628 <_free_r>:
 800f628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f62a:	2900      	cmp	r1, #0
 800f62c:	d044      	beq.n	800f6b8 <_free_r+0x90>
 800f62e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f632:	9001      	str	r0, [sp, #4]
 800f634:	2b00      	cmp	r3, #0
 800f636:	f1a1 0404 	sub.w	r4, r1, #4
 800f63a:	bfb8      	it	lt
 800f63c:	18e4      	addlt	r4, r4, r3
 800f63e:	f000 f8df 	bl	800f800 <__malloc_lock>
 800f642:	4a1e      	ldr	r2, [pc, #120]	; (800f6bc <_free_r+0x94>)
 800f644:	9801      	ldr	r0, [sp, #4]
 800f646:	6813      	ldr	r3, [r2, #0]
 800f648:	b933      	cbnz	r3, 800f658 <_free_r+0x30>
 800f64a:	6063      	str	r3, [r4, #4]
 800f64c:	6014      	str	r4, [r2, #0]
 800f64e:	b003      	add	sp, #12
 800f650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f654:	f000 b8da 	b.w	800f80c <__malloc_unlock>
 800f658:	42a3      	cmp	r3, r4
 800f65a:	d908      	bls.n	800f66e <_free_r+0x46>
 800f65c:	6825      	ldr	r5, [r4, #0]
 800f65e:	1961      	adds	r1, r4, r5
 800f660:	428b      	cmp	r3, r1
 800f662:	bf01      	itttt	eq
 800f664:	6819      	ldreq	r1, [r3, #0]
 800f666:	685b      	ldreq	r3, [r3, #4]
 800f668:	1949      	addeq	r1, r1, r5
 800f66a:	6021      	streq	r1, [r4, #0]
 800f66c:	e7ed      	b.n	800f64a <_free_r+0x22>
 800f66e:	461a      	mov	r2, r3
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	b10b      	cbz	r3, 800f678 <_free_r+0x50>
 800f674:	42a3      	cmp	r3, r4
 800f676:	d9fa      	bls.n	800f66e <_free_r+0x46>
 800f678:	6811      	ldr	r1, [r2, #0]
 800f67a:	1855      	adds	r5, r2, r1
 800f67c:	42a5      	cmp	r5, r4
 800f67e:	d10b      	bne.n	800f698 <_free_r+0x70>
 800f680:	6824      	ldr	r4, [r4, #0]
 800f682:	4421      	add	r1, r4
 800f684:	1854      	adds	r4, r2, r1
 800f686:	42a3      	cmp	r3, r4
 800f688:	6011      	str	r1, [r2, #0]
 800f68a:	d1e0      	bne.n	800f64e <_free_r+0x26>
 800f68c:	681c      	ldr	r4, [r3, #0]
 800f68e:	685b      	ldr	r3, [r3, #4]
 800f690:	6053      	str	r3, [r2, #4]
 800f692:	440c      	add	r4, r1
 800f694:	6014      	str	r4, [r2, #0]
 800f696:	e7da      	b.n	800f64e <_free_r+0x26>
 800f698:	d902      	bls.n	800f6a0 <_free_r+0x78>
 800f69a:	230c      	movs	r3, #12
 800f69c:	6003      	str	r3, [r0, #0]
 800f69e:	e7d6      	b.n	800f64e <_free_r+0x26>
 800f6a0:	6825      	ldr	r5, [r4, #0]
 800f6a2:	1961      	adds	r1, r4, r5
 800f6a4:	428b      	cmp	r3, r1
 800f6a6:	bf04      	itt	eq
 800f6a8:	6819      	ldreq	r1, [r3, #0]
 800f6aa:	685b      	ldreq	r3, [r3, #4]
 800f6ac:	6063      	str	r3, [r4, #4]
 800f6ae:	bf04      	itt	eq
 800f6b0:	1949      	addeq	r1, r1, r5
 800f6b2:	6021      	streq	r1, [r4, #0]
 800f6b4:	6054      	str	r4, [r2, #4]
 800f6b6:	e7ca      	b.n	800f64e <_free_r+0x26>
 800f6b8:	b003      	add	sp, #12
 800f6ba:	bd30      	pop	{r4, r5, pc}
 800f6bc:	2400297c 	.word	0x2400297c

0800f6c0 <sbrk_aligned>:
 800f6c0:	b570      	push	{r4, r5, r6, lr}
 800f6c2:	4e0e      	ldr	r6, [pc, #56]	; (800f6fc <sbrk_aligned+0x3c>)
 800f6c4:	460c      	mov	r4, r1
 800f6c6:	6831      	ldr	r1, [r6, #0]
 800f6c8:	4605      	mov	r5, r0
 800f6ca:	b911      	cbnz	r1, 800f6d2 <sbrk_aligned+0x12>
 800f6cc:	f000 fba6 	bl	800fe1c <_sbrk_r>
 800f6d0:	6030      	str	r0, [r6, #0]
 800f6d2:	4621      	mov	r1, r4
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	f000 fba1 	bl	800fe1c <_sbrk_r>
 800f6da:	1c43      	adds	r3, r0, #1
 800f6dc:	d00a      	beq.n	800f6f4 <sbrk_aligned+0x34>
 800f6de:	1cc4      	adds	r4, r0, #3
 800f6e0:	f024 0403 	bic.w	r4, r4, #3
 800f6e4:	42a0      	cmp	r0, r4
 800f6e6:	d007      	beq.n	800f6f8 <sbrk_aligned+0x38>
 800f6e8:	1a21      	subs	r1, r4, r0
 800f6ea:	4628      	mov	r0, r5
 800f6ec:	f000 fb96 	bl	800fe1c <_sbrk_r>
 800f6f0:	3001      	adds	r0, #1
 800f6f2:	d101      	bne.n	800f6f8 <sbrk_aligned+0x38>
 800f6f4:	f04f 34ff 	mov.w	r4, #4294967295
 800f6f8:	4620      	mov	r0, r4
 800f6fa:	bd70      	pop	{r4, r5, r6, pc}
 800f6fc:	24002980 	.word	0x24002980

0800f700 <_malloc_r>:
 800f700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f704:	1ccd      	adds	r5, r1, #3
 800f706:	f025 0503 	bic.w	r5, r5, #3
 800f70a:	3508      	adds	r5, #8
 800f70c:	2d0c      	cmp	r5, #12
 800f70e:	bf38      	it	cc
 800f710:	250c      	movcc	r5, #12
 800f712:	2d00      	cmp	r5, #0
 800f714:	4607      	mov	r7, r0
 800f716:	db01      	blt.n	800f71c <_malloc_r+0x1c>
 800f718:	42a9      	cmp	r1, r5
 800f71a:	d905      	bls.n	800f728 <_malloc_r+0x28>
 800f71c:	230c      	movs	r3, #12
 800f71e:	603b      	str	r3, [r7, #0]
 800f720:	2600      	movs	r6, #0
 800f722:	4630      	mov	r0, r6
 800f724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f728:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f7fc <_malloc_r+0xfc>
 800f72c:	f000 f868 	bl	800f800 <__malloc_lock>
 800f730:	f8d8 3000 	ldr.w	r3, [r8]
 800f734:	461c      	mov	r4, r3
 800f736:	bb5c      	cbnz	r4, 800f790 <_malloc_r+0x90>
 800f738:	4629      	mov	r1, r5
 800f73a:	4638      	mov	r0, r7
 800f73c:	f7ff ffc0 	bl	800f6c0 <sbrk_aligned>
 800f740:	1c43      	adds	r3, r0, #1
 800f742:	4604      	mov	r4, r0
 800f744:	d155      	bne.n	800f7f2 <_malloc_r+0xf2>
 800f746:	f8d8 4000 	ldr.w	r4, [r8]
 800f74a:	4626      	mov	r6, r4
 800f74c:	2e00      	cmp	r6, #0
 800f74e:	d145      	bne.n	800f7dc <_malloc_r+0xdc>
 800f750:	2c00      	cmp	r4, #0
 800f752:	d048      	beq.n	800f7e6 <_malloc_r+0xe6>
 800f754:	6823      	ldr	r3, [r4, #0]
 800f756:	4631      	mov	r1, r6
 800f758:	4638      	mov	r0, r7
 800f75a:	eb04 0903 	add.w	r9, r4, r3
 800f75e:	f000 fb5d 	bl	800fe1c <_sbrk_r>
 800f762:	4581      	cmp	r9, r0
 800f764:	d13f      	bne.n	800f7e6 <_malloc_r+0xe6>
 800f766:	6821      	ldr	r1, [r4, #0]
 800f768:	1a6d      	subs	r5, r5, r1
 800f76a:	4629      	mov	r1, r5
 800f76c:	4638      	mov	r0, r7
 800f76e:	f7ff ffa7 	bl	800f6c0 <sbrk_aligned>
 800f772:	3001      	adds	r0, #1
 800f774:	d037      	beq.n	800f7e6 <_malloc_r+0xe6>
 800f776:	6823      	ldr	r3, [r4, #0]
 800f778:	442b      	add	r3, r5
 800f77a:	6023      	str	r3, [r4, #0]
 800f77c:	f8d8 3000 	ldr.w	r3, [r8]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d038      	beq.n	800f7f6 <_malloc_r+0xf6>
 800f784:	685a      	ldr	r2, [r3, #4]
 800f786:	42a2      	cmp	r2, r4
 800f788:	d12b      	bne.n	800f7e2 <_malloc_r+0xe2>
 800f78a:	2200      	movs	r2, #0
 800f78c:	605a      	str	r2, [r3, #4]
 800f78e:	e00f      	b.n	800f7b0 <_malloc_r+0xb0>
 800f790:	6822      	ldr	r2, [r4, #0]
 800f792:	1b52      	subs	r2, r2, r5
 800f794:	d41f      	bmi.n	800f7d6 <_malloc_r+0xd6>
 800f796:	2a0b      	cmp	r2, #11
 800f798:	d917      	bls.n	800f7ca <_malloc_r+0xca>
 800f79a:	1961      	adds	r1, r4, r5
 800f79c:	42a3      	cmp	r3, r4
 800f79e:	6025      	str	r5, [r4, #0]
 800f7a0:	bf18      	it	ne
 800f7a2:	6059      	strne	r1, [r3, #4]
 800f7a4:	6863      	ldr	r3, [r4, #4]
 800f7a6:	bf08      	it	eq
 800f7a8:	f8c8 1000 	streq.w	r1, [r8]
 800f7ac:	5162      	str	r2, [r4, r5]
 800f7ae:	604b      	str	r3, [r1, #4]
 800f7b0:	4638      	mov	r0, r7
 800f7b2:	f104 060b 	add.w	r6, r4, #11
 800f7b6:	f000 f829 	bl	800f80c <__malloc_unlock>
 800f7ba:	f026 0607 	bic.w	r6, r6, #7
 800f7be:	1d23      	adds	r3, r4, #4
 800f7c0:	1af2      	subs	r2, r6, r3
 800f7c2:	d0ae      	beq.n	800f722 <_malloc_r+0x22>
 800f7c4:	1b9b      	subs	r3, r3, r6
 800f7c6:	50a3      	str	r3, [r4, r2]
 800f7c8:	e7ab      	b.n	800f722 <_malloc_r+0x22>
 800f7ca:	42a3      	cmp	r3, r4
 800f7cc:	6862      	ldr	r2, [r4, #4]
 800f7ce:	d1dd      	bne.n	800f78c <_malloc_r+0x8c>
 800f7d0:	f8c8 2000 	str.w	r2, [r8]
 800f7d4:	e7ec      	b.n	800f7b0 <_malloc_r+0xb0>
 800f7d6:	4623      	mov	r3, r4
 800f7d8:	6864      	ldr	r4, [r4, #4]
 800f7da:	e7ac      	b.n	800f736 <_malloc_r+0x36>
 800f7dc:	4634      	mov	r4, r6
 800f7de:	6876      	ldr	r6, [r6, #4]
 800f7e0:	e7b4      	b.n	800f74c <_malloc_r+0x4c>
 800f7e2:	4613      	mov	r3, r2
 800f7e4:	e7cc      	b.n	800f780 <_malloc_r+0x80>
 800f7e6:	230c      	movs	r3, #12
 800f7e8:	603b      	str	r3, [r7, #0]
 800f7ea:	4638      	mov	r0, r7
 800f7ec:	f000 f80e 	bl	800f80c <__malloc_unlock>
 800f7f0:	e797      	b.n	800f722 <_malloc_r+0x22>
 800f7f2:	6025      	str	r5, [r4, #0]
 800f7f4:	e7dc      	b.n	800f7b0 <_malloc_r+0xb0>
 800f7f6:	605b      	str	r3, [r3, #4]
 800f7f8:	deff      	udf	#255	; 0xff
 800f7fa:	bf00      	nop
 800f7fc:	2400297c 	.word	0x2400297c

0800f800 <__malloc_lock>:
 800f800:	4801      	ldr	r0, [pc, #4]	; (800f808 <__malloc_lock+0x8>)
 800f802:	f7ff bf01 	b.w	800f608 <__retarget_lock_acquire_recursive>
 800f806:	bf00      	nop
 800f808:	24002978 	.word	0x24002978

0800f80c <__malloc_unlock>:
 800f80c:	4801      	ldr	r0, [pc, #4]	; (800f814 <__malloc_unlock+0x8>)
 800f80e:	f7ff befc 	b.w	800f60a <__retarget_lock_release_recursive>
 800f812:	bf00      	nop
 800f814:	24002978 	.word	0x24002978

0800f818 <__ssputs_r>:
 800f818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f81c:	688e      	ldr	r6, [r1, #8]
 800f81e:	461f      	mov	r7, r3
 800f820:	42be      	cmp	r6, r7
 800f822:	680b      	ldr	r3, [r1, #0]
 800f824:	4682      	mov	sl, r0
 800f826:	460c      	mov	r4, r1
 800f828:	4690      	mov	r8, r2
 800f82a:	d82c      	bhi.n	800f886 <__ssputs_r+0x6e>
 800f82c:	898a      	ldrh	r2, [r1, #12]
 800f82e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f832:	d026      	beq.n	800f882 <__ssputs_r+0x6a>
 800f834:	6965      	ldr	r5, [r4, #20]
 800f836:	6909      	ldr	r1, [r1, #16]
 800f838:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f83c:	eba3 0901 	sub.w	r9, r3, r1
 800f840:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f844:	1c7b      	adds	r3, r7, #1
 800f846:	444b      	add	r3, r9
 800f848:	106d      	asrs	r5, r5, #1
 800f84a:	429d      	cmp	r5, r3
 800f84c:	bf38      	it	cc
 800f84e:	461d      	movcc	r5, r3
 800f850:	0553      	lsls	r3, r2, #21
 800f852:	d527      	bpl.n	800f8a4 <__ssputs_r+0x8c>
 800f854:	4629      	mov	r1, r5
 800f856:	f7ff ff53 	bl	800f700 <_malloc_r>
 800f85a:	4606      	mov	r6, r0
 800f85c:	b360      	cbz	r0, 800f8b8 <__ssputs_r+0xa0>
 800f85e:	6921      	ldr	r1, [r4, #16]
 800f860:	464a      	mov	r2, r9
 800f862:	f7ff fed3 	bl	800f60c <memcpy>
 800f866:	89a3      	ldrh	r3, [r4, #12]
 800f868:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f870:	81a3      	strh	r3, [r4, #12]
 800f872:	6126      	str	r6, [r4, #16]
 800f874:	6165      	str	r5, [r4, #20]
 800f876:	444e      	add	r6, r9
 800f878:	eba5 0509 	sub.w	r5, r5, r9
 800f87c:	6026      	str	r6, [r4, #0]
 800f87e:	60a5      	str	r5, [r4, #8]
 800f880:	463e      	mov	r6, r7
 800f882:	42be      	cmp	r6, r7
 800f884:	d900      	bls.n	800f888 <__ssputs_r+0x70>
 800f886:	463e      	mov	r6, r7
 800f888:	6820      	ldr	r0, [r4, #0]
 800f88a:	4632      	mov	r2, r6
 800f88c:	4641      	mov	r1, r8
 800f88e:	f000 faab 	bl	800fde8 <memmove>
 800f892:	68a3      	ldr	r3, [r4, #8]
 800f894:	1b9b      	subs	r3, r3, r6
 800f896:	60a3      	str	r3, [r4, #8]
 800f898:	6823      	ldr	r3, [r4, #0]
 800f89a:	4433      	add	r3, r6
 800f89c:	6023      	str	r3, [r4, #0]
 800f89e:	2000      	movs	r0, #0
 800f8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8a4:	462a      	mov	r2, r5
 800f8a6:	f000 fac9 	bl	800fe3c <_realloc_r>
 800f8aa:	4606      	mov	r6, r0
 800f8ac:	2800      	cmp	r0, #0
 800f8ae:	d1e0      	bne.n	800f872 <__ssputs_r+0x5a>
 800f8b0:	6921      	ldr	r1, [r4, #16]
 800f8b2:	4650      	mov	r0, sl
 800f8b4:	f7ff feb8 	bl	800f628 <_free_r>
 800f8b8:	230c      	movs	r3, #12
 800f8ba:	f8ca 3000 	str.w	r3, [sl]
 800f8be:	89a3      	ldrh	r3, [r4, #12]
 800f8c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8c4:	81a3      	strh	r3, [r4, #12]
 800f8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f8ca:	e7e9      	b.n	800f8a0 <__ssputs_r+0x88>

0800f8cc <_svfiprintf_r>:
 800f8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d0:	4698      	mov	r8, r3
 800f8d2:	898b      	ldrh	r3, [r1, #12]
 800f8d4:	061b      	lsls	r3, r3, #24
 800f8d6:	b09d      	sub	sp, #116	; 0x74
 800f8d8:	4607      	mov	r7, r0
 800f8da:	460d      	mov	r5, r1
 800f8dc:	4614      	mov	r4, r2
 800f8de:	d50e      	bpl.n	800f8fe <_svfiprintf_r+0x32>
 800f8e0:	690b      	ldr	r3, [r1, #16]
 800f8e2:	b963      	cbnz	r3, 800f8fe <_svfiprintf_r+0x32>
 800f8e4:	2140      	movs	r1, #64	; 0x40
 800f8e6:	f7ff ff0b 	bl	800f700 <_malloc_r>
 800f8ea:	6028      	str	r0, [r5, #0]
 800f8ec:	6128      	str	r0, [r5, #16]
 800f8ee:	b920      	cbnz	r0, 800f8fa <_svfiprintf_r+0x2e>
 800f8f0:	230c      	movs	r3, #12
 800f8f2:	603b      	str	r3, [r7, #0]
 800f8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f8:	e0d0      	b.n	800fa9c <_svfiprintf_r+0x1d0>
 800f8fa:	2340      	movs	r3, #64	; 0x40
 800f8fc:	616b      	str	r3, [r5, #20]
 800f8fe:	2300      	movs	r3, #0
 800f900:	9309      	str	r3, [sp, #36]	; 0x24
 800f902:	2320      	movs	r3, #32
 800f904:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f908:	f8cd 800c 	str.w	r8, [sp, #12]
 800f90c:	2330      	movs	r3, #48	; 0x30
 800f90e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fab4 <_svfiprintf_r+0x1e8>
 800f912:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f916:	f04f 0901 	mov.w	r9, #1
 800f91a:	4623      	mov	r3, r4
 800f91c:	469a      	mov	sl, r3
 800f91e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f922:	b10a      	cbz	r2, 800f928 <_svfiprintf_r+0x5c>
 800f924:	2a25      	cmp	r2, #37	; 0x25
 800f926:	d1f9      	bne.n	800f91c <_svfiprintf_r+0x50>
 800f928:	ebba 0b04 	subs.w	fp, sl, r4
 800f92c:	d00b      	beq.n	800f946 <_svfiprintf_r+0x7a>
 800f92e:	465b      	mov	r3, fp
 800f930:	4622      	mov	r2, r4
 800f932:	4629      	mov	r1, r5
 800f934:	4638      	mov	r0, r7
 800f936:	f7ff ff6f 	bl	800f818 <__ssputs_r>
 800f93a:	3001      	adds	r0, #1
 800f93c:	f000 80a9 	beq.w	800fa92 <_svfiprintf_r+0x1c6>
 800f940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f942:	445a      	add	r2, fp
 800f944:	9209      	str	r2, [sp, #36]	; 0x24
 800f946:	f89a 3000 	ldrb.w	r3, [sl]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	f000 80a1 	beq.w	800fa92 <_svfiprintf_r+0x1c6>
 800f950:	2300      	movs	r3, #0
 800f952:	f04f 32ff 	mov.w	r2, #4294967295
 800f956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f95a:	f10a 0a01 	add.w	sl, sl, #1
 800f95e:	9304      	str	r3, [sp, #16]
 800f960:	9307      	str	r3, [sp, #28]
 800f962:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f966:	931a      	str	r3, [sp, #104]	; 0x68
 800f968:	4654      	mov	r4, sl
 800f96a:	2205      	movs	r2, #5
 800f96c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f970:	4850      	ldr	r0, [pc, #320]	; (800fab4 <_svfiprintf_r+0x1e8>)
 800f972:	f7f0 fccd 	bl	8000310 <memchr>
 800f976:	9a04      	ldr	r2, [sp, #16]
 800f978:	b9d8      	cbnz	r0, 800f9b2 <_svfiprintf_r+0xe6>
 800f97a:	06d0      	lsls	r0, r2, #27
 800f97c:	bf44      	itt	mi
 800f97e:	2320      	movmi	r3, #32
 800f980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f984:	0711      	lsls	r1, r2, #28
 800f986:	bf44      	itt	mi
 800f988:	232b      	movmi	r3, #43	; 0x2b
 800f98a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f98e:	f89a 3000 	ldrb.w	r3, [sl]
 800f992:	2b2a      	cmp	r3, #42	; 0x2a
 800f994:	d015      	beq.n	800f9c2 <_svfiprintf_r+0xf6>
 800f996:	9a07      	ldr	r2, [sp, #28]
 800f998:	4654      	mov	r4, sl
 800f99a:	2000      	movs	r0, #0
 800f99c:	f04f 0c0a 	mov.w	ip, #10
 800f9a0:	4621      	mov	r1, r4
 800f9a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9a6:	3b30      	subs	r3, #48	; 0x30
 800f9a8:	2b09      	cmp	r3, #9
 800f9aa:	d94d      	bls.n	800fa48 <_svfiprintf_r+0x17c>
 800f9ac:	b1b0      	cbz	r0, 800f9dc <_svfiprintf_r+0x110>
 800f9ae:	9207      	str	r2, [sp, #28]
 800f9b0:	e014      	b.n	800f9dc <_svfiprintf_r+0x110>
 800f9b2:	eba0 0308 	sub.w	r3, r0, r8
 800f9b6:	fa09 f303 	lsl.w	r3, r9, r3
 800f9ba:	4313      	orrs	r3, r2
 800f9bc:	9304      	str	r3, [sp, #16]
 800f9be:	46a2      	mov	sl, r4
 800f9c0:	e7d2      	b.n	800f968 <_svfiprintf_r+0x9c>
 800f9c2:	9b03      	ldr	r3, [sp, #12]
 800f9c4:	1d19      	adds	r1, r3, #4
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	9103      	str	r1, [sp, #12]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	bfbb      	ittet	lt
 800f9ce:	425b      	neglt	r3, r3
 800f9d0:	f042 0202 	orrlt.w	r2, r2, #2
 800f9d4:	9307      	strge	r3, [sp, #28]
 800f9d6:	9307      	strlt	r3, [sp, #28]
 800f9d8:	bfb8      	it	lt
 800f9da:	9204      	strlt	r2, [sp, #16]
 800f9dc:	7823      	ldrb	r3, [r4, #0]
 800f9de:	2b2e      	cmp	r3, #46	; 0x2e
 800f9e0:	d10c      	bne.n	800f9fc <_svfiprintf_r+0x130>
 800f9e2:	7863      	ldrb	r3, [r4, #1]
 800f9e4:	2b2a      	cmp	r3, #42	; 0x2a
 800f9e6:	d134      	bne.n	800fa52 <_svfiprintf_r+0x186>
 800f9e8:	9b03      	ldr	r3, [sp, #12]
 800f9ea:	1d1a      	adds	r2, r3, #4
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	9203      	str	r2, [sp, #12]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	bfb8      	it	lt
 800f9f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f9f8:	3402      	adds	r4, #2
 800f9fa:	9305      	str	r3, [sp, #20]
 800f9fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fac4 <_svfiprintf_r+0x1f8>
 800fa00:	7821      	ldrb	r1, [r4, #0]
 800fa02:	2203      	movs	r2, #3
 800fa04:	4650      	mov	r0, sl
 800fa06:	f7f0 fc83 	bl	8000310 <memchr>
 800fa0a:	b138      	cbz	r0, 800fa1c <_svfiprintf_r+0x150>
 800fa0c:	9b04      	ldr	r3, [sp, #16]
 800fa0e:	eba0 000a 	sub.w	r0, r0, sl
 800fa12:	2240      	movs	r2, #64	; 0x40
 800fa14:	4082      	lsls	r2, r0
 800fa16:	4313      	orrs	r3, r2
 800fa18:	3401      	adds	r4, #1
 800fa1a:	9304      	str	r3, [sp, #16]
 800fa1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa20:	4825      	ldr	r0, [pc, #148]	; (800fab8 <_svfiprintf_r+0x1ec>)
 800fa22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa26:	2206      	movs	r2, #6
 800fa28:	f7f0 fc72 	bl	8000310 <memchr>
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	d038      	beq.n	800faa2 <_svfiprintf_r+0x1d6>
 800fa30:	4b22      	ldr	r3, [pc, #136]	; (800fabc <_svfiprintf_r+0x1f0>)
 800fa32:	bb1b      	cbnz	r3, 800fa7c <_svfiprintf_r+0x1b0>
 800fa34:	9b03      	ldr	r3, [sp, #12]
 800fa36:	3307      	adds	r3, #7
 800fa38:	f023 0307 	bic.w	r3, r3, #7
 800fa3c:	3308      	adds	r3, #8
 800fa3e:	9303      	str	r3, [sp, #12]
 800fa40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa42:	4433      	add	r3, r6
 800fa44:	9309      	str	r3, [sp, #36]	; 0x24
 800fa46:	e768      	b.n	800f91a <_svfiprintf_r+0x4e>
 800fa48:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa4c:	460c      	mov	r4, r1
 800fa4e:	2001      	movs	r0, #1
 800fa50:	e7a6      	b.n	800f9a0 <_svfiprintf_r+0xd4>
 800fa52:	2300      	movs	r3, #0
 800fa54:	3401      	adds	r4, #1
 800fa56:	9305      	str	r3, [sp, #20]
 800fa58:	4619      	mov	r1, r3
 800fa5a:	f04f 0c0a 	mov.w	ip, #10
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa64:	3a30      	subs	r2, #48	; 0x30
 800fa66:	2a09      	cmp	r2, #9
 800fa68:	d903      	bls.n	800fa72 <_svfiprintf_r+0x1a6>
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d0c6      	beq.n	800f9fc <_svfiprintf_r+0x130>
 800fa6e:	9105      	str	r1, [sp, #20]
 800fa70:	e7c4      	b.n	800f9fc <_svfiprintf_r+0x130>
 800fa72:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa76:	4604      	mov	r4, r0
 800fa78:	2301      	movs	r3, #1
 800fa7a:	e7f0      	b.n	800fa5e <_svfiprintf_r+0x192>
 800fa7c:	ab03      	add	r3, sp, #12
 800fa7e:	9300      	str	r3, [sp, #0]
 800fa80:	462a      	mov	r2, r5
 800fa82:	4b0f      	ldr	r3, [pc, #60]	; (800fac0 <_svfiprintf_r+0x1f4>)
 800fa84:	a904      	add	r1, sp, #16
 800fa86:	4638      	mov	r0, r7
 800fa88:	f3af 8000 	nop.w
 800fa8c:	1c42      	adds	r2, r0, #1
 800fa8e:	4606      	mov	r6, r0
 800fa90:	d1d6      	bne.n	800fa40 <_svfiprintf_r+0x174>
 800fa92:	89ab      	ldrh	r3, [r5, #12]
 800fa94:	065b      	lsls	r3, r3, #25
 800fa96:	f53f af2d 	bmi.w	800f8f4 <_svfiprintf_r+0x28>
 800fa9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa9c:	b01d      	add	sp, #116	; 0x74
 800fa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa2:	ab03      	add	r3, sp, #12
 800faa4:	9300      	str	r3, [sp, #0]
 800faa6:	462a      	mov	r2, r5
 800faa8:	4b05      	ldr	r3, [pc, #20]	; (800fac0 <_svfiprintf_r+0x1f4>)
 800faaa:	a904      	add	r1, sp, #16
 800faac:	4638      	mov	r0, r7
 800faae:	f000 f879 	bl	800fba4 <_printf_i>
 800fab2:	e7eb      	b.n	800fa8c <_svfiprintf_r+0x1c0>
 800fab4:	08010aec 	.word	0x08010aec
 800fab8:	08010af6 	.word	0x08010af6
 800fabc:	00000000 	.word	0x00000000
 800fac0:	0800f819 	.word	0x0800f819
 800fac4:	08010af2 	.word	0x08010af2

0800fac8 <_printf_common>:
 800fac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800facc:	4616      	mov	r6, r2
 800face:	4699      	mov	r9, r3
 800fad0:	688a      	ldr	r2, [r1, #8]
 800fad2:	690b      	ldr	r3, [r1, #16]
 800fad4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fad8:	4293      	cmp	r3, r2
 800fada:	bfb8      	it	lt
 800fadc:	4613      	movlt	r3, r2
 800fade:	6033      	str	r3, [r6, #0]
 800fae0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fae4:	4607      	mov	r7, r0
 800fae6:	460c      	mov	r4, r1
 800fae8:	b10a      	cbz	r2, 800faee <_printf_common+0x26>
 800faea:	3301      	adds	r3, #1
 800faec:	6033      	str	r3, [r6, #0]
 800faee:	6823      	ldr	r3, [r4, #0]
 800faf0:	0699      	lsls	r1, r3, #26
 800faf2:	bf42      	ittt	mi
 800faf4:	6833      	ldrmi	r3, [r6, #0]
 800faf6:	3302      	addmi	r3, #2
 800faf8:	6033      	strmi	r3, [r6, #0]
 800fafa:	6825      	ldr	r5, [r4, #0]
 800fafc:	f015 0506 	ands.w	r5, r5, #6
 800fb00:	d106      	bne.n	800fb10 <_printf_common+0x48>
 800fb02:	f104 0a19 	add.w	sl, r4, #25
 800fb06:	68e3      	ldr	r3, [r4, #12]
 800fb08:	6832      	ldr	r2, [r6, #0]
 800fb0a:	1a9b      	subs	r3, r3, r2
 800fb0c:	42ab      	cmp	r3, r5
 800fb0e:	dc26      	bgt.n	800fb5e <_printf_common+0x96>
 800fb10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb14:	1e13      	subs	r3, r2, #0
 800fb16:	6822      	ldr	r2, [r4, #0]
 800fb18:	bf18      	it	ne
 800fb1a:	2301      	movne	r3, #1
 800fb1c:	0692      	lsls	r2, r2, #26
 800fb1e:	d42b      	bmi.n	800fb78 <_printf_common+0xb0>
 800fb20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb24:	4649      	mov	r1, r9
 800fb26:	4638      	mov	r0, r7
 800fb28:	47c0      	blx	r8
 800fb2a:	3001      	adds	r0, #1
 800fb2c:	d01e      	beq.n	800fb6c <_printf_common+0xa4>
 800fb2e:	6823      	ldr	r3, [r4, #0]
 800fb30:	6922      	ldr	r2, [r4, #16]
 800fb32:	f003 0306 	and.w	r3, r3, #6
 800fb36:	2b04      	cmp	r3, #4
 800fb38:	bf02      	ittt	eq
 800fb3a:	68e5      	ldreq	r5, [r4, #12]
 800fb3c:	6833      	ldreq	r3, [r6, #0]
 800fb3e:	1aed      	subeq	r5, r5, r3
 800fb40:	68a3      	ldr	r3, [r4, #8]
 800fb42:	bf0c      	ite	eq
 800fb44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb48:	2500      	movne	r5, #0
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	bfc4      	itt	gt
 800fb4e:	1a9b      	subgt	r3, r3, r2
 800fb50:	18ed      	addgt	r5, r5, r3
 800fb52:	2600      	movs	r6, #0
 800fb54:	341a      	adds	r4, #26
 800fb56:	42b5      	cmp	r5, r6
 800fb58:	d11a      	bne.n	800fb90 <_printf_common+0xc8>
 800fb5a:	2000      	movs	r0, #0
 800fb5c:	e008      	b.n	800fb70 <_printf_common+0xa8>
 800fb5e:	2301      	movs	r3, #1
 800fb60:	4652      	mov	r2, sl
 800fb62:	4649      	mov	r1, r9
 800fb64:	4638      	mov	r0, r7
 800fb66:	47c0      	blx	r8
 800fb68:	3001      	adds	r0, #1
 800fb6a:	d103      	bne.n	800fb74 <_printf_common+0xac>
 800fb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb74:	3501      	adds	r5, #1
 800fb76:	e7c6      	b.n	800fb06 <_printf_common+0x3e>
 800fb78:	18e1      	adds	r1, r4, r3
 800fb7a:	1c5a      	adds	r2, r3, #1
 800fb7c:	2030      	movs	r0, #48	; 0x30
 800fb7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fb82:	4422      	add	r2, r4
 800fb84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fb88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fb8c:	3302      	adds	r3, #2
 800fb8e:	e7c7      	b.n	800fb20 <_printf_common+0x58>
 800fb90:	2301      	movs	r3, #1
 800fb92:	4622      	mov	r2, r4
 800fb94:	4649      	mov	r1, r9
 800fb96:	4638      	mov	r0, r7
 800fb98:	47c0      	blx	r8
 800fb9a:	3001      	adds	r0, #1
 800fb9c:	d0e6      	beq.n	800fb6c <_printf_common+0xa4>
 800fb9e:	3601      	adds	r6, #1
 800fba0:	e7d9      	b.n	800fb56 <_printf_common+0x8e>
	...

0800fba4 <_printf_i>:
 800fba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fba8:	7e0f      	ldrb	r7, [r1, #24]
 800fbaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fbac:	2f78      	cmp	r7, #120	; 0x78
 800fbae:	4691      	mov	r9, r2
 800fbb0:	4680      	mov	r8, r0
 800fbb2:	460c      	mov	r4, r1
 800fbb4:	469a      	mov	sl, r3
 800fbb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fbba:	d807      	bhi.n	800fbcc <_printf_i+0x28>
 800fbbc:	2f62      	cmp	r7, #98	; 0x62
 800fbbe:	d80a      	bhi.n	800fbd6 <_printf_i+0x32>
 800fbc0:	2f00      	cmp	r7, #0
 800fbc2:	f000 80d4 	beq.w	800fd6e <_printf_i+0x1ca>
 800fbc6:	2f58      	cmp	r7, #88	; 0x58
 800fbc8:	f000 80c0 	beq.w	800fd4c <_printf_i+0x1a8>
 800fbcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fbd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fbd4:	e03a      	b.n	800fc4c <_printf_i+0xa8>
 800fbd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fbda:	2b15      	cmp	r3, #21
 800fbdc:	d8f6      	bhi.n	800fbcc <_printf_i+0x28>
 800fbde:	a101      	add	r1, pc, #4	; (adr r1, 800fbe4 <_printf_i+0x40>)
 800fbe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fbe4:	0800fc3d 	.word	0x0800fc3d
 800fbe8:	0800fc51 	.word	0x0800fc51
 800fbec:	0800fbcd 	.word	0x0800fbcd
 800fbf0:	0800fbcd 	.word	0x0800fbcd
 800fbf4:	0800fbcd 	.word	0x0800fbcd
 800fbf8:	0800fbcd 	.word	0x0800fbcd
 800fbfc:	0800fc51 	.word	0x0800fc51
 800fc00:	0800fbcd 	.word	0x0800fbcd
 800fc04:	0800fbcd 	.word	0x0800fbcd
 800fc08:	0800fbcd 	.word	0x0800fbcd
 800fc0c:	0800fbcd 	.word	0x0800fbcd
 800fc10:	0800fd55 	.word	0x0800fd55
 800fc14:	0800fc7d 	.word	0x0800fc7d
 800fc18:	0800fd0f 	.word	0x0800fd0f
 800fc1c:	0800fbcd 	.word	0x0800fbcd
 800fc20:	0800fbcd 	.word	0x0800fbcd
 800fc24:	0800fd77 	.word	0x0800fd77
 800fc28:	0800fbcd 	.word	0x0800fbcd
 800fc2c:	0800fc7d 	.word	0x0800fc7d
 800fc30:	0800fbcd 	.word	0x0800fbcd
 800fc34:	0800fbcd 	.word	0x0800fbcd
 800fc38:	0800fd17 	.word	0x0800fd17
 800fc3c:	682b      	ldr	r3, [r5, #0]
 800fc3e:	1d1a      	adds	r2, r3, #4
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	602a      	str	r2, [r5, #0]
 800fc44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	e09f      	b.n	800fd90 <_printf_i+0x1ec>
 800fc50:	6820      	ldr	r0, [r4, #0]
 800fc52:	682b      	ldr	r3, [r5, #0]
 800fc54:	0607      	lsls	r7, r0, #24
 800fc56:	f103 0104 	add.w	r1, r3, #4
 800fc5a:	6029      	str	r1, [r5, #0]
 800fc5c:	d501      	bpl.n	800fc62 <_printf_i+0xbe>
 800fc5e:	681e      	ldr	r6, [r3, #0]
 800fc60:	e003      	b.n	800fc6a <_printf_i+0xc6>
 800fc62:	0646      	lsls	r6, r0, #25
 800fc64:	d5fb      	bpl.n	800fc5e <_printf_i+0xba>
 800fc66:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fc6a:	2e00      	cmp	r6, #0
 800fc6c:	da03      	bge.n	800fc76 <_printf_i+0xd2>
 800fc6e:	232d      	movs	r3, #45	; 0x2d
 800fc70:	4276      	negs	r6, r6
 800fc72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc76:	485a      	ldr	r0, [pc, #360]	; (800fde0 <_printf_i+0x23c>)
 800fc78:	230a      	movs	r3, #10
 800fc7a:	e012      	b.n	800fca2 <_printf_i+0xfe>
 800fc7c:	682b      	ldr	r3, [r5, #0]
 800fc7e:	6820      	ldr	r0, [r4, #0]
 800fc80:	1d19      	adds	r1, r3, #4
 800fc82:	6029      	str	r1, [r5, #0]
 800fc84:	0605      	lsls	r5, r0, #24
 800fc86:	d501      	bpl.n	800fc8c <_printf_i+0xe8>
 800fc88:	681e      	ldr	r6, [r3, #0]
 800fc8a:	e002      	b.n	800fc92 <_printf_i+0xee>
 800fc8c:	0641      	lsls	r1, r0, #25
 800fc8e:	d5fb      	bpl.n	800fc88 <_printf_i+0xe4>
 800fc90:	881e      	ldrh	r6, [r3, #0]
 800fc92:	4853      	ldr	r0, [pc, #332]	; (800fde0 <_printf_i+0x23c>)
 800fc94:	2f6f      	cmp	r7, #111	; 0x6f
 800fc96:	bf0c      	ite	eq
 800fc98:	2308      	moveq	r3, #8
 800fc9a:	230a      	movne	r3, #10
 800fc9c:	2100      	movs	r1, #0
 800fc9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fca2:	6865      	ldr	r5, [r4, #4]
 800fca4:	60a5      	str	r5, [r4, #8]
 800fca6:	2d00      	cmp	r5, #0
 800fca8:	bfa2      	ittt	ge
 800fcaa:	6821      	ldrge	r1, [r4, #0]
 800fcac:	f021 0104 	bicge.w	r1, r1, #4
 800fcb0:	6021      	strge	r1, [r4, #0]
 800fcb2:	b90e      	cbnz	r6, 800fcb8 <_printf_i+0x114>
 800fcb4:	2d00      	cmp	r5, #0
 800fcb6:	d04b      	beq.n	800fd50 <_printf_i+0x1ac>
 800fcb8:	4615      	mov	r5, r2
 800fcba:	fbb6 f1f3 	udiv	r1, r6, r3
 800fcbe:	fb03 6711 	mls	r7, r3, r1, r6
 800fcc2:	5dc7      	ldrb	r7, [r0, r7]
 800fcc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fcc8:	4637      	mov	r7, r6
 800fcca:	42bb      	cmp	r3, r7
 800fccc:	460e      	mov	r6, r1
 800fcce:	d9f4      	bls.n	800fcba <_printf_i+0x116>
 800fcd0:	2b08      	cmp	r3, #8
 800fcd2:	d10b      	bne.n	800fcec <_printf_i+0x148>
 800fcd4:	6823      	ldr	r3, [r4, #0]
 800fcd6:	07de      	lsls	r6, r3, #31
 800fcd8:	d508      	bpl.n	800fcec <_printf_i+0x148>
 800fcda:	6923      	ldr	r3, [r4, #16]
 800fcdc:	6861      	ldr	r1, [r4, #4]
 800fcde:	4299      	cmp	r1, r3
 800fce0:	bfde      	ittt	le
 800fce2:	2330      	movle	r3, #48	; 0x30
 800fce4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fce8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fcec:	1b52      	subs	r2, r2, r5
 800fcee:	6122      	str	r2, [r4, #16]
 800fcf0:	f8cd a000 	str.w	sl, [sp]
 800fcf4:	464b      	mov	r3, r9
 800fcf6:	aa03      	add	r2, sp, #12
 800fcf8:	4621      	mov	r1, r4
 800fcfa:	4640      	mov	r0, r8
 800fcfc:	f7ff fee4 	bl	800fac8 <_printf_common>
 800fd00:	3001      	adds	r0, #1
 800fd02:	d14a      	bne.n	800fd9a <_printf_i+0x1f6>
 800fd04:	f04f 30ff 	mov.w	r0, #4294967295
 800fd08:	b004      	add	sp, #16
 800fd0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd0e:	6823      	ldr	r3, [r4, #0]
 800fd10:	f043 0320 	orr.w	r3, r3, #32
 800fd14:	6023      	str	r3, [r4, #0]
 800fd16:	4833      	ldr	r0, [pc, #204]	; (800fde4 <_printf_i+0x240>)
 800fd18:	2778      	movs	r7, #120	; 0x78
 800fd1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fd1e:	6823      	ldr	r3, [r4, #0]
 800fd20:	6829      	ldr	r1, [r5, #0]
 800fd22:	061f      	lsls	r7, r3, #24
 800fd24:	f851 6b04 	ldr.w	r6, [r1], #4
 800fd28:	d402      	bmi.n	800fd30 <_printf_i+0x18c>
 800fd2a:	065f      	lsls	r7, r3, #25
 800fd2c:	bf48      	it	mi
 800fd2e:	b2b6      	uxthmi	r6, r6
 800fd30:	07df      	lsls	r7, r3, #31
 800fd32:	bf48      	it	mi
 800fd34:	f043 0320 	orrmi.w	r3, r3, #32
 800fd38:	6029      	str	r1, [r5, #0]
 800fd3a:	bf48      	it	mi
 800fd3c:	6023      	strmi	r3, [r4, #0]
 800fd3e:	b91e      	cbnz	r6, 800fd48 <_printf_i+0x1a4>
 800fd40:	6823      	ldr	r3, [r4, #0]
 800fd42:	f023 0320 	bic.w	r3, r3, #32
 800fd46:	6023      	str	r3, [r4, #0]
 800fd48:	2310      	movs	r3, #16
 800fd4a:	e7a7      	b.n	800fc9c <_printf_i+0xf8>
 800fd4c:	4824      	ldr	r0, [pc, #144]	; (800fde0 <_printf_i+0x23c>)
 800fd4e:	e7e4      	b.n	800fd1a <_printf_i+0x176>
 800fd50:	4615      	mov	r5, r2
 800fd52:	e7bd      	b.n	800fcd0 <_printf_i+0x12c>
 800fd54:	682b      	ldr	r3, [r5, #0]
 800fd56:	6826      	ldr	r6, [r4, #0]
 800fd58:	6961      	ldr	r1, [r4, #20]
 800fd5a:	1d18      	adds	r0, r3, #4
 800fd5c:	6028      	str	r0, [r5, #0]
 800fd5e:	0635      	lsls	r5, r6, #24
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	d501      	bpl.n	800fd68 <_printf_i+0x1c4>
 800fd64:	6019      	str	r1, [r3, #0]
 800fd66:	e002      	b.n	800fd6e <_printf_i+0x1ca>
 800fd68:	0670      	lsls	r0, r6, #25
 800fd6a:	d5fb      	bpl.n	800fd64 <_printf_i+0x1c0>
 800fd6c:	8019      	strh	r1, [r3, #0]
 800fd6e:	2300      	movs	r3, #0
 800fd70:	6123      	str	r3, [r4, #16]
 800fd72:	4615      	mov	r5, r2
 800fd74:	e7bc      	b.n	800fcf0 <_printf_i+0x14c>
 800fd76:	682b      	ldr	r3, [r5, #0]
 800fd78:	1d1a      	adds	r2, r3, #4
 800fd7a:	602a      	str	r2, [r5, #0]
 800fd7c:	681d      	ldr	r5, [r3, #0]
 800fd7e:	6862      	ldr	r2, [r4, #4]
 800fd80:	2100      	movs	r1, #0
 800fd82:	4628      	mov	r0, r5
 800fd84:	f7f0 fac4 	bl	8000310 <memchr>
 800fd88:	b108      	cbz	r0, 800fd8e <_printf_i+0x1ea>
 800fd8a:	1b40      	subs	r0, r0, r5
 800fd8c:	6060      	str	r0, [r4, #4]
 800fd8e:	6863      	ldr	r3, [r4, #4]
 800fd90:	6123      	str	r3, [r4, #16]
 800fd92:	2300      	movs	r3, #0
 800fd94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd98:	e7aa      	b.n	800fcf0 <_printf_i+0x14c>
 800fd9a:	6923      	ldr	r3, [r4, #16]
 800fd9c:	462a      	mov	r2, r5
 800fd9e:	4649      	mov	r1, r9
 800fda0:	4640      	mov	r0, r8
 800fda2:	47d0      	blx	sl
 800fda4:	3001      	adds	r0, #1
 800fda6:	d0ad      	beq.n	800fd04 <_printf_i+0x160>
 800fda8:	6823      	ldr	r3, [r4, #0]
 800fdaa:	079b      	lsls	r3, r3, #30
 800fdac:	d413      	bmi.n	800fdd6 <_printf_i+0x232>
 800fdae:	68e0      	ldr	r0, [r4, #12]
 800fdb0:	9b03      	ldr	r3, [sp, #12]
 800fdb2:	4298      	cmp	r0, r3
 800fdb4:	bfb8      	it	lt
 800fdb6:	4618      	movlt	r0, r3
 800fdb8:	e7a6      	b.n	800fd08 <_printf_i+0x164>
 800fdba:	2301      	movs	r3, #1
 800fdbc:	4632      	mov	r2, r6
 800fdbe:	4649      	mov	r1, r9
 800fdc0:	4640      	mov	r0, r8
 800fdc2:	47d0      	blx	sl
 800fdc4:	3001      	adds	r0, #1
 800fdc6:	d09d      	beq.n	800fd04 <_printf_i+0x160>
 800fdc8:	3501      	adds	r5, #1
 800fdca:	68e3      	ldr	r3, [r4, #12]
 800fdcc:	9903      	ldr	r1, [sp, #12]
 800fdce:	1a5b      	subs	r3, r3, r1
 800fdd0:	42ab      	cmp	r3, r5
 800fdd2:	dcf2      	bgt.n	800fdba <_printf_i+0x216>
 800fdd4:	e7eb      	b.n	800fdae <_printf_i+0x20a>
 800fdd6:	2500      	movs	r5, #0
 800fdd8:	f104 0619 	add.w	r6, r4, #25
 800fddc:	e7f5      	b.n	800fdca <_printf_i+0x226>
 800fdde:	bf00      	nop
 800fde0:	08010afd 	.word	0x08010afd
 800fde4:	08010b0e 	.word	0x08010b0e

0800fde8 <memmove>:
 800fde8:	4288      	cmp	r0, r1
 800fdea:	b510      	push	{r4, lr}
 800fdec:	eb01 0402 	add.w	r4, r1, r2
 800fdf0:	d902      	bls.n	800fdf8 <memmove+0x10>
 800fdf2:	4284      	cmp	r4, r0
 800fdf4:	4623      	mov	r3, r4
 800fdf6:	d807      	bhi.n	800fe08 <memmove+0x20>
 800fdf8:	1e43      	subs	r3, r0, #1
 800fdfa:	42a1      	cmp	r1, r4
 800fdfc:	d008      	beq.n	800fe10 <memmove+0x28>
 800fdfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe06:	e7f8      	b.n	800fdfa <memmove+0x12>
 800fe08:	4402      	add	r2, r0
 800fe0a:	4601      	mov	r1, r0
 800fe0c:	428a      	cmp	r2, r1
 800fe0e:	d100      	bne.n	800fe12 <memmove+0x2a>
 800fe10:	bd10      	pop	{r4, pc}
 800fe12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe1a:	e7f7      	b.n	800fe0c <memmove+0x24>

0800fe1c <_sbrk_r>:
 800fe1c:	b538      	push	{r3, r4, r5, lr}
 800fe1e:	4d06      	ldr	r5, [pc, #24]	; (800fe38 <_sbrk_r+0x1c>)
 800fe20:	2300      	movs	r3, #0
 800fe22:	4604      	mov	r4, r0
 800fe24:	4608      	mov	r0, r1
 800fe26:	602b      	str	r3, [r5, #0]
 800fe28:	f7f3 fef2 	bl	8003c10 <_sbrk>
 800fe2c:	1c43      	adds	r3, r0, #1
 800fe2e:	d102      	bne.n	800fe36 <_sbrk_r+0x1a>
 800fe30:	682b      	ldr	r3, [r5, #0]
 800fe32:	b103      	cbz	r3, 800fe36 <_sbrk_r+0x1a>
 800fe34:	6023      	str	r3, [r4, #0]
 800fe36:	bd38      	pop	{r3, r4, r5, pc}
 800fe38:	24002974 	.word	0x24002974

0800fe3c <_realloc_r>:
 800fe3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe40:	4680      	mov	r8, r0
 800fe42:	4614      	mov	r4, r2
 800fe44:	460e      	mov	r6, r1
 800fe46:	b921      	cbnz	r1, 800fe52 <_realloc_r+0x16>
 800fe48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe4c:	4611      	mov	r1, r2
 800fe4e:	f7ff bc57 	b.w	800f700 <_malloc_r>
 800fe52:	b92a      	cbnz	r2, 800fe60 <_realloc_r+0x24>
 800fe54:	f7ff fbe8 	bl	800f628 <_free_r>
 800fe58:	4625      	mov	r5, r4
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe60:	f000 f81b 	bl	800fe9a <_malloc_usable_size_r>
 800fe64:	4284      	cmp	r4, r0
 800fe66:	4607      	mov	r7, r0
 800fe68:	d802      	bhi.n	800fe70 <_realloc_r+0x34>
 800fe6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe6e:	d812      	bhi.n	800fe96 <_realloc_r+0x5a>
 800fe70:	4621      	mov	r1, r4
 800fe72:	4640      	mov	r0, r8
 800fe74:	f7ff fc44 	bl	800f700 <_malloc_r>
 800fe78:	4605      	mov	r5, r0
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	d0ed      	beq.n	800fe5a <_realloc_r+0x1e>
 800fe7e:	42bc      	cmp	r4, r7
 800fe80:	4622      	mov	r2, r4
 800fe82:	4631      	mov	r1, r6
 800fe84:	bf28      	it	cs
 800fe86:	463a      	movcs	r2, r7
 800fe88:	f7ff fbc0 	bl	800f60c <memcpy>
 800fe8c:	4631      	mov	r1, r6
 800fe8e:	4640      	mov	r0, r8
 800fe90:	f7ff fbca 	bl	800f628 <_free_r>
 800fe94:	e7e1      	b.n	800fe5a <_realloc_r+0x1e>
 800fe96:	4635      	mov	r5, r6
 800fe98:	e7df      	b.n	800fe5a <_realloc_r+0x1e>

0800fe9a <_malloc_usable_size_r>:
 800fe9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe9e:	1f18      	subs	r0, r3, #4
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	bfbc      	itt	lt
 800fea4:	580b      	ldrlt	r3, [r1, r0]
 800fea6:	18c0      	addlt	r0, r0, r3
 800fea8:	4770      	bx	lr
	...

0800feac <_init>:
 800feac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feae:	bf00      	nop
 800feb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800feb2:	bc08      	pop	{r3}
 800feb4:	469e      	mov	lr, r3
 800feb6:	4770      	bx	lr

0800feb8 <_fini>:
 800feb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feba:	bf00      	nop
 800febc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800febe:	bc08      	pop	{r3}
 800fec0:	469e      	mov	lr, r3
 800fec2:	4770      	bx	lr
