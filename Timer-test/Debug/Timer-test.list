
Timer-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001007c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d00  0801034c  0801034c  0002034c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801104c  0801104c  0002104c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011054  08011054  00021054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011058  08011058  00021058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002f4  24000000  0801105c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000026ac  240002f4  08011350  000302f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240029a0  08011350  000329a0  2**0
                  ALLOC
  9 .ARM.attributes 00000034  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002a868  00000000  00000000  0003036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000823b  00000000  00000000  0005abd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002598  00000000  00000000  00062e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001bd8  00000000  00000000  000653a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00043016  00000000  00000000  00066f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00055eb6  00000000  00000000  000a9f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001611c4  00000000  00000000  000ffe4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000951c  00000000  00000000  00261010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000043  00000000  00000000  0026a52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002f4 	.word	0x240002f4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08010334 	.word	0x08010334

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002f8 	.word	0x240002f8
 800030c:	08010334 	.word	0x08010334

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <HAL_FCM_InitStatus>:
** Parameter                : None

** Return value             : None
***************************************************************************************************/
uint8_t HAL_FCM_InitStatus(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
	return FCM_FCM_DTC_InitStatus;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <HAL_FCM_InitStatus+0x14>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	24000311 	.word	0x24000311

080006c4 <HAL_FCM_ReadDTCInfo>:

** Return value             : None
***************************************************************************************************/

uint8_t HAL_FCM_ReadDTCInfo ( FCM_DTC_StatusType* FCM_ReadDTCInfo, uint16_t Size)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	807b      	strh	r3, [r7, #2]
	/* Variable Declaration */
	uint32_t Retval =  FCM_ZERO;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
	uint8_t FCM_Status = FCM_ZERO;
 80006d4:	2300      	movs	r3, #0
 80006d6:	72fb      	strb	r3, [r7, #11]
	uint16_t FCM_Index = FCM_ZERO;
 80006d8:	2300      	movs	r3, #0
 80006da:	813b      	strh	r3, [r7, #8]
	{
		/* Do Nothing */
	}
#endif
	/* Return Status */
	return FCM_Status;
 80006dc:	7afb      	ldrb	r3, [r7, #11]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <HAL_FCM_WriteDTCInfo>:
** 							: Size ->Size of data to be written

** Return value             : None
***************************************************************************************************/
void HAL_FCM_WriteDTCInfo(const FCM_DTC_StatusType *FCM_WriteDTCInfo,uint16_t Size)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	460b      	mov	r3, r1
 80006f4:	807b      	strh	r3, [r7, #2]
	else
	{
		/* Do Nothing */
	}
#endif
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <HAL_FCM_Read_Snapst_Data>:
**                            BuffLen:

** Return value             : None
***************************************************************************************************/
void HAL_FCM_Read_Snapst_Data(uint16_t FCM_DTC_Ind, uint8_t *DataBuff, uint16_t *BuffLen)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b087      	sub	sp, #28
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
 8000710:	81fb      	strh	r3, [r7, #14]
	uint16_t SnapshotDataIdx = FCM_ZERO;
 8000712:	2300      	movs	r3, #0
 8000714:	82fb      	strh	r3, [r7, #22]
	uint8_t Indx;
	uint8_t buff[3];
	
	for(Indx = FCM_ZERO; Indx < FCM_DTCSnapshotDataVar[FCM_DTC_Ind].FCM_DTCNumSnapshotSupp; Indx++)
 8000716:	2300      	movs	r3, #0
 8000718:	757b      	strb	r3, [r7, #21]
 800071a:	e05e      	b.n	80007da <HAL_FCM_Read_Snapst_Data+0xd6>
	{
		DataBuff[SnapshotDataIdx] = (uint8_t)(FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
											 FCM_DTCSnapshotDataSupp[Indx].FCM_DTCSnapShotDataID >> FCM_EIGHT);
 800071c:	89f9      	ldrh	r1, [r7, #14]
 800071e:	7d7b      	ldrb	r3, [r7, #21]
 8000720:	4837      	ldr	r0, [pc, #220]	; (8000800 <HAL_FCM_Read_Snapst_Data+0xfc>)
 8000722:	461a      	mov	r2, r3
 8000724:	0052      	lsls	r2, r2, #1
 8000726:	441a      	add	r2, r3
 8000728:	0093      	lsls	r3, r2, #2
 800072a:	461a      	mov	r2, r3
 800072c:	460b      	mov	r3, r1
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	440b      	add	r3, r1
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	4413      	add	r3, r2
 8000736:	4403      	add	r3, r0
 8000738:	3304      	adds	r3, #4
 800073a:	881b      	ldrh	r3, [r3, #0]
		DataBuff[SnapshotDataIdx] = (uint8_t)(FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	b299      	uxth	r1, r3
 8000740:	8afb      	ldrh	r3, [r7, #22]
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	4413      	add	r3, r2
 8000746:	b2ca      	uxtb	r2, r1
 8000748:	701a      	strb	r2, [r3, #0]
		DataBuff[SnapshotDataIdx + FCM_ONE] = (uint8_t)(FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
											FCM_DTCSnapshotDataSupp[Indx].FCM_DTCSnapShotDataID);
 800074a:	89f9      	ldrh	r1, [r7, #14]
 800074c:	7d7b      	ldrb	r3, [r7, #21]
 800074e:	482c      	ldr	r0, [pc, #176]	; (8000800 <HAL_FCM_Read_Snapst_Data+0xfc>)
 8000750:	461a      	mov	r2, r3
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	441a      	add	r2, r3
 8000756:	0093      	lsls	r3, r2, #2
 8000758:	461a      	mov	r2, r3
 800075a:	460b      	mov	r3, r1
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	440b      	add	r3, r1
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	4413      	add	r3, r2
 8000764:	4403      	add	r3, r0
 8000766:	3304      	adds	r3, #4
 8000768:	8819      	ldrh	r1, [r3, #0]
		DataBuff[SnapshotDataIdx + FCM_ONE] = (uint8_t)(FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
 800076a:	8afb      	ldrh	r3, [r7, #22]
 800076c:	3301      	adds	r3, #1
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	4413      	add	r3, r2
 8000772:	b2ca      	uxtb	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]
		
		//(void)readEeprom(FCM_DTCSnapshotDataVar[FCM_DTC_Ind].FCM_DTCSnapshotDataSupp[Indx].\
							FCM_DTCEEPROMDataID,(uint32_t)buff);
		memcpy(&DataBuff[SnapshotDataIdx + FCM_TWO], buff, FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
 8000776:	8afb      	ldrh	r3, [r7, #22]
 8000778:	3302      	adds	r3, #2
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	18d0      	adds	r0, r2, r3
							FCM_DTCSnapshotDataSupp[Indx].FCM_DTCSnapshotLen);
 800077e:	89f9      	ldrh	r1, [r7, #14]
 8000780:	7d7b      	ldrb	r3, [r7, #21]
 8000782:	4c1f      	ldr	r4, [pc, #124]	; (8000800 <HAL_FCM_Read_Snapst_Data+0xfc>)
 8000784:	461a      	mov	r2, r3
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	441a      	add	r2, r3
 800078a:	0093      	lsls	r3, r2, #2
 800078c:	461a      	mov	r2, r3
 800078e:	460b      	mov	r3, r1
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	440b      	add	r3, r1
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	4413      	add	r3, r2
 8000798:	4423      	add	r3, r4
 800079a:	3306      	adds	r3, #6
 800079c:	881b      	ldrh	r3, [r3, #0]
		memcpy(&DataBuff[SnapshotDataIdx + FCM_TWO], buff, FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
 800079e:	461a      	mov	r2, r3
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	f00f f975 	bl	800fa94 <memcpy>
	
		SnapshotDataIdx += (FCM_TWO + FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
							FCM_DTCSnapshotDataSupp[Indx].FCM_DTCSnapshotLen);
 80007aa:	89f9      	ldrh	r1, [r7, #14]
 80007ac:	7d7b      	ldrb	r3, [r7, #21]
 80007ae:	4814      	ldr	r0, [pc, #80]	; (8000800 <HAL_FCM_Read_Snapst_Data+0xfc>)
 80007b0:	461a      	mov	r2, r3
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	441a      	add	r2, r3
 80007b6:	0093      	lsls	r3, r2, #2
 80007b8:	461a      	mov	r2, r3
 80007ba:	460b      	mov	r3, r1
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	440b      	add	r3, r1
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	4413      	add	r3, r2
 80007c4:	4403      	add	r3, r0
 80007c6:	3306      	adds	r3, #6
 80007c8:	881a      	ldrh	r2, [r3, #0]
		SnapshotDataIdx += (FCM_TWO + FCM_DTCSnapshotDataVar[FCM_DTC_Ind].\
 80007ca:	8afb      	ldrh	r3, [r7, #22]
 80007cc:	4413      	add	r3, r2
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	3302      	adds	r3, #2
 80007d2:	82fb      	strh	r3, [r7, #22]
	for(Indx = FCM_ZERO; Indx < FCM_DTCSnapshotDataVar[FCM_DTC_Ind].FCM_DTCNumSnapshotSupp; Indx++)
 80007d4:	7d7b      	ldrb	r3, [r7, #21]
 80007d6:	3301      	adds	r3, #1
 80007d8:	757b      	strb	r3, [r7, #21]
 80007da:	7d7b      	ldrb	r3, [r7, #21]
 80007dc:	b299      	uxth	r1, r3
 80007de:	89fa      	ldrh	r2, [r7, #14]
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <HAL_FCM_Read_Snapst_Data+0xfc>)
 80007e2:	4613      	mov	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	4403      	add	r3, r0
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	4299      	cmp	r1, r3
 80007f0:	d394      	bcc.n	800071c <HAL_FCM_Read_Snapst_Data+0x18>
	}
	
	BuffLen[FCM_ZERO] = SnapshotDataIdx;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	8afa      	ldrh	r2, [r7, #22]
 80007f6:	801a      	strh	r2, [r3, #0]
}
 80007f8:	bf00      	nop
 80007fa:	371c      	adds	r7, #28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd90      	pop	{r4, r7, pc}
 8000800:	080105e8 	.word	0x080105e8

08000804 <HAL_FCM_ClearReqDTCUpdate>:
** Parameter                : FCM_ClearDTCInfo pointer

** Return value             : None
***************************************************************************************************/
void HAL_FCM_ClearReqDTCUpdate(uint16_t FCM_ReqDTCIndx, FCM_DTC_StatusType *FCM_ClearDTCInfo)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	80fb      	strh	r3, [r7, #6]
	uint16_t FCM_DTCRecData;
	
	uint16_t FCM_EEPROMID;

	/* Write the individual DTC status into NVM */
	if(FCM_ReqDTCIndx < FCM_MAXNUM_DTCS)
 8000810:	88fb      	ldrh	r3, [r7, #6]
 8000812:	2b20      	cmp	r3, #32
 8000814:	d816      	bhi.n	8000844 <HAL_FCM_ClearReqDTCUpdate+0x40>
	{
		/* Intialize the Variable */
		FCM_DTCRecData = 0xFFFF;
 8000816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081a:	81bb      	strh	r3, [r7, #12]
		FCM_EEPROMID = ((uint16_t)FCM_EEPROM_STRTDTC_DATAID + FCM_ReqDTCIndx);
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	333d      	adds	r3, #61	; 0x3d
 8000820:	817b      	strh	r3, [r7, #10]
		/* Write EEPROM to Clear DTC */
		//(void)writeEeprom(FCM_EEPROMID,(uint16_t)(sizeof(FCM_DTC_StatusType))\
							,(uint32_t)&FCM_ClearDTCInfo[FCM_ReqDTCIndx]);
							
		for(FCM_Indx = FCM_ZERO;FCM_Indx < FCM_DTCSnapshotDataVar[FCM_ReqDTCIndx].FCM_DTCNumSnapshotSupp;FCM_Indx++)
 8000822:	2300      	movs	r3, #0
 8000824:	81fb      	strh	r3, [r7, #14]
 8000826:	e002      	b.n	800082e <HAL_FCM_ClearReqDTCUpdate+0x2a>
 8000828:	89fb      	ldrh	r3, [r7, #14]
 800082a:	3301      	adds	r3, #1
 800082c:	81fb      	strh	r3, [r7, #14]
 800082e:	88fa      	ldrh	r2, [r7, #6]
 8000830:	4907      	ldr	r1, [pc, #28]	; (8000850 <HAL_FCM_ClearReqDTCUpdate+0x4c>)
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	89fa      	ldrh	r2, [r7, #14]
 8000840:	429a      	cmp	r2, r3
 8000842:	d3f1      	bcc.n	8000828 <HAL_FCM_ClearReqDTCUpdate+0x24>
	{
		/* Do Nothing */
	}
		
		
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	080105e8 	.word	0x080105e8

08000854 <HAL_FCM_ClearAllDTC>:
** Parameter                : None

** Return value             : None
***************************************************************************************************/
void HAL_FCM_ClearAllDTC(FCM_DTC_StatusType *FCM_WriteDTCInfo)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	/* Variable Declaration */

	uint16_t FCM_Index = FCM_ZERO;
 800085c:	2300      	movs	r3, #0
 800085e:	81fb      	strh	r3, [r7, #14]
	uint16_t FCM_RecIndex = FCM_ZERO;
 8000860:	2300      	movs	r3, #0
 8000862:	81bb      	strh	r3, [r7, #12]
	uint16_t FCM_DTCRecData;
	
	/* Run the Loop to write All DTC */
	for(FCM_Index = FCM_ZERO;FCM_Index < FCM_MAXNUM_DTCS;FCM_Index++)
 8000864:	2300      	movs	r3, #0
 8000866:	81fb      	strh	r3, [r7, #14]
 8000868:	e016      	b.n	8000898 <HAL_FCM_ClearAllDTC+0x44>
	{
		/* Intialize the Variable */
		FCM_DTCRecData = 0xFFFF;
 800086a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800086e:	817b      	strh	r3, [r7, #10]
		/* Write in to EEPROM */
		//(void)writeEeprom((uint16_t)(FCM_EEPROM_STRTDTC_DATAID + FCM_Index),\
				(uint16_t)(sizeof(FCM_DTC_StatusType)),(uint32_t)&FCM_WriteDTCInfo[FCM_Index]);

		for(FCM_RecIndex = FCM_ZERO;FCM_RecIndex < FCM_DTCSnapshotDataVar[FCM_Index].FCM_DTCNumSnapshotSupp;FCM_RecIndex++)
 8000870:	2300      	movs	r3, #0
 8000872:	81bb      	strh	r3, [r7, #12]
 8000874:	e002      	b.n	800087c <HAL_FCM_ClearAllDTC+0x28>
 8000876:	89bb      	ldrh	r3, [r7, #12]
 8000878:	3301      	adds	r3, #1
 800087a:	81bb      	strh	r3, [r7, #12]
 800087c:	89fa      	ldrh	r2, [r7, #14]
 800087e:	490b      	ldr	r1, [pc, #44]	; (80008ac <HAL_FCM_ClearAllDTC+0x58>)
 8000880:	4613      	mov	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	440b      	add	r3, r1
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	89ba      	ldrh	r2, [r7, #12]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3f1      	bcc.n	8000876 <HAL_FCM_ClearAllDTC+0x22>
	for(FCM_Index = FCM_ZERO;FCM_Index < FCM_MAXNUM_DTCS;FCM_Index++)
 8000892:	89fb      	ldrh	r3, [r7, #14]
 8000894:	3301      	adds	r3, #1
 8000896:	81fb      	strh	r3, [r7, #14]
 8000898:	89fb      	ldrh	r3, [r7, #14]
 800089a:	2b20      	cmp	r3, #32
 800089c:	d9e5      	bls.n	800086a <HAL_FCM_ClearAllDTC+0x16>
							,FCM_DTCSnapshotDataVar[FCM_Index].FCM_DTCSnapshotDataSupp[FCM_RecIndex].FCM_DTCSnapshotLen\
							,(uint32_t)&FCM_DTCRecData);
		}
	}

}
 800089e:	bf00      	nop
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	080105e8 	.word	0x080105e8

080008b0 <FCM_Init_DTC_Info>:
FCM_DTC_InfoType FCM_MostRecentCnfmdDTCInfo;

/*----End of Variables data to be copied to NVM---------*/

void FCM_Init_DTC_Info(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
	uint16_t DTC_Index;
	uint8_t DTC_InfoReadStat;
	
	DTC_InfoReadStat = HAL_FCM_ReadDTCInfo(&FCM_DTCInfo[FCM_ZERO],sizeof(FCM_DTCInfo));
 80008b6:	2163      	movs	r1, #99	; 0x63
 80008b8:	4842      	ldr	r0, [pc, #264]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 80008ba:	f7ff ff03 	bl	80006c4 <HAL_FCM_ReadDTCInfo>
 80008be:	4603      	mov	r3, r0
 80008c0:	717b      	strb	r3, [r7, #5]
	/* Check if the DTC Read Failure */
	if (FCM_ZERO == DTC_InfoReadStat)
 80008c2:	797b      	ldrb	r3, [r7, #5]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d16d      	bne.n	80009a4 <FCM_Init_DTC_Info+0xf4>
	{
		for (DTC_Index = FCM_ZERO; DTC_Index < FCM_MAXNUM_DTCS;DTC_Index++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	80fb      	strh	r3, [r7, #6]
 80008cc:	e063      	b.n	8000996 <FCM_Init_DTC_Info+0xe6>
		{
			/* Clear the DTC status bits according to ISO 14229-1 2013 Specification */
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.testFailed   = FCM_FALSE;
 80008ce:	88fa      	ldrh	r2, [r7, #6]
 80008d0:	493c      	ldr	r1, [pc, #240]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	18ca      	adds	r2, r1, r3
 80008da:	7853      	ldrb	r3, [r2, #1]
 80008dc:	f36f 13c7 	bfc	r3, #7, #1
 80008e0:	7053      	strb	r3, [r2, #1]
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.testFailedThisOperationCycle   = FCM_FALSE;
 80008e2:	88fa      	ldrh	r2, [r7, #6]
 80008e4:	4937      	ldr	r1, [pc, #220]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	18ca      	adds	r2, r1, r3
 80008ee:	7853      	ldrb	r3, [r2, #1]
 80008f0:	f36f 1386 	bfc	r3, #6, #1
 80008f4:	7053      	strb	r3, [r2, #1]
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.pendingDTC   = FCM_FALSE;
 80008f6:	88fa      	ldrh	r2, [r7, #6]
 80008f8:	4932      	ldr	r1, [pc, #200]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 80008fa:	4613      	mov	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4413      	add	r3, r2
 8000900:	18ca      	adds	r2, r1, r3
 8000902:	7853      	ldrb	r3, [r2, #1]
 8000904:	f36f 1345 	bfc	r3, #5, #1
 8000908:	7053      	strb	r3, [r2, #1]
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.confirmedDTC   = FCM_FALSE;
 800090a:	88fa      	ldrh	r2, [r7, #6]
 800090c:	492d      	ldr	r1, [pc, #180]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	18ca      	adds	r2, r1, r3
 8000916:	7853      	ldrb	r3, [r2, #1]
 8000918:	f36f 1304 	bfc	r3, #4, #1
 800091c:	7053      	strb	r3, [r2, #1]
		#if (FCM_TST_NOT_CMPLTD_SNC_LST_CLR_STAT_SUPT == FCM_TRUE)
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.testNotCompletedSinceLastClear = FCM_TRUE;
		#else
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.testNotCompletedSinceLastClear = FCM_FALSE;
 800091e:	88fa      	ldrh	r2, [r7, #6]
 8000920:	4928      	ldr	r1, [pc, #160]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 8000922:	4613      	mov	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	18ca      	adds	r2, r1, r3
 800092a:	7853      	ldrb	r3, [r2, #1]
 800092c:	f36f 03c3 	bfc	r3, #3, #1
 8000930:	7053      	strb	r3, [r2, #1]
		#endif
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.testFailedSinceLastClear   = FCM_FALSE;
 8000932:	88fa      	ldrh	r2, [r7, #6]
 8000934:	4923      	ldr	r1, [pc, #140]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 8000936:	4613      	mov	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	18ca      	adds	r2, r1, r3
 800093e:	7853      	ldrb	r3, [r2, #1]
 8000940:	f36f 0382 	bfc	r3, #2, #1
 8000944:	7053      	strb	r3, [r2, #1]

		#if (FCM_TST_NOT_CMPLTD_THIS_OPCYCLE_STAT_SUPT == FCM_TRUE)
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.testNotCompletedThisOperationCycle = FCM_TRUE;
 8000946:	88fa      	ldrh	r2, [r7, #6]
 8000948:	491e      	ldr	r1, [pc, #120]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	18ca      	adds	r2, r1, r3
 8000952:	7853      	ldrb	r3, [r2, #1]
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	7053      	strb	r3, [r2, #1]
		#else
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.testNotCompletedThisOperationCycle = FCM_FALSE;
		#endif
			FCM_DTCInfo[DTC_Index].FaultStatus.Signal.warningIndicatorRequested    = FCM_FALSE;
 800095a:	88fa      	ldrh	r2, [r7, #6]
 800095c:	4919      	ldr	r1, [pc, #100]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 800095e:	4613      	mov	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4413      	add	r3, r2
 8000964:	18ca      	adds	r2, r1, r3
 8000966:	7853      	ldrb	r3, [r2, #1]
 8000968:	f36f 0300 	bfc	r3, #0, #1
 800096c:	7053      	strb	r3, [r2, #1]

			FCM_DTCInfo[DTC_Index].AgingCount = FCM_ZERO;
 800096e:	88fa      	ldrh	r2, [r7, #6]
 8000970:	4914      	ldr	r1, [pc, #80]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 8000972:	4613      	mov	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	4413      	add	r3, r2
 8000978:	440b      	add	r3, r1
 800097a:	3302      	adds	r3, #2
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
			FCM_DTCInfo[DTC_Index].OccurenceCount = FCM_ZERO;
 8000980:	88fa      	ldrh	r2, [r7, #6]
 8000982:	4910      	ldr	r1, [pc, #64]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 8000984:	4613      	mov	r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	4413      	add	r3, r2
 800098a:	440b      	add	r3, r1
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
		for (DTC_Index = FCM_ZERO; DTC_Index < FCM_MAXNUM_DTCS;DTC_Index++)
 8000990:	88fb      	ldrh	r3, [r7, #6]
 8000992:	3301      	adds	r3, #1
 8000994:	80fb      	strh	r3, [r7, #6]
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	2b20      	cmp	r3, #32
 800099a:	d998      	bls.n	80008ce <FCM_Init_DTC_Info+0x1e>
		}
		
		HAL_FCM_WriteDTCInfo(&FCM_DTCInfo[FCM_ZERO], sizeof(FCM_DTCInfo));
 800099c:	2163      	movs	r1, #99	; 0x63
 800099e:	4809      	ldr	r0, [pc, #36]	; (80009c4 <FCM_Init_DTC_Info+0x114>)
 80009a0:	f7ff fea3 	bl	80006ea <HAL_FCM_WriteDTCInfo>
	{
		/* Do Nothing */
	}
	
	/* Initialization Flag set */
	FCM_FCM_DTC_InitStatus = FCM_TRUE;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <FCM_Init_DTC_Info+0x118>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	701a      	strb	r2, [r3, #0]

	/* Stop the Operation Cycle */
	FCM_UpdateOperationCycle(BODY_DTC_GROUP,FCM_OPERATION_CYCLE_STOP);
 80009aa:	2101      	movs	r1, #1
 80009ac:	2000      	movs	r0, #0
 80009ae:	f00e fcaf 	bl	800f310 <FCM_UpdateOperationCycle>
	/* Start the Operation Cycle */
	FCM_UpdateOperationCycle(BODY_DTC_GROUP,FCM_OPERATION_CYCLE_START);
 80009b2:	2100      	movs	r1, #0
 80009b4:	2000      	movs	r0, #0
 80009b6:	f00e fcab 	bl	800f310 <FCM_UpdateOperationCycle>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	24000000 	.word	0x24000000
 80009c8:	24000311 	.word	0x24000311

080009cc <FCM_GetDTCSnpShotRecdByDTCnum>:
								RespByts:			Responce bytes

** Return value             : DTC_Rec_Validity: Validiity of the request
***************************************************************************************************/
uint8_t FCM_GetDTCSnpShotRecdByDTCnum(uint32_t FCM_DTC_Number, uint8_t FCM_DTC_Rec_Num, uint8_t *Fcm_Snapshot_DataBuff, uint16_t *RespByts)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	460b      	mov	r3, r1
 80009da:	72fb      	strb	r3, [r7, #11]
	
	uint8_t DTC_Rec_Validity = FCM_FALSE;
 80009dc:	2300      	movs	r3, #0
 80009de:	77fb      	strb	r3, [r7, #31]
	uint16_t FCM_DTC_Ind;
	uint16_t BuffLen = FCM_ZERO;
 80009e0:	2300      	movs	r3, #0
 80009e2:	82bb      	strh	r3, [r7, #20]
	uint8_t *DataBuff = Fcm_Snapshot_DataBuff;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	61bb      	str	r3, [r7, #24]
	
	FCM_DTC_Ind = FCM_FindDTCIndex(FCM_DTC_Number);
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f00e fc6d 	bl	800f2c8 <FCM_FindDTCIndex>
 80009ee:	4603      	mov	r3, r0
 80009f0:	82fb      	strh	r3, [r7, #22]
	
	if((NULL_PTR != DataBuff) && (NULL_PTR != RespByts))
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d064      	beq.n	8000ac2 <FCM_GetDTCSnpShotRecdByDTCnum+0xf6>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d061      	beq.n	8000ac2 <FCM_GetDTCSnpShotRecdByDTCnum+0xf6>
	{
	
		if(FCM_DTC_Ind < FCM_MAXNUM_DTCS)
 80009fe:	8afb      	ldrh	r3, [r7, #22]
 8000a00:	2b20      	cmp	r3, #32
 8000a02:	d85e      	bhi.n	8000ac2 <FCM_GetDTCSnpShotRecdByDTCnum+0xf6>
		{
			FCM_CopyDTCStatusByDTCNumber(FCM_DTC_Number, DataBuff);
 8000a04:	69b9      	ldr	r1, [r7, #24]
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f00e fe98 	bl	800f73c <FCM_CopyDTCStatusByDTCNumber>
				
			/* Increment the Response bytes by DTC Number + Status byte */
			RespByts[FCM_ZERO] +=  FCM_FOUR;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	3304      	adds	r3, #4
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	801a      	strh	r2, [r3, #0]

			/* Move the pointer to point after the DTC status data */
			if (FCM_DTC_Rec_Num == FCM_READ_SNAPSHOT_DATA_RECORD_1)
 8000a18:	7afb      	ldrb	r3, [r7, #11]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d127      	bne.n	8000a6e <FCM_GetDTCSnpShotRecdByDTCnum+0xa2>
			{
				/* Copy the Record  number */
				DataBuff[FCM_FOUR] = FCM_READ_SNAPSHOT_DATA_RECORD_1;
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	3304      	adds	r3, #4
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]

				DataBuff[FCM_FIVE] = (uint8_t)FCM_DTCSnapshotDataVar[FCM_DTC_Ind].FCM_DTCNumSnapshotSupp;
 8000a26:	8afa      	ldrh	r2, [r7, #22]
 8000a28:	4928      	ldr	r1, [pc, #160]	; (8000acc <FCM_GetDTCSnpShotRecdByDTCnum+0x100>)
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4413      	add	r3, r2
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	440b      	add	r3, r1
 8000a34:	881a      	ldrh	r2, [r3, #0]
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	3305      	adds	r3, #5
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	701a      	strb	r2, [r3, #0]
				
				/* Update the Response Length */
				RespByts[FCM_ZERO] += FCM_TWO;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	3302      	adds	r3, #2
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	801a      	strh	r2, [r3, #0]
				
				/* Update the snapshot record here */
				HAL_FCM_Read_Snapst_Data(FCM_DTC_Ind, (&DataBuff[FCM_SIX]), &BuffLen);
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	1d99      	adds	r1, r3, #6
 8000a4e:	f107 0214 	add.w	r2, r7, #20
 8000a52:	8afb      	ldrh	r3, [r7, #22]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fe55 	bl	8000704 <HAL_FCM_Read_Snapst_Data>
				
				/* Update the Response Length */
				RespByts[FCM_ZERO] += (BuffLen);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	881a      	ldrh	r2, [r3, #0]
 8000a5e:	8abb      	ldrh	r3, [r7, #20]
 8000a60:	4413      	add	r3, r2
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	801a      	strh	r2, [r3, #0]
				
				/* DTC record is valid */
				DTC_Rec_Validity = FCM_TRUE;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	77fb      	strb	r3, [r7, #31]
 8000a6c:	e029      	b.n	8000ac2 <FCM_GetDTCSnpShotRecdByDTCnum+0xf6>
			}
			else if (FCM_DTC_Rec_Num == FCM_READ_ALL_SNAPSHOT_DATA_RECORDS)
 8000a6e:	7afb      	ldrb	r3, [r7, #11]
 8000a70:	2bff      	cmp	r3, #255	; 0xff
 8000a72:	d126      	bne.n	8000ac2 <FCM_GetDTCSnpShotRecdByDTCnum+0xf6>
			{	
				/* Copy the Record  number */
				DataBuff[FCM_FOUR] = FCM_READ_ALL_SNAPSHOT_DATA_RECORDS;
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	3304      	adds	r3, #4
 8000a78:	22ff      	movs	r2, #255	; 0xff
 8000a7a:	701a      	strb	r2, [r3, #0]

				DataBuff[FCM_FIVE] = (uint8_t)FCM_DTCSnapshotDataVar[FCM_DTC_Ind].FCM_DTCNumSnapshotSupp;
 8000a7c:	8afa      	ldrh	r2, [r7, #22]
 8000a7e:	4913      	ldr	r1, [pc, #76]	; (8000acc <FCM_GetDTCSnpShotRecdByDTCnum+0x100>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	881a      	ldrh	r2, [r3, #0]
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	3305      	adds	r3, #5
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	701a      	strb	r2, [r3, #0]
				
				/* Update the Response Length */
				RespByts[FCM_ZERO] += FCM_TWO;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	3302      	adds	r3, #2
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	801a      	strh	r2, [r3, #0]
				
				/* Update the snapshot record here */
				HAL_FCM_Read_Snapst_Data(FCM_DTC_Ind, (&DataBuff[FCM_SIX]), &BuffLen);
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	1d99      	adds	r1, r3, #6
 8000aa4:	f107 0214 	add.w	r2, r7, #20
 8000aa8:	8afb      	ldrh	r3, [r7, #22]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fe2a 	bl	8000704 <HAL_FCM_Read_Snapst_Data>
				
				/* Update the Response Length */
				RespByts[FCM_ZERO] += (BuffLen);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	881a      	ldrh	r2, [r3, #0]
 8000ab4:	8abb      	ldrh	r3, [r7, #20]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	801a      	strh	r2, [r3, #0]
				
				/* DTC record is valid */
				DTC_Rec_Validity = FCM_TRUE;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	77fb      	strb	r3, [r7, #31]
		
		/* Do nothing */
		
	}
	/* To be implemented */
	return DTC_Rec_Validity;
 8000ac2:	7ffb      	ldrb	r3, [r7, #31]
	
	
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3720      	adds	r7, #32
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	080105e8 	.word	0x080105e8

08000ad0 <FCM_ClearRequestdDTCInfo>:
** Parameter                : DTC_Number : DTC number whose status to be cleared

** Return value             : None
***************************************************************************************************/
uint8_t FCM_ClearRequestdDTCInfo (uint32_t DTC_Number, uint8_t DTC_MemorySelection)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	70fb      	strb	r3, [r7, #3]
    uint16_t    Indx;
    uint8_t RetVal = FCM_FALSE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]

    (void)DTC_MemorySelection;

    if (FCM_TRUE == HAL_FCM_InitStatus())
 8000ae0:	f7ff fde4 	bl	80006ac <HAL_FCM_InitStatus>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d172      	bne.n	8000bd0 <FCM_ClearRequestdDTCInfo+0x100>
    {
        /* Find the DTC Index */
        Indx = FCM_FindDTCIndex(DTC_Number);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f00e fbec 	bl	800f2c8 <FCM_FindDTCIndex>
 8000af0:	4603      	mov	r3, r0
 8000af2:	81bb      	strh	r3, [r7, #12]

        if (Indx < FCM_MAXNUM_DTCS)
 8000af4:	89bb      	ldrh	r3, [r7, #12]
 8000af6:	2b20      	cmp	r3, #32
 8000af8:	d868      	bhi.n	8000bcc <FCM_ClearRequestdDTCInfo+0xfc>
        {
            /* Clear the DTC status bits according to ISO 14229-1 2013 Specification */
            FCM_DTCInfo[Indx].FaultStatus.Signal.testFailed = FCM_FALSE;
 8000afa:	89ba      	ldrh	r2, [r7, #12]
 8000afc:	4937      	ldr	r1, [pc, #220]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	18ca      	adds	r2, r1, r3
 8000b06:	7853      	ldrb	r3, [r2, #1]
 8000b08:	f36f 13c7 	bfc	r3, #7, #1
 8000b0c:	7053      	strb	r3, [r2, #1]
            FCM_DTCInfo[Indx].FaultStatus.Signal.testFailedThisOperationCycle  = FCM_FALSE;
 8000b0e:	89ba      	ldrh	r2, [r7, #12]
 8000b10:	4932      	ldr	r1, [pc, #200]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b12:	4613      	mov	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4413      	add	r3, r2
 8000b18:	18ca      	adds	r2, r1, r3
 8000b1a:	7853      	ldrb	r3, [r2, #1]
 8000b1c:	f36f 1386 	bfc	r3, #6, #1
 8000b20:	7053      	strb	r3, [r2, #1]
            FCM_DTCInfo[Indx].FaultStatus.Signal.pendingDTC  = FCM_FALSE;
 8000b22:	89ba      	ldrh	r2, [r7, #12]
 8000b24:	492d      	ldr	r1, [pc, #180]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b26:	4613      	mov	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4413      	add	r3, r2
 8000b2c:	18ca      	adds	r2, r1, r3
 8000b2e:	7853      	ldrb	r3, [r2, #1]
 8000b30:	f36f 1345 	bfc	r3, #5, #1
 8000b34:	7053      	strb	r3, [r2, #1]
            FCM_DTCInfo[Indx].FaultStatus.Signal.confirmedDTC  = FCM_FALSE;
 8000b36:	89ba      	ldrh	r2, [r7, #12]
 8000b38:	4928      	ldr	r1, [pc, #160]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4413      	add	r3, r2
 8000b40:	18ca      	adds	r2, r1, r3
 8000b42:	7853      	ldrb	r3, [r2, #1]
 8000b44:	f36f 1304 	bfc	r3, #4, #1
 8000b48:	7053      	strb	r3, [r2, #1]
        #if (FCM_TST_NOT_CMPLTD_SNC_LST_CLR_STAT_SUPT == FCM_TRUE)
            FCM_DTCInfo[Indx].FaultStatus.Signal.testNotCompletedSinceLastClear  = FCM_TRUE;
        #else
            FCM_DTCInfo[Indx].FaultStatus.Signal.testNotCompletedSinceLastClear = FCM_FALSE;
 8000b4a:	89ba      	ldrh	r2, [r7, #12]
 8000b4c:	4923      	ldr	r1, [pc, #140]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b4e:	4613      	mov	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	18ca      	adds	r2, r1, r3
 8000b56:	7853      	ldrb	r3, [r2, #1]
 8000b58:	f36f 03c3 	bfc	r3, #3, #1
 8000b5c:	7053      	strb	r3, [r2, #1]
        #endif
            FCM_DTCInfo[Indx].FaultStatus.Signal.testFailedSinceLastClear = FCM_FALSE;
 8000b5e:	89ba      	ldrh	r2, [r7, #12]
 8000b60:	491e      	ldr	r1, [pc, #120]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b62:	4613      	mov	r3, r2
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	4413      	add	r3, r2
 8000b68:	18ca      	adds	r2, r1, r3
 8000b6a:	7853      	ldrb	r3, [r2, #1]
 8000b6c:	f36f 0382 	bfc	r3, #2, #1
 8000b70:	7053      	strb	r3, [r2, #1]

        #if (FCM_TST_NOT_CMPLTD_THIS_OPCYCLE_STAT_SUPT == FCM_TRUE)
            FCM_DTCInfo[Indx].FaultStatus.Signal.testNotCompletedThisOperationCycle = FCM_TRUE;
 8000b72:	89ba      	ldrh	r2, [r7, #12]
 8000b74:	4919      	ldr	r1, [pc, #100]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b76:	4613      	mov	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	18ca      	adds	r2, r1, r3
 8000b7e:	7853      	ldrb	r3, [r2, #1]
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	7053      	strb	r3, [r2, #1]
        #else
            FCM_DTCInfo[Indx].FaultStatus.Signal.testNotCompletedThisOperationCycle = FCM_FALSE;
        #endif
            FCM_DTCInfo[Indx].FaultStatus.Signal.warningIndicatorRequested = FCM_FALSE;
 8000b86:	89ba      	ldrh	r2, [r7, #12]
 8000b88:	4914      	ldr	r1, [pc, #80]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	4413      	add	r3, r2
 8000b90:	18ca      	adds	r2, r1, r3
 8000b92:	7853      	ldrb	r3, [r2, #1]
 8000b94:	f36f 0300 	bfc	r3, #0, #1
 8000b98:	7053      	strb	r3, [r2, #1]

            FCM_DTCInfo[Indx].AgingCount   = FCM_ZERO;
 8000b9a:	89ba      	ldrh	r2, [r7, #12]
 8000b9c:	490f      	ldr	r1, [pc, #60]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4413      	add	r3, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
            FCM_DTCInfo[Indx].OccurenceCount  = FCM_ZERO;
 8000bac:	89ba      	ldrh	r2, [r7, #12]
 8000bae:	490b      	ldr	r1, [pc, #44]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]

			HAL_FCM_ClearReqDTCUpdate(Indx,FCM_DTCInfo);
 8000bbc:	89bb      	ldrh	r3, [r7, #12]
 8000bbe:	4907      	ldr	r1, [pc, #28]	; (8000bdc <FCM_ClearRequestdDTCInfo+0x10c>)
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fe1f 	bl	8000804 <HAL_FCM_ClearReqDTCUpdate>
			
            RetVal = FCM_TRUE;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
 8000bca:	e001      	b.n	8000bd0 <FCM_ClearRequestdDTCInfo+0x100>
        }
        else
        {
            RetVal = FCM_FALSE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* Do nothing if FCM not init*/
    }

    return RetVal;
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000000 	.word	0x24000000

08000be0 <FCM_DTC_WriteDTCToEEPROM>:
	}

}

void FCM_DTC_WriteDTCToEEPROM(uint16_t DTC_Index, FCM_DTC_StatusType *FCM_PtrToDTCInfo)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	80fb      	strh	r3, [r7, #6]
	/* Write in to EEPROM */
	//(void)writeEeprom((uint16_t)(FCM_EEPROM_STRTDTC_DATAID + DTC_Index),\
						(uint16_t)(sizeof(FCM_DTC_StatusType)),\
						(uint32_t)&FCM_PtrToDTCInfo[DTC_Index]);
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <get_snapshot_by_DID>:

static uint16_t get_snapshot_by_DID(uint32_t did)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	uint16_t gSnapshotList;
	/* Update snapshot list and return */
    return gSnapshotList;
 8000c00:	89fb      	ldrh	r3, [r7, #14]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <ISOTP_CheckReqType>:
** Return value             : RetVal : Success or fail

** Remarks                  : None
***************************************************************************************************/
ISOTP_ReqType ISOTP_CheckReqType(uint32_t MesgID, uint8_t MesgType)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
	ISOTP_ReqType RetVal = ISOTP_PHYSICALREQ;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	73fb      	strb	r3, [r7, #15]

	if ((MesgID == ISOTP_RxPhysReqID) && (MesgType == ISOTP_RxPhysReqID_Type))
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <ISOTP_CheckReqType+0x50>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d107      	bne.n	8000c3a <ISOTP_CheckReqType+0x2a>
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <ISOTP_CheckReqType+0x54>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	78fa      	ldrb	r2, [r7, #3]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d102      	bne.n	8000c3a <ISOTP_CheckReqType+0x2a>
	{
		RetVal = ISOTP_PHYSICALREQ;
 8000c34:	2302      	movs	r3, #2
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e00b      	b.n	8000c52 <ISOTP_CheckReqType+0x42>
	}
	else if	((MesgID == ISOTP_RxFuncReqID) && (MesgType == ISOTP_RxFuncReqID_Type))
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <ISOTP_CheckReqType+0x58>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d106      	bne.n	8000c52 <ISOTP_CheckReqType+0x42>
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <ISOTP_CheckReqType+0x5c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	78fa      	ldrb	r2, [r7, #3]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d101      	bne.n	8000c52 <ISOTP_CheckReqType+0x42>
	{
		RetVal = ISOTP_FUNCTIONALREQ;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
	else
	{
		/* Do nothing */
	}

	return RetVal;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	24000348 	.word	0x24000348
 8000c64:	24000350 	.word	0x24000350
 8000c68:	2400034c 	.word	0x2400034c
 8000c6c:	24000351 	.word	0x24000351

08000c70 <ISOTP_SetRxPhysReqID>:
** Return value             : RetVal : Success or fail

** Remarks                  : None
***************************************************************************************************/
void ISOTP_SetRxPhysReqID(uint32_t MesgID, uint8_t MesgType)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	ISOTP_RxPhysReqID = MesgID;
 8000c7c:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <ISOTP_SetRxPhysReqID+0x24>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
	ISOTP_RxPhysReqID_Type = MesgType;
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <ISOTP_SetRxPhysReqID+0x28>)
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	7013      	strb	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	24000348 	.word	0x24000348
 8000c98:	24000350 	.word	0x24000350

08000c9c <ISOTP_SetRxFuncReqID>:
** Return value             : RetVal : Success or fail

** Remarks                  : None
***************************************************************************************************/
void ISOTP_SetRxFuncReqID(uint32_t MesgID, uint8_t MesgType)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
	ISOTP_RxFuncReqID = MesgID;
 8000ca8:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <ISOTP_SetRxFuncReqID+0x24>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
	ISOTP_RxFuncReqID_Type = MesgType;
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <ISOTP_SetRxFuncReqID+0x28>)
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	7013      	strb	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	2400034c 	.word	0x2400034c
 8000cc4:	24000351 	.word	0x24000351

08000cc8 <ISOTP_SetTxmesgMesgID>:
** Return value             : RetVal : Success or fail

** Remarks                  : None
***************************************************************************************************/
void ISOTP_SetTxmesgMesgID(uint32_t MesgID, uint8_t MesgType)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	70fb      	strb	r3, [r7, #3]
	ISOTP_TxMesgID = MesgID;
 8000cd4:	4a05      	ldr	r2, [pc, #20]	; (8000cec <ISOTP_SetTxmesgMesgID+0x24>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
	ISOTP_TxMesgID_Type = MesgType;
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <ISOTP_SetTxmesgMesgID+0x28>)
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	7013      	strb	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	24000340 	.word	0x24000340
 8000cf0:	24000344 	.word	0x24000344

08000cf4 <ISOTP_GetSchedPeriod>:
** Return value             : Scheduler Periodicity

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOTP_GetSchedPeriod(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
	/* return Periodicity */
	return ISOTP_PERIOD_SCHED;
 8000cf8:	2305      	movs	r3, #5
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <ISOTP_GetFCSTMIN>:
** Return value             : Flow control minimum segmentation time

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOTP_GetFCSTMIN(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
	/* return Flow control minimum segmentation time */
	return ISOTP_FCSTMIN;
 8000d08:	2314      	movs	r3, #20
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <ISOTP_GetPADVal>:
** Return value             : Padding data value 

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOTP_GetPADVal(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
	/* return Padding data value */
	return ISOTP_PADDATA_VAL;
 8000d18:	23aa      	movs	r3, #170	; 0xaa
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <ISOTP_GetFCBS>:
** Return value             : Flow control block size 

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOTP_GetFCBS(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
	/* return Flow control block size */
	return ISOTP_FCBS;
 8000d28:	2308      	movs	r3, #8
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <ISOTP_GetBUFFSIZE>:
** Return value             : buffer size 

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOTP_GetBUFFSIZE(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	/* return iso15765 buffer size */
	return ISOTP_BUFFSIZE;
 8000d38:	f640 73ff 	movw	r3, #4095	; 0xfff
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <ISOTP_STPadding>:
** Return value             : buffer size 

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOTP_STPadding(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
	/* return iso15765 buffer size */
	return ISOTP_ST_PADDING;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <ISOTP_HAL_MsgIndi>:
** Parameter isoTpConfPtr   : Pointer to TP configuration structure

** Return value             : None
*******************************************************************************/
void ISOTP_HAL_MsgIndi (ISOTP_CfgType *isoTpConfPtr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b09c      	sub	sp, #112	; 0x70
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	char buff[100]={0};
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	2260      	movs	r2, #96	; 0x60
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f00e fe5d 	bl	800fa2c <memset>
	ISOUDS_ServerMsgIndi(isoTpConfPtr->nBytes, isoTpConfPtr->tpBuff, (ISOUDS_AddrType)isoTpConfPtr->ReqType);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	8858      	ldrh	r0, [r3, #2]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	1d19      	adds	r1, r3, #4
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d80:	78db      	ldrb	r3, [r3, #3]
 8000d82:	461a      	mov	r2, r3
 8000d84:	f00a f940 	bl	800b008 <ISOUDS_ServerMsgIndi>
	sprintf(buff,"\r\n UDS received \r\n");
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	490a      	ldr	r1, [pc, #40]	; (8000db8 <ISOTP_HAL_MsgIndi+0x60>)
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f00e fe2c 	bl	800f9ec <siprintf>
	  	HAL_UART_Transmit(&debug_uart, (uint8_t *) buff, sizeof(buff), 100);
 8000d94:	f107 010c 	add.w	r1, r7, #12
 8000d98:	2364      	movs	r3, #100	; 0x64
 8000d9a:	2264      	movs	r2, #100	; 0x64
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <ISOTP_HAL_MsgIndi+0x64>)
 8000d9e:	f008 fa75 	bl	800928c <HAL_UART_Transmit>
	   	memset(buff,0,sizeof(buff));
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	2264      	movs	r2, #100	; 0x64
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f00e fe3e 	bl	800fa2c <memset>
}
 8000db0:	bf00      	nop
 8000db2:	3770      	adds	r7, #112	; 0x70
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	0801034c 	.word	0x0801034c
 8000dbc:	24001664 	.word	0x24001664

08000dc0 <ISOTP_HAL_FFIndi>:
** Parameter isoTpConfPtr   : Pointer to TP configuration structure

** Return value             : None
*******************************************************************************/
void ISOTP_HAL_FFIndi (const ISOTP_CfgType *isoTpConfPtr)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	(void)isoTpConfPtr;
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <ISOTP_HAL_Reset>:
** Return value             : None

** Remarks                  : None
***************************************************************************************************/
void ISOTP_HAL_Reset (void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <ISOTP_HAL_TimeoutInd>:
** Return value             : None

** Remarks                  : None
***************************************************************************************************/
void ISOTP_HAL_TimeoutInd (void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
	ISOUDS_ServerRst();
 8000de6:	f00a faa7 	bl	800b338 <ISOUDS_ServerRst>
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <ISOTP_HAL_CANMesgTxnReq_Stub>:
** 							: dataBuff : Pointer to the data buffer

** Return value             : None
*******************************************************************************/
void ISOTP_HAL_CANMesgTxnReq_Stub(uint32_t MsgId, uint8_t MesgType, uint8_t  DLC,const uint8_t *dataBuff)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	72fb      	strb	r3, [r7, #11]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	72bb      	strb	r3, [r7, #10]
	extern FDCAN_TxHeaderTypeDef   TxHeader1;
    (void)MesgType;



      TxHeader1.Identifier = MsgId;
 8000e02:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6013      	str	r3, [r2, #0]
      TxHeader1.IdType = MesgType;
 8000e08:	7afb      	ldrb	r3, [r7, #11]
 8000e0a:	4a1b      	ldr	r2, [pc, #108]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e0c:	6053      	str	r3, [r2, #4]
      TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
      TxHeader1.DataLength = FDCAN_DLC_BYTES_8;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e1a:	60da      	str	r2, [r3, #12]
      TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
      TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
      TxHeader1.FDFormat = FDCAN_CLASSIC_CAN;
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
      TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	61da      	str	r2, [r3, #28]
      TxHeader1.MessageMarker = 0;
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]

      for(Indx = 0; Indx < DLC; Indx++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	77fb      	strb	r3, [r7, #31]
 8000e3e:	e00b      	b.n	8000e58 <ISOTP_HAL_CANMesgTxnReq_Stub+0x68>
          {
         data8[Indx] = dataBuff[Indx];
 8000e40:	7ffb      	ldrb	r3, [r7, #31]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	441a      	add	r2, r3
 8000e46:	7ffb      	ldrb	r3, [r7, #31]
 8000e48:	7812      	ldrb	r2, [r2, #0]
 8000e4a:	3320      	adds	r3, #32
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f803 2c0c 	strb.w	r2, [r3, #-12]
      for(Indx = 0; Indx < DLC; Indx++)
 8000e52:	7ffb      	ldrb	r3, [r7, #31]
 8000e54:	3301      	adds	r3, #1
 8000e56:	77fb      	strb	r3, [r7, #31]
 8000e58:	7ffa      	ldrb	r2, [r7, #31]
 8000e5a:	7abb      	ldrb	r3, [r7, #10]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d3ef      	bcc.n	8000e40 <ISOTP_HAL_CANMesgTxnReq_Stub+0x50>
          }

   HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader1, data8);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	461a      	mov	r2, r3
 8000e66:	4904      	ldr	r1, [pc, #16]	; (8000e78 <ISOTP_HAL_CANMesgTxnReq_Stub+0x88>)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <ISOTP_HAL_CANMesgTxnReq_Stub+0x8c>)
 8000e6a:	f003 fc6e 	bl	800474a <HAL_FDCAN_AddMessageToTxFifoQ>


}
 8000e6e:	bf00      	nop
 8000e70:	3720      	adds	r7, #32
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	24001508 	.word	0x24001508
 8000e7c:	24001578 	.word	0x24001578

08000e80 <ISOUDS_ClearDTCInfoPreCondCheck>:
**
**
** Return value             : RetVal : Pre condition validity
*******************************************************************************/
uint8_t ISOUDS_ClearDTCInfoPreCondCheck(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
	uint8_t RetVal = ISOUDS_TRUE;
 8000e86:	2301      	movs	r3, #1
 8000e88:	71fb      	strb	r3, [r7, #7]

	/* Add Code to check the Pre-conditions and update RetVal accordingly */
    RetVal = HAL_ClearDTCInfoPreCondCheck();
 8000e8a:	f000 f829 	bl	8000ee0 <HAL_ClearDTCInfoPreCondCheck>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
	return RetVal;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <ISOUDS_CLearDTCInfoReq>:
** Parameters 				: DTCNumber : DTC number to be cleared
**
** Return value             : Response Value
*******************************************************************************/
uint8_t ISOUDS_CLearDTCInfoReq(uint32_t DTCNumber, uint8_t MemorySelection)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	uint8_t RespVal = ISOUDS_POSRES;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]
	

	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
	RespVal = HAL_CLearDTCInfoReq(DTCNumber, MemorySelection);
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f821 	bl	8000ef8 <HAL_CLearDTCInfoReq>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	73fb      	strb	r3, [r7, #15]

	/* Manual Code End */

	return RespVal;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <ISOUDS_CLearDTCInfoReqStat>:
** Parameters 				: DTCNumber : DTC number to be cleared
**
** Return value             : Response Value
*******************************************************************************/
uint8_t ISOUDS_CLearDTCInfoReqStat(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
	uint8_t RespVal = ISOUDS_POSRES;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	

	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
	RespVal = HAL_CLearDTCInfoReqStat();
 8000ece:	f000 f837 	bl	8000f40 <HAL_CLearDTCInfoReqStat>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]

	/* Manual Code End */

	return RespVal;
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_ClearDTCInfoPreCondCheck>:
** Parameter                : None

** Return value             : ISOUDS_TRUE or  ISOUDS_FALSE
*******************************************************************************/
uint8_t HAL_ClearDTCInfoPreCondCheck(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
	uint8_t RetVal;
	/*Verify the preconditions and return ISOUDS_TRUE of ISOUDS_FALSE*/
	RetVal = ISOUDS_TRUE;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	71fb      	strb	r3, [r7, #7]
	return RetVal;
 8000eea:	79fb      	ldrb	r3, [r7, #7]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_CLearDTCInfoReq>:
** Parameter                : DTCNumber

** Return value             : ISOUDS_POSRES or other ISOUDS macros. refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_CLearDTCInfoReq(uint32_t DTCNumber, uint8_t MemorySelection)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]

	uint8_t RespVal;
	(void)MemorySelection;
	/* User Specific Code */

	if (ISOUDS_CLRDIAG_INFO_MASK_VAL == DTCNumber)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d104      	bne.n	8000f18 <HAL_CLearDTCInfoReq+0x20>
	{
		//setWdtEn(PAL_HIGH);
		(void)FCM_ClearAllDTCInfo();
 8000f0e:	f00e fb3d 	bl	800f58c <FCM_ClearAllDTCInfo>
		//setWdtEn(PAL_LOW);
	    /* User specific implementation */
		RespVal = ISOUDS_POSRES;
 8000f12:	2300      	movs	r3, #0
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	e00e      	b.n	8000f36 <HAL_CLearDTCInfoReq+0x3e>
	}
	else
	{
		/* Clear the Requested DTC */
		RespVal = FCM_ClearRequestdDTCInfo(DTCNumber, MemorySelection);
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fdd7 	bl	8000ad0 <FCM_ClearRequestdDTCInfo>
 8000f22:	4603      	mov	r3, r0
 8000f24:	73fb      	strb	r3, [r7, #15]

		if(FCM_TRUE == RespVal)
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d102      	bne.n	8000f32 <HAL_CLearDTCInfoReq+0x3a>
		{
			/* User specific implementation */
			RespVal = ISOUDS_POSRES;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e001      	b.n	8000f36 <HAL_CLearDTCInfoReq+0x3e>
		}
		else
		{
			/* User specific implementation */
			RespVal = ISOUDS_ROOR;
 8000f32:	2331      	movs	r3, #49	; 0x31
 8000f34:	73fb      	strb	r3, [r7, #15]
		}

	}
	
	return RespVal;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_CLearDTCInfoReqStat>:
** Parameter                : None

** Return value             : ISOUDS_POSRES or other ISOUDS macros. refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_CLearDTCInfoReqStat(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
	uint8_t RespVal;
    /* User specific implementation */
	RespVal = ISOUDS_POSRES;
 8000f46:	2300      	movs	r3, #0
 8000f48:	71fb      	strb	r3, [r7, #7]
	return RespVal;
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <ISOUDS_Get_CntrlDTCSetMaxSubFun>:
** Return value             : retVal : Number of subfunctions

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_CntrlDTCSetMaxSubFun(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
	return ISOUDS_CntrlDTCSetMaxSubFun;
 8000f5c:	2302      	movs	r3, #2
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <ISOUDS_CntrlDTCSetngPreCondCheck>:
**
**
** Return value             : RetVal : Pre condition validity
*******************************************************************************/
uint8_t ISOUDS_CntrlDTCSetngPreCondCheck(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t RetVal = ISOUDS_TRUE;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	71fb      	strb	r3, [r7, #7]

	

	/* Add Code to check the Pre-conditions and update RetVal accordingly */
	RetVal = HAL_CntrlDTCSetngPreCondCheck();
 8000f72:	f000 f835 	bl	8000fe0 <HAL_CntrlDTCSetngPreCondCheck>
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]

	return RetVal;
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <ISOUDS_CntrDTCSet_ON_Cbk>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_CntrDTCSet_ON_Cbk(uint8_t DTCSettingType,const uint8_t *Data, uint16_t DataLen)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80bb      	strh	r3, [r7, #4]
	uint8_t RespVal = ISOUDS_POSRES;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
	

	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
	RespVal = HAL_CntrDTCSet_ON_Cbk(DTCSettingType, Data, DataLen);
 8000f98:	88ba      	ldrh	r2, [r7, #4]
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	6839      	ldr	r1, [r7, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f83a 	bl	8001018 <HAL_CntrDTCSet_ON_Cbk>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
	/* Manual Code End */

	return RespVal;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <ISOUDS_CntrDTCSet_OFF_Cbk>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_CntrDTCSet_OFF_Cbk(uint8_t DTCSettingType,const uint8_t *Data, uint16_t DataLen)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	6039      	str	r1, [r7, #0]
 8000fbc:	71fb      	strb	r3, [r7, #7]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	80bb      	strh	r3, [r7, #4]
	uint8_t RespVal = ISOUDS_POSRES;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]
	

	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
	RespVal = HAL_CntrDTCSet_OFF_Cbk(DTCSettingType, Data, DataLen);
 8000fc6:	88ba      	ldrh	r2, [r7, #4]
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	6839      	ldr	r1, [r7, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 f835 	bl	800103c <HAL_CntrDTCSet_OFF_Cbk>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73fb      	strb	r3, [r7, #15]

	/* Manual Code End */

	return RespVal;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_CntrlDTCSetngPreCondCheck>:
** Parameter                : None

** Return value             : ISOUDS_TRUE or ISOUDS_FALSE
*******************************************************************************/
uint8_t HAL_CntrlDTCSetngPreCondCheck(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
	uint8_t RetVal;
	/* User specific implementation*/
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8000fe6:	f000 fb7a 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d10c      	bne.n	800100a <HAL_CntrlDTCSetngPreCondCheck+0x2a>
 8000ff0:	f000 fb7d 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d107      	bne.n	800100a <HAL_CntrlDTCSetngPreCondCheck+0x2a>
 8000ffa:	f000 fb80 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b01      	cmp	r3, #1
 8001002:	d102      	bne.n	800100a <HAL_CntrlDTCSetngPreCondCheck+0x2a>
	{
		RetVal = ISOUDS_TRUE;
 8001004:	2301      	movs	r3, #1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	e001      	b.n	800100e <HAL_CntrlDTCSetngPreCondCheck+0x2e>
	}
	else
	{
		RetVal = ISOUDS_FALSE;
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]
	}
    return RetVal;
 800100e:	79fb      	ldrb	r3, [r7, #7]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_CntrDTCSet_ON_Cbk>:
** Parameter                : None

** Return value             : ISOUDS response. refer ISOUDS_Server.h file for response codes
*******************************************************************************/
uint8_t HAL_CntrDTCSet_ON_Cbk(uint8_t DTCSettingType, const uint8_t *Data, uint16_t DataLen)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	80bb      	strh	r3, [r7, #4]
	(void) DTCSettingType;
	(void) Data;

    /* User specific implementation*/

	FCM_UpdateCntrolDTCSetting(FCM_DTC_SETTING_ON);
 8001028:	2001      	movs	r0, #1
 800102a:	f00e fccf 	bl	800f9cc <FCM_UpdateCntrolDTCSetting>
	
	RespVal = ISOUDS_POSRES;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]

    return RespVal;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_CntrDTCSet_OFF_Cbk>:
** Parameter                : None

** Return value             : ISOUDS response. refer ISOUDS_Server.h file for response codes
*******************************************************************************/
uint8_t HAL_CntrDTCSet_OFF_Cbk(uint8_t DTCSettingType, const uint8_t *Data, uint16_t DataLen)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	4613      	mov	r3, r2
 800104a:	80bb      	strh	r3, [r7, #4]
#if (SYMC_SECURITY == 1)
	SYMC_UpdateSeed();
#endif

    /* User specific implementation*/
	FCM_UpdateCntrolDTCSetting(FCM_DTC_SETTING_OFF);
 800104c:	2002      	movs	r0, #2
 800104e:	f00e fcbd 	bl	800f9cc <FCM_UpdateCntrolDTCSetting>
	RespVal = ISOUDS_POSRES;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]
	
    return RespVal;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <ISOUDS_Get_ComContMaxSubFun>:
** Return value             : retVal : Number of subfunctions

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_ComContMaxSubFun(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
	return ISOUDS_ComContMaxSubFun;
 8001064:	2304      	movs	r3, #4
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <ISOUDS_CommTypeSupp>:
**
**
** Return value             : RetVal : Communication type validity
*******************************************************************************/
uint8_t ISOUDS_CommTypeSupp(uint8_t CommType)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	uint8_t RetVal = ISOUDS_TRUE;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]

	/* Check normal or Network management communication type */
	if (ISOUDS_ZERO == (CommType & ISOUDS_NWMCMANCM))
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <ISOUDS_CommTypeSupp+0x1c>
		/* Add more conditions according to requirement */
	{
		/* Neither Normal nor Network Management request */
		RetVal = ISOUDS_FALSE;
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]
	else
	{
		/* Do nothing */
	}

	return RetVal;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <ISOUDS_CommCntlPreCondCheck>:
**
**
** Return value             : RetVal : Pre condition validity
*******************************************************************************/
uint8_t ISOUDS_CommCntlPreCondCheck(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
	uint8_t RetVal = ISOUDS_TRUE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	71fb      	strb	r3, [r7, #7]

	

	/* Add Code to check the Pre-conditions and update RetVal accordingly */
	RetVal = HAL_CommCntlPreCondCheck();
 80010a4:	f000 f863 	bl	800116e <HAL_CommCntlPreCondCheck>
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]

	return RetVal;
 80010ac:	79fb      	ldrb	r3, [r7, #7]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <ISOUDS_EnblRxTx>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_EnblRxTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	603a      	str	r2, [r7, #0]
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	460b      	mov	r3, r1
 80010c4:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal = ISOUDS_POSRES;
 80010c6:	2300      	movs	r3, #0
 80010c8:	73fb      	strb	r3, [r7, #15]
	

	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
	RespVal = HAL_EnblRxTx(ControlType,CommType, Data);
 80010ca:	79b9      	ldrb	r1, [r7, #6]
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f868 	bl	80011a6 <HAL_EnblRxTx>
 80010d6:	4603      	mov	r3, r0
 80010d8:	73fb      	strb	r3, [r7, #15]

	/* Manual Code End */

	return RespVal;
 80010da:	7bfb      	ldrb	r3, [r7, #15]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <ISOUDS_EnblRxDisableTx>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_EnblRxDisableTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	603a      	str	r2, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
 80010f0:	460b      	mov	r3, r1
 80010f2:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal = ISOUDS_POSRES;
 80010f4:	2300      	movs	r3, #0
 80010f6:	73fb      	strb	r3, [r7, #15]


	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
	RespVal = HAL_EnblRxDisableTx(ControlType,CommType, Data);
 80010f8:	79b9      	ldrb	r1, [r7, #6]
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f862 	bl	80011c8 <HAL_EnblRxDisableTx>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]

	/* Manual Code End */

	return RespVal;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <ISOUDS_DisbleRxEnblTx>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_DisbleRxEnblTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	603a      	str	r2, [r7, #0]
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	460b      	mov	r3, r1
 8001120:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal = ISOUDS_POSRES;
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]


	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
	RespVal = HAL_DisbleRxEnblTx(ControlType,CommType, Data);
 8001126:	79b9      	ldrb	r1, [r7, #6]
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f85c 	bl	80011ea <HAL_DisbleRxEnblTx>
 8001132:	4603      	mov	r3, r0
 8001134:	73fb      	strb	r3, [r7, #15]

	/* Manual Code End */

	return RespVal;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <ISOUDS_DisablRxTx>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_DisablRxTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	603a      	str	r2, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	460b      	mov	r3, r1
 800114e:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal = ISOUDS_POSRES;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
	

	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
    RespVal = HAL_DisablRxTx(ControlType, CommType, Data);
 8001154:	79b9      	ldrb	r1, [r7, #6]
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f856 	bl	800120c <HAL_DisablRxTx>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]

	/* Manual Code End */

	return RespVal;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_CommCntlPreCondCheck>:
** Parameters 				: None
**
** Return value             : ISOUDS_TRUE or FALSE
*******************************************************************************/
uint8_t HAL_CommCntlPreCondCheck(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
	uint8_t RetVal;
	/* User specific implementation */
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8001174:	f000 fab3 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8001178:	4603      	mov	r3, r0
 800117a:	2b01      	cmp	r3, #1
 800117c:	d10c      	bne.n	8001198 <HAL_CommCntlPreCondCheck+0x2a>
 800117e:	f000 fab6 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 8001182:	4603      	mov	r3, r0
 8001184:	2b01      	cmp	r3, #1
 8001186:	d107      	bne.n	8001198 <HAL_CommCntlPreCondCheck+0x2a>
 8001188:	f000 fab9 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	d102      	bne.n	8001198 <HAL_CommCntlPreCondCheck+0x2a>
	{
		RetVal = ISOUDS_TRUE;
 8001192:	2301      	movs	r3, #1
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	e001      	b.n	800119c <HAL_CommCntlPreCondCheck+0x2e>
	}
	else
	{
		RetVal = ISOUDS_FALSE;
 8001198:	2300      	movs	r3, #0
 800119a:	71fb      	strb	r3, [r7, #7]
	}
	return RetVal;
 800119c:	79fb      	ldrb	r3, [r7, #7]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_EnblRxTx>:
**
** Return value             : Postive or negative response coded based on the condition.
**                            Refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_EnblRxTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b085      	sub	sp, #20
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	603a      	str	r2, [r7, #0]
 80011b0:	71fb      	strb	r3, [r7, #7]
 80011b2:	460b      	mov	r3, r1
 80011b4:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal;
    /* User specific code */
	(void)ControlType;
	(void)CommType;
	(void)Data;
	RespVal = ISOUDS_POSRES;
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]
	return RespVal;
 80011ba:	7bfb      	ldrb	r3, [r7, #15]

}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_EnblRxDisableTx>:
**
** Return value             : Postive or negative response coded based on the condition.
**                            Refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_EnblRxDisableTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	603a      	str	r2, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	460b      	mov	r3, r1
 80011d6:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal;
    /* User specific code */
	(void)ControlType;
	(void)CommType;
	(void)Data;
	RespVal = ISOUDS_POSRES;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
	return RespVal;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <HAL_DisbleRxEnblTx>:
**
** Return value             : Postive or negative response coded based on the condition.
**                            Refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_DisbleRxEnblTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b085      	sub	sp, #20
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	603a      	str	r2, [r7, #0]
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	460b      	mov	r3, r1
 80011f8:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal;
    /* User specific code */
	(void)ControlType;
	(void)CommType;
	(void)Data;
	RespVal = ISOUDS_POSRES;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]
	return RespVal;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_DisablRxTx>:
**
** Return value             : Postive or negative response coded based on the condition.
**                            Refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_DisablRxTx(uint8_t ControlType, uint8_t CommType, const uint8_t *Data)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	603a      	str	r2, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	460b      	mov	r3, r1
 800121a:	71bb      	strb	r3, [r7, #6]
	uint8_t RespVal;
    /* User specific code */
	(void)ControlType;
	(void)CommType;
	(void)Data;
	RespVal = ISOUDS_POSRES;
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
	return RespVal;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <ISOUDS_Get_DYDDCONFTABSIZE>:
** Return value             : retVal : Number of DIDs Supported

** Remarks                  : None
***************************************************************************************************/
uint16_t ISOUDS_Get_DYDDCONFTABSIZE(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
	return ISOUDS_DYDDCONFTABSIZE;
 8001232:	2302      	movs	r3, #2
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <ISOUDS_HardReset_Cbk>:
** Return value             : retVal : Response code

** Remarks                  : None
***************************************************************************************************/
static uint8_t ISOUDS_HardReset_Cbk(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
	uint8_t RespVal = ISOUDS_POSRES;
 8001244:	2300      	movs	r3, #0
 8001246:	71fb      	strb	r3, [r7, #7]
	uint8_t CondMeet;

	/* API need to be defined to check the conditions */
	CondMeet = HAL_HardReset_Cond();
 8001248:	f000 f845 	bl	80012d6 <HAL_HardReset_Cond>
 800124c:	4603      	mov	r3, r0
 800124e:	71bb      	strb	r3, [r7, #6]

	if (ISOUDS_TRUE == CondMeet)
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d106      	bne.n	8001264 <ISOUDS_HardReset_Cbk+0x26>
	{
		/* Switch session as per request */
		ISOUDS_ReqECUReset();
 8001256:	f00a f8f1 	bl	800b43c <ISOUDS_ReqECUReset>

		/* reset the required parameters during programming session transition */

		/* Reset request Accepted */
		RespVal = HAL_HardReset_Proc();
 800125a:	f000 f890 	bl	800137e <HAL_HardReset_Proc>
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
 8001262:	e001      	b.n	8001268 <ISOUDS_HardReset_Cbk+0x2a>
	}
	else
	{
		RespVal = ISOUDS_CNC;
 8001264:	2322      	movs	r3, #34	; 0x22
 8001266:	71fb      	strb	r3, [r7, #7]
	}

	return RespVal;
 8001268:	79fb      	ldrb	r3, [r7, #7]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <ISOUDS_KeyOffOnReset_Cbk>:
** Return value             : retVal : Response code

** Remarks                  : None
***************************************************************************************************/
static uint8_t ISOUDS_KeyOffOnReset_Cbk(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
	uint8_t RespVal = ISOUDS_POSRES;
 8001278:	2300      	movs	r3, #0
 800127a:	71fb      	strb	r3, [r7, #7]
	uint8_t CondMeet;

	/* API need to be defined to check the conditions */
	CondMeet = HAL_KeyOffOnReset_Cond();
 800127c:	f000 f847 	bl	800130e <HAL_KeyOffOnReset_Cond>
 8001280:	4603      	mov	r3, r0
 8001282:	71bb      	strb	r3, [r7, #6]

	if (ISOUDS_TRUE == CondMeet)
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d104      	bne.n	8001294 <ISOUDS_KeyOffOnReset_Cbk+0x22>
	{
		/* reset the required parameters during programming session transition */

		/* Reset request Accepted */
		RespVal = HAL_KeyOffOnReset_Proc();
 800128a:	f000 f884 	bl	8001396 <HAL_KeyOffOnReset_Proc>
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	e001      	b.n	8001298 <ISOUDS_KeyOffOnReset_Cbk+0x26>
	}
	else
	{
		RespVal = ISOUDS_CNC;
 8001294:	2322      	movs	r3, #34	; 0x22
 8001296:	71fb      	strb	r3, [r7, #7]
	}

	return RespVal;
 8001298:	79fb      	ldrb	r3, [r7, #7]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <ISOUDS_SoftReset_Cbk>:
** Return value             : retVal : Response code

** Remarks                  : None
***************************************************************************************************/
static uint8_t ISOUDS_SoftReset_Cbk(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
	uint8_t RespVal = ISOUDS_POSRES;
 80012a8:	2300      	movs	r3, #0
 80012aa:	71fb      	strb	r3, [r7, #7]
	uint8_t CondMeet;

	/* API need to be defined to check the conditions */
	CondMeet = HAL_SoftReset_Cond();
 80012ac:	f000 f84b 	bl	8001346 <HAL_SoftReset_Cond>
 80012b0:	4603      	mov	r3, r0
 80012b2:	71bb      	strb	r3, [r7, #6]

	if (ISOUDS_TRUE == CondMeet)
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d106      	bne.n	80012c8 <ISOUDS_SoftReset_Cbk+0x26>
	{
		/* Switch session as per request */
		ISOUDS_ReqECUReset();
 80012ba:	f00a f8bf 	bl	800b43c <ISOUDS_ReqECUReset>

		/* reset the required parameters during programming session transition */

		/* Reset request Accepted */
		RespVal = HAL_SoftReset_Proc();
 80012be:	f000 f876 	bl	80013ae <HAL_SoftReset_Proc>
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	e001      	b.n	80012cc <ISOUDS_SoftReset_Cbk+0x2a>
	}
	else
	{
		RespVal = ISOUDS_CNC;
 80012c8:	2322      	movs	r3, #34	; 0x22
 80012ca:	71fb      	strb	r3, [r7, #7]
	}

	return RespVal;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_HardReset_Cond>:
** Parameter                : None

** Return value             : ISOUDS_TRUE or ISOUDS_FALSE
***************************************************************************************************/
uint8_t HAL_HardReset_Cond(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
	uint8_t CondMeet;
	
	/*User specific implementation*/
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && \
 80012dc:	f000 f9ff 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d10c      	bne.n	8001300 <HAL_HardReset_Cond+0x2a>
 80012e6:	f000 fa02 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d107      	bne.n	8001300 <HAL_HardReset_Cond+0x2a>
																	(ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 80012f0:	f000 fa05 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 80012f4:	4603      	mov	r3, r0
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && \
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d102      	bne.n	8001300 <HAL_HardReset_Cond+0x2a>
	{
		CondMeet = ISOUDS_TRUE;
 80012fa:	2301      	movs	r3, #1
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	e001      	b.n	8001304 <HAL_HardReset_Cond+0x2e>
	}
	else
	{
		CondMeet = ISOUDS_FALSE;
 8001300:	2300      	movs	r3, #0
 8001302:	71fb      	strb	r3, [r7, #7]
	}
	
	return CondMeet;
 8001304:	79fb      	ldrb	r3, [r7, #7]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_KeyOffOnReset_Cond>:
** Parameter                : None

** Return value             : ISOUDS_TRUE or ISOUDS_FALSE
***************************************************************************************************/
uint8_t HAL_KeyOffOnReset_Cond(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
	uint8_t CondMeet;
	/*User specific implementation*/
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && \
 8001314:	f000 f9e3 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8001318:	4603      	mov	r3, r0
 800131a:	2b01      	cmp	r3, #1
 800131c:	d10c      	bne.n	8001338 <HAL_KeyOffOnReset_Cond+0x2a>
 800131e:	f000 f9e6 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 8001322:	4603      	mov	r3, r0
 8001324:	2b01      	cmp	r3, #1
 8001326:	d107      	bne.n	8001338 <HAL_KeyOffOnReset_Cond+0x2a>
																	(ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8001328:	f000 f9e9 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 800132c:	4603      	mov	r3, r0
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && \
 800132e:	2b01      	cmp	r3, #1
 8001330:	d102      	bne.n	8001338 <HAL_KeyOffOnReset_Cond+0x2a>
	{
		CondMeet = ISOUDS_TRUE;
 8001332:	2301      	movs	r3, #1
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	e001      	b.n	800133c <HAL_KeyOffOnReset_Cond+0x2e>
	}
	else
	{
		CondMeet = ISOUDS_FALSE;
 8001338:	2300      	movs	r3, #0
 800133a:	71fb      	strb	r3, [r7, #7]
	}
	return CondMeet;
 800133c:	79fb      	ldrb	r3, [r7, #7]

}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SoftReset_Cond>:
** Parameter                : None

** Return value             : ISOUDS_TRUE or ISOUDS_FALSE
***************************************************************************************************/
uint8_t HAL_SoftReset_Cond(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
	uint8_t CondMeet;
	/*User specific implementation*/
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && \
 800134c:	f000 f9c7 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8001350:	4603      	mov	r3, r0
 8001352:	2b01      	cmp	r3, #1
 8001354:	d10c      	bne.n	8001370 <HAL_SoftReset_Cond+0x2a>
 8001356:	f000 f9ca 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 800135a:	4603      	mov	r3, r0
 800135c:	2b01      	cmp	r3, #1
 800135e:	d107      	bne.n	8001370 <HAL_SoftReset_Cond+0x2a>
																	(ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8001360:	f000 f9cd 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 8001364:	4603      	mov	r3, r0
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && \
 8001366:	2b01      	cmp	r3, #1
 8001368:	d102      	bne.n	8001370 <HAL_SoftReset_Cond+0x2a>
	{
		CondMeet = ISOUDS_TRUE;
 800136a:	2301      	movs	r3, #1
 800136c:	71fb      	strb	r3, [r7, #7]
 800136e:	e001      	b.n	8001374 <HAL_SoftReset_Cond+0x2e>
	}
	else
	{
		CondMeet = ISOUDS_FALSE;
 8001370:	2300      	movs	r3, #0
 8001372:	71fb      	strb	r3, [r7, #7]
	}
	return CondMeet;
 8001374:	79fb      	ldrb	r3, [r7, #7]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_HardReset_Proc>:
** Parameter                : None

** Return value             : UDS response codes. Refer ISOUDS_Server.h for macro's
***************************************************************************************************/
uint8_t HAL_HardReset_Proc(void)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
	uint8_t RespVal;
	/*User specific implementation*/
	RespVal = ISOUDS_POSRES;
 8001384:	2300      	movs	r3, #0
 8001386:	71fb      	strb	r3, [r7, #7]
	return RespVal;
 8001388:	79fb      	ldrb	r3, [r7, #7]
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_KeyOffOnReset_Proc>:
** Parameter                : None

** Return value             : UDS response codes. Refer ISOUDS_Server.h for macro's
***************************************************************************************************/
uint8_t HAL_KeyOffOnReset_Proc(void)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
	uint8_t RespVal;
	/*User specific implementation*/
	RespVal = ISOUDS_POSRES;
 800139c:	2300      	movs	r3, #0
 800139e:	71fb      	strb	r3, [r7, #7]
	return RespVal;
 80013a0:	79fb      	ldrb	r3, [r7, #7]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <HAL_SoftReset_Proc>:
** Parameter                : None

** Return value             : UDS response codes. Refer ISOUDS_Server.h for macro's
***************************************************************************************************/
uint8_t HAL_SoftReset_Proc(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
	uint8_t RespVal;
	/*User specific implementation*/
	RespVal = ISOUDS_POSRES;
 80013b4:	2300      	movs	r3, #0
 80013b6:	71fb      	strb	r3, [r7, #7]
	return RespVal;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <ISOUDS_Get_IOContrlMaxSubFun>:
** Return value             : retVal : Number of IO control IDs Supported

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_IOContrlMaxSubFun(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
	return ISOUDS_IOContrlMaxSubFun;
 80013ca:	2304      	movs	r3, #4
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <ISOUDS_IOControlParameterSupp>:
**
**
** Return value             : RetVal : Communication type validity
*******************************************************************************/
uint8_t ISOUDS_IOControlParameterSupp(uint8_t IOcontrlParam, uint8_t RoutineIDIndex)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	460a      	mov	r2, r1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	4613      	mov	r3, r2
 80013e6:	71bb      	strb	r3, [r7, #6]
	uint8_t RetVal = ISOUDS_FALSE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]
	uint8_t Index;
	uint8_t IOParam_Found;

	IOParam_Found = ISOUDS_FALSE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	737b      	strb	r3, [r7, #13]
	for (Index = 0; (Index < ISOUDS_IOCntrlCfg_Tbl[RoutineIDIndex].NumOfIOCntrlParamSup) && (ISOUDS_FALSE == IOParam_Found); Index++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	73bb      	strb	r3, [r7, #14]
 80013f4:	e014      	b.n	8001420 <ISOUDS_IOControlParameterSupp+0x48>
	{
		if (IOcontrlParam == ISOUDS_IOCntrlCfg_Tbl[RoutineIDIndex].IOContrlParamSupp[Index])
 80013f6:	79ba      	ldrb	r2, [r7, #6]
 80013f8:	7bb9      	ldrb	r1, [r7, #14]
 80013fa:	4814      	ldr	r0, [pc, #80]	; (800144c <ISOUDS_IOControlParameterSupp+0x74>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4403      	add	r3, r0
 8001406:	440b      	add	r3, r1
 8001408:	3304      	adds	r3, #4
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	79fa      	ldrb	r2, [r7, #7]
 800140e:	429a      	cmp	r2, r3
 8001410:	d103      	bne.n	800141a <ISOUDS_IOControlParameterSupp+0x42>
		{
			/* Neither Normal nor Network Management request */
			RetVal = ISOUDS_TRUE;
 8001412:	2301      	movs	r3, #1
 8001414:	73fb      	strb	r3, [r7, #15]

			IOParam_Found = ISOUDS_TRUE;
 8001416:	2301      	movs	r3, #1
 8001418:	737b      	strb	r3, [r7, #13]
	for (Index = 0; (Index < ISOUDS_IOCntrlCfg_Tbl[RoutineIDIndex].NumOfIOCntrlParamSup) && (ISOUDS_FALSE == IOParam_Found); Index++)
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	3301      	adds	r3, #1
 800141e:	73bb      	strb	r3, [r7, #14]
 8001420:	79ba      	ldrb	r2, [r7, #6]
 8001422:	490a      	ldr	r1, [pc, #40]	; (800144c <ISOUDS_IOControlParameterSupp+0x74>)
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	3303      	adds	r3, #3
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	7bba      	ldrb	r2, [r7, #14]
 8001434:	429a      	cmp	r2, r3
 8001436:	d202      	bcs.n	800143e <ISOUDS_IOControlParameterSupp+0x66>
 8001438:	7b7b      	ldrb	r3, [r7, #13]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0db      	beq.n	80013f6 <ISOUDS_IOControlParameterSupp+0x1e>
		{
			/* Do nothing */
		}
	}

	return RetVal;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	24000184 	.word	0x24000184

08001450 <ISOUDS_IOCntrlPreCondCheck>:
**
**
** Return value             : RetVal : Pre condition validity
*******************************************************************************/
uint8_t ISOUDS_IOCntrlPreCondCheck(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
	uint8_t 	RetVal = ISOUDS_TRUE;
 8001456:	2301      	movs	r3, #1
 8001458:	71fb      	strb	r3, [r7, #7]



	/* Add Code to check the Pre-conditions and update RetVal accordingly */
	RetVal = HAL_IOCntrlPreCondCheck();
 800145a:	f000 f89a 	bl	8001592 <HAL_IOCntrlPreCondCheck>
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]

	return RetVal;
 8001462:	79fb      	ldrb	r3, [r7, #7]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <ISOUDS_IOctrlTestRtn>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_IOctrlTestRtn(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60ba      	str	r2, [r7, #8]
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4603      	mov	r3, r0
 8001478:	81fb      	strh	r3, [r7, #14]
 800147a:	460b      	mov	r3, r1
 800147c:	737b      	strb	r3, [r7, #13]
	uint8_t RespVal = ISOUDS_POSRES;
 800147e:	2300      	movs	r3, #0
 8001480:	75fb      	strb	r3, [r7, #23]
	

	/* Manual code start */

	/* Perform Operation and strore the Response code into RespVal */
    RespVal = HAL_IOctrlTestRtn(IOCntrlID, IOCntrlParam, Data, RespLenth);
 8001482:	7b79      	ldrb	r1, [r7, #13]
 8001484:	89f8      	ldrh	r0, [r7, #14]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	f000 f89e 	bl	80015ca <HAL_IOctrlTestRtn>
 800148e:	4603      	mov	r3, r0
 8001490:	75fb      	strb	r3, [r7, #23]
	/* Manual Code End */

	return RespVal;
 8001492:	7dfb      	ldrb	r3, [r7, #23]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <ISOUDS_IOctrlFrtHeatPwr>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_IOctrlFrtHeatPwr(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60ba      	str	r2, [r7, #8]
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4603      	mov	r3, r0
 80014a8:	81fb      	strh	r3, [r7, #14]
 80014aa:	460b      	mov	r3, r1
 80014ac:	737b      	strb	r3, [r7, #13]
	uint8_t RespVal = ISOUDS_POSRES;
 80014ae:	2300      	movs	r3, #0
 80014b0:	75fb      	strb	r3, [r7, #23]

	/* Manual code start */
	switch(IOCntrlParam)
 80014b2:	7b7b      	ldrb	r3, [r7, #13]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d006      	beq.n	80014c6 <ISOUDS_IOctrlFrtHeatPwr+0x2a>
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	dc06      	bgt.n	80014ca <ISOUDS_IOctrlFrtHeatPwr+0x2e>
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <ISOUDS_IOctrlFrtHeatPwr+0x32>
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d006      	beq.n	80014d2 <ISOUDS_IOctrlFrtHeatPwr+0x36>
		case ISOUDS_IOCTL_PSGHEATPWR:
			//setForcedHeatControl(SEAT_PASSENGER, Data[0]);
		break;

		default:
		break;
 80014c4:	e001      	b.n	80014ca <ISOUDS_IOctrlFrtHeatPwr+0x2e>
		break;
 80014c6:	bf00      	nop
 80014c8:	e004      	b.n	80014d4 <ISOUDS_IOctrlFrtHeatPwr+0x38>
		break;
 80014ca:	bf00      	nop
 80014cc:	e002      	b.n	80014d4 <ISOUDS_IOctrlFrtHeatPwr+0x38>
		break;
 80014ce:	bf00      	nop
 80014d0:	e000      	b.n	80014d4 <ISOUDS_IOctrlFrtHeatPwr+0x38>
		break;
 80014d2:	bf00      	nop
	}

	/* Perform Operation and store the Response code into RespVal */
    RespVal = HAL_IOctrlFrtHeatPwr(IOCntrlID, IOCntrlParam, Data, RespLenth);
 80014d4:	7b79      	ldrb	r1, [r7, #13]
 80014d6:	89f8      	ldrh	r0, [r7, #14]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f000 f887 	bl	80015ee <HAL_IOctrlFrtHeatPwr>
 80014e0:	4603      	mov	r3, r0
 80014e2:	75fb      	strb	r3, [r7, #23]
	/* Manual Code End */

	return RespVal;
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <ISOUDS_IOctrlRearHeatPwr>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_IOctrlRearHeatPwr(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60ba      	str	r2, [r7, #8]
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	4603      	mov	r3, r0
 80014fa:	81fb      	strh	r3, [r7, #14]
 80014fc:	460b      	mov	r3, r1
 80014fe:	737b      	strb	r3, [r7, #13]
	uint8_t RespVal = ISOUDS_POSRES;
 8001500:	2300      	movs	r3, #0
 8001502:	75fb      	strb	r3, [r7, #23]

	/* Manual code start */
	switch(IOCntrlParam)
 8001504:	7b7b      	ldrb	r3, [r7, #13]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d006      	beq.n	8001518 <ISOUDS_IOctrlRearHeatPwr+0x2a>
 800150a:	2b02      	cmp	r3, #2
 800150c:	dc06      	bgt.n	800151c <ISOUDS_IOctrlRearHeatPwr+0x2e>
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <ISOUDS_IOctrlRearHeatPwr+0x32>
 8001512:	2b01      	cmp	r3, #1
 8001514:	d006      	beq.n	8001524 <ISOUDS_IOctrlRearHeatPwr+0x36>
		case ISOUDS_IOCTL_RRHEATPWR:
			//setForcedHeatControl(SEAT_REAR_RIGHT, Data[0]);
		break;

		default:
		break;
 8001516:	e001      	b.n	800151c <ISOUDS_IOctrlRearHeatPwr+0x2e>
		break;
 8001518:	bf00      	nop
 800151a:	e004      	b.n	8001526 <ISOUDS_IOctrlRearHeatPwr+0x38>
		break;
 800151c:	bf00      	nop
 800151e:	e002      	b.n	8001526 <ISOUDS_IOctrlRearHeatPwr+0x38>
		break;
 8001520:	bf00      	nop
 8001522:	e000      	b.n	8001526 <ISOUDS_IOctrlRearHeatPwr+0x38>
		break;
 8001524:	bf00      	nop
	}

	/* Perform Operation and store the Response code into RespVal */
    RespVal = HAL_IOctrlRearHeatPwr(IOCntrlID, IOCntrlParam, Data, RespLenth);
 8001526:	7b79      	ldrb	r1, [r7, #13]
 8001528:	89f8      	ldrh	r0, [r7, #14]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	f000 f870 	bl	8001612 <HAL_IOctrlRearHeatPwr>
 8001532:	4603      	mov	r3, r0
 8001534:	75fb      	strb	r3, [r7, #23]
	/* Manual Code End */

	return RespVal;
 8001536:	7dfb      	ldrb	r3, [r7, #23]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <ISOUDS_IOctrlFrtVentPwr>:
**            				: CommType : Communication Type
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : None
*******************************************************************************/
static uint8_t ISOUDS_IOctrlFrtVentPwr(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60ba      	str	r2, [r7, #8]
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4603      	mov	r3, r0
 800154c:	81fb      	strh	r3, [r7, #14]
 800154e:	460b      	mov	r3, r1
 8001550:	737b      	strb	r3, [r7, #13]
	uint8_t RespVal = ISOUDS_POSRES;
 8001552:	2300      	movs	r3, #0
 8001554:	75fb      	strb	r3, [r7, #23]

	/* Manual code start */
	switch(IOCntrlParam)
 8001556:	7b7b      	ldrb	r3, [r7, #13]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d006      	beq.n	800156a <ISOUDS_IOctrlFrtVentPwr+0x2a>
 800155c:	2b02      	cmp	r3, #2
 800155e:	dc06      	bgt.n	800156e <ISOUDS_IOctrlFrtVentPwr+0x2e>
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <ISOUDS_IOctrlFrtVentPwr+0x32>
 8001564:	2b01      	cmp	r3, #1
 8001566:	d006      	beq.n	8001576 <ISOUDS_IOctrlFrtVentPwr+0x36>
		case ISOUDS_IOCTL_PSGVENTPWR:
			//setForcedVentControl(SEAT_PASSENGER, Data[0]);
		break;

		default:
		break;
 8001568:	e001      	b.n	800156e <ISOUDS_IOctrlFrtVentPwr+0x2e>
		break;
 800156a:	bf00      	nop
 800156c:	e004      	b.n	8001578 <ISOUDS_IOctrlFrtVentPwr+0x38>
		break;
 800156e:	bf00      	nop
 8001570:	e002      	b.n	8001578 <ISOUDS_IOctrlFrtVentPwr+0x38>
		break;
 8001572:	bf00      	nop
 8001574:	e000      	b.n	8001578 <ISOUDS_IOctrlFrtVentPwr+0x38>
		break;
 8001576:	bf00      	nop
	}

	/* Perform Operation and strore the Response code into RespVal */
    RespVal = HAL_IOctrlFrtVentPwr(IOCntrlID, IOCntrlParam, Data, RespLenth);
 8001578:	7b79      	ldrb	r1, [r7, #13]
 800157a:	89f8      	ldrh	r0, [r7, #14]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f000 f859 	bl	8001636 <HAL_IOctrlFrtVentPwr>
 8001584:	4603      	mov	r3, r0
 8001586:	75fb      	strb	r3, [r7, #23]
	/* Manual Code End */

	return RespVal;
 8001588:	7dfb      	ldrb	r3, [r7, #23]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_IOCntrlPreCondCheck>:
** Parameter                : None

** Return value             : ISOUDS_TRUE or ISOUDS_FALSE
*******************************************************************************/
uint8_t HAL_IOCntrlPreCondCheck(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
	uint8_t RetVal;
	/*User specific code to return true or flase*/
	if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8001598:	f000 f8a1 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800159c:	4603      	mov	r3, r0
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d10c      	bne.n	80015bc <HAL_IOCntrlPreCondCheck+0x2a>
 80015a2:	f000 f8a4 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d107      	bne.n	80015bc <HAL_IOCntrlPreCondCheck+0x2a>
 80015ac:	f000 f8a7 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d102      	bne.n	80015bc <HAL_IOCntrlPreCondCheck+0x2a>
	{
		RetVal = ISOUDS_TRUE;
 80015b6:	2301      	movs	r3, #1
 80015b8:	71fb      	strb	r3, [r7, #7]
 80015ba:	e001      	b.n	80015c0 <HAL_IOCntrlPreCondCheck+0x2e>
	}
	else
	{
		RetVal = ISOUDS_FALSE;
 80015bc:	2300      	movs	r3, #0
 80015be:	71fb      	strb	r3, [r7, #7]
	}
	return RetVal;
 80015c0:	79fb      	ldrb	r3, [r7, #7]

}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_IOctrlTestRtn>:
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : ISOUDS_POSRES based on the implemntation check status
**                            Refer ISOUDS_Server.h file UDS macro's.
*******************************************************************************/
uint8_t HAL_IOctrlTestRtn(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b087      	sub	sp, #28
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60ba      	str	r2, [r7, #8]
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	4603      	mov	r3, r0
 80015d6:	81fb      	strh	r3, [r7, #14]
 80015d8:	460b      	mov	r3, r1
 80015da:	737b      	strb	r3, [r7, #13]
	(void)*Data;
	(void)IOCntrlParam;
	(void)IOCntrlID;
    /* User specific code */

	RespVal = ISOUDS_POSRES;
 80015dc:	2300      	movs	r3, #0
 80015de:	75fb      	strb	r3, [r7, #23]
	return RespVal;
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <HAL_IOctrlFrtHeatPwr>:
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : ISOUDS_POSRES based on the implemntation check status
**                            Refer ISOUDS_Server.h file UDS macro's.
*******************************************************************************/
uint8_t HAL_IOctrlFrtHeatPwr(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b087      	sub	sp, #28
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60ba      	str	r2, [r7, #8]
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	4603      	mov	r3, r0
 80015fa:	81fb      	strh	r3, [r7, #14]
 80015fc:	460b      	mov	r3, r1
 80015fe:	737b      	strb	r3, [r7, #13]
	(void)*Data;
	(void)IOCntrlParam;
	(void)IOCntrlID;
    /* User specific code */

	RespVal = ISOUDS_POSRES;
 8001600:	2300      	movs	r3, #0
 8001602:	75fb      	strb	r3, [r7, #23]
	return RespVal;
 8001604:	7dfb      	ldrb	r3, [r7, #23]
}
 8001606:	4618      	mov	r0, r3
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_IOctrlRearHeatPwr>:
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : ISOUDS_POSRES based on the implemntation check status
**                            Refer ISOUDS_Server.h file UDS macro's.
*******************************************************************************/
uint8_t HAL_IOctrlRearHeatPwr(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 8001612:	b480      	push	{r7}
 8001614:	b087      	sub	sp, #28
 8001616:	af00      	add	r7, sp, #0
 8001618:	60ba      	str	r2, [r7, #8]
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	4603      	mov	r3, r0
 800161e:	81fb      	strh	r3, [r7, #14]
 8001620:	460b      	mov	r3, r1
 8001622:	737b      	strb	r3, [r7, #13]
	(void)*Data;
	(void)IOCntrlParam;
	(void)IOCntrlID;
    /* User specific code */

	RespVal = ISOUDS_POSRES;
 8001624:	2300      	movs	r3, #0
 8001626:	75fb      	strb	r3, [r7, #23]
	return RespVal;
 8001628:	7dfb      	ldrb	r3, [r7, #23]
}
 800162a:	4618      	mov	r0, r3
 800162c:	371c      	adds	r7, #28
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HAL_IOctrlFrtVentPwr>:
**							: Data Pointer: Point to Node Identification Number if required
** Return value             : ISOUDS_POSRES based on the implemntation check status
**                            Refer ISOUDS_Server.h file UDS macro's.
*******************************************************************************/
uint8_t HAL_IOctrlFrtVentPwr(uint16_t IOCntrlID, uint8_t IOCntrlParam, uint8_t *Data, uint16_t *RespLenth)
{
 8001636:	b480      	push	{r7}
 8001638:	b087      	sub	sp, #28
 800163a:	af00      	add	r7, sp, #0
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	4603      	mov	r3, r0
 8001642:	81fb      	strh	r3, [r7, #14]
 8001644:	460b      	mov	r3, r1
 8001646:	737b      	strb	r3, [r7, #13]
    /* User specific code */
    #if 0
    Data = 0x00; /*default balue given*/
    *RespLenth += 0x01;
    #endif
	RespVal = ISOUDS_POSRES;
 8001648:	2300      	movs	r3, #0
 800164a:	75fb      	strb	r3, [r7, #23]
	return RespVal;
 800164c:	7dfb      	ldrb	r3, [r7, #23]
}
 800164e:	4618      	mov	r0, r3
 8001650:	371c      	adds	r7, #28
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <ISOUDS_ServerSetReqCANid>:
** Parameter                : CAN ID

** Return value             : None
*******************************************************************************/
void ISOUDS_ServerSetReqCANid(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	ISOTP_SetRxPhysReqID(ISOUDS_ServerConfig_Tab[ISOUDS_PHYSICALREQ - ISOUDS_ONE].RequestID, \
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <ISOUDS_ServerSetReqCANid+0x28>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <ISOUDS_ServerSetReqCANid+0x28>)
 8001666:	7d12      	ldrb	r2, [r2, #20]
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fb00 	bl	8000c70 <ISOTP_SetRxPhysReqID>
							ISOUDS_ServerConfig_Tab[ISOUDS_PHYSICALREQ - ISOUDS_ONE].RequestIDType);
							
	ISOTP_SetRxFuncReqID(ISOUDS_ServerConfig_Tab[ISOUDS_FUNCTIONALREQ - ISOUDS_ONE].RequestID, \
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <ISOUDS_ServerSetReqCANid+0x28>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a03      	ldr	r2, [pc, #12]	; (8001684 <ISOUDS_ServerSetReqCANid+0x28>)
 8001676:	7a12      	ldrb	r2, [r2, #8]
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fb0e 	bl	8000c9c <ISOTP_SetRxFuncReqID>
						  ISOUDS_ServerConfig_Tab[ISOUDS_FUNCTIONALREQ - ISOUDS_ONE].RequestIDType);
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	240001d4 	.word	0x240001d4

08001688 <ISOUDS_ServerSetRespCANid>:
** Parameter                : CAN ID

** Return value             : None
*******************************************************************************/
void ISOUDS_ServerSetRespCANid(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	ISOTP_SetTxmesgMesgID(ISOUDS_ServerConfig_Tab[ISOUDS_PHYSICALREQ - ISOUDS_ONE].ResponseID, \
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <ISOUDS_ServerSetRespCANid+0x18>)
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <ISOUDS_ServerSetRespCANid+0x18>)
 8001692:	7d52      	ldrb	r2, [r2, #21]
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fb16 	bl	8000cc8 <ISOTP_SetTxmesgMesgID>
							ISOUDS_ServerConfig_Tab[ISOUDS_PHYSICALREQ - ISOUDS_ONE].ResponseIDType);
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	240001d4 	.word	0x240001d4

080016a4 <ISOUDS_SrvSetPrdDatByIDCANid>:
** Parameter                : CAN ID

** Return value             : None
*******************************************************************************/
void ISOUDS_SrvSetPrdDatByIDCANid(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
	/*ISOTP_SetTxmesgMesgID(ISOUDS_CAN_PERIODIC_MSG_RESP_ID, ISOUDS_CAN_PERIODIC_MSG_RESP_ID_TYPE);*/
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <ISOUDS_ServerTxRequest>:
** Parameter                : CAN ID

** Return value             : None
*******************************************************************************/
void ISOUDS_ServerTxRequest(uint16_t dataLen, const uint8_t *dataPtr)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	6039      	str	r1, [r7, #0]
 80016bc:	80fb      	strh	r3, [r7, #6]
	(void)ISOTP_TxRequest(dataLen, (uint8_t *)dataPtr);
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	6839      	ldr	r1, [r7, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f00d f866 	bl	800e794 <ISOTP_TxRequest>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <DelayedSystemSoftwareResetIndication>:
** Parameter                : None

** Return value             : None
*******************************************************************************/
void DelayedSystemSoftwareResetIndication(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
	/*ECU Reset*/
	/* Repro_Reset - ISOUDS_ZERO */

}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <ISOUDS_Get_VehicleSpeed_Check>:
** Return value             : retVal : ISOUDS_TRUE/ISOUDS_FALSE

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_VehicleSpeed_Check(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
	return ISOUDS_TRUE;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <ISOUDS_Get_EngineSpeed_Check>:
** Return value             : retVal : ISOUDS_TRUE/ISOUDS_FALSE

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_EngineSpeed_Check(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
	return ISOUDS_TRUE;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <ISOUDS_Get_Gear_Status_Check>:
** Return value             : retVal : ISOUDS_TRUE/ISOUDS_FALSE

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_Gear_Status_Check(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
	return ISOUDS_TRUE;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <ISOUDS_Get_NoOfServConfgrd>:
** Return value             : retVal : ISOUDS_TRUE/ISOUDS_FALSE

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_NoOfServConfgrd(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
	return ((uint8_t)ISOUDS_TABSIZE);
 8001712:	2312      	movs	r3, #18
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <ISOUDS_GetServerPeriodSched>:
** Return value             : Server Scheduler Period

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOUDS_GetServerPeriodSched(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
	/* return Server Scheduler Period */
	return ISOUDS_SERVER_PERIOD_SCHED;
 8001722:	2305      	movs	r3, #5
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <ISOUDS_GetTimerThresh>:
** Return value             : Timer Threshold 

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOUDS_GetTimerThresh(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
	/* return Timer Threshold */
	return ISOUDS_TMRTHRES;
 8001732:	2332      	movs	r3, #50	; 0x32
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <ISOUDS_GetServerBuffSize>:
** Return value             : Buffer Size 

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOUDS_GetServerBuffSize(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
	/* return Buffer Size */
	return ISOUDS_SERVER_BUFFSIZE;
 8001742:	f640 73ff 	movw	r3, #4095	; 0xfff
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <ISOUDS_GetSTDP2Limit>:
** Return value             :  Standard P2 Limit

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOUDS_GetSTDP2Limit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
	/* return Standard P2 Limit */
	return ISOUDS_STDP2LIM;
 8001754:	2332      	movs	r3, #50	; 0x32
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <ISOUDS_GetNRC78P2MimLim>:
** Return value             :  NRC 78 minimum limit

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOUDS_GetNRC78P2MimLim(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
	/* return NRC 78 minimum limit */
	return ISOUDS_NRC78P2MINLIM;
 8001764:	f241 1394 	movw	r3, #4500	; 0x1194
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <ISOUDS_GetNRC78P2MaxLim>:
** Return value             :  NRC 78 maximum limit

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOUDS_GetNRC78P2MaxLim(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
	/* return NRC 78 maximum limit */
	return ISOUDS_NRC78P2MAXLIM;
 8001776:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <ISOUDS_GetS3TimerLim>:
** Return value             :  Timer S3 limit

** Remarks                  : None
***************************************************************************************************/
uint32_t ISOUDS_GetS3TimerLim(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
	/* return Timer S3 limit */
	return ISOUDS_S3TMRLIM;
 8001788:	f241 3388 	movw	r3, #5000	; 0x1388
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <ISOUDS_RdDTCPreCondCheck>:
**
**
** Return value             : RetVal : Pre condition validity
*******************************************************************************/
uint8_t ISOUDS_RdDTCPreCondCheck(void)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
	uint8_t RetVal = ISOUDS_TRUE;
 800179c:	2301      	movs	r3, #1
 800179e:	71fb      	strb	r3, [r7, #7]


	/* Add Code to check the Pre-conditions and update RetVal accordingly */
	RetVal = HAL_RdDTCPreCondCheck();
 80017a0:	f000 f8a2 	bl	80018e8 <HAL_RdDTCPreCondCheck>
 80017a4:	4603      	mov	r3, r0
 80017a6:	71fb      	strb	r3, [r7, #7]

	return RetVal;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <ISOUDS_RdTDCInf_reportNumberOfDTCByStatusMask>:
** Parameters 				: RespLen : Length of data copied
**            				: Data : diagnostic Data Buffer
** Return value             : RespVal : Response Type
*******************************************************************************/
static uint8_t ISOUDS_RdTDCInf_reportNumberOfDTCByStatusMask( uint8_t *Data, uint16_t *RespLen)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
	uint8_t RespVal = ISOUDS_POSRES;
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]

	uint8_t RdDTCStatusAvailabilityMask;
	uint8_t DTCFormatIdentifier;
	uint16_t DTCCount;

	if (NULL_PTR != Data)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d026      	beq.n	8001814 <ISOUDS_RdTDCInf_reportNumberOfDTCByStatusMask+0x62>
	{
		/* Manual code start */
		/* Read DTC Status mask */
		RdDTCStatusAvailabilityMask = Data[0];
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	73bb      	strb	r3, [r7, #14]

		/* Perform Operation and strore the Response code into RespVal */
		RespVal = HAL_RdTDCInf_reportNumberOfDTCByStatusMask (&RdDTCStatusAvailabilityMask, &DTCFormatIdentifier,
 80017cc:	f107 020a 	add.w	r2, r7, #10
 80017d0:	f107 010d 	add.w	r1, r7, #13
 80017d4:	f107 030e 	add.w	r3, r7, #14
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 f891 	bl	8001900 <HAL_RdTDCInf_reportNumberOfDTCByStatusMask>
 80017de:	4603      	mov	r3, r0
 80017e0:	73fb      	strb	r3, [r7, #15]
				&DTCCount);
		Data[0] = RdDTCStatusAvailabilityMask;
 80017e2:	7bba      	ldrb	r2, [r7, #14]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	701a      	strb	r2, [r3, #0]
		Data[1] = DTCFormatIdentifier;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3301      	adds	r3, #1
 80017ec:	7b7a      	ldrb	r2, [r7, #13]
 80017ee:	701a      	strb	r2, [r3, #0]
		#if(ISOUDS_BIG_ENDIAN == ISOUDS_ENDIAN_CONFIGURATION)
			Data[2] = (uint8_t)(DTCCount);
			Data[3] = (uint8_t)(DTCCount >> 8);
		#else
			Data[2] = (uint8_t)(DTCCount);
 80017f0:	897a      	ldrh	r2, [r7, #10]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3302      	adds	r3, #2
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]
			Data[3] = (uint8_t)(DTCCount >> 8);
 80017fa:	897b      	ldrh	r3, [r7, #10]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	b29a      	uxth	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3303      	adds	r3, #3
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	701a      	strb	r2, [r3, #0]
		#endif		
		*RespLen += 4U;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	3304      	adds	r3, #4
 800180e:	b29a      	uxth	r2, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	801a      	strh	r2, [r3, #0]
		
	}
	
	/* Manual Code End */

	return RespVal;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <ISOUDS_RdTDCInf_reportDTCByStatusMask>:
** Parameters 				: RespLen : Length of data copied
**            				: Data : diagnostic Data Buffer
** Return value             : RespVal : Response Type
*******************************************************************************/
static uint8_t ISOUDS_RdTDCInf_reportDTCByStatusMask( uint8_t *Data, uint16_t *RespLen)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
	uint8_t RespVal = ISOUDS_POSRES;
 8001828:	2300      	movs	r3, #0
 800182a:	73fb      	strb	r3, [r7, #15]
	uint8_t RdDTCStatusAvailabilityMask;

	/* Manual code start */
	if (NULL_PTR != Data)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d015      	beq.n	800185e <ISOUDS_RdTDCInf_reportDTCByStatusMask+0x40>
	{
		/* Read DTC Status mask */
		RdDTCStatusAvailabilityMask = Data[0];
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	73bb      	strb	r3, [r7, #14]
		RespVal = HAL_RdTDCInf_reportDTCByStatusMask(&RdDTCStatusAvailabilityMask, &Data[1], RespLen);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	1c59      	adds	r1, r3, #1
 800183c:	f107 030e 	add.w	r3, r7, #14
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f87b 	bl	800193e <HAL_RdTDCInf_reportDTCByStatusMask>
 8001848:	4603      	mov	r3, r0
 800184a:	73fb      	strb	r3, [r7, #15]
		Data[0] = RdDTCStatusAvailabilityMask;
 800184c:	7bba      	ldrb	r2, [r7, #14]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	701a      	strb	r2, [r3, #0]
		*RespLen += 0x1U;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	3301      	adds	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	801a      	strh	r2, [r3, #0]
		/* do nothing */
		
	}
	/* Manual Code End */

	return RespVal;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <ISOUDS_RdTDCInf_reportDTCSnpshotRecordByDTCNumber>:
** Parameters 				: RespLen : Length of data copied
**            				: Data : diagnostic Data Buffer
** Return value             : RespVal : Response Type
*******************************************************************************/
static uint8_t ISOUDS_RdTDCInf_reportDTCSnpshotRecordByDTCNumber( uint8_t *Data, uint16_t *RespLen)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af02      	add	r7, sp, #8
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
	uint8_t RespVal = ISOUDS_POSRES;
 8001872:	2300      	movs	r3, #0
 8001874:	75fb      	strb	r3, [r7, #23]
	uint32_t DTCMaskRecord;
	uint8_t DTCSnapshotRecordNumber;
	uint8_t StatMask =0;
 8001876:	2300      	movs	r3, #0
 8001878:	73bb      	strb	r3, [r7, #14]

	if (NULL_PTR != Data)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01c      	beq.n	80018ba <ISOUDS_RdTDCInf_reportDTCSnpshotRecordByDTCNumber+0x52>
	{
		#if(ISOUDS_LITTLE_ENDIAN == ISOUDS_ENDIAN_CONFIGURATION)
			
			DTCMaskRecord = ((uint32_t)(((uint32_t)Data[0]) << 16) + ((uint32_t)Data[1] << 8) + (uint32_t)Data[2]);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	041a      	lsls	r2, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3301      	adds	r3, #1
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	4413      	add	r3, r2
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	3202      	adds	r2, #2
 8001894:	7812      	ldrb	r2, [r2, #0]
 8001896:	4413      	add	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
		#else
			DTCMaskRecord = ((uint32_t)((uint32_t)Data[0]) + ((uint32_t)Data[1] << 8) + ((uint32_t)Data[2] << 16));
		#endif
		
		DTCSnapshotRecordNumber = Data[3];
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	78db      	ldrb	r3, [r3, #3]
 800189e:	73fb      	strb	r3, [r7, #15]

		/* Manual code start */
		RespVal = HAL_RdTDCInf_reportDTCSnapshotRecordByDTCNumber(&DTCMaskRecord,&DTCSnapshotRecordNumber,&StatMask, &Data[0], RespLen);
 80018a0:	f107 020e 	add.w	r2, r7, #14
 80018a4:	f107 010f 	add.w	r1, r7, #15
 80018a8:	f107 0010 	add.w	r0, r7, #16
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f000 f865 	bl	8001980 <HAL_RdTDCInf_reportDTCSnapshotRecordByDTCNumber>
 80018b6:	4603      	mov	r3, r0
 80018b8:	75fb      	strb	r3, [r7, #23]
		
		
	}
	/* Manual Code End */

	return RespVal;
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <ISOUDS_RdTDCInf_reportSupportedDTC>:
** Parameters 				: RespLen : Length of data copied
**            				: Data : diagnostic Data Buffer
** Return value             : RespVal : Response Type
*******************************************************************************/
static uint8_t ISOUDS_RdTDCInf_reportSupportedDTC( uint8_t *Data, uint16_t *RespLen)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
	uint8_t RespVal = ISOUDS_POSRES;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]

	/* Manual code start */
	RespVal = HAL_RdTDCInf_reportSupportedDTC( Data, RespLen);
 80018d2:	6839      	ldr	r1, [r7, #0]
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f873 	bl	80019c0 <HAL_RdTDCInf_reportSupportedDTC>
 80018da:	4603      	mov	r3, r0
 80018dc:	73fb      	strb	r3, [r7, #15]
	/* Manual Code End */

	return RespVal;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_RdDTCPreCondCheck>:
** Parameter                : None

** Return value             : ISOUDS_TRUE or ISOUDS_FALSE
*******************************************************************************/
uint8_t HAL_RdDTCPreCondCheck(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
	uint8_t RetVal;
	/*User specific implementation*/
	RetVal = ISOUDS_TRUE;
 80018ee:	2301      	movs	r3, #1
 80018f0:	71fb      	strb	r3, [r7, #7]
	return RetVal;
 80018f2:	79fb      	ldrb	r3, [r7, #7]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_RdTDCInf_reportNumberOfDTCByStatusMask>:
** Parameters 				: RespLen : Length of data copied
**            				: dataBuff : diagnostic Data Buffer
** Return value             : RespVal : Response Type. refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_RdTDCInf_reportNumberOfDTCByStatusMask(uint8_t *RdDTCStatusAvailabilityMask, uint8_t *DTCFormatIdentifier,uint16_t *DTCCount)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
	uint8_t RespVal;

	RespVal = ISOUDS_POSRES;
 800190c:	2300      	movs	r3, #0
 800190e:	75fb      	strb	r3, [r7, #23]
    /*User specific implementation*/

	*DTCCount = FCM_ReportNoOfDTCByStatusMask(*RdDTCStatusAvailabilityMask & FCM_SUPPORTED_DTC_STATUS_BITS);/*DTCCount*/
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8001918:	b2db      	uxtb	r3, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f00d ff5a 	bl	800f7d4 <FCM_ReportNoOfDTCByStatusMask>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	801a      	strh	r2, [r3, #0]
	*RdDTCStatusAvailabilityMask = FCM_SUPPORTED_DTC_STATUS_BITS;/*DTCStatusAvailabilityMask*/
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	226f      	movs	r2, #111	; 0x6f
 800192c:	701a      	strb	r2, [r3, #0]
	*DTCFormatIdentifier = 0x01;/*DTCFormatIdentifier*/
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]

	return RespVal;
 8001934:	7dfb      	ldrb	r3, [r7, #23]

}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_RdTDCInf_reportDTCByStatusMask>:
** Parameters 				: RespLen : Length of data copied
**            				: dataBuff : diagnostic Data Buffer
** Return value             : RespVal : Response Type. refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_RdTDCInf_reportDTCByStatusMask(uint8_t *RdDTCStatusAvailabilityMask, uint8_t *Data, uint16_t *RespLen)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
	uint8_t RespVal;
	RespVal = ISOUDS_POSRES;
 800194a:	2300      	movs	r3, #0
 800194c:	75fb      	strb	r3, [r7, #23]
	
	/*User specific code*/
	*RespLen += FCM_ReportDTCByStatusMask(*RdDTCStatusAvailabilityMask & FCM_SUPPORTED_DTC_STATUS_BITS, Data);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8001956:	b2db      	uxtb	r3, r3
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	4618      	mov	r0, r3
 800195c:	f00d ff66 	bl	800f82c <FCM_ReportDTCByStatusMask>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	4413      	add	r3, r2
 800196a:	b29a      	uxth	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	801a      	strh	r2, [r3, #0]
	
	*RdDTCStatusAvailabilityMask = FCM_SUPPORTED_DTC_STATUS_BITS;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	226f      	movs	r2, #111	; 0x6f
 8001974:	701a      	strb	r2, [r3, #0]

	return RespVal;
 8001976:	7dfb      	ldrb	r3, [r7, #23]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_RdTDCInf_reportDTCSnapshotRecordByDTCNumber>:
** Parameters 				: RespLen : Length of data copied
**            				: dataBuff : diagnostic Data Buffer
** Return value             : RespVal : Response Type. refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_RdTDCInf_reportDTCSnapshotRecordByDTCNumber(uint32_t *DTCMaskRecord,uint8_t *DTCSnapshotRecordNumber,uint8_t *StatMask, uint8_t *Data, uint16_t *Resplen)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
	uint8_t RespVal = ISOUDS_POSRES;
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]
	uint8_t RetVal;
	(void)StatMask;
	

	RetVal = FCM_GetDTCSnpShotRecdByDTCnum(*DTCMaskRecord, *DTCSnapshotRecordNumber, Data, Resplen);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	7819      	ldrb	r1, [r3, #0]
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	f7ff f815 	bl	80009cc <FCM_GetDTCSnpShotRecdByDTCnum>
 80019a2:	4603      	mov	r3, r0
 80019a4:	75bb      	strb	r3, [r7, #22]

	if (ISOUDS_TRUE == RetVal)
 80019a6:	7dbb      	ldrb	r3, [r7, #22]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d102      	bne.n	80019b2 <HAL_RdTDCInf_reportDTCSnapshotRecordByDTCNumber+0x32>
	{
		RespVal = ISOUDS_POSRES;
 80019ac:	2300      	movs	r3, #0
 80019ae:	75fb      	strb	r3, [r7, #23]
 80019b0:	e001      	b.n	80019b6 <HAL_RdTDCInf_reportDTCSnapshotRecordByDTCNumber+0x36>
	}
	else
	{
		RespVal = ISOUDS_ROOR;
 80019b2:	2331      	movs	r3, #49	; 0x31
 80019b4:	75fb      	strb	r3, [r7, #23]
	}
	return RespVal;
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_RdTDCInf_reportSupportedDTC>:
** Parameters 				: Rpt_SuppDTC_RespLen : Length of data copied
**            				: dataBuff : diagnostic Data Buffer
** Return value             : RespVal : Response Type. refer ISOUDS_Server.h file
*******************************************************************************/
uint8_t HAL_RdTDCInf_reportSupportedDTC(uint8_t * Data,uint16_t *Rpt_SuppDTC_RespLen)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
	uint8_t RespVal;

	RespVal = ISOUDS_POSRES;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]
	
	Data[ISOUDS_ZERO] = FCM_SUPPORTED_DTC_STATUS_BITS;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	226f      	movs	r2, #111	; 0x6f
 80019d2:	701a      	strb	r2, [r3, #0]
	Rpt_SuppDTC_RespLen[ISOUDS_ZERO] += ISOUDS_ONE;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	3301      	adds	r3, #1
 80019da:	b29a      	uxth	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	801a      	strh	r2, [r3, #0]
	Rpt_SuppDTC_RespLen[ISOUDS_ZERO] += FCM_ReportSupportedDTCs(&Data[ISOUDS_ONE]);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3301      	adds	r3, #1
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00d ff91 	bl	800f90c <FCM_ReportSupportedDTCs>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	801a      	strh	r2, [r3, #0]
	
	return RespVal;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <ISOUDS_Get_RDCONFTABSIZE>:
** Paramete           		: None
** Return value             : retVal : Number of DIDs Supported
** Remarks                  : None
***************************************************************************************************/
uint16_t ISOUDS_Get_RDCONFTABSIZE(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
	return ISOUDS_RDCONFTABSIZE;
 8001a08:	230f      	movs	r3, #15
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <ISOUDS_Get_MAXNoOfDIDAllowd>:
** Paramete           		: None
** Return value             : retVal : Number of MAX nnumber Supported
** Remarks                  : None
***************************************************************************************************/
uint16_t ISOUDS_Get_MAXNoOfDIDAllowd(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
	return ISOUDS_MAX_NO_OF_IDS_ALLOWED;
 8001a18:	2305      	movs	r3, #5
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <ISOUDS_CheckPreConditions>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t ISOUDS_CheckPreConditions(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
	uint8_t RespVal = ISOUDS_FALSE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	71fb      	strb	r3, [r7, #7]

	/* Insert logic to check the pre conditions */

	return RespVal;
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <RDBI_EcuStatusMsgCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_EcuStatusMsgCbk(uint8_t buffer[], uint16_t len)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	757b      	strb	r3, [r7, #21]
	uint8_t Status[ISOUDS_ECU_STATUS_MSG_LEN];

	uint16_t idx;

/*retrieve Supply voltage level*/
	(void)ECUStatMSG_SupplyVtgLev(&Status[ISOUDS_ECUSTATMSG_SUPPLYVTGLEV_POS],\
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2101      	movs	r1, #1
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f9b6 	bl	8001dc4 <ECUStatMSG_SupplyVtgLev>
								ISOUDS_ECUSTATMSG_SUPPLYVTGLEV_LEN);
/*retrieve CMX Version of CAN-1*/
	(void)ECUStatMSG_CMXVerCAN1(&Status[ISOUDS_ECUSTATMSG_CMXVERCAN1_POS],\
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	2102      	movs	r1, #2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 f9ce 	bl	8001e02 <ECUStatMSG_CMXVerCAN1>
								ISOUDS_ECUSTATMSG_CMXVERCAN1_LEN);
/*CAN Transmit error counter of CAN-1*/
	(void)ECUStatMSG_TransmErrCntrCAN1(&Status[ISOUDS_ECUSTATMSG_TRANSMERRCNTRCAN1_POS],\
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	3303      	adds	r3, #3
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f9e6 	bl	8001e40 <ECUStatMSG_TransmErrCntrCAN1>
								ISOUDS_ECUSTATMSG_TRANSMERRCNTRCAN1_LEN);
/*CAN Receive error counter of CAN-1*/
	(void)ECUStatMSG_ReceiveErrCntrCAN1(&Status[ISOUDS_ECUSTATMSG_RECEIVEERRCNTRCAN1_POS],\
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 f9fe 	bl	8001e7e <ECUStatMSG_ReceiveErrCntrCAN1>
								ISOUDS_ECUSTATMSG_RECEIVEERRCNTRCAN1_LEN);
/*CAN BusOff Counter of CAN-1*/
	(void)ECUStatMSG_CANBUSOFFCntrCAN1(&Status[ISOUDS_ECUSTATMSG_CANBUSOFFCNTRCAN1_POS],\
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	3305      	adds	r3, #5
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fa16 	bl	8001ebc <ECUStatMSG_CANBUSOFFCntrCAN1>
								ISOUDS_ECUSTATMSG_CANBUSOFFCNTRCAN1_LEN);

/* Copy data */
	for(idx = 0U; idx < len; idx++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	82fb      	strh	r3, [r7, #22]
 8001a94:	e00b      	b.n	8001aae <RDBI_EcuStatusMsgCbk+0x72>
	{
		buffer[idx] = Status[idx];
 8001a96:	8afa      	ldrh	r2, [r7, #22]
 8001a98:	8afb      	ldrh	r3, [r7, #22]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3218      	adds	r2, #24
 8001aa0:	443a      	add	r2, r7
 8001aa2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8001aa6:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001aa8:	8afb      	ldrh	r3, [r7, #22]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	82fb      	strh	r3, [r7, #22]
 8001aae:	8afa      	ldrh	r2, [r7, #22]
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d3ef      	bcc.n	8001a96 <RDBI_EcuStatusMsgCbk+0x5a>
	}
	/* End of Dummy Code */
	return RespVal;
 8001ab6:	7d7b      	ldrb	r3, [r7, #21]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <RDBI_SYMCPartNumCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_SYMCPartNumCbk(uint8_t buffer[], uint16_t len)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001acc:	2300      	movs	r3, #0
 8001ace:	757b      	strb	r3, [r7, #21]
	uint8_t	part_number[10] = "12";
 8001ad0:	f243 2331 	movw	r3, #12849	; 0x3231
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	809a      	strh	r2, [r3, #4]
		uint16_t idx;
	for(idx = 0U; idx < len; idx++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	82fb      	strh	r3, [r7, #22]
 8001ae4:	e00b      	b.n	8001afe <RDBI_SYMCPartNumCbk+0x3e>
			{
				buffer[idx] = part_number[idx];
 8001ae6:	8afa      	ldrh	r2, [r7, #22]
 8001ae8:	8afb      	ldrh	r3, [r7, #22]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	440b      	add	r3, r1
 8001aee:	3218      	adds	r2, #24
 8001af0:	443a      	add	r2, r7
 8001af2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001af6:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001af8:	8afb      	ldrh	r3, [r7, #22]
 8001afa:	3301      	adds	r3, #1
 8001afc:	82fb      	strh	r3, [r7, #22]
 8001afe:	8afa      	ldrh	r2, [r7, #22]
 8001b00:	887b      	ldrh	r3, [r7, #2]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3ef      	bcc.n	8001ae6 <RDBI_SYMCPartNumCbk+0x26>
			buffer[idx] = part_number[idx];
		}
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 8001b06:	7d7b      	ldrb	r3, [r7, #21]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	371c      	adds	r7, #28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <RDBI_SYMCSoftwareVerCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_SYMCSoftwareVerCbk(uint8_t buffer[], uint16_t len)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]
		if(memcmp(version, buffer, ISOUDS_SYMC_SOFTWARE_VER_LEN) != 0U)
			writeEeprom(EEPROM_DID_SW_VERSION,ISOUDS_SYMC_SOFTWARE_VER_LEN,(uint32_t)version);
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <RDBI_SystemSuppCodeCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_SystemSuppCodeCbk(uint8_t buffer[], uint16_t len)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b085      	sub	sp, #20
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	737b      	strb	r3, [r7, #13]

	uint16_t idx;

	/* Copy data */
	for(idx = 0U; idx < len; idx++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	81fb      	strh	r3, [r7, #14]
 8001b46:	e008      	b.n	8001b5a <RDBI_SystemSuppCodeCbk+0x28>
	{
		buffer[idx] = (uint8_t)idx;
 8001b48:	89fb      	ldrh	r3, [r7, #14]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	89fa      	ldrh	r2, [r7, #14]
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001b54:	89fb      	ldrh	r3, [r7, #14]
 8001b56:	3301      	adds	r3, #1
 8001b58:	81fb      	strh	r3, [r7, #14]
 8001b5a:	89fa      	ldrh	r2, [r7, #14]
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d3f2      	bcc.n	8001b48 <RDBI_SystemSuppCodeCbk+0x16>
	}


	/* End of Dummy Code */
	return RespVal;
 8001b62:	7b7b      	ldrb	r3, [r7, #13]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <RDBI_ECUManufctDateCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_ECUManufctDateCbk(uint8_t buffer[], uint16_t len)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	737b      	strb	r3, [r7, #13]

	uint16_t idx;

	/* Copy data */
	for(idx = 0U; idx < len; idx++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	81fb      	strh	r3, [r7, #14]
 8001b84:	e008      	b.n	8001b98 <RDBI_ECUManufctDateCbk+0x28>
	{
		buffer[idx] = (uint8_t)idx;
 8001b86:	89fb      	ldrh	r3, [r7, #14]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	89fa      	ldrh	r2, [r7, #14]
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001b92:	89fb      	ldrh	r3, [r7, #14]
 8001b94:	3301      	adds	r3, #1
 8001b96:	81fb      	strh	r3, [r7, #14]
 8001b98:	89fa      	ldrh	r2, [r7, #14]
 8001b9a:	887b      	ldrh	r3, [r7, #2]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d3f2      	bcc.n	8001b86 <RDBI_ECUManufctDateCbk+0x16>
	}


	/* End of Dummy Code */
	return RespVal;
 8001ba0:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <RDBI_ECUSerialNUmCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_ECUSerialNUmCbk(uint8_t buffer[], uint16_t len)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	737b      	strb	r3, [r7, #13]

	uint16_t idx;

	/* Copy data */
	for(idx = 0U; idx < len; idx++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	81fb      	strh	r3, [r7, #14]
 8001bc2:	e008      	b.n	8001bd6 <RDBI_ECUSerialNUmCbk+0x28>
	{
		buffer[idx] = (uint8_t)idx;
 8001bc4:	89fb      	ldrh	r3, [r7, #14]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	89fa      	ldrh	r2, [r7, #14]
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001bd0:	89fb      	ldrh	r3, [r7, #14]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	81fb      	strh	r3, [r7, #14]
 8001bd6:	89fa      	ldrh	r2, [r7, #14]
 8001bd8:	887b      	ldrh	r3, [r7, #2]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d3f2      	bcc.n	8001bc4 <RDBI_ECUSerialNUmCbk+0x16>
	}


	/* End of Dummy Code */
	return RespVal;
 8001bde:	7b7b      	ldrb	r3, [r7, #13]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <RDBI_VehicleIDNumDataCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_VehicleIDNumDataCbk(uint8_t buffer[], uint16_t len)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]
		/* Update negative Response */
		RespVal = ISOUDS_GPF;
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <RDBI_TesterSerialNumCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_TesterSerialNumCbk(uint8_t buffer[], uint16_t len)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
		/* Update negative Response */
		RespVal = ISOUDS_GPF;
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <RDBI_ProgramDateCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_ProgramDateCbk(uint8_t buffer[], uint16_t len)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
		/* Update negative Response */
		RespVal = ISOUDS_GPF;
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <RDBI_DiagnosticInfoCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_DiagnosticInfoCbk(uint8_t buffer[], uint16_t len)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b085      	sub	sp, #20
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001c52:	2300      	movs	r3, #0
 8001c54:	737b      	strb	r3, [r7, #13]

	uint16_t idx;

	/* Copy data */
	for(idx = 0U; idx < len; idx++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	81fb      	strh	r3, [r7, #14]
 8001c5a:	e008      	b.n	8001c6e <RDBI_DiagnosticInfoCbk+0x28>
	{
		buffer[idx] = (uint8_t)idx;
 8001c5c:	89fb      	ldrh	r3, [r7, #14]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	89fa      	ldrh	r2, [r7, #14]
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001c68:	89fb      	ldrh	r3, [r7, #14]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	81fb      	strh	r3, [r7, #14]
 8001c6e:	89fa      	ldrh	r2, [r7, #14]
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d3f2      	bcc.n	8001c5c <RDBI_DiagnosticInfoCbk+0x16>
	}


	/* End of Dummy Code */
	return RespVal;
 8001c76:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <RDBI_ProgramIdInfoCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_ProgramIdInfoCbk(uint8_t buffer[], uint16_t len)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001c90:	2300      	movs	r3, #0
 8001c92:	777b      	strb	r3, [r7, #29]
#if (SYMC_SECURITY == 1)
	SYMC_UpdateSeed();
#endif
	
/*retrieve Flash document version number Length*/
	(void)ProgIdInfo_FlashDocVerNum(&status[ISOUDS_PROGIDINFO_FLSHDOCVERNUM_POS],\
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f92d 	bl	8001efa <ProgIdInfo_FlashDocVerNum>
							ISOUDS_PROGIDINFO_FLSHDOCVERNUM_LEN);
/*retrieve Status Flag Length*/
	(void)ProgIdInfo_StatusFlag(&status[ISOUDS_PROGIDINFO_STATFLAG_POS],\
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 f947 	bl	8001f3c <ProgIdInfo_StatusFlag>
							ISOUDS_PROGIDINFO_STATFLAG_LEN);
/*retrieve Support Flag Length*/
	(void)ProgIdInfo_SupportFlag(&status[ISOUDS_PROGIDINFO_SUPPFLAG_POS],\
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f95f 	bl	8001f7a <ProgIdInfo_SupportFlag>
							ISOUDS_PROGIDINFO_SUPPFLAG_LEN);
/*retrieve Security Class Length*/
	(void)ProgIdInfo_SecurityClass(&status[ISOUDS_PROGIDINFO_SECCLASS_POS],\
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	3303      	adds	r3, #3
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f979 	bl	8001fbc <ProgIdInfo_SecurityClass>
							ISOUDS_PROGIDINFO_SECCLASS_LEN);
/*retrieve Number of code blocks Length*/
	(void)ProgIdInfo_NumOfCodeBlkS(&status[ISOUDS_PROGIDINFO_NUMOFCODEBLKS_POS],\
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	3304      	adds	r3, #4
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 f993 	bl	8001ffe <ProgIdInfo_NumOfCodeBlkS>
							ISOUDS_PROGIDINFO_NUMOFCODEBLKS_LEN);
/*retrieve Reprogramming Attempt Counter Length*/
	(void)ProgIdInfo_ReProgAttmCNT(&status[ISOUDS_PROGIDINFO_REPROGATTMCNT_POS],\
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	3305      	adds	r3, #5
 8001cde:	2102      	movs	r1, #2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 f9ab 	bl	800203c <ProgIdInfo_ReProgAttmCNT>
							ISOUDS_PROGIDINFO_REPROGATTMCNT_LEN);
/*retrieve Max number of Attempt Counter Length*/
	(void)ProgIdInfo_MaxNumAttmCNT(&status[ISOUDS_PROGIDINFO_MAXNUMATTMCNT_POS],\
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	3307      	adds	r3, #7
 8001cec:	2102      	movs	r1, #2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 f9c3 	bl	800207a <ProgIdInfo_MaxNumAttmCNT>
							ISOUDS_PROGIDINFO_MAXNUMATTMCNT_LEN);
/*retrieve Number of data blocks Length*/
	(void)ProgIdInfo_NumOfDataBlks(&status[ISOUDS_PROGIDINFO_NUMOFDATABLKS_POS],\
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	3309      	adds	r3, #9
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 f9db 	bl	80020b8 <ProgIdInfo_NumOfDataBlks>
							ISOUDS_PROGIDINFO_NUMOFDATABLKS_LEN);
/*retrieve Reprogramming Attempt Counter Length*/
	(void)ProgIdInfo_ReProgAttmCntDa(&status[ISOUDS_PROGIDINFO_REPROGATTMCNTDA_POS],\
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	330a      	adds	r3, #10
 8001d08:	2102      	movs	r1, #2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f9f3 	bl	80020f6 <ProgIdInfo_ReProgAttmCntDa>
							ISOUDS_PROGIDINFO_REPROGATTMCNTDA_LEN);
/*retrieve Max number of Attempt Counter Length */
	(void)ProgIdInfo_MaxNumAttmCntDa(&status[ISOUDS_PROGIDINFO_MAXNUMATTMCNTDA_POS],\
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	330c      	adds	r3, #12
 8001d16:	2102      	movs	r1, #2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fa0b 	bl	8002134 <ProgIdInfo_MaxNumAttmCntDa>
							ISOUDS_PROGIDINFO_MAXNUMATTMCNTDA_LEN);
/* Copu Data */
	for(idx = 0U; idx < len; idx++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	83fb      	strh	r3, [r7, #30]
 8001d22:	e00b      	b.n	8001d3c <RDBI_ProgramIdInfoCbk+0xb8>
	{
		buffer[idx] = status[idx];
 8001d24:	8bfa      	ldrh	r2, [r7, #30]
 8001d26:	8bfb      	ldrh	r3, [r7, #30]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3220      	adds	r2, #32
 8001d2e:	443a      	add	r2, r7
 8001d30:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001d34:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001d36:	8bfb      	ldrh	r3, [r7, #30]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	83fb      	strh	r3, [r7, #30]
 8001d3c:	8bfa      	ldrh	r2, [r7, #30]
 8001d3e:	887b      	ldrh	r3, [r7, #2]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d3ef      	bcc.n	8001d24 <RDBI_ProgramIdInfoCbk+0xa0>
	}

	/* End of Dummy Code */
	return RespVal;
 8001d44:	7f7b      	ldrb	r3, [r7, #29]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3720      	adds	r7, #32
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <RDBI_HardwareVerCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_HardwareVerCbk(uint8_t buffer[], uint16_t len)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
			buffer[idx] = hw_ver[idx];
		}
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <RDBI_CANDBVerCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_CANDBVerCbk(uint8_t buffer[], uint16_t len)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	737b      	strb	r3, [r7, #13]
	uint8_t	can_db[] = "2.02";
 8001d7c:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <RDBI_CANDBVerCbk+0x54>)
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d86:	6018      	str	r0, [r3, #0]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	7019      	strb	r1, [r3, #0]
#if (SYMC_SECURITY == 1)
	SYMC_UpdateSeed();
#endif

	/* Copy data */
	for(idx = 0U; idx < len; idx++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	81fb      	strh	r3, [r7, #14]
 8001d90:	e00b      	b.n	8001daa <RDBI_CANDBVerCbk+0x3e>
	{
		buffer[idx] = can_db[idx];
 8001d92:	89fa      	ldrh	r2, [r7, #14]
 8001d94:	89fb      	ldrh	r3, [r7, #14]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	440b      	add	r3, r1
 8001d9a:	3210      	adds	r2, #16
 8001d9c:	443a      	add	r2, r7
 8001d9e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8001da2:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001da4:	89fb      	ldrh	r3, [r7, #14]
 8001da6:	3301      	adds	r3, #1
 8001da8:	81fb      	strh	r3, [r7, #14]
 8001daa:	89fa      	ldrh	r2, [r7, #14]
 8001dac:	887b      	ldrh	r3, [r7, #2]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d3ef      	bcc.n	8001d92 <RDBI_CANDBVerCbk+0x26>
	}

	/* End of Dummy Code */
	return RespVal;
 8001db2:	7b7b      	ldrb	r3, [r7, #13]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	08010360 	.word	0x08010360

08001dc4 <ECUStatMSG_SupplyVtgLev>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ECUStatMSG_SupplyVtgLev(uint8_t buffer[], uint16_t len)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	e007      	b.n	8001dea <ECUStatMSG_SupplyVtgLev+0x26>
	{
		buffer[idx] = idx;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	3301      	adds	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d8f2      	bhi.n	8001dda <ECUStatMSG_SupplyVtgLev+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <ECUStatMSG_CMXVerCAN1>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ECUStatMSG_CMXVerCAN1(uint8_t buffer[], uint16_t len)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b085      	sub	sp, #20
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
 8001e16:	e007      	b.n	8001e28 <ECUStatMSG_CMXVerCAN1+0x26>
	{
		buffer[idx] = idx;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	3301      	adds	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	887a      	ldrh	r2, [r7, #2]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d8f2      	bhi.n	8001e18 <ECUStatMSG_CMXVerCAN1+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8001e32:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <ECUStatMSG_TransmErrCntrCAN1>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ECUStatMSG_TransmErrCntrCAN1(uint8_t buffer[], uint16_t len)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e007      	b.n	8001e66 <ECUStatMSG_TransmErrCntrCAN1+0x26>
	{
		buffer[idx] = idx;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	3301      	adds	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f2      	bhi.n	8001e56 <ECUStatMSG_TransmErrCntrCAN1+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <ECUStatMSG_ReceiveErrCntrCAN1>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ECUStatMSG_ReceiveErrCntrCAN1(uint8_t buffer[], uint16_t len)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	e007      	b.n	8001ea4 <ECUStatMSG_ReceiveErrCntrCAN1+0x26>
	{
		buffer[idx] = idx;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	887a      	ldrh	r2, [r7, #2]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d8f2      	bhi.n	8001e94 <ECUStatMSG_ReceiveErrCntrCAN1+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <ECUStatMSG_CANBUSOFFCntrCAN1>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ECUStatMSG_CANBUSOFFCntrCAN1(uint8_t buffer[], uint16_t len)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e007      	b.n	8001ee2 <ECUStatMSG_CANBUSOFFCntrCAN1+0x26>
	{
		buffer[idx] = idx;
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d8f2      	bhi.n	8001ed2 <ECUStatMSG_CANBUSOFFCntrCAN1+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8001eec:	7bbb      	ldrb	r3, [r7, #14]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <ProgIdInfo_FlashDocVerNum>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_FlashDocVerNum(uint8_t buffer[], uint16_t len)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b085      	sub	sp, #20
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73bb      	strb	r3, [r7, #14]
	/* SES A 203-10 applied controller: $20 */
	uint8_t flash_doc_ver = 0x20;
 8001f0a:	2320      	movs	r3, #32
 8001f0c:	737b      	strb	r3, [r7, #13]
	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e007      	b.n	8001f24 <ProgIdInfo_FlashDocVerNum+0x2a>
	{
		buffer[idx] = flash_doc_ver;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	7b7a      	ldrb	r2, [r7, #13]
 8001f1c:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	3301      	adds	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	887a      	ldrh	r2, [r7, #2]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d8f2      	bhi.n	8001f14 <ProgIdInfo_FlashDocVerNum+0x1a>
	}

	/* End of Dummy Code */
	return RespVal;
 8001f2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <ProgIdInfo_StatusFlag>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_StatusFlag(uint8_t buffer[], uint16_t len)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e007      	b.n	8001f62 <ProgIdInfo_StatusFlag+0x26>
	{
		buffer[idx] = idx;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	73fb      	strb	r3, [r7, #15]
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d8f2      	bhi.n	8001f52 <ProgIdInfo_StatusFlag+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8001f6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <ProgIdInfo_SupportFlag>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_SupportFlag(uint8_t buffer[], uint16_t len)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b085      	sub	sp, #20
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001f86:	2300      	movs	r3, #0
 8001f88:	73bb      	strb	r3, [r7, #14]
	/* SES A 203-10 applied Signature Support: 1 (Feature supported) */
	uint8_t signature_support = 0x1;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	737b      	strb	r3, [r7, #13]
	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	e007      	b.n	8001fa4 <ProgIdInfo_SupportFlag+0x2a>
	{
		buffer[idx] = signature_support;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	7b7a      	ldrb	r2, [r7, #13]
 8001f9c:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	887a      	ldrh	r2, [r7, #2]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d8f2      	bhi.n	8001f94 <ProgIdInfo_SupportFlag+0x1a>
	}

	/* End of Dummy Code */
	return RespVal;
 8001fae:	7bbb      	ldrb	r3, [r7, #14]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <ProgIdInfo_SecurityClass>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_SecurityClass(uint8_t buffer[], uint16_t len)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73bb      	strb	r3, [r7, #14]
	/* SES A 203-10 applied: $03 (Security Class CCC) */
	uint8_t security_class_ccc = 0x03;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	737b      	strb	r3, [r7, #13]
	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e007      	b.n	8001fe6 <ProgIdInfo_SecurityClass+0x2a>
	{
		buffer[idx] = security_class_ccc;
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	7b7a      	ldrb	r2, [r7, #13]
 8001fde:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	887a      	ldrh	r2, [r7, #2]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d8f2      	bhi.n	8001fd6 <ProgIdInfo_SecurityClass+0x1a>
	}

	/* End of Dummy Code */
	return RespVal;
 8001ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <ProgIdInfo_NumOfCodeBlkS>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_NumOfCodeBlkS(uint8_t buffer[], uint16_t len)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 800200a:	2300      	movs	r3, #0
 800200c:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 800200e:	2300      	movs	r3, #0
 8002010:	73fb      	strb	r3, [r7, #15]
 8002012:	e007      	b.n	8002024 <ProgIdInfo_NumOfCodeBlkS+0x26>
	{
		buffer[idx] = idx;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	7bfa      	ldrb	r2, [r7, #15]
 800201c:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	3301      	adds	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	b29b      	uxth	r3, r3
 8002028:	887a      	ldrh	r2, [r7, #2]
 800202a:	429a      	cmp	r2, r3
 800202c:	d8f2      	bhi.n	8002014 <ProgIdInfo_NumOfCodeBlkS+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 800202e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <ProgIdInfo_ReProgAttmCNT>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_ReProgAttmCNT(uint8_t buffer[], uint16_t len)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8002048:	2300      	movs	r3, #0
 800204a:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 800204c:	2300      	movs	r3, #0
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	e007      	b.n	8002062 <ProgIdInfo_ReProgAttmCNT+0x26>
	{
		buffer[idx] = idx;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	3301      	adds	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	b29b      	uxth	r3, r3
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	429a      	cmp	r2, r3
 800206a:	d8f2      	bhi.n	8002052 <ProgIdInfo_ReProgAttmCNT+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 800206c:	7bbb      	ldrb	r3, [r7, #14]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <ProgIdInfo_MaxNumAttmCNT>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_MaxNumAttmCNT(uint8_t buffer[], uint16_t len)
{
 800207a:	b480      	push	{r7}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8002086:	2300      	movs	r3, #0
 8002088:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
 800208e:	e007      	b.n	80020a0 <ProgIdInfo_MaxNumAttmCNT+0x26>
	{
		buffer[idx] = idx;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	3301      	adds	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	887a      	ldrh	r2, [r7, #2]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d8f2      	bhi.n	8002090 <ProgIdInfo_MaxNumAttmCNT+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 80020aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <ProgIdInfo_NumOfDataBlks>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_NumOfDataBlks(uint8_t buffer[], uint16_t len)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 80020c4:	2300      	movs	r3, #0
 80020c6:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	e007      	b.n	80020de <ProgIdInfo_NumOfDataBlks+0x26>
	{
		buffer[idx] = idx;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	3301      	adds	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d8f2      	bhi.n	80020ce <ProgIdInfo_NumOfDataBlks+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 80020e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <ProgIdInfo_ReProgAttmCntDa>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_ReProgAttmCntDa(uint8_t buffer[], uint16_t len)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b085      	sub	sp, #20
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8002102:	2300      	movs	r3, #0
 8002104:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
 800210a:	e007      	b.n	800211c <ProgIdInfo_ReProgAttmCntDa+0x26>
	{
		buffer[idx] = idx;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	3301      	adds	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	b29b      	uxth	r3, r3
 8002120:	887a      	ldrh	r2, [r7, #2]
 8002122:	429a      	cmp	r2, r3
 8002124:	d8f2      	bhi.n	800210c <ProgIdInfo_ReProgAttmCntDa+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8002126:	7bbb      	ldrb	r3, [r7, #14]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <ProgIdInfo_MaxNumAttmCntDa>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
static uint8_t ProgIdInfo_MaxNumAttmCntDa(uint8_t buffer[], uint16_t len)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 8002140:	2300      	movs	r3, #0
 8002142:	73bb      	strb	r3, [r7, #14]

	uint8_t idx;

	for(idx = 0U; idx < len; idx++)
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e007      	b.n	800215a <ProgIdInfo_MaxNumAttmCntDa+0x26>
	{
		buffer[idx] = idx;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	701a      	strb	r2, [r3, #0]
	for(idx = 0U; idx < len; idx++)
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	3301      	adds	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	b29b      	uxth	r3, r3
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	429a      	cmp	r2, r3
 8002162:	d8f2      	bhi.n	800214a <ProgIdInfo_MaxNumAttmCntDa+0x16>
	}

	/* End of Dummy Code */
	return RespVal;
 8002164:	7bbb      	ldrb	r3, [r7, #14]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <RDBI_ECUInfoCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_ECUInfoCbk(uint8_t buffer[], uint16_t len)
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	460b      	mov	r3, r1
 800217c:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
			buffer[idx] = ecu_info[idx];
		}
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <RDBI_QRCodeCbk>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t RDBI_QRCodeCbk(uint8_t buffer[], uint16_t len)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
	uint8_t RespVal = ISOUDS_POSRES;
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]
			buffer[idx] = qr_code[idx];
		}
	}
#endif
	/* End of Dummy Code */
	return RespVal;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <ISOUDS_Get_RDPDDIDDACONFTABSIZE>:
** Return value             : retVal : Number of DIDs Supported

** Remarks                  : None
***************************************************************************************************/
uint16_t ISOUDS_Get_RDPDDIDDACONFTABSIZE(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
	return ISOUDS_RDPDDIDDACONFTABSIZE;
 80021b2:	2305      	movs	r3, #5
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <Get_PeriodicDataF200>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t READ_PERIODIC_DID_DATA_ID_0(uint8_t buffer[], uint16_t len)
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	807b      	strh	r3, [r7, #2]
	/* Dummy Code for Testing, change as per application */
	uint8_t idx;
	uint8_t ret_val = ISOUDS_TRUE;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73bb      	strb	r3, [r7, #14]

	for(idx = 0; idx < len; idx++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	73fb      	strb	r3, [r7, #15]
 80021d2:	e00b      	b.n	80021ec <Get_PeriodicDataF200+0x2e>
	{
		buffer[idx] = idx + 10;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	320a      	adds	r2, #10
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]
		ret_val = ISOUDS_FALSE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	73bb      	strb	r3, [r7, #14]
	for(idx = 0; idx < len; idx++)
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	3301      	adds	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	887a      	ldrh	r2, [r7, #2]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d8ee      	bhi.n	80021d4 <Get_PeriodicDataF200+0x16>
	}

	return ret_val;
 80021f6:	7bbb      	ldrb	r3, [r7, #14]
	/* End of Dummy Code */
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <Get_PeriodicDataF201>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t READ_PERIODIC_DID_DATA_ID_1(uint8_t buffer[], uint16_t len)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
	/* Dummy Code for Testing, change as per application */
	uint8_t idx;
	uint8_t ret_val = ISOUDS_TRUE;
 8002210:	2301      	movs	r3, #1
 8002212:	73bb      	strb	r3, [r7, #14]

	for(idx = 0; idx < len; idx++)
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e00b      	b.n	8002232 <Get_PeriodicDataF201+0x2e>
	{
		buffer[idx] = idx + 20;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	4413      	add	r3, r2
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	3214      	adds	r2, #20
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]
		ret_val = ISOUDS_FALSE;
 8002228:	2300      	movs	r3, #0
 800222a:	73bb      	strb	r3, [r7, #14]
	for(idx = 0; idx < len; idx++)
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	3301      	adds	r3, #1
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	b29b      	uxth	r3, r3
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	429a      	cmp	r2, r3
 800223a:	d8ee      	bhi.n	800221a <Get_PeriodicDataF201+0x16>
	}

	return ret_val;
 800223c:	7bbb      	ldrb	r3, [r7, #14]
	/* End of Dummy Code */
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <Get_PeriodicDataF202>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t READ_PERIODIC_DID_DATA_ID_2(uint8_t buffer[], uint16_t len)
{
 800224a:	b480      	push	{r7}
 800224c:	b085      	sub	sp, #20
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	460b      	mov	r3, r1
 8002254:	807b      	strh	r3, [r7, #2]
	/* Dummy Code for Testing, change as per application */
	uint8_t idx;
	uint8_t ret_val = ISOUDS_TRUE;
 8002256:	2301      	movs	r3, #1
 8002258:	73bb      	strb	r3, [r7, #14]

	for(idx = 0; idx < len; idx++)
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	e00b      	b.n	8002278 <Get_PeriodicDataF202+0x2e>
	{
		buffer[idx] = idx + 30;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	321e      	adds	r2, #30
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]
		ret_val = ISOUDS_FALSE;
 800226e:	2300      	movs	r3, #0
 8002270:	73bb      	strb	r3, [r7, #14]
	for(idx = 0; idx < len; idx++)
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	3301      	adds	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	b29b      	uxth	r3, r3
 800227c:	887a      	ldrh	r2, [r7, #2]
 800227e:	429a      	cmp	r2, r3
 8002280:	d8ee      	bhi.n	8002260 <Get_PeriodicDataF202+0x16>
	}

	return ret_val;
 8002282:	7bbb      	ldrb	r3, [r7, #14]
	/* End of Dummy Code */
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <Get_PeriodicDataF203>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t READ_PERIODIC_DID_DATA_ID_3(uint8_t buffer[], uint16_t len)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
	/* Dummy Code for Testing, change as per application */
	uint8_t idx;
	uint8_t ret_val = ISOUDS_TRUE;
 800229c:	2301      	movs	r3, #1
 800229e:	73bb      	strb	r3, [r7, #14]

	for(idx = 0; idx < len; idx++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e00b      	b.n	80022be <Get_PeriodicDataF203+0x2e>
	{
		buffer[idx] = idx + 40;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	3228      	adds	r2, #40	; 0x28
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]
		ret_val = ISOUDS_FALSE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	73bb      	strb	r3, [r7, #14]
	for(idx = 0; idx < len; idx++)
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	3301      	adds	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d8ee      	bhi.n	80022a6 <Get_PeriodicDataF203+0x16>
	}

	return ret_val;
 80022c8:	7bbb      	ldrb	r3, [r7, #14]
	/* End of Dummy Code */
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <Get_PeriodicDataF204>:
** Return value     :read success (0) or failure (1)

** Remarks          :None
*******************************************************************************/
uint8_t READ_PERIODIC_DID_DATA_ID_4(uint8_t buffer[], uint16_t len)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	460b      	mov	r3, r1
 80022e0:	807b      	strh	r3, [r7, #2]
	/* Dummy Code for Testing, change as per application */
	uint8_t idx;
	uint8_t ret_val = ISOUDS_TRUE;
 80022e2:	2301      	movs	r3, #1
 80022e4:	73bb      	strb	r3, [r7, #14]

	for(idx = 0; idx < len; idx++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	e00b      	b.n	8002304 <Get_PeriodicDataF204+0x2e>
	{
		buffer[idx] = idx + 50;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	3232      	adds	r2, #50	; 0x32
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]
		ret_val = ISOUDS_FALSE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73bb      	strb	r3, [r7, #14]
	for(idx = 0; idx < len; idx++)
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	3301      	adds	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	b29b      	uxth	r3, r3
 8002308:	887a      	ldrh	r2, [r7, #2]
 800230a:	429a      	cmp	r2, r3
 800230c:	d8ee      	bhi.n	80022ec <Get_PeriodicDataF204+0x16>
	}

	return ret_val;
 800230e:	7bbb      	ldrb	r3, [r7, #14]
	/* End of Dummy Code */
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <ISOUDS_Get_RdMemByAddMaxentries>:
** Return value             : retVal : Number of Entries Supported

** Remarks                  : None
***************************************************************************************************/
uint16_t ISOUDS_Get_RdMemByAddMaxentries(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
	return ISOUDS_RdMemByAddMaxentries;
 8002320:	2301      	movs	r3, #1
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <ISOUDS_RdAddLengthReqCbk>:
** Return value             : Positive or Negative Response value

** Remarks                  : None
***************************************************************************************************/
uint8_t  ISOUDS_RdAddLengthReqCbk (uint32_t RdAddress, uint32_t RdLength, const uint8_t *RespBuff)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
    /*User specific code*/
    #if 0
    *RespBuff =  0x00;
    RdLength -= 0x01;
    #endif
    retVal = (uint8_t)ISOUDS_POSRES;
 8002338:	2300      	movs	r3, #0
 800233a:	75fb      	strb	r3, [r7, #23]
    return retVal;
 800233c:	7dfb      	ldrb	r3, [r7, #23]

}
 800233e:	4618      	mov	r0, r3
 8002340:	371c      	adds	r7, #28
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <ISOUDS_ReqDwnldReqCbk>:
** Return value             : Positive or Negative Response value

** Remarks                  : None
***************************************************************************************************/
uint8_t  ISOUDS_ReqDwnldReqCbk (unsigned long RdAddress, unsigned long RdLength, uint8_t *RespBuff)
{
 800234a:	b480      	push	{r7}
 800234c:	b087      	sub	sp, #28
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
    /*User specific code*/
    #if 0
    *RespBuff =  0x00;
    RdLength -= 0x01;
    #endif
    retVal = (uint8_t)ISOUDS_POSRES;
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]
    return retVal;
 800235a:	7dfb      	ldrb	r3, [r7, #23]

}
 800235c:	4618      	mov	r0, r3
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <ISOUDS_ReqUpldReqCbk>:

** Remarks                  : None
***************************************************************************************************/

uint8_t  ISOUDS_ReqUpldReqCbk (unsigned long RdAddress, unsigned long RdLength, uint8_t *RespBuff)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
	(void) RdLength;
	(void) *RespBuff;
    /*User specific code*/


    *RespBuff =  00;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
    RdLength = 256;
 800237a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800237e:	60bb      	str	r3, [r7, #8]

    retVal = (uint8_t)ISOUDS_POSRES;
 8002380:	2300      	movs	r3, #0
 8002382:	75fb      	strb	r3, [r7, #23]
    return retVal;
 8002384:	7dfb      	ldrb	r3, [r7, #23]

}
 8002386:	4618      	mov	r0, r3
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <ISOUDS_GetOnDtcStatChangeEventStat>:
** 							: FALSE : Event Not triggered

** Return value             : None
***************************************************************************************************/
uint8_t ISOUDS_GetOnDtcStatChangeEventStat(void)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
	uint8_t Read_NumOFDTCsWitStatMsk;
	uint8_t RetVal;

	RetVal = ISOUDS_FALSE;
 800239a:	2300      	movs	r3, #0
 800239c:	71fb      	strb	r3, [r7, #7]

	/* Get the Number of DTCs with the status mask */
	Read_NumOFDTCsWitStatMsk = ISOUDS_READ_NUM_OF_DTC_WITH_STAT_MASK(ISOUDS_EventConfig[OnDtcStatusChange].eventTypeRecord[0]);
 800239e:	2301      	movs	r3, #1
 80023a0:	71bb      	strb	r3, [r7, #6]

	/* Check with the Previous data */
	if (ISOUDS_NoOfDTCsStoredPrevly != Read_NumOFDTCsWitStatMsk)
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <ISOUDS_GetOnDtcStatChangeEventStat+0x2c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	79ba      	ldrb	r2, [r7, #6]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <ISOUDS_GetOnDtcStatChangeEventStat+0x1c>
	{
		/* Event triggered */
		RetVal = ISOUDS_TRUE;
 80023ac:	2301      	movs	r3, #1
 80023ae:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* Do nothing */
	}

	return RetVal;
 80023b0:	79fb      	ldrb	r3, [r7, #7]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	2400135e 	.word	0x2400135e

080023c4 <ISOUDS_ClrOnDtcStatChangeEventStat>:
** 							: FALSE : Event Not triggered

** Return value             : None
***************************************************************************************************/
uint8_t ISOUDS_ClrOnDtcStatChangeEventStat(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
	uint8_t Read_NumOFDTCsWitStatMsk;
	uint8_t RetVal;

	RetVal = ISOUDS_FALSE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	71fb      	strb	r3, [r7, #7]
	/* Get the Number of DTCs with the status mask */
	Read_NumOFDTCsWitStatMsk = ISOUDS_READ_NUM_OF_DTC_WITH_STAT_MASK(ISOUDS_EventConfig[OnDtcStatusChange].eventTypeRecord[0]);
 80023ce:	2301      	movs	r3, #1
 80023d0:	71bb      	strb	r3, [r7, #6]
	/* Check with the Previous data */
	if (ISOUDS_NoOfDTCsStoredPrevly != Read_NumOFDTCsWitStatMsk)
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <ISOUDS_ClrOnDtcStatChangeEventStat+0x30>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	79ba      	ldrb	r2, [r7, #6]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d004      	beq.n	80023e6 <ISOUDS_ClrOnDtcStatChangeEventStat+0x22>
	{
		/* Clear */
		ISOUDS_NoOfDTCsStoredPrevly = Read_NumOFDTCsWitStatMsk;
 80023dc:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <ISOUDS_ClrOnDtcStatChangeEventStat+0x30>)
 80023de:	79bb      	ldrb	r3, [r7, #6]
 80023e0:	7013      	strb	r3, [r2, #0]

		RetVal = ISOUDS_TRUE;
 80023e2:	2301      	movs	r3, #1
 80023e4:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* Do nothing */
	}

	return RetVal;
 80023e6:	79fb      	ldrb	r3, [r7, #7]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	2400135e 	.word	0x2400135e

080023f8 <ISOUDS_GetOnTimerInterruptStat>:
** 							: FALSE : Event Not triggered

** Return value             : None
***************************************************************************************************/
uint8_t ISOUDS_GetOnTimerInterruptStat(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
	uint8_t RetVal = ISOUDS_FALSE;
 80023fe:	2300      	movs	r3, #0
 8002400:	71fb      	strb	r3, [r7, #7]
	/* Timeout expired */
	if (ISOUDS_TimerVal >= ISOUDS_TimeOutVal)
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <ISOUDS_GetOnTimerInterruptStat+0x28>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <ISOUDS_GetOnTimerInterruptStat+0x2c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d301      	bcc.n	8002412 <ISOUDS_GetOnTimerInterruptStat+0x1a>
	{
		RetVal = ISOUDS_TRUE;
 800240e:	2301      	movs	r3, #1
 8002410:	71fb      	strb	r3, [r7, #7]
	}

	return RetVal;
 8002412:	79fb      	ldrb	r3, [r7, #7]
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	24001360 	.word	0x24001360
 8002424:	24001364 	.word	0x24001364

08002428 <ISOUDS_UpdtOnTmrIntrptTmrVal>:
** Parameter 		 		: None

** Return value             : None
***************************************************************************************************/
static void ISOUDS_UpdtOnTmrIntrptTmrVal(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
	/* Timeout value check */
	if (ISOUDS_TimerVal < ISOUDS_TimeOutVal)
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <ISOUDS_UpdtOnTmrIntrptTmrVal+0x24>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <ISOUDS_UpdtOnTmrIntrptTmrVal+0x28>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d204      	bcs.n	8002442 <ISOUDS_UpdtOnTmrIntrptTmrVal+0x1a>
	{
		/* Increment the timer value */
		ISOUDS_TimerVal += ISOUDS_SERVER_PERIOD_SCHED;
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <ISOUDS_UpdtOnTmrIntrptTmrVal+0x24>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3305      	adds	r3, #5
 800243e:	4a03      	ldr	r2, [pc, #12]	; (800244c <ISOUDS_UpdtOnTmrIntrptTmrVal+0x24>)
 8002440:	6013      	str	r3, [r2, #0]
	}
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	24001360 	.word	0x24001360
 8002450:	24001364 	.word	0x24001364

08002454 <ISOUDS_ClrOnTimerInterruptStat>:
** Parameter 		 		: None

** Return value             : None
***************************************************************************************************/
void ISOUDS_ClrOnTimerInterruptStat(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
	/* Check if the timer value reached timeout */
	if (ISOUDS_TimerVal >= ISOUDS_TimeOutVal)
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <ISOUDS_ClrOnTimerInterruptStat+0x20>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <ISOUDS_ClrOnTimerInterruptStat+0x24>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d302      	bcc.n	800246a <ISOUDS_ClrOnTimerInterruptStat+0x16>
	{
		/* Clear the timer values */
		ISOUDS_TimerVal = 0;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <ISOUDS_ClrOnTimerInterruptStat+0x20>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
	}


}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	24001360 	.word	0x24001360
 8002478:	24001364 	.word	0x24001364

0800247c <ISOUDS_RespOnEvent_Sched>:
** Parameter 		 		: None

** Return value             : None
***************************************************************************************************/
void ISOUDS_RespOnEvent_Sched(void)
{
 800247c:	b5b0      	push	{r4, r5, r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
	uint8_t LoopIndx;

	uint16_t ReqLength;

	/* Run for all events */
	for (EvntIndx = 0 ; EvntIndx < ISOUDS_NUM_OF_EVNTS_SUP; EvntIndx++)
 8002482:	2300      	movs	r3, #0
 8002484:	71fb      	strb	r3, [r7, #7]
 8002486:	e11c      	b.n	80026c2 <ISOUDS_RespOnEvent_Sched+0x246>
	{
		/* Check if the event active */
		if (EVENT_REG_ACTIV == ISOUDS_EventConfig[EvntIndx].EventActStat)
 8002488:	79fa      	ldrb	r2, [r7, #7]
 800248a:	4992      	ldr	r1, [pc, #584]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	3304      	adds	r3, #4
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b02      	cmp	r3, #2
 800249c:	f040 810e 	bne.w	80026bc <ISOUDS_RespOnEvent_Sched+0x240>
		{
			/* Switch event */
			switch(ISOUDS_EventConfig[EvntIndx].EventType)
 80024a0:	79fa      	ldrb	r2, [r7, #7]
 80024a2:	498c      	ldr	r1, [pc, #560]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	3305      	adds	r3, #5
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d824      	bhi.n	8002502 <ISOUDS_RespOnEvent_Sched+0x86>
 80024b8:	a201      	add	r2, pc, #4	; (adr r2, 80024c0 <ISOUDS_RespOnEvent_Sched+0x44>)
 80024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024be:	bf00      	nop
 80024c0:	080024e5 	.word	0x080024e5
 80024c4:	080024eb 	.word	0x080024eb
 80024c8:	080024f1 	.word	0x080024f1
 80024cc:	08002503 	.word	0x08002503
 80024d0:	08002503 	.word	0x08002503
 80024d4:	08002503 	.word	0x08002503
 80024d8:	08002503 	.word	0x08002503
 80024dc:	080024f7 	.word	0x080024f7
 80024e0:	080024fd 	.word	0x080024fd
			{
				/* On DTC status change */
				case ISOUDS_ONDTCSTATUSCHANGE:
				{
					ISOUDS_SchedOnDTCStatChng();
 80024e4:	f000 f8fa 	bl	80026dc <ISOUDS_SchedOnDTCStatChng>
				}
				break;
 80024e8:	e00c      	b.n	8002504 <ISOUDS_RespOnEvent_Sched+0x88>
				/* On timer interrupt */
				case ISOUDS_ONTIMERINTERRUPT:
				{
					ISOUDS_SchedOnTimeIntrpt();
 80024ea:	f000 f917 	bl	800271c <ISOUDS_SchedOnTimeIntrpt>
				}
				break;
 80024ee:	e009      	b.n	8002504 <ISOUDS_RespOnEvent_Sched+0x88>
				/* On Change of DID data */
				case ISOUDS_ONCHANGEOFDATAIDENTIFIER:
				{
					ISOUDS_SchedOnChngOfDID();
 80024f0:	f000 f93a 	bl	8002768 <ISOUDS_SchedOnChngOfDID>
				}
				break;
 80024f4:	e006      	b.n	8002504 <ISOUDS_RespOnEvent_Sched+0x88>

				}
				break;
				case ISOUDS_REPMOSTRSNTDTCONSTATCHNG:
				{
					ISOUDS_SchedMstRsntDTCOnStatChng();
 80024f6:	f000 f99f 	bl	8002838 <ISOUDS_SchedMstRsntDTCOnStatChng>
				}
				break;
 80024fa:	e003      	b.n	8002504 <ISOUDS_RespOnEvent_Sched+0x88>
				case ISOUDS_REPDTCRECINFOONDTCSTTCHNG:
				{
					ISOUDS_SchedRepDTCInfoOnDTCStatChng();
 80024fc:	f000 f9e8 	bl	80028d0 <ISOUDS_SchedRepDTCInfoOnDTCStatChng>
				}
				break;
 8002500:	e000      	b.n	8002504 <ISOUDS_RespOnEvent_Sched+0x88>
				default:
				{

				}
				break;
 8002502:	bf00      	nop
			}

			/* Check if it is infinite window or window time elapsed */
			if ((ISOUDS_INFINITE_WINDOW != ISOUDS_EventConfig[EvntIndx].EventWindowTime) && (ISOUDS_EventConfig[EvntIndx].EventTimeLapsed > ((uint32_t)ISOUDS_EventConfig[EvntIndx].EventWindowTime * ISOUDS_RESPON_EVNT_10S)))
 8002504:	79fa      	ldrb	r2, [r7, #7]
 8002506:	4973      	ldr	r1, [pc, #460]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	3306      	adds	r3, #6
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b02      	cmp	r3, #2
 8002518:	f000 80b4 	beq.w	8002684 <ISOUDS_RespOnEvent_Sched+0x208>
 800251c:	79fa      	ldrb	r2, [r7, #7]
 800251e:	496d      	ldr	r1, [pc, #436]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	6819      	ldr	r1, [r3, #0]
 800252c:	79fa      	ldrb	r2, [r7, #7]
 800252e:	4869      	ldr	r0, [pc, #420]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4403      	add	r3, r0
 800253a:	3306      	adds	r3, #6
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	f242 7310 	movw	r3, #10000	; 0x2710
 8002544:	fb02 f303 	mul.w	r3, r2, r3
 8002548:	4299      	cmp	r1, r3
 800254a:	f240 809b 	bls.w	8002684 <ISOUDS_RespOnEvent_Sched+0x208>
			{
				/* Prepare the final response */
				ISOUDS_RespEventReqBuffer[0] = ISOUDS_SIDRESPONEVENT_POSRESP;
 800254e:	4b62      	ldr	r3, [pc, #392]	; (80026d8 <ISOUDS_RespOnEvent_Sched+0x25c>)
 8002550:	22c6      	movs	r2, #198	; 0xc6
 8002552:	701a      	strb	r2, [r3, #0]
				ISOUDS_RespEventReqBuffer[1] = ISOUDS_EventConfig[EvntIndx].EventType;
 8002554:	79fa      	ldrb	r2, [r7, #7]
 8002556:	495f      	ldr	r1, [pc, #380]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	3305      	adds	r3, #5
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	4b5c      	ldr	r3, [pc, #368]	; (80026d8 <ISOUDS_RespOnEvent_Sched+0x25c>)
 8002568:	705a      	strb	r2, [r3, #1]
				ISOUDS_RespEventReqBuffer[2] = 1;
 800256a:	4b5b      	ldr	r3, [pc, #364]	; (80026d8 <ISOUDS_RespOnEvent_Sched+0x25c>)
 800256c:	2201      	movs	r2, #1
 800256e:	709a      	strb	r2, [r3, #2]
				ISOUDS_RespEventReqBuffer[3] = ISOUDS_EventConfig[EvntIndx].EventWindowTime;
 8002570:	79fa      	ldrb	r2, [r7, #7]
 8002572:	4958      	ldr	r1, [pc, #352]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 8002574:	4613      	mov	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	3306      	adds	r3, #6
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	4b55      	ldr	r3, [pc, #340]	; (80026d8 <ISOUDS_RespOnEvent_Sched+0x25c>)
 8002584:	70da      	strb	r2, [r3, #3]

				for (LoopIndx = 0; LoopIndx < ISOUDS_EventConfig[EvntIndx].eventTypeRecordLen; LoopIndx++)
 8002586:	2300      	movs	r3, #0
 8002588:	71bb      	strb	r3, [r7, #6]
 800258a:	e011      	b.n	80025b0 <ISOUDS_RespOnEvent_Sched+0x134>
				{
					ISOUDS_RespEventReqBuffer[LoopIndx + 4] = ISOUDS_EventConfig[EvntIndx].eventTypeRecord[LoopIndx];
 800258c:	79fa      	ldrb	r2, [r7, #7]
 800258e:	79b8      	ldrb	r0, [r7, #6]
 8002590:	79bb      	ldrb	r3, [r7, #6]
 8002592:	1d19      	adds	r1, r3, #4
 8002594:	4c4f      	ldr	r4, [pc, #316]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4423      	add	r3, r4
 80025a0:	4403      	add	r3, r0
 80025a2:	330a      	adds	r3, #10
 80025a4:	781a      	ldrb	r2, [r3, #0]
 80025a6:	4b4c      	ldr	r3, [pc, #304]	; (80026d8 <ISOUDS_RespOnEvent_Sched+0x25c>)
 80025a8:	545a      	strb	r2, [r3, r1]
				for (LoopIndx = 0; LoopIndx < ISOUDS_EventConfig[EvntIndx].eventTypeRecordLen; LoopIndx++)
 80025aa:	79bb      	ldrb	r3, [r7, #6]
 80025ac:	3301      	adds	r3, #1
 80025ae:	71bb      	strb	r3, [r7, #6]
 80025b0:	79fa      	ldrb	r2, [r7, #7]
 80025b2:	4948      	ldr	r1, [pc, #288]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	3307      	adds	r3, #7
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	79ba      	ldrb	r2, [r7, #6]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d3e1      	bcc.n	800258c <ISOUDS_RespOnEvent_Sched+0x110>
				}

				for (LoopIndx = 0; LoopIndx < (ISOUDS_EventConfig[EvntIndx].serviceToRespondToRecordLen + ISOUDS_EventConfig[EvntIndx].eventTypeRecordLen); LoopIndx++)
 80025c8:	2300      	movs	r3, #0
 80025ca:	71bb      	strb	r3, [r7, #6]
 80025cc:	e01b      	b.n	8002606 <ISOUDS_RespOnEvent_Sched+0x18a>
				{
					ISOUDS_RespEventReqBuffer[LoopIndx + 4 + ISOUDS_EventConfig[EvntIndx].eventTypeRecordLen] = ISOUDS_EventConfig[EvntIndx].serviceToRespondToRecord[LoopIndx];
 80025ce:	79fa      	ldrb	r2, [r7, #7]
 80025d0:	79b8      	ldrb	r0, [r7, #6]
 80025d2:	79bb      	ldrb	r3, [r7, #6]
 80025d4:	1d1c      	adds	r4, r3, #4
 80025d6:	79f9      	ldrb	r1, [r7, #7]
 80025d8:	4d3e      	ldr	r5, [pc, #248]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 80025da:	460b      	mov	r3, r1
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	442b      	add	r3, r5
 80025e4:	3307      	adds	r3, #7
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	18e1      	adds	r1, r4, r3
 80025ea:	4c3a      	ldr	r4, [pc, #232]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4423      	add	r3, r4
 80025f6:	4403      	add	r3, r0
 80025f8:	3314      	adds	r3, #20
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <ISOUDS_RespOnEvent_Sched+0x25c>)
 80025fe:	545a      	strb	r2, [r3, r1]
				for (LoopIndx = 0; LoopIndx < (ISOUDS_EventConfig[EvntIndx].serviceToRespondToRecordLen + ISOUDS_EventConfig[EvntIndx].eventTypeRecordLen); LoopIndx++)
 8002600:	79bb      	ldrb	r3, [r7, #6]
 8002602:	3301      	adds	r3, #1
 8002604:	71bb      	strb	r3, [r7, #6]
 8002606:	79b9      	ldrb	r1, [r7, #6]
 8002608:	79fa      	ldrb	r2, [r7, #7]
 800260a:	4832      	ldr	r0, [pc, #200]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4403      	add	r3, r0
 8002616:	3308      	adds	r3, #8
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	461c      	mov	r4, r3
 800261c:	79fa      	ldrb	r2, [r7, #7]
 800261e:	482d      	ldr	r0, [pc, #180]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4403      	add	r3, r0
 800262a:	3307      	adds	r3, #7
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	4423      	add	r3, r4
 8002630:	4299      	cmp	r1, r3
 8002632:	dbcc      	blt.n	80025ce <ISOUDS_RespOnEvent_Sched+0x152>
				}

				ReqLength = (4U + (uint16_t)ISOUDS_EventConfig[EvntIndx].eventTypeRecordLen + ISOUDS_EventConfig[EvntIndx].serviceToRespondToRecordLen);
 8002634:	79fa      	ldrb	r2, [r7, #7]
 8002636:	4927      	ldr	r1, [pc, #156]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3307      	adds	r3, #7
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	b299      	uxth	r1, r3
 8002648:	79fa      	ldrb	r2, [r7, #7]
 800264a:	4822      	ldr	r0, [pc, #136]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4403      	add	r3, r0
 8002656:	3308      	adds	r3, #8
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	440b      	add	r3, r1
 800265c:	b29b      	uxth	r3, r3
 800265e:	3304      	adds	r3, #4
 8002660:	80bb      	strh	r3, [r7, #4]

				ISOUDS_ServerSetRespCANid();
 8002662:	f7ff f811 	bl	8001688 <ISOUDS_ServerSetRespCANid>
				/* Transmit the message */
				ISOUDS_ServerTxRequest (ReqLength, &ISOUDS_RespEventReqBuffer[0]);
 8002666:	88bb      	ldrh	r3, [r7, #4]
 8002668:	491b      	ldr	r1, [pc, #108]	; (80026d8 <ISOUDS_RespOnEvent_Sched+0x25c>)
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff f821 	bl	80016b2 <ISOUDS_ServerTxRequest>
				/* Inactivate the Event */
				ISOUDS_EventConfig[EvntIndx].EventActStat = EVENT_REG_INACTIV;
 8002670:	79fa      	ldrb	r2, [r7, #7]
 8002672:	4918      	ldr	r1, [pc, #96]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3304      	adds	r3, #4
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
			}
			/* If  not infinite window */
			if (ISOUDS_INFINITE_WINDOW != ISOUDS_EventConfig[EvntIndx].EventWindowTime)
 8002684:	79fa      	ldrb	r2, [r7, #7]
 8002686:	4913      	ldr	r1, [pc, #76]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	3306      	adds	r3, #6
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d010      	beq.n	80026bc <ISOUDS_RespOnEvent_Sched+0x240>
			{
				/* Increment the Time elapsed */
				ISOUDS_EventConfig[EvntIndx].EventTimeLapsed += ISOUDS_SERVER_PERIOD_SCHED;
 800269a:	79fa      	ldrb	r2, [r7, #7]
 800269c:	490d      	ldr	r1, [pc, #52]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 800269e:	4613      	mov	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	79fa      	ldrb	r2, [r7, #7]
 80026ac:	1d59      	adds	r1, r3, #5
 80026ae:	4809      	ldr	r0, [pc, #36]	; (80026d4 <ISOUDS_RespOnEvent_Sched+0x258>)
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4403      	add	r3, r0
 80026ba:	6019      	str	r1, [r3, #0]
	for (EvntIndx = 0 ; EvntIndx < ISOUDS_NUM_OF_EVNTS_SUP; EvntIndx++)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	3301      	adds	r3, #1
 80026c0:	71fb      	strb	r3, [r7, #7]
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	2b05      	cmp	r3, #5
 80026c6:	f67f aedf 	bls.w	8002488 <ISOUDS_RespOnEvent_Sched+0xc>
			}
		}
	}
}
 80026ca:	bf00      	nop
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bdb0      	pop	{r4, r5, r7, pc}
 80026d4:	24001368 	.word	0x24001368
 80026d8:	24001464 	.word	0x24001464

080026dc <ISOUDS_SchedOnDTCStatChng>:

static void ISOUDS_SchedOnDTCStatChng(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
	uint8_t EventStatus;

	/* Get on DTC status event status */
	EventStatus = ISOUDS_GetOnDtcStatChangeEventStat();
 80026e2:	f7ff fe57 	bl	8002394 <ISOUDS_GetOnDtcStatChangeEventStat>
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
	/* EEvent triggered */
	if (ISOUDS_TRUE == EventStatus)
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d10d      	bne.n	800270c <ISOUDS_SchedOnDTCStatChng+0x30>
	{
		/* Get the UDS status */
		if (ISOUDS_IDLE == ISOUDS_GetUDSStat())
 80026f0:	f008 ff2c 	bl	800b54c <ISOUDS_GetUDSStat>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d108      	bne.n	800270c <ISOUDS_SchedOnDTCStatChng+0x30>
		{
			/* Send the request */
			ISOUDS_ServerMsgIndi(ISOUDS_EventConfig[OnDtcStatusChange].serviceToRespondToRecordLen, ISOUDS_EventConfig[OnDtcStatusChange].serviceToRespondToRecord, ISOUDS_PHYSICALREQ);
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <ISOUDS_SchedOnDTCStatChng+0x38>)
 80026fc:	891b      	ldrh	r3, [r3, #8]
 80026fe:	2202      	movs	r2, #2
 8002700:	4905      	ldr	r1, [pc, #20]	; (8002718 <ISOUDS_SchedOnDTCStatChng+0x3c>)
 8002702:	4618      	mov	r0, r3
 8002704:	f008 fc80 	bl	800b008 <ISOUDS_ServerMsgIndi>
			/* CLear the event triggred */
			(void)ISOUDS_ClrOnDtcStatChangeEventStat();
 8002708:	f7ff fe5c 	bl	80023c4 <ISOUDS_ClrOnDtcStatChangeEventStat>
		}
	}
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	24001368 	.word	0x24001368
 8002718:	2400137c 	.word	0x2400137c

0800271c <ISOUDS_SchedOnTimeIntrpt>:

static void ISOUDS_SchedOnTimeIntrpt(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
	uint8_t EventStatus;

	ISOUDS_SchedOnTimeIntrpt();
 8002722:	f7ff fffb 	bl	800271c <ISOUDS_SchedOnTimeIntrpt>
	/* Get the event status */
	EventStatus = ISOUDS_GetOnTimerInterruptStat();
 8002726:	f7ff fe67 	bl	80023f8 <ISOUDS_GetOnTimerInterruptStat>
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
	/* Check if the event triggered */
	if (ISOUDS_TRUE == EventStatus)
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d10e      	bne.n	8002752 <ISOUDS_SchedOnTimeIntrpt+0x36>
	{
		/* Check the UDS status */
		if (ISOUDS_IDLE == ISOUDS_GetUDSStat())
 8002734:	f008 ff0a 	bl	800b54c <ISOUDS_GetUDSStat>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10b      	bne.n	8002756 <ISOUDS_SchedOnTimeIntrpt+0x3a>
		{
			/* Send the request	 */
			ISOUDS_ServerMsgIndi(ISOUDS_EventConfig[OnTimerInterrupt].serviceToRespondToRecordLen, ISOUDS_EventConfig[OnTimerInterrupt].serviceToRespondToRecord, ISOUDS_PHYSICALREQ);
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <ISOUDS_SchedOnTimeIntrpt+0x44>)
 8002740:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002742:	2202      	movs	r2, #2
 8002744:	4907      	ldr	r1, [pc, #28]	; (8002764 <ISOUDS_SchedOnTimeIntrpt+0x48>)
 8002746:	4618      	mov	r0, r3
 8002748:	f008 fc5e 	bl	800b008 <ISOUDS_ServerMsgIndi>
			/* CLear the event */
			ISOUDS_ClrOnTimerInterruptStat();
 800274c:	f7ff fe82 	bl	8002454 <ISOUDS_ClrOnTimerInterruptStat>
	else
	{
		/* Update the evet interrupt */
		ISOUDS_UpdtOnTmrIntrptTmrVal();
	}
}
 8002750:	e001      	b.n	8002756 <ISOUDS_SchedOnTimeIntrpt+0x3a>
		ISOUDS_UpdtOnTmrIntrptTmrVal();
 8002752:	f7ff fe69 	bl	8002428 <ISOUDS_UpdtOnTmrIntrptTmrVal>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	24001368 	.word	0x24001368
 8002764:	240013a0 	.word	0x240013a0

08002768 <ISOUDS_SchedOnChngOfDID>:

static void ISOUDS_SchedOnChngOfDID(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
	uint8_t RetVal;
	uint8_t LoopIndx;

	uint16_t DID_NUM = 0u;
 800276e:	2300      	movs	r3, #0
 8002770:	80bb      	strh	r3, [r7, #4]

	DID_NUM = ((uint16_t)ISOUDS_EventConfig[OnChangeOfDataIdentifier].eventTypeRecord[0] << 8) | ISOUDS_EventConfig[OnChangeOfDataIdentifier].eventTypeRecord[1];
 8002772:	4b2c      	ldr	r3, [pc, #176]	; (8002824 <ISOUDS_SchedOnChngOfDID+0xbc>)
 8002774:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	b21a      	sxth	r2, r3
 800277c:	4b29      	ldr	r3, [pc, #164]	; (8002824 <ISOUDS_SchedOnChngOfDID+0xbc>)
 800277e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002782:	b21b      	sxth	r3, r3
 8002784:	4313      	orrs	r3, r2
 8002786:	b21b      	sxth	r3, r3
 8002788:	80bb      	strh	r3, [r7, #4]
	ISOUDS_RespOnEventDIDLiveLen = 0u;
 800278a:	4b27      	ldr	r3, [pc, #156]	; (8002828 <ISOUDS_SchedOnChngOfDID+0xc0>)
 800278c:	2200      	movs	r2, #0
 800278e:	801a      	strh	r2, [r3, #0]

	RetVal = ISOUDS_RdDidData(DID_NUM,ISOUDS_RespOnEventDIDLIVEDATA,&ISOUDS_RespOnEventDIDLiveLen);
 8002790:	88bb      	ldrh	r3, [r7, #4]
 8002792:	4a25      	ldr	r2, [pc, #148]	; (8002828 <ISOUDS_SchedOnChngOfDID+0xc0>)
 8002794:	4925      	ldr	r1, [pc, #148]	; (800282c <ISOUDS_SchedOnChngOfDID+0xc4>)
 8002796:	4618      	mov	r0, r3
 8002798:	f009 f892 	bl	800b8c0 <ISOUDS_RdDidData>
 800279c:	4603      	mov	r3, r0
 800279e:	70fb      	strb	r3, [r7, #3]

	if(ISOUDS_TRUE == RetVal)
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d13a      	bne.n	800281c <ISOUDS_SchedOnChngOfDID+0xb4>
	{
		for(LoopIndx = 0; LoopIndx < ISOUDS_RespOnEventDIDLiveLen;LoopIndx++ )
 80027a6:	2300      	movs	r3, #0
 80027a8:	71fb      	strb	r3, [r7, #7]
 80027aa:	e00a      	b.n	80027c2 <ISOUDS_SchedOnChngOfDID+0x5a>
		{
			if(ISOUDS_RespOnEventDIDLIVEDATA[LoopIndx] != ISOUDS_RespOnEventDIDData[LoopIndx])
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	4a1f      	ldr	r2, [pc, #124]	; (800282c <ISOUDS_SchedOnChngOfDID+0xc4>)
 80027b0:	5cd2      	ldrb	r2, [r2, r3]
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	491e      	ldr	r1, [pc, #120]	; (8002830 <ISOUDS_SchedOnChngOfDID+0xc8>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d109      	bne.n	80027d0 <ISOUDS_SchedOnChngOfDID+0x68>
		for(LoopIndx = 0; LoopIndx < ISOUDS_RespOnEventDIDLiveLen;LoopIndx++ )
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	3301      	adds	r3, #1
 80027c0:	71fb      	strb	r3, [r7, #7]
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <ISOUDS_SchedOnChngOfDID+0xc0>)
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d3ee      	bcc.n	80027ac <ISOUDS_SchedOnChngOfDID+0x44>
 80027ce:	e000      	b.n	80027d2 <ISOUDS_SchedOnChngOfDID+0x6a>
			{
				break;
 80027d0:	bf00      	nop
			}

		}

		if(LoopIndx != ISOUDS_RespOnEventDIDLiveLen)
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <ISOUDS_SchedOnChngOfDID+0xc0>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d01e      	beq.n	800281c <ISOUDS_SchedOnChngOfDID+0xb4>
		{
			/* Check the UDS status */
			if (ISOUDS_IDLE == ISOUDS_GetUDSStat())
 80027de:	f008 feb5 	bl	800b54c <ISOUDS_GetUDSStat>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d119      	bne.n	800281c <ISOUDS_SchedOnChngOfDID+0xb4>
			{
				ISOUDS_ServerMsgIndi(ISOUDS_EventConfig[OnChangeOfDataIdentifier].serviceToRespondToRecordLen, ISOUDS_EventConfig[OnChangeOfDataIdentifier].serviceToRespondToRecord, ISOUDS_PHYSICALREQ);
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <ISOUDS_SchedOnChngOfDID+0xbc>)
 80027ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ee:	2202      	movs	r2, #2
 80027f0:	4910      	ldr	r1, [pc, #64]	; (8002834 <ISOUDS_SchedOnChngOfDID+0xcc>)
 80027f2:	4618      	mov	r0, r3
 80027f4:	f008 fc08 	bl	800b008 <ISOUDS_ServerMsgIndi>

				for(LoopIndx = 0; LoopIndx < ISOUDS_RespOnEventDIDLiveLen;LoopIndx++ )
 80027f8:	2300      	movs	r3, #0
 80027fa:	71fb      	strb	r3, [r7, #7]
 80027fc:	e008      	b.n	8002810 <ISOUDS_SchedOnChngOfDID+0xa8>
				{
					 ISOUDS_RespOnEventDIDData[LoopIndx] = ISOUDS_RespOnEventDIDLIVEDATA[LoopIndx];
 80027fe:	79fa      	ldrb	r2, [r7, #7]
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	490a      	ldr	r1, [pc, #40]	; (800282c <ISOUDS_SchedOnChngOfDID+0xc4>)
 8002804:	5c89      	ldrb	r1, [r1, r2]
 8002806:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <ISOUDS_SchedOnChngOfDID+0xc8>)
 8002808:	54d1      	strb	r1, [r2, r3]
				for(LoopIndx = 0; LoopIndx < ISOUDS_RespOnEventDIDLiveLen;LoopIndx++ )
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	3301      	adds	r3, #1
 800280e:	71fb      	strb	r3, [r7, #7]
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	b29a      	uxth	r2, r3
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <ISOUDS_SchedOnChngOfDID+0xc0>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d3f0      	bcc.n	80027fe <ISOUDS_SchedOnChngOfDID+0x96>
				}

			}
		}
	}
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	24001368 	.word	0x24001368
 8002828:	24001456 	.word	0x24001456
 800282c:	2400144c 	.word	0x2400144c
 8002830:	24001440 	.word	0x24001440
 8002834:	240013c4 	.word	0x240013c4

08002838 <ISOUDS_SchedMstRsntDTCOnStatChng>:

static void ISOUDS_SchedMstRsntDTCOnStatChng(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	switch(ISOUDS_EventConfig[reportMostRecentDtcOnStatusChange].eventTypeRecord[0])
 800283c:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <ISOUDS_SchedMstRsntDTCOnStatChng+0x88>)
 800283e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8002842:	2b0d      	cmp	r3, #13
 8002844:	d002      	beq.n	800284c <ISOUDS_SchedMstRsntDTCOnStatChng+0x14>
 8002846:	2b0e      	cmp	r3, #14
 8002848:	d018      	beq.n	800287c <ISOUDS_SchedMstRsntDTCOnStatChng+0x44>
 800284a:	e02f      	b.n	80028ac <ISOUDS_SchedMstRsntDTCOnStatChng+0x74>
	{
		case REPORTMOSTRECENTTESTFAILEDDTC:
		{
			if (ISOUDS_TRUE == ISOUDS_MostResentTestFaildDTCFlag)
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <ISOUDS_SchedMstRsntDTCOnStatChng+0x8c>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d130      	bne.n	80028b6 <ISOUDS_SchedMstRsntDTCOnStatChng+0x7e>
			{
				/* Check the UDS status */
				if (ISOUDS_IDLE == ISOUDS_GetUDSStat())
 8002854:	f008 fe7a 	bl	800b54c <ISOUDS_GetUDSStat>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d12b      	bne.n	80028b6 <ISOUDS_SchedMstRsntDTCOnStatChng+0x7e>
				{
					/* Prepare the request */
					ISOUDS_RespEventReqBuffer[0] = 0x19;
 800285e:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <ISOUDS_SchedMstRsntDTCOnStatChng+0x90>)
 8002860:	2219      	movs	r2, #25
 8002862:	701a      	strb	r2, [r3, #0]
					ISOUDS_RespEventReqBuffer[1] = 0x0D;
 8002864:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <ISOUDS_SchedMstRsntDTCOnStatChng+0x90>)
 8002866:	220d      	movs	r2, #13
 8002868:	705a      	strb	r2, [r3, #1]

					/* Send the request	 */
					ISOUDS_ServerMsgIndi(2U, &ISOUDS_RespEventReqBuffer[0], ISOUDS_PHYSICALREQ);
 800286a:	2202      	movs	r2, #2
 800286c:	4916      	ldr	r1, [pc, #88]	; (80028c8 <ISOUDS_SchedMstRsntDTCOnStatChng+0x90>)
 800286e:	2002      	movs	r0, #2
 8002870:	f008 fbca 	bl	800b008 <ISOUDS_ServerMsgIndi>
					ISOUDS_MostResentTestFaildDTCFlag = ISOUDS_FALSE;
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <ISOUDS_SchedMstRsntDTCOnStatChng+0x8c>)
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		break;
 800287a:	e01c      	b.n	80028b6 <ISOUDS_SchedMstRsntDTCOnStatChng+0x7e>
		case REPORTMOSTRECENTCONFIRMEDDTC:
		{
			if (ISOUDS_TRUE == ISOUDS_MostResentConfirmedDTCFlag)
 800287c:	4b13      	ldr	r3, [pc, #76]	; (80028cc <ISOUDS_SchedMstRsntDTCOnStatChng+0x94>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d11a      	bne.n	80028ba <ISOUDS_SchedMstRsntDTCOnStatChng+0x82>
			{
				/* Check the UDS status */
				if (ISOUDS_IDLE == ISOUDS_GetUDSStat())
 8002884:	f008 fe62 	bl	800b54c <ISOUDS_GetUDSStat>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d115      	bne.n	80028ba <ISOUDS_SchedMstRsntDTCOnStatChng+0x82>
				{
					/* Prepare the request */
					ISOUDS_RespEventReqBuffer[0] = 0x19;
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <ISOUDS_SchedMstRsntDTCOnStatChng+0x90>)
 8002890:	2219      	movs	r2, #25
 8002892:	701a      	strb	r2, [r3, #0]
					ISOUDS_RespEventReqBuffer[1] = 0x0E;
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <ISOUDS_SchedMstRsntDTCOnStatChng+0x90>)
 8002896:	220e      	movs	r2, #14
 8002898:	705a      	strb	r2, [r3, #1]

					/* Send the request	 */
					ISOUDS_ServerMsgIndi(2U, &ISOUDS_RespEventReqBuffer[0], ISOUDS_PHYSICALREQ);
 800289a:	2202      	movs	r2, #2
 800289c:	490a      	ldr	r1, [pc, #40]	; (80028c8 <ISOUDS_SchedMstRsntDTCOnStatChng+0x90>)
 800289e:	2002      	movs	r0, #2
 80028a0:	f008 fbb2 	bl	800b008 <ISOUDS_ServerMsgIndi>

					ISOUDS_MostResentConfirmedDTCFlag = ISOUDS_FALSE;
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <ISOUDS_SchedMstRsntDTCOnStatChng+0x94>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		break;
 80028aa:	e006      	b.n	80028ba <ISOUDS_SchedMstRsntDTCOnStatChng+0x82>
		default:
		{
			ISOUDS_EventConfig[reportMostRecentDtcOnStatusChange].EventActStat = EVENT_REG_ACTIV;
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <ISOUDS_SchedMstRsntDTCOnStatChng+0x88>)
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		}
		break;
 80028b4:	e002      	b.n	80028bc <ISOUDS_SchedMstRsntDTCOnStatChng+0x84>
		break;
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <ISOUDS_SchedMstRsntDTCOnStatChng+0x84>
		break;
 80028ba:	bf00      	nop
	}
}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	24001368 	.word	0x24001368
 80028c4:	24001458 	.word	0x24001458
 80028c8:	24001464 	.word	0x24001464
 80028cc:	24001459 	.word	0x24001459

080028d0 <ISOUDS_SchedRepDTCInfoOnDTCStatChng>:

static void ISOUDS_SchedRepDTCInfoOnDTCStatChng(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
	uint8_t LoopIndx;
	uint16_t ReqLength;

	if (ISOUDS_TRUE == ISOUDS_ResponStatChngFlag)
 80028d6:	4b28      	ldr	r3, [pc, #160]	; (8002978 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xa8>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d148      	bne.n	8002970 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xa0>
	{
		/* Check the UDS status */
		if (ISOUDS_IDLE == ISOUDS_GetUDSStat())
 80028de:	f008 fe35 	bl	800b54c <ISOUDS_GetUDSStat>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d143      	bne.n	8002970 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xa0>
		{
			/* Prepare the request */
			ISOUDS_RespEventReqBuffer[0] = 0x19;
 80028e8:	4b24      	ldr	r3, [pc, #144]	; (800297c <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xac>)
 80028ea:	2219      	movs	r2, #25
 80028ec:	701a      	strb	r2, [r3, #0]

			for (LoopIndx = 0; LoopIndx < ISOUDS_EventConfig[reportDTCRecordInformationOnDtcStatusChange].serviceToRespondToRecordLen; LoopIndx++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	71fb      	strb	r3, [r7, #7]
 80028f2:	e00b      	b.n	800290c <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0x3c>
			{
				ISOUDS_RespEventReqBuffer[LoopIndx + 1] = ISOUDS_EventConfig[reportDTCRecordInformationOnDtcStatusChange].serviceToRespondToRecord[LoopIndx];
 80028f4:	79fa      	ldrb	r2, [r7, #7]
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	3301      	adds	r3, #1
 80028fa:	4921      	ldr	r1, [pc, #132]	; (8002980 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xb0>)
 80028fc:	440a      	add	r2, r1
 80028fe:	f892 10c8 	ldrb.w	r1, [r2, #200]	; 0xc8
 8002902:	4a1e      	ldr	r2, [pc, #120]	; (800297c <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xac>)
 8002904:	54d1      	strb	r1, [r2, r3]
			for (LoopIndx = 0; LoopIndx < ISOUDS_EventConfig[reportDTCRecordInformationOnDtcStatusChange].serviceToRespondToRecordLen; LoopIndx++)
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	3301      	adds	r3, #1
 800290a:	71fb      	strb	r3, [r7, #7]
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	b29a      	uxth	r2, r3
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xb0>)
 8002912:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8002916:	429a      	cmp	r2, r3
 8002918:	d3ec      	bcc.n	80028f4 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0x24>
			}

			ReqLength = ISOUDS_EventConfig[reportDTCRecordInformationOnDtcStatusChange].serviceToRespondToRecordLen + 1;
 800291a:	4b19      	ldr	r3, [pc, #100]	; (8002980 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xb0>)
 800291c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8002920:	3301      	adds	r3, #1
 8002922:	80bb      	strh	r3, [r7, #4]

			ISOUDS_RespEventReqBuffer[ReqLength] = (uint8_t)((ISOUDS_RespDIDonStatChng >> 16) & 0xFF);
 8002924:	4b17      	ldr	r3, [pc, #92]	; (8002984 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xb4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0c1a      	lsrs	r2, r3, #16
 800292a:	88bb      	ldrh	r3, [r7, #4]
 800292c:	b2d1      	uxtb	r1, r2
 800292e:	4a13      	ldr	r2, [pc, #76]	; (800297c <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xac>)
 8002930:	54d1      	strb	r1, [r2, r3]
			ReqLength++;
 8002932:	88bb      	ldrh	r3, [r7, #4]
 8002934:	3301      	adds	r3, #1
 8002936:	80bb      	strh	r3, [r7, #4]
			ISOUDS_RespEventReqBuffer[ReqLength] = (uint8_t)((ISOUDS_RespDIDonStatChng >> 8) & 0xFF);
 8002938:	4b12      	ldr	r3, [pc, #72]	; (8002984 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xb4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	0a1a      	lsrs	r2, r3, #8
 800293e:	88bb      	ldrh	r3, [r7, #4]
 8002940:	b2d1      	uxtb	r1, r2
 8002942:	4a0e      	ldr	r2, [pc, #56]	; (800297c <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xac>)
 8002944:	54d1      	strb	r1, [r2, r3]
			ReqLength++;
 8002946:	88bb      	ldrh	r3, [r7, #4]
 8002948:	3301      	adds	r3, #1
 800294a:	80bb      	strh	r3, [r7, #4]
			ISOUDS_RespEventReqBuffer[ReqLength] = (uint8_t)(ISOUDS_RespDIDonStatChng & 0xFF);
 800294c:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xb4>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	88bb      	ldrh	r3, [r7, #4]
 8002952:	b2d1      	uxtb	r1, r2
 8002954:	4a09      	ldr	r2, [pc, #36]	; (800297c <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xac>)
 8002956:	54d1      	strb	r1, [r2, r3]
			ReqLength++;
 8002958:	88bb      	ldrh	r3, [r7, #4]
 800295a:	3301      	adds	r3, #1
 800295c:	80bb      	strh	r3, [r7, #4]
			/* Send the request	 */
			ISOUDS_ServerMsgIndi(ReqLength, &ISOUDS_RespEventReqBuffer[0], ISOUDS_PHYSICALREQ);
 800295e:	88bb      	ldrh	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	4906      	ldr	r1, [pc, #24]	; (800297c <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xac>)
 8002964:	4618      	mov	r0, r3
 8002966:	f008 fb4f 	bl	800b008 <ISOUDS_ServerMsgIndi>

			ISOUDS_ResponStatChngFlag = ISOUDS_FALSE;
 800296a:	4b03      	ldr	r3, [pc, #12]	; (8002978 <ISOUDS_SchedRepDTCInfoOnDTCStatChng+0xa8>)
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	24001460 	.word	0x24001460
 800297c:	24001464 	.word	0x24001464
 8002980:	24001368 	.word	0x24001368
 8002984:	2400145c 	.word	0x2400145c

08002988 <ISOUDS_Get_RtnContrlMaxSubFun>:
** Return value             : retVal : Number of RIDs Supported

** Remarks                  : None
***************************************************************************************************/
uint16_t ISOUDS_Get_RtnContrlMaxSubFun(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
	return ISOUDS_RtnContrlMaxSubFun;
 800298c:	2303      	movs	r3, #3
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <ISOUDS_RtnControlTypeSuppChk>:
**							: RoutineIDIndex : Routine ID index
**
** Return value             : RetVal : Communication type validity
*******************************************************************************/
uint8_t ISOUDS_RtnControlTypeSuppChk(uint8_t RoutineType, uint16_t RoutineIDIndex)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	460a      	mov	r2, r1
 80029a2:	71fb      	strb	r3, [r7, #7]
 80029a4:	4613      	mov	r3, r2
 80029a6:	80bb      	strh	r3, [r7, #4]
	uint8_t Index;
	uint8_t RtnType_Found = ISOUDS_FALSE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73bb      	strb	r3, [r7, #14]

	for (Index = 0; (Index < ISOUDS_RtnCntrlCfg_Tbl[RoutineIDIndex].NumOfRtntypeSup) && (ISOUDS_FALSE == RtnType_Found); Index++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	e00f      	b.n	80029d2 <ISOUDS_RtnControlTypeSuppChk+0x3a>
	{
		if (RoutineType == ISOUDS_RtnCntrlCfg_Tbl[RoutineIDIndex].RtntypeSupp[Index])
 80029b2:	88ba      	ldrh	r2, [r7, #4]
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	4910      	ldr	r1, [pc, #64]	; (80029f8 <ISOUDS_RtnControlTypeSuppChk+0x60>)
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	440a      	add	r2, r1
 80029bc:	4413      	add	r3, r2
 80029be:	3304      	adds	r3, #4
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	79fa      	ldrb	r2, [r7, #7]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d101      	bne.n	80029cc <ISOUDS_RtnControlTypeSuppChk+0x34>
		{
			RtnType_Found = ISOUDS_TRUE;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73bb      	strb	r3, [r7, #14]
	for (Index = 0; (Index < ISOUDS_RtnCntrlCfg_Tbl[RoutineIDIndex].NumOfRtntypeSup) && (ISOUDS_FALSE == RtnType_Found); Index++)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	3301      	adds	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	88bb      	ldrh	r3, [r7, #4]
 80029d4:	4a08      	ldr	r2, [pc, #32]	; (80029f8 <ISOUDS_RtnControlTypeSuppChk+0x60>)
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	4413      	add	r3, r2
 80029da:	3303      	adds	r3, #3
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d202      	bcs.n	80029ea <ISOUDS_RtnControlTypeSuppChk+0x52>
 80029e4:	7bbb      	ldrb	r3, [r7, #14]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0e3      	beq.n	80029b2 <ISOUDS_RtnControlTypeSuppChk+0x1a>
		{
			/* Do nothing */
		}
	}

	return RtnType_Found;
 80029ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	2400021c 	.word	0x2400021c

080029fc <ISOUDS_RtnCntrlPreCondCheck>:
**
**
** Return value             : RetVal : Pre condition validity
*******************************************************************************/
uint8_t ISOUDS_RtnCntrlPreCondCheck(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
	uint8_t RetVal = ISOUDS_TRUE;
 8002a02:	2301      	movs	r3, #1
 8002a04:	71fb      	strb	r3, [r7, #7]

	/* Add Code to check the Pre-conditions and update RetVal accordingly */
	RetVal = HAL_RtnCntrlPreCondCheck();
 8002a06:	f000 f855 	bl	8002ab4 <HAL_RtnCntrlPreCondCheck>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]

	return RetVal;
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <ISOUDS_RtnCheckMemory>:
**							: Data Pointer: Point to Node Identification Number if required
**							: RespLenth : Response lenth
** Return value             : None
***************************************************************************************************/
static uint8_t ISOUDS_RtnCheckMemory(ISOUDS_ConfType *ISOUDSConfPtr, uint16_t RtnCntrlID, uint8_t RtnType, uint8_t *Data, uint16_t *RespLenth)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	817b      	strh	r3, [r7, #10]
 8002a26:	4613      	mov	r3, r2
 8002a28:	727b      	strb	r3, [r7, #9]
	uint8_t RespVal = ISOUDS_POSRES;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	75fb      	strb	r3, [r7, #23]

	/* Manual code start */

	/* Initial Routine request handler */
	/* Perform Operation and store the Response code into RespVal */
	RespVal = HAL_RtnCheckMemory(ISOUDSConfPtr, RtnCntrlID, RtnType, Data, RespLenth);
 8002a2e:	7a7a      	ldrb	r2, [r7, #9]
 8002a30:	8979      	ldrh	r1, [r7, #10]
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f847 	bl	8002acc <HAL_RtnCheckMemory>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	75fb      	strb	r3, [r7, #23]

	/* Manual Code End */

	return RespVal;
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <ISOUDS_RtnEraseMemory>:
**							: Data Pointer: Point to Node Identification Number if required
**							: RespLenth : Response lenth
** Return value             : None
***************************************************************************************************/
static uint8_t ISOUDS_RtnEraseMemory(ISOUDS_ConfType *ISOUDSConfPtr, uint16_t RtnCntrlID, uint8_t RtnType, uint8_t *Data, uint16_t *RespLenth)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	817b      	strh	r3, [r7, #10]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	727b      	strb	r3, [r7, #9]
	uint8_t RespVal = ISOUDS_POSRES;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	75fb      	strb	r3, [r7, #23]

	/* Manual code start */

	/* Initial Routine request handler */
	/* Perform Operation and store the Response code into RespVal */
	RespVal = HAL_RtnEraseMemory(ISOUDSConfPtr, RtnCntrlID, RtnType, Data, RespLenth);
 8002a62:	7a7a      	ldrb	r2, [r7, #9]
 8002a64:	8979      	ldrh	r1, [r7, #10]
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 f86c 	bl	8002b4a <HAL_RtnEraseMemory>
 8002a72:	4603      	mov	r3, r0
 8002a74:	75fb      	strb	r3, [r7, #23]

	/* Manual Code End */

	return RespVal;
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <ISOUDS_RtnCheckProgDependcies>:
**							: Data Pointer: Point to Node Identification Number if required
**							: RespLenth : Response lenth
** Return value             : None
***************************************************************************************************/
static uint8_t ISOUDS_RtnCheckProgDependcies(ISOUDS_ConfType *ISOUDSConfPtr, uint16_t RtnCntrlID, uint8_t RtnType, uint8_t *Data, uint16_t *RespLenth)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	817b      	strh	r3, [r7, #10]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	727b      	strb	r3, [r7, #9]
	uint8_t RespVal = ISOUDS_POSRES;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]

	/* Manual code start */

	/* Initial Routine request handler */
	/* Perform Operation and store the Response code into RespVal */
	RespVal = HAL_RtnChecProgDependencies(ISOUDSConfPtr, RtnCntrlID, RtnType, Data, RespLenth);
 8002a96:	7a7a      	ldrb	r2, [r7, #9]
 8002a98:	8979      	ldrh	r1, [r7, #10]
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f891 	bl	8002bc8 <HAL_RtnChecProgDependencies>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	75fb      	strb	r3, [r7, #23]

	/* Manual Code End */

	return RespVal;
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_RtnCntrlPreCondCheck>:
**
**
** Return value             : ISOUDS_TRUE or ISOUDS_FALSE
*******************************************************************************/
uint8_t HAL_RtnCntrlPreCondCheck(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
	uint8_t RetVal;
	/*User specific implementation*/
	RetVal = ISOUDS_TRUE;
 8002aba:	2301      	movs	r3, #1
 8002abc:	71fb      	strb	r3, [r7, #7]
	return RetVal;
 8002abe:	79fb      	ldrb	r3, [r7, #7]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_RtnCheckMemory>:
** Return value             : ISOUDS_POSRES or update based on the condition.
**                            Please refer ISOUDS_Server.h file for macros
***************************************************************************************************/
uint8_t HAL_RtnCheckMemory(ISOUDS_ConfType *ISOUDSConfPtr, uint16_t RtnCntrlID, uint8_t RtnType, \
															uint8_t *Data, uint16_t *RespLenth)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	817b      	strh	r3, [r7, #10]
 8002ada:	4613      	mov	r3, r2
 8002adc:	727b      	strb	r3, [r7, #9]
	uint8_t RespVal = ISOUDS_CNC;
 8002ade:	2322      	movs	r3, #34	; 0x22
 8002ae0:	75fb      	strb	r3, [r7, #23]
	
	if((ISOUDSConfPtr != NULL_PTR) && (Data != NULL_PTR) && (RespLenth != NULL_PTR))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d02b      	beq.n	8002b40 <HAL_RtnCheckMemory+0x74>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d028      	beq.n	8002b40 <HAL_RtnCheckMemory+0x74>
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d025      	beq.n	8002b40 <HAL_RtnCheckMemory+0x74>
	{
		(void)RtnType;
		(void)RtnCntrlID;
		
		if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) \
 8002af4:	f7fe fdf3 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d115      	bne.n	8002b2a <HAL_RtnCheckMemory+0x5e>
 8002afe:	f7fe fdf6 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d110      	bne.n	8002b2a <HAL_RtnCheckMemory+0x5e>
															 && (ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8002b08:	f7fe fdf9 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d10b      	bne.n	8002b2a <HAL_RtnCheckMemory+0x5e>
		{
			
			
			Data[ISOUDS_ZERO] = ISOUDS_TWO;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2202      	movs	r2, #2
 8002b16:	701a      	strb	r2, [r3, #0]
			*RespLenth += ISOUDS_ONE;
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	801a      	strh	r2, [r3, #0]
			RespVal = ISOUDS_POSRES;
 8002b24:	2300      	movs	r3, #0
 8002b26:	75fb      	strb	r3, [r7, #23]
 8002b28:	e00a      	b.n	8002b40 <HAL_RtnCheckMemory+0x74>
			
		}
		else
		{
			Data[ISOUDS_ZERO] = ISOUDS_FIVE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	701a      	strb	r2, [r3, #0]
			*RespLenth += ISOUDS_ONE;
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	3301      	adds	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	801a      	strh	r2, [r3, #0]
			RespVal = ISOUDS_POSRES;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	75fb      	strb	r3, [r7, #23]
	}
	else
	{
		/* Do Nothing */
	}
	return RespVal;
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_RtnEraseMemory>:
** Return value             : ISOUDS_POSRES or update based on the condition.
**                            Please refer ISOUDS_Server.h file for macros
***************************************************************************************************/
uint8_t HAL_RtnEraseMemory(ISOUDS_ConfType *ISOUDSConfPtr, uint16_t RtnCntrlID, uint8_t RtnType, \
															uint8_t *Data, uint16_t *RespLenth)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b086      	sub	sp, #24
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	817b      	strh	r3, [r7, #10]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	727b      	strb	r3, [r7, #9]
	uint8_t RespVal = ISOUDS_CNC;
 8002b5c:	2322      	movs	r3, #34	; 0x22
 8002b5e:	75fb      	strb	r3, [r7, #23]

	if((ISOUDSConfPtr != NULL_PTR) && (Data != NULL_PTR) && (RespLenth != NULL_PTR))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d02b      	beq.n	8002bbe <HAL_RtnEraseMemory+0x74>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d028      	beq.n	8002bbe <HAL_RtnEraseMemory+0x74>
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d025      	beq.n	8002bbe <HAL_RtnEraseMemory+0x74>
	{
		(void)RtnType;
		(void)RtnCntrlID;

		if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) \
 8002b72:	f7fe fdb4 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d115      	bne.n	8002ba8 <HAL_RtnEraseMemory+0x5e>
 8002b7c:	f7fe fdb7 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d110      	bne.n	8002ba8 <HAL_RtnEraseMemory+0x5e>
															 && (ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8002b86:	f7fe fdba 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d10b      	bne.n	8002ba8 <HAL_RtnEraseMemory+0x5e>
		{


			Data[ISOUDS_ZERO] = ISOUDS_TWO;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	701a      	strb	r2, [r3, #0]
			*RespLenth += ISOUDS_ONE;
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	801a      	strh	r2, [r3, #0]
			RespVal = ISOUDS_POSRES;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	75fb      	strb	r3, [r7, #23]
 8002ba6:	e00a      	b.n	8002bbe <HAL_RtnEraseMemory+0x74>

		}
		else
		{
			Data[ISOUDS_ZERO] = ISOUDS_FIVE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2205      	movs	r2, #5
 8002bac:	701a      	strb	r2, [r3, #0]
			*RespLenth += ISOUDS_ONE;
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	801a      	strh	r2, [r3, #0]
			RespVal = ISOUDS_POSRES;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	75fb      	strb	r3, [r7, #23]
	}
	else
	{
		/* Do Nothing */
	}
	return RespVal;
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_RtnChecProgDependencies>:
** Return value             : ISOUDS_POSRES or update based on the condition.
**                            Please refer ISOUDS_Server.h file for macros
***************************************************************************************************/
uint8_t HAL_RtnChecProgDependencies(ISOUDS_ConfType *ISOUDSConfPtr, uint16_t RtnCntrlID, uint8_t RtnType, \
															uint8_t *Data, uint16_t *RespLenth)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	817b      	strh	r3, [r7, #10]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	727b      	strb	r3, [r7, #9]
	uint8_t RespVal = ISOUDS_CNC;
 8002bda:	2322      	movs	r3, #34	; 0x22
 8002bdc:	75fb      	strb	r3, [r7, #23]

	if((ISOUDSConfPtr != NULL_PTR) && (Data != NULL_PTR) && (RespLenth != NULL_PTR))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d02b      	beq.n	8002c3c <HAL_RtnChecProgDependencies+0x74>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d028      	beq.n	8002c3c <HAL_RtnChecProgDependencies+0x74>
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d025      	beq.n	8002c3c <HAL_RtnChecProgDependencies+0x74>
	{
		(void)RtnType;
		(void)RtnCntrlID;

		if ((ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check()) && (ISOUDS_TRUE == ISOUDS_Get_EngineSpeed_Check()) \
 8002bf0:	f7fe fd75 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d115      	bne.n	8002c26 <HAL_RtnChecProgDependencies+0x5e>
 8002bfa:	f7fe fd78 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d110      	bne.n	8002c26 <HAL_RtnChecProgDependencies+0x5e>
															 && (ISOUDS_TRUE == ISOUDS_Get_Gear_Status_Check()))
 8002c04:	f7fe fd7b 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d10b      	bne.n	8002c26 <HAL_RtnChecProgDependencies+0x5e>
		{


			Data[ISOUDS_ZERO] = ISOUDS_TWO;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2202      	movs	r2, #2
 8002c12:	701a      	strb	r2, [r3, #0]
			*RespLenth += ISOUDS_ONE;
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	801a      	strh	r2, [r3, #0]
			RespVal = ISOUDS_POSRES;
 8002c20:	2300      	movs	r3, #0
 8002c22:	75fb      	strb	r3, [r7, #23]
 8002c24:	e00a      	b.n	8002c3c <HAL_RtnChecProgDependencies+0x74>

		}
		else
		{
			Data[ISOUDS_ZERO] = ISOUDS_FIVE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2205      	movs	r2, #5
 8002c2a:	701a      	strb	r2, [r3, #0]
			*RespLenth += ISOUDS_ONE;
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	801a      	strh	r2, [r3, #0]
			RespVal = ISOUDS_POSRES;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	75fb      	strb	r3, [r7, #23]
	}
	else
	{
		/* Do Nothing */
	}
	return RespVal;
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <GetSeedLevel1>:
** Parameter 			  	: SeedGentd: Pointer to Seed

** Return value             : None
***************************************************************************************************/
static uint8_t GetSeedLevel1( uint8_t *SeedGentd)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = ISOUDS_POSRES;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	73fb      	strb	r3, [r7, #15]
	
	/* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002c52:	f7fe fd44 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d103      	bne.n	8002c64 <GetSeedLevel1+0x1e>
	{
		HAL_GenSeedLevel1(SeedGentd);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f8d3 	bl	8002e08 <HAL_GenSeedLevel1>
 8002c62:	e001      	b.n	8002c68 <GetSeedLevel1+0x22>
	}
	else
	{
		/* NRC - conditions not correct */
	    RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002c64:	2388      	movs	r3, #136	; 0x88
 8002c66:	73fb      	strb	r3, [r7, #15]
	}

	
	return RetVal;
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <GenerateKeyLevel1>:
** Parameter                : Seed: Pointer to Seed
                            : Key : Pointer to Key
** Return value             : None
***************************************************************************************************/
static uint8_t GenerateKeyLevel1(const uint8_t *Key,uint16_t Keylength)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	807b      	strh	r3, [r7, #2]
	uint8_t Valdkey_stat;
	uint8_t RetVal;
    /* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002c7e:	f7fe fd2e 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d10f      	bne.n	8002ca8 <GenerateKeyLevel1+0x36>
	{
		Valdkey_stat = HAL_GenKeyLevel1(Key, Keylength);
 8002c88:	887b      	ldrh	r3, [r7, #2]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f8eb 	bl	8002e68 <HAL_GenKeyLevel1>
 8002c92:	4603      	mov	r3, r0
 8002c94:	73bb      	strb	r3, [r7, #14]
		
		if (Valdkey_stat == ISOUDS_TRUE)
 8002c96:	7bbb      	ldrb	r3, [r7, #14]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d102      	bne.n	8002ca2 <GenerateKeyLevel1+0x30>
		{
			RetVal = ISOUDS_POSRES;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	e004      	b.n	8002cac <GenerateKeyLevel1+0x3a>
		}
		else
		{
			RetVal = ISOUDS_IK;
 8002ca2:	2335      	movs	r3, #53	; 0x35
 8002ca4:	73fb      	strb	r3, [r7, #15]
 8002ca6:	e001      	b.n	8002cac <GenerateKeyLevel1+0x3a>
		}
	}
	else
	{
		/* NRC - conditions not correct */
		RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002ca8:	2388      	movs	r3, #136	; 0x88
 8002caa:	73fb      	strb	r3, [r7, #15]
	}
    /* User Defined Code end */
	return RetVal;
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <GetSeedLevel3>:
** Parameter 			  	: SeedGentd: Pointer to Seed

** Return value             : None
***************************************************************************************************/
static uint8_t GetSeedLevel3( uint8_t *SeedGentd)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = ISOUDS_POSRES;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]

	/* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002cc2:	f7fe fd0c 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d103      	bne.n	8002cd4 <GetSeedLevel3+0x1e>
	{
		HAL_GenSeedLevel3(SeedGentd);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f901 	bl	8002ed4 <HAL_GenSeedLevel3>
 8002cd2:	e001      	b.n	8002cd8 <GetSeedLevel3+0x22>
	}
	else
	{
		/* NRC - conditions not correct */
	    RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002cd4:	2388      	movs	r3, #136	; 0x88
 8002cd6:	73fb      	strb	r3, [r7, #15]
	}


	return RetVal;
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <GenerateKeyLevel3>:
** Parameter                : Seed: Pointer to Seed
                            : Key : Pointer to Key
** Return value             : None
***************************************************************************************************/
static uint8_t GenerateKeyLevel3(const uint8_t *Key,uint16_t Keylength)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	460b      	mov	r3, r1
 8002cec:	807b      	strh	r3, [r7, #2]
	uint8_t Valdkey_stat;
	uint8_t RetVal;
    /* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002cee:	f7fe fcf6 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d10f      	bne.n	8002d18 <GenerateKeyLevel3+0x36>
	{
		Valdkey_stat = HAL_GenKeyLevel3(Key, Keylength);
 8002cf8:	887b      	ldrh	r3, [r7, #2]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f917 	bl	8002f30 <HAL_GenKeyLevel3>
 8002d02:	4603      	mov	r3, r0
 8002d04:	73bb      	strb	r3, [r7, #14]

		if (Valdkey_stat == ISOUDS_TRUE)
 8002d06:	7bbb      	ldrb	r3, [r7, #14]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d102      	bne.n	8002d12 <GenerateKeyLevel3+0x30>
		{
			RetVal = ISOUDS_POSRES;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	73fb      	strb	r3, [r7, #15]
 8002d10:	e004      	b.n	8002d1c <GenerateKeyLevel3+0x3a>
		}
		else
		{
			RetVal = ISOUDS_IK;
 8002d12:	2335      	movs	r3, #53	; 0x35
 8002d14:	73fb      	strb	r3, [r7, #15]
 8002d16:	e001      	b.n	8002d1c <GenerateKeyLevel3+0x3a>
		}
	}
	else
	{
		/* NRC - conditions not correct */
		RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002d18:	2388      	movs	r3, #136	; 0x88
 8002d1a:	73fb      	strb	r3, [r7, #15]
	}
    /* User Defined Code end */
	return RetVal;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <GetSeedLevel5>:
** Parameter 			  	: SeedGentd: Pointer to Seed

** Return value             : None
***************************************************************************************************/
static uint8_t GetSeedLevel5( uint8_t *SeedGentd)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = ISOUDS_POSRES;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]

	/* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002d32:	f7fe fcd4 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d103      	bne.n	8002d44 <GetSeedLevel5+0x1e>
	{
		HAL_GenSeedLevel5(SeedGentd);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f92b 	bl	8002f98 <HAL_GenSeedLevel5>
 8002d42:	e001      	b.n	8002d48 <GetSeedLevel5+0x22>
	}
	else
	{
		/* NRC - conditions not correct */
	    RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002d44:	2388      	movs	r3, #136	; 0x88
 8002d46:	73fb      	strb	r3, [r7, #15]
	}


	return RetVal;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <GenerateKeyLevel5>:
** Parameter                : Seed: Pointer to Seed
                            : Key : Pointer to Key
** Return value             : None
***************************************************************************************************/
static uint8_t GenerateKeyLevel5(const uint8_t *Key,uint16_t Keylength)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	807b      	strh	r3, [r7, #2]
	uint8_t Valdkey_stat;
	uint8_t RetVal;
    /* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002d5e:	f7fe fcbe 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d10f      	bne.n	8002d88 <GenerateKeyLevel5+0x36>
	{
		Valdkey_stat = HAL_GenKeyLevel5(Key, Keylength);
 8002d68:	887b      	ldrh	r3, [r7, #2]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f941 	bl	8002ff4 <HAL_GenKeyLevel5>
 8002d72:	4603      	mov	r3, r0
 8002d74:	73bb      	strb	r3, [r7, #14]

		if (Valdkey_stat == ISOUDS_TRUE)
 8002d76:	7bbb      	ldrb	r3, [r7, #14]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d102      	bne.n	8002d82 <GenerateKeyLevel5+0x30>
		{
			RetVal = ISOUDS_POSRES;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	e004      	b.n	8002d8c <GenerateKeyLevel5+0x3a>
		}
		else
		{
			RetVal = ISOUDS_IK;
 8002d82:	2335      	movs	r3, #53	; 0x35
 8002d84:	73fb      	strb	r3, [r7, #15]
 8002d86:	e001      	b.n	8002d8c <GenerateKeyLevel5+0x3a>
		}
	}
	else
	{
		/* NRC - conditions not correct */
		RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002d88:	2388      	movs	r3, #136	; 0x88
 8002d8a:	73fb      	strb	r3, [r7, #15]
	}
    /* User Defined Code end */
	return RetVal;
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <GetSeedLevel7>:
** Parameter 			  	: SeedGentd: Pointer to Seed

** Return value             : None
***************************************************************************************************/
static uint8_t GetSeedLevel7( uint8_t *SeedGentd)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
	uint8_t RetVal = ISOUDS_POSRES;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]

	/* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002da2:	f7fe fc9c 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d103      	bne.n	8002db4 <GetSeedLevel7+0x1e>
	{
		HAL_GenSeedLevel7(SeedGentd);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f94f 	bl	8003050 <HAL_GenSeedLevel7>
 8002db2:	e001      	b.n	8002db8 <GetSeedLevel7+0x22>
	}
	else
	{
		/* NRC - conditions not correct */
	    RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002db4:	2388      	movs	r3, #136	; 0x88
 8002db6:	73fb      	strb	r3, [r7, #15]
	}


	return RetVal;
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <GenerateKeyLevel7>:
** Parameter                : Seed: Pointer to Seed
                            : Key : Pointer to Key
** Return value             : None
***************************************************************************************************/
static uint8_t GenerateKeyLevel7(const uint8_t *Key,uint16_t Keylength)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	807b      	strh	r3, [r7, #2]
	uint8_t Valdkey_stat;
	uint8_t RetVal;
    /* USer DEfined Code Start */
	if (ISOUDS_TRUE == ISOUDS_Get_VehicleSpeed_Check())
 8002dce:	f7fe fc86 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d10f      	bne.n	8002df8 <GenerateKeyLevel7+0x36>
	{
		Valdkey_stat = HAL_GenKeyLevel7(Key, Keylength);
 8002dd8:	887b      	ldrh	r3, [r7, #2]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f961 	bl	80030a4 <HAL_GenKeyLevel7>
 8002de2:	4603      	mov	r3, r0
 8002de4:	73bb      	strb	r3, [r7, #14]

		if (Valdkey_stat == ISOUDS_TRUE)
 8002de6:	7bbb      	ldrb	r3, [r7, #14]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <GenerateKeyLevel7+0x30>
		{
			RetVal = ISOUDS_POSRES;
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e004      	b.n	8002dfc <GenerateKeyLevel7+0x3a>
		}
		else
		{
			RetVal = ISOUDS_IK;
 8002df2:	2335      	movs	r3, #53	; 0x35
 8002df4:	73fb      	strb	r3, [r7, #15]
 8002df6:	e001      	b.n	8002dfc <GenerateKeyLevel7+0x3a>
		}
	}
	else
	{
		/* NRC - conditions not correct */
		RetVal = ISOUDS_VEHSPEDTOOHIGH;
 8002df8:	2388      	movs	r3, #136	; 0x88
 8002dfa:	73fb      	strb	r3, [r7, #15]
	}
    /* User Defined Code end */
	return RetVal;
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_GenSeedLevel1>:
** Parameter                : None

** Return value             : Seed value
***************************************************************************************************/
void HAL_GenSeedLevel1( uint8_t *SeedGentd)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	/*User specific implementation*/
	uint8_t seed[3] = {0x11,0x22,0x33};
 8002e10:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <HAL_GenSeedLevel1+0x58>)
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	4611      	mov	r1, r2
 8002e1a:	8019      	strh	r1, [r3, #0]
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	0c12      	lsrs	r2, r2, #16
 8002e20:	701a      	strb	r2, [r3, #0]
	uint8_t *PtrToGenSeed  = NULL_PTR;
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
	uint8_t Idx;

	/* Compute the seed only if ECU lock status is FALSE, otherwise seed = 0 */ 
	if(ISOUDS_FALSE == ISOUDS_GetSASt())  
 8002e26:	f00a fa65 	bl	800d2f4 <ISOUDS_GetSASt>
	{
		/* do nothing */
	}
	
	/* User Defined Code end */
	PtrToGenSeed = (uint8_t *)&seed;
 8002e2a:	f107 030c 	add.w	r3, r7, #12
 8002e2e:	613b      	str	r3, [r7, #16]

	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	75fb      	strb	r3, [r7, #23]
 8002e34:	e00a      	b.n	8002e4c <HAL_GenSeedLevel1+0x44>
	{
		SeedGentd[Idx] = PtrToGenSeed[Idx];
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	441a      	add	r2, r3
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	440b      	add	r3, r1
 8002e42:	7812      	ldrb	r2, [r2, #0]
 8002e44:	701a      	strb	r2, [r3, #0]
	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 8002e46:	7dfb      	ldrb	r3, [r7, #23]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	75fb      	strb	r3, [r7, #23]
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_GenSeedLevel1+0x5c>)
 8002e4e:	789b      	ldrb	r3, [r3, #2]
 8002e50:	7dfa      	ldrb	r2, [r7, #23]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d3ef      	bcc.n	8002e36 <HAL_GenSeedLevel1+0x2e>
	}

}
 8002e56:	bf00      	nop
 8002e58:	bf00      	nop
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	08010368 	.word	0x08010368
 8002e64:	08010f58 	.word	0x08010f58

08002e68 <HAL_GenKeyLevel1>:
** Parameter                : None

** Return value             : Key value
***************************************************************************************************/
uint8_t HAL_GenKeyLevel1(const uint8_t *Key,uint16_t Keylength)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	807b      	strh	r3, [r7, #2]
	uint8_t RetVal = ISOUDS_TRUE;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
	uint8_t Indx;
	/* seed length in bytes */
	uint8_t KeyL1[3] = {0xFA,0xB2,0x32};
 8002e78:	4a15      	ldr	r2, [pc, #84]	; (8002ed0 <HAL_GenKeyLevel1+0x68>)
 8002e7a:	f107 0308 	add.w	r3, r7, #8
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	4611      	mov	r1, r2
 8002e82:	8019      	strh	r1, [r3, #0]
 8002e84:	3302      	adds	r3, #2
 8002e86:	0c12      	lsrs	r2, r2, #16
 8002e88:	701a      	strb	r2, [r3, #0]
	/* Add security Logic Here */
//Key[] {01,02,03};
	/* The final remainder is the key */


	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73bb      	strb	r3, [r7, #14]
 8002e8e:	e012      	b.n	8002eb6 <HAL_GenKeyLevel1+0x4e>
	{
		if (KeyL1[(Keylength - ISOUDS_ONE) - Indx] != Key[Indx])
 8002e90:	887b      	ldrh	r3, [r7, #2]
 8002e92:	1e5a      	subs	r2, r3, #1
 8002e94:	7bbb      	ldrb	r3, [r7, #14]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	3310      	adds	r3, #16
 8002e9a:	443b      	add	r3, r7
 8002e9c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002ea0:	7bbb      	ldrb	r3, [r7, #14]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	440b      	add	r3, r1
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_GenKeyLevel1+0x48>
		{
			RetVal = ISOUDS_FALSE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	73fb      	strb	r3, [r7, #15]
	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 8002eb0:	7bbb      	ldrb	r3, [r7, #14]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	73bb      	strb	r3, [r7, #14]
 8002eb6:	7bbb      	ldrb	r3, [r7, #14]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d8e7      	bhi.n	8002e90 <HAL_GenKeyLevel1+0x28>
		}
	}

	return RetVal;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	0801036c 	.word	0x0801036c

08002ed4 <HAL_GenSeedLevel3>:
** Parameter                : None

** Return value             : Seed value
***************************************************************************************************/
void HAL_GenSeedLevel3( uint8_t *SeedGentd)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	/*User specific implementation*/
	uint8_t seed[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
 8002edc:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <HAL_GenSeedLevel3+0x54>)
 8002ede:	f107 0308 	add.w	r3, r7, #8
 8002ee2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ee6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t *PtrToGenSeed  = NULL_PTR;
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
#if (SYMC_SECURITY == 1)
	SYMC_result_e lRet = SYMC_E_ERROR;
#endif

	/* Compute the seed only if ECU lock status is FALSE, otherwise seed = 0 */
	if(ISOUDS_FALSE == ISOUDS_GetSASt())
 8002eee:	f00a fa01 	bl	800d2f4 <ISOUDS_GetSASt>
		/* do nothing */
	}


	/* User Defined Code end */
	PtrToGenSeed = (uint8_t *)&seed;
 8002ef2:	f107 0308 	add.w	r3, r7, #8
 8002ef6:	613b      	str	r3, [r7, #16]

	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 8002ef8:	2300      	movs	r3, #0
 8002efa:	75fb      	strb	r3, [r7, #23]
 8002efc:	e00a      	b.n	8002f14 <HAL_GenSeedLevel3+0x40>
	{
		SeedGentd[Idx] = PtrToGenSeed[Idx];
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	441a      	add	r2, r3
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	440b      	add	r3, r1
 8002f0a:	7812      	ldrb	r2, [r2, #0]
 8002f0c:	701a      	strb	r2, [r3, #0]
	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
 8002f10:	3301      	adds	r3, #1
 8002f12:	75fb      	strb	r3, [r7, #23]
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_GenSeedLevel3+0x58>)
 8002f16:	789b      	ldrb	r3, [r3, #2]
 8002f18:	7dfa      	ldrb	r2, [r7, #23]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d3ef      	bcc.n	8002efe <HAL_GenSeedLevel3+0x2a>
	}

}
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	08010370 	.word	0x08010370
 8002f2c:	08010f58 	.word	0x08010f58

08002f30 <HAL_GenKeyLevel3>:
** Parameter                : None

** Return value             : Key value
***************************************************************************************************/
uint8_t HAL_GenKeyLevel3(const uint8_t *Key,uint16_t Keylength)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	807b      	strh	r3, [r7, #2]
	uint8_t RetVal = ISOUDS_TRUE;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	75fb      	strb	r3, [r7, #23]
		RetVal = ISOUDS_FALSE;
	}
#else
	uint8_t Indx;
	/* seed length in bytes */
	uint8_t KeyL1[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
 8002f40:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <HAL_GenKeyLevel3+0x64>)
 8002f42:	f107 030c 	add.w	r3, r7, #12
 8002f46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f4a:	e883 0003 	stmia.w	r3, {r0, r1}
	/* Add security Logic Here */

	/* The final remainder is the key */


	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75bb      	strb	r3, [r7, #22]
 8002f52:	e012      	b.n	8002f7a <HAL_GenKeyLevel3+0x4a>
	{
		if (KeyL1[(Keylength - ISOUDS_ONE) - Indx] != Key[Indx])
 8002f54:	887b      	ldrh	r3, [r7, #2]
 8002f56:	1e5a      	subs	r2, r3, #1
 8002f58:	7dbb      	ldrb	r3, [r7, #22]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	3318      	adds	r3, #24
 8002f5e:	443b      	add	r3, r7
 8002f60:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002f64:	7dbb      	ldrb	r3, [r7, #22]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	440b      	add	r3, r1
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_GenKeyLevel3+0x44>
		{
			RetVal = ISOUDS_FALSE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	75fb      	strb	r3, [r7, #23]
	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 8002f74:	7dbb      	ldrb	r3, [r7, #22]
 8002f76:	3301      	adds	r3, #1
 8002f78:	75bb      	strb	r3, [r7, #22]
 8002f7a:	7dbb      	ldrb	r3, [r7, #22]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	887a      	ldrh	r2, [r7, #2]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d8e7      	bhi.n	8002f54 <HAL_GenKeyLevel3+0x24>
		}
	}
#endif
	return RetVal;
 8002f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	08010370 	.word	0x08010370

08002f98 <HAL_GenSeedLevel5>:
** Parameter                : None

** Return value             : Seed value
***************************************************************************************************/
void HAL_GenSeedLevel5( uint8_t *SeedGentd)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	/*User specific implementation*/
	uint8_t seed[8] = {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88};
 8002fa0:	4a12      	ldr	r2, [pc, #72]	; (8002fec <HAL_GenSeedLevel5+0x54>)
 8002fa2:	f107 0308 	add.w	r3, r7, #8
 8002fa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002faa:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t *PtrToGenSeed  = NULL_PTR;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
	uint8_t Idx;

	/* Compute the seed only if ECU lock status is FALSE, otherwise seed = 0 */
	if(ISOUDS_FALSE == ISOUDS_GetSASt())
 8002fb2:	f00a f99f 	bl	800d2f4 <ISOUDS_GetSASt>
		/* do nothing */
	}


	/* User Defined Code end */
	PtrToGenSeed = (uint8_t *)&seed;
 8002fb6:	f107 0308 	add.w	r3, r7, #8
 8002fba:	613b      	str	r3, [r7, #16]

	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	75fb      	strb	r3, [r7, #23]
 8002fc0:	e00a      	b.n	8002fd8 <HAL_GenSeedLevel5+0x40>
	{
		SeedGentd[Idx] = PtrToGenSeed[Idx];
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	441a      	add	r2, r3
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	440b      	add	r3, r1
 8002fce:	7812      	ldrb	r2, [r2, #0]
 8002fd0:	701a      	strb	r2, [r3, #0]
	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 8002fd2:	7dfb      	ldrb	r3, [r7, #23]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	75fb      	strb	r3, [r7, #23]
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <HAL_GenSeedLevel5+0x58>)
 8002fda:	789b      	ldrb	r3, [r3, #2]
 8002fdc:	7dfa      	ldrb	r2, [r7, #23]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d3ef      	bcc.n	8002fc2 <HAL_GenSeedLevel5+0x2a>
	}

}
 8002fe2:	bf00      	nop
 8002fe4:	bf00      	nop
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	08010378 	.word	0x08010378
 8002ff0:	08010f58 	.word	0x08010f58

08002ff4 <HAL_GenKeyLevel5>:
** Parameter                : None

** Return value             : Key value
***************************************************************************************************/
uint8_t HAL_GenKeyLevel5(const uint8_t *Key,uint16_t Keylength)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]
	uint8_t RetVal = ISOUDS_TRUE;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
	uint8_t Indx;
	/* seed length in bytes */
	uint8_t KeyL1[4] = {0x01,0x02,0x03,0x04};
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_GenKeyLevel5+0x58>)
 8003006:	60bb      	str	r3, [r7, #8]
	/* Add security Logic Here */

	/* The final remainder is the key */


	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 8003008:	2300      	movs	r3, #0
 800300a:	73bb      	strb	r3, [r7, #14]
 800300c:	e012      	b.n	8003034 <HAL_GenKeyLevel5+0x40>
	{
		if (KeyL1[(Keylength - ISOUDS_ONE) - Indx] != Key[Indx])
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	1e5a      	subs	r2, r3, #1
 8003012:	7bbb      	ldrb	r3, [r7, #14]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	3310      	adds	r3, #16
 8003018:	443b      	add	r3, r7
 800301a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800301e:	7bbb      	ldrb	r3, [r7, #14]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	440b      	add	r3, r1
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d001      	beq.n	800302e <HAL_GenKeyLevel5+0x3a>
		{
			RetVal = ISOUDS_FALSE;
 800302a:	2300      	movs	r3, #0
 800302c:	73fb      	strb	r3, [r7, #15]
	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 800302e:	7bbb      	ldrb	r3, [r7, #14]
 8003030:	3301      	adds	r3, #1
 8003032:	73bb      	strb	r3, [r7, #14]
 8003034:	7bbb      	ldrb	r3, [r7, #14]
 8003036:	b29b      	uxth	r3, r3
 8003038:	887a      	ldrh	r2, [r7, #2]
 800303a:	429a      	cmp	r2, r3
 800303c:	d8e7      	bhi.n	800300e <HAL_GenKeyLevel5+0x1a>
		}
	}

	return RetVal;
 800303e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	04030201 	.word	0x04030201

08003050 <HAL_GenSeedLevel7>:
** Parameter                : None

** Return value             : Seed value
***************************************************************************************************/
void HAL_GenSeedLevel7( uint8_t *SeedGentd)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	/*User specific implementation*/
	uint8_t seed[8] ={0, };
 8003058:	2300      	movs	r3, #0
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
	uint8_t *PtrToGenSeed  = NULL_PTR;
 8003060:	2300      	movs	r3, #0
 8003062:	613b      	str	r3, [r7, #16]
#if (SYMC_SECURITY == 1)
	SYMC_result_e lRet = SYMC_E_ERROR;
#endif

	/* Compute the seed only if ECU lock status is FALSE, otherwise seed = 0 */
	if(ISOUDS_FALSE == ISOUDS_GetSASt())
 8003064:	f00a f946 	bl	800d2f4 <ISOUDS_GetSASt>
		/* do nothing */
	}


	/* User Defined Code end */
	PtrToGenSeed = (uint8_t *)&seed;
 8003068:	f107 0308 	add.w	r3, r7, #8
 800306c:	613b      	str	r3, [r7, #16]

	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 800306e:	2300      	movs	r3, #0
 8003070:	75fb      	strb	r3, [r7, #23]
 8003072:	e00a      	b.n	800308a <HAL_GenSeedLevel7+0x3a>
	{
		SeedGentd[Idx] = PtrToGenSeed[Idx];
 8003074:	7dfb      	ldrb	r3, [r7, #23]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	441a      	add	r2, r3
 800307a:	7dfb      	ldrb	r3, [r7, #23]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	440b      	add	r3, r1
 8003080:	7812      	ldrb	r2, [r2, #0]
 8003082:	701a      	strb	r2, [r3, #0]
	for (Idx = 0; Idx < ISO_SA_Config[0].SeedLenth; Idx++)
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	3301      	adds	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_GenSeedLevel7+0x50>)
 800308c:	789b      	ldrb	r3, [r3, #2]
 800308e:	7dfa      	ldrb	r2, [r7, #23]
 8003090:	429a      	cmp	r2, r3
 8003092:	d3ef      	bcc.n	8003074 <HAL_GenSeedLevel7+0x24>
	}

}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	08010f58 	.word	0x08010f58

080030a4 <HAL_GenKeyLevel7>:
** Parameter                : None

** Return value             : Key value
***************************************************************************************************/
uint8_t HAL_GenKeyLevel7(const uint8_t *Key,uint16_t Keylength)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	807b      	strh	r3, [r7, #2]
	uint8_t RetVal = ISOUDS_TRUE;
 80030b0:	2301      	movs	r3, #1
 80030b2:	75fb      	strb	r3, [r7, #23]
		RetVal = ISOUDS_FALSE;
	}
#else
	uint8_t Indx;
	/* seed length in bytes */
	uint8_t KeyL1[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
 80030b4:	4a14      	ldr	r2, [pc, #80]	; (8003108 <HAL_GenKeyLevel7+0x64>)
 80030b6:	f107 030c 	add.w	r3, r7, #12
 80030ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030be:	e883 0003 	stmia.w	r3, {r0, r1}
	/* Add security Logic Here */

	/* The final remainder is the key */


	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	75bb      	strb	r3, [r7, #22]
 80030c6:	e012      	b.n	80030ee <HAL_GenKeyLevel7+0x4a>
	{
		if (KeyL1[(Keylength - ISOUDS_ONE) - Indx] != Key[Indx])
 80030c8:	887b      	ldrh	r3, [r7, #2]
 80030ca:	1e5a      	subs	r2, r3, #1
 80030cc:	7dbb      	ldrb	r3, [r7, #22]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	3318      	adds	r3, #24
 80030d2:	443b      	add	r3, r7
 80030d4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80030d8:	7dbb      	ldrb	r3, [r7, #22]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	440b      	add	r3, r1
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_GenKeyLevel7+0x44>
		{
			RetVal = ISOUDS_FALSE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	75fb      	strb	r3, [r7, #23]
	for(Indx = ISOUDS_ZERO; Indx < Keylength; Indx++)
 80030e8:	7dbb      	ldrb	r3, [r7, #22]
 80030ea:	3301      	adds	r3, #1
 80030ec:	75bb      	strb	r3, [r7, #22]
 80030ee:	7dbb      	ldrb	r3, [r7, #22]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	887a      	ldrh	r2, [r7, #2]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d8e7      	bhi.n	80030c8 <HAL_GenKeyLevel7+0x24>
		}
	}
#endif
	return RetVal; 
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	08010370 	.word	0x08010370

0800310c <ISOUDS_GetSAAttempCount>:
** Parameter index :  None
** Return value: Attemp count
** Remarks:  None
*******************************************************************************/
uint8_t ISOUDS_GetSAAttempCount(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
	{
		/* Do nothing */
	}
#endif
	/* Add logic to read from NVM */
	return ISOUDS_AttempCntFrmNVM;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <ISOUDS_GetSAAttempCount+0x14>)
 8003112:	781b      	ldrb	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	2400149b 	.word	0x2400149b

08003124 <ISOUDS_SetSAAttempCount>:
** Parameter index :  Attemp count
** Return value: None
** Remarks:  None
*******************************************************************************/
void ISOUDS_SetSAAttempCount(uint8_t ISOUDS_SACNT)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* Do nothing */
	}
#endif
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <ISOUDS_Get_StrtDiagSessCfgMaxSub>:
** Return value             : retVal : Number of Subfunctions

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_Get_StrtDiagSessCfgMaxSub(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0
	return ISOUDS_StrtDiagSessCfgMaxSubFun;
 800313e:	2304      	movs	r3, #4
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <ISOUDS_StrDiagSessDefault_Cbk>:
** Return value             :  RespVal -> Returns the response for the service request

** Remarks                  : None
***************************************************************************************************/
static uint8_t ISOUDS_StrDiagSessDefault_Cbk (ISOUDS_ConfType *ISOUDSConfPtr)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
	uint8_t RespVal = ISOUDS_POSRES;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]

	if (NULL_PTR != ISOUDSConfPtr)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00c      	beq.n	8003176 <ISOUDS_StrDiagSessDefault_Cbk+0x2c>
	{
		if (ISOUDSConfPtr->srvSt == (uint8_t)ISOUDS_RXMSG)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d104      	bne.n	800316e <ISOUDS_StrDiagSessDefault_Cbk+0x24>
		{
			/* Manual code start */

			/* Initial Routine request handler */
			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessDefault_Cbk();
 8003164:	f000 f85d 	bl	8003222 <HAL_StrDiagSessDefault_Cbk>
 8003168:	4603      	mov	r3, r0
 800316a:	73fb      	strb	r3, [r7, #15]
 800316c:	e003      	b.n	8003176 <ISOUDS_StrDiagSessDefault_Cbk+0x2c>
			/* Manual code start */

			/* Pending response handler */

			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessDefault_Cbk();
 800316e:	f000 f858 	bl	8003222 <HAL_StrDiagSessDefault_Cbk>
 8003172:	4603      	mov	r3, r0
 8003174:	73fb      	strb	r3, [r7, #15]
	else
	{
		/* do nothing */
	}
	
	return RespVal;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <ISOUDS_StrDiagSessExtended_Cbk>:
** Return value             :  RespVal -> Returns the response for the service request

** Remarks                  : None
***************************************************************************************************/
static uint8_t ISOUDS_StrDiagSessExtended_Cbk (ISOUDS_ConfType *ISOUDSConfPtr)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	uint8_t RespVal = ISOUDS_POSRES;
 8003188:	2300      	movs	r3, #0
 800318a:	73fb      	strb	r3, [r7, #15]

	if (NULL_PTR != ISOUDSConfPtr)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00c      	beq.n	80031ac <ISOUDS_StrDiagSessExtended_Cbk+0x2c>
	{
		if (ISOUDSConfPtr->srvSt == (uint8_t)ISOUDS_RXMSG)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d104      	bne.n	80031a4 <ISOUDS_StrDiagSessExtended_Cbk+0x24>
		{
			/* Manual code start */
			/* Initial Routine request handler */
			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessExtended_Cbk();
 800319a:	f000 f84e 	bl	800323a <HAL_StrDiagSessExtended_Cbk>
 800319e:	4603      	mov	r3, r0
 80031a0:	73fb      	strb	r3, [r7, #15]
 80031a2:	e003      	b.n	80031ac <ISOUDS_StrDiagSessExtended_Cbk+0x2c>
			/* Manual code start */

			/* Pending response handler */

			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessExtended_Cbk();
 80031a4:	f000 f849 	bl	800323a <HAL_StrDiagSessExtended_Cbk>
 80031a8:	4603      	mov	r3, r0
 80031aa:	73fb      	strb	r3, [r7, #15]
	else
	{
		/* do nothing */
	}

	return RespVal;
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <ISOUDS_StrDiagSessProgramming_Cbk>:
** Return value             : RespVal -> Returns the response for the service request

** Remarks                  : None
***************************************************************************************************/
static uint8_t ISOUDS_StrDiagSessProgramming_Cbk (ISOUDS_ConfType *ISOUDSConfPtr)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
	uint8_t RespVal = ISOUDS_POSRES;
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]

	if (NULL_PTR != ISOUDSConfPtr)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00c      	beq.n	80031e2 <ISOUDS_StrDiagSessProgramming_Cbk+0x2c>
	{
		if (ISOUDSConfPtr->srvSt == (uint8_t)ISOUDS_RXMSG)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d104      	bne.n	80031da <ISOUDS_StrDiagSessProgramming_Cbk+0x24>
		{
			/* Manual code start */

			/* Initial Routine request handler */
			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessProgramming_Cbk();
 80031d0:	f000 f83f 	bl	8003252 <HAL_StrDiagSessProgramming_Cbk>
 80031d4:	4603      	mov	r3, r0
 80031d6:	73fb      	strb	r3, [r7, #15]
 80031d8:	e003      	b.n	80031e2 <ISOUDS_StrDiagSessProgramming_Cbk+0x2c>
			/* Manual code start */

			/* Pending response handler */

			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessProgramming_Cbk();
 80031da:	f000 f83a 	bl	8003252 <HAL_StrDiagSessProgramming_Cbk>
 80031de:	4603      	mov	r3, r0
 80031e0:	73fb      	strb	r3, [r7, #15]
	else
	{
		/* do nothing */
	}

	return RespVal;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <ISOUDS_StrDiagSessSafety_Cbk>:
** Return value             :  RespVal -> Returns the response for the service request

** Remarks                  : None
***************************************************************************************************/
static uint8_t ISOUDS_StrDiagSessSafety_Cbk (ISOUDS_ConfType *ISOUDSConfPtr)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	uint8_t RespVal = ISOUDS_POSRES;
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]

	if (NULL_PTR != ISOUDSConfPtr)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00c      	beq.n	8003218 <ISOUDS_StrDiagSessSafety_Cbk+0x2c>
	{
		if (ISOUDSConfPtr->srvSt == (uint8_t)ISOUDS_RXMSG)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d104      	bne.n	8003210 <ISOUDS_StrDiagSessSafety_Cbk+0x24>
		{
			/* Manual code start */
			/* Initial Routine request handler */
			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessSafety_Cbk();
 8003206:	f000 f830 	bl	800326a <HAL_StrDiagSessSafety_Cbk>
 800320a:	4603      	mov	r3, r0
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	e003      	b.n	8003218 <ISOUDS_StrDiagSessSafety_Cbk+0x2c>
			/* Manual code start */

			/* Pending response handler */

			/* Perform Operation and strore the Response code into RespVal */
			RespVal = HAL_StrDiagSessSafety_Cbk();
 8003210:	f000 f82b 	bl	800326a <HAL_StrDiagSessSafety_Cbk>
 8003214:	4603      	mov	r3, r0
 8003216:	73fb      	strb	r3, [r7, #15]
	else
	{
		/* do nothing */
	}

	return RespVal;
 8003218:	7bfb      	ldrb	r3, [r7, #15]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_StrDiagSessDefault_Cbk>:
** Parameter                : None

** Return value             :  RespVal -> Returns the response for the service request
***************************************************************************************************/
uint8_t HAL_StrDiagSessDefault_Cbk(void)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
	uint8_t RespVal;

	RespVal = ISOUDS_POSRES;
 8003228:	2300      	movs	r3, #0
 800322a:	71fb      	strb	r3, [r7, #7]
	RespVal = ISOUDS_POSRES;
	return(RespVal);
	#endif
#ifdef ISOUDS_SA_SERV 
	/* Session change so lock the security*/
	ISOUDS_SAReset();
 800322c:	f00a f95a 	bl	800d4e4 <ISOUDS_SAReset>
#endif 
	return RespVal;
 8003230:	79fb      	ldrb	r3, [r7, #7]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_StrDiagSessExtended_Cbk>:
** Return value             :  RespVal -> Returns the response for the service request

** Remarks                  : None
***************************************************************************************************/
uint8_t HAL_StrDiagSessExtended_Cbk(void)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0


	uint8_t RespVal;

	RespVal = ISOUDS_POSRES;
 8003240:	2300      	movs	r3, #0
 8003242:	71fb      	strb	r3, [r7, #7]
	SYMC_UpdateSeed();
#endif

#ifdef ISOUDS_SA_SERV 
	/* Session change so lock the security*/
	ISOUDS_SAReset();
 8003244:	f00a f94e 	bl	800d4e4 <ISOUDS_SAReset>
#endif
	return RespVal;
 8003248:	79fb      	ldrb	r3, [r7, #7]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_StrDiagSessProgramming_Cbk>:
** Return value             : RespVal -> Returns the response for the service request

** Remarks                  : None
***************************************************************************************************/
uint8_t HAL_StrDiagSessProgramming_Cbk(void)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
//	ISOUDS_SAReset();
//	#endif
	
	uint8_t RespVal;

		RespVal = ISOUDS_POSRES;
 8003258:	2300      	movs	r3, #0
 800325a:	71fb      	strb	r3, [r7, #7]
		RespVal = ISOUDS_POSRES;
		return(RespVal);
		#endif
	#ifdef ISOUDS_SA_SERV
		/* Session change so lock the security*/
		ISOUDS_SAReset();
 800325c:	f00a f942 	bl	800d4e4 <ISOUDS_SAReset>
	#endif
		return RespVal;
 8003260:	79fb      	ldrb	r3, [r7, #7]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_StrDiagSessSafety_Cbk>:
** Return value             :  RespVal -> Returns the response for the service request

** Remarks                  : None
***************************************************************************************************/
uint8_t HAL_StrDiagSessSafety_Cbk(void)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
	uint8_t RespVal;

	RespVal = ISOUDS_POSRES;
 8003270:	2300      	movs	r3, #0
 8003272:	71fb      	strb	r3, [r7, #7]
	RespVal = ISOUDS_POSRES;
	return(RespVal);
	#endif
#ifdef ISOUDS_SA_SERV
	/* Session change so lock the security*/
	ISOUDS_SAReset();
 8003274:	f00a f936 	bl	800d4e4 <ISOUDS_SAReset>
#endif
	return RespVal;
 8003278:	79fb      	ldrb	r3, [r7, #7]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <ISOUDS_TransferDataDownloadReq>:
** Return value             : None

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_TransferDataDownloadReq (uint32_t ReqAddress, uint16_t ReqLength, const uint8_t *DownloadBuff)
{
 8003282:	b480      	push	{r7}
 8003284:	b087      	sub	sp, #28
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	460b      	mov	r3, r1
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	817b      	strh	r3, [r7, #10]
    uint8_t flshresultstatus = ISOUDS_POSRES;
 8003290:	2300      	movs	r3, #0
 8003292:	75fb      	strb	r3, [r7, #23]

	/* Integrate Flash/NVM module to write the DownloadBuff to the Flash/NVM memory */

	/* Manual code ends */

	return flshresultstatus;
 8003294:	7dfb      	ldrb	r3, [r7, #23]
}
 8003296:	4618      	mov	r0, r3
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <ISOUDS_GetTrnsfrReqstDwnldStat>:
** Return value             : flshresultstatus : Status of the download request(ISOUDS_POSRES/ISOUDS_GPF ... etc.,)

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_GetTrnsfrReqstDwnldStat (void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
    uint8_t flshresultstatus = ISOUDS_POSRES;
 80032a8:	2300      	movs	r3, #0
 80032aa:	71fb      	strb	r3, [r7, #7]

	/* Integrate Flash/NVM module to get the status of the write requested in ISOUDS_TransferDataDownloadReq() */

	/* Manual code ends */

	return flshresultstatus;
 80032ac:	79fb      	ldrb	r3, [r7, #7]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <ISOUDS_TranferDataUploadRequest>:
** Return value             : flshresultstatus : Status of the download request(ISOUDS_POSRES/ISOUDS_GPF ... etc.,)

** Remarks                  : None
***************************************************************************************************/
uint8_t ISOUDS_TranferDataUploadRequest (uint32_t ReqAddress, uint16_t ReqLength, const uint8_t *UploadBuff)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b087      	sub	sp, #28
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	460b      	mov	r3, r1
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	817b      	strh	r3, [r7, #10]
    uint8_t flshresultstatus = ISOUDS_POSRES;
 80032c8:	2300      	movs	r3, #0
 80032ca:	75fb      	strb	r3, [r7, #23]
//	ReqAddress = flashAddress;
	/* Integrate Flash/NVM module to read the Flash/NVM memory to UploadBuff */

	/* Manual code ends */

	return flshresultstatus;
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <ISOUDS_TrnsfrExitInd>:

** Return value             : RespRecLength : Length of the response record stored in the bufffer 
												transferRequestParameterRecord
***************************************************************************************************/
uint16_t ISOUDS_TrnsfrExitInd(const uint8_t *transferRequestParameterRecord, uint16_t RecordLength)
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	807b      	strh	r3, [r7, #2]
	uint16_t RespRecLength = ISOUDS_ZERO;
 80032e6:	2300      	movs	r3, #0
 80032e8:	81fb      	strh	r3, [r7, #14]

	/* Implement the Parameter record handling */

	/* Manual code end */
	
	return RespRecLength;
 80032ea:	89fb      	ldrh	r3, [r7, #14]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <ISOUDS_Get_WRCONFTABSIZE>:
** Return value             : retVal : Number of DIDs Supported

** Remarks                  : None
***************************************************************************************************/
uint16_t ISOUDS_Get_WRCONFTABSIZE(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
	return ISOUDS_WRCONFTABSIZE;
 80032fc:	2304      	movs	r3, #4
}
 80032fe:	4618      	mov	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <ISOUDS_Write_SYMC_PartNoCbk>:
** Return value             : Positive or Negative Response value

** Remarks                  : None
***************************************************************************************************/
uint8_t  ISOUDS_Write_SYMC_PartNoCbk(uint8_t  DestBuff[], uint8_t  len)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	70fb      	strb	r3, [r7, #3]
	uint8_t RespVal ;
	(void)DestBuff;
	(void)len;

	/* update Negative Response */
	RespVal = ISOUDS_POSRES;
 8003314:	2300      	movs	r3, #0
 8003316:	73fb      	strb	r3, [r7, #15]

	/* update the retVal variable with respective response if required */

	return RespVal;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <ISOUDS_Write_VehIdenNoCbk>:
** Return value             : Positive or Negative Response value

** Remarks                  : None
***************************************************************************************************/
uint8_t  ISOUDS_Write_VehIdenNoCbk(uint8_t  DestBuff[], uint8_t  len)
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	460b      	mov	r3, r1
 8003330:	70fb      	strb	r3, [r7, #3]
	uint8_t RespVal = ISOUDS_POSRES;
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]
		RespVal = ISOUDS_GPF;
	}
#endif
	/* update the retVal variable with respective response if required */

	return RespVal;
 8003336:	7bfb      	ldrb	r3, [r7, #15]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <ISOUDS_Write_EcuInfoCbk>:
** Return value             : Positive or Negative Response value

** Remarks                  : None
***************************************************************************************************/
uint8_t  ISOUDS_Write_EcuInfoCbk(uint8_t  DestBuff[], uint8_t  len)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	70fb      	strb	r3, [r7, #3]

	uint8_t RespVal = ISOUDS_POSRES;
 8003350:	2300      	movs	r3, #0
 8003352:	73fb      	strb	r3, [r7, #15]
		}
	}
#endif
	/* update the retVal variable with respective response if required */

	return RespVal;
 8003354:	7bfb      	ldrb	r3, [r7, #15]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <ISOUDS_Write_QRCodeCbk>:
** Return value             : Positive or Negative Response value

** Remarks                  : None
***************************************************************************************************/
uint8_t  ISOUDS_Write_QRCodeCbk(uint8_t  DestBuff[], uint8_t  len)
{
 8003362:	b480      	push	{r7}
 8003364:	b085      	sub	sp, #20
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	70fb      	strb	r3, [r7, #3]

	uint8_t RespVal = ISOUDS_GPF;
 800336e:	2372      	movs	r3, #114	; 0x72
 8003370:	73fb      	strb	r3, [r7, #15]
		}
	}
#endif
	/* update the retVal variable with respective response if required */

	return RespVal;
 8003372:	7bfb      	ldrb	r3, [r7, #15]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_FDCAN_RxFifo0Callback>:
			  HAL_Delay (5);
	 }
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003382:	b08b      	sub	sp, #44	; 0x2c
 8003384:	af06      	add	r7, sp, #24
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d07e      	beq.n	8003492 <HAL_FDCAN_RxFifo0Callback+0x112>
  {

	  sprintf(buff,"\r\n CAN in RX data callback \r\n");
 8003394:	4941      	ldr	r1, [pc, #260]	; (800349c <HAL_FDCAN_RxFifo0Callback+0x11c>)
 8003396:	4842      	ldr	r0, [pc, #264]	; (80034a0 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8003398:	f00c fb28 	bl	800f9ec <siprintf>
	   	HAL_UART_Transmit(&huart7, (uint8_t *) buff, sizeof(buff), 100);
 800339c:	2364      	movs	r3, #100	; 0x64
 800339e:	2264      	movs	r2, #100	; 0x64
 80033a0:	493f      	ldr	r1, [pc, #252]	; (80034a0 <HAL_FDCAN_RxFifo0Callback+0x120>)
 80033a2:	4840      	ldr	r0, [pc, #256]	; (80034a4 <HAL_FDCAN_RxFifo0Callback+0x124>)
 80033a4:	f005 ff72 	bl	800928c <HAL_UART_Transmit>
	    	memset(buff,0,sizeof(buff));
 80033a8:	2264      	movs	r2, #100	; 0x64
 80033aa:	2100      	movs	r1, #0
 80033ac:	483c      	ldr	r0, [pc, #240]	; (80034a0 <HAL_FDCAN_RxFifo0Callback+0x120>)
 80033ae:	f00c fb3d 	bl	800fa2c <memset>
    /* Retreive Rx messages from RX FIFO0 */

    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK)
 80033b2:	4b3d      	ldr	r3, [pc, #244]	; (80034a8 <HAL_FDCAN_RxFifo0Callback+0x128>)
 80033b4:	4a3d      	ldr	r2, [pc, #244]	; (80034ac <HAL_FDCAN_RxFifo0Callback+0x12c>)
 80033b6:	2140      	movs	r1, #64	; 0x40
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f001 fa21 	bl	8004800 <HAL_FDCAN_GetRxMessage>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_FDCAN_RxFifo0Callback+0x48>
    {
    /* Reception Error */
    Error_Handler();
 80033c4:	f000 fb68 	bl	8003a98 <Error_Handler>
    }
    ISOTP_RxMsgCbk(0x731,0x00, 0x08,RxData1);
 80033c8:	4b37      	ldr	r3, [pc, #220]	; (80034a8 <HAL_FDCAN_RxFifo0Callback+0x128>)
 80033ca:	2208      	movs	r2, #8
 80033cc:	2100      	movs	r1, #0
 80033ce:	f240 7031 	movw	r0, #1841	; 0x731
 80033d2:	f00b f98f 	bl	800e6f4 <ISOTP_RxMsgCbk>
    uint8_t St = ISOTP_GetStatus();
 80033d6:	f00b fb95 	bl	800eb04 <ISOTP_GetStatus>
 80033da:	4603      	mov	r3, r0
 80033dc:	73fb      	strb	r3, [r7, #15]
    sprintf(buff,"\r\n ISOTP callbackdata %d \r\n", St);
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	461a      	mov	r2, r3
 80033e2:	4933      	ldr	r1, [pc, #204]	; (80034b0 <HAL_FDCAN_RxFifo0Callback+0x130>)
 80033e4:	482e      	ldr	r0, [pc, #184]	; (80034a0 <HAL_FDCAN_RxFifo0Callback+0x120>)
 80033e6:	f00c fb01 	bl	800f9ec <siprintf>
    	    	memset(buff,0,sizeof(buff));
 80033ea:	2264      	movs	r2, #100	; 0x64
 80033ec:	2100      	movs	r1, #0
 80033ee:	482c      	ldr	r0, [pc, #176]	; (80034a0 <HAL_FDCAN_RxFifo0Callback+0x120>)
 80033f0:	f00c fb1c 	bl	800fa2c <memset>
     // Set up the response message header
     // You can customize this based on your needs
     TxResponseHeader.Identifier = 0x12;  // Set the identifier as needed
 80033f4:	4b2f      	ldr	r3, [pc, #188]	; (80034b4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 80033f6:	2212      	movs	r2, #18
 80033f8:	601a      	str	r2, [r3, #0]
     TxResponseHeader.IdType = FDCAN_STANDARD_ID;
 80033fa:	4b2e      	ldr	r3, [pc, #184]	; (80034b4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	605a      	str	r2, [r3, #4]
     TxResponseHeader.TxFrameType = FDCAN_DATA_FRAME;
 8003400:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8003402:	2200      	movs	r2, #0
 8003404:	609a      	str	r2, [r3, #8]
     TxResponseHeader.DataLength = FDCAN_DLC_BYTES_8;
 8003406:	4b2b      	ldr	r3, [pc, #172]	; (80034b4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8003408:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800340c:	60da      	str	r2, [r3, #12]

      // Send the response
     if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxResponseHeader, TxResponseData) != HAL_OK)
 800340e:	4a2a      	ldr	r2, [pc, #168]	; (80034b8 <HAL_FDCAN_RxFifo0Callback+0x138>)
 8003410:	4928      	ldr	r1, [pc, #160]	; (80034b4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8003412:	482a      	ldr	r0, [pc, #168]	; (80034bc <HAL_FDCAN_RxFifo0Callback+0x13c>)
 8003414:	f001 f999 	bl	800474a <HAL_FDCAN_AddMessageToTxFifoQ>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_FDCAN_RxFifo0Callback+0xa2>
     {
       // Transmission Error
       Error_Handler();
 800341e:	f000 fb3b 	bl	8003a98 <Error_Handler>
     }
    sprintf(buff,"\r\n CAN in RX data callback x %.2x %.2x %.2x %.2x %.2x %.2x %.2x %.2x  \r\n",RxData1[0],RxData1[1],RxData1[2],RxData1[3],RxData1[4],RxData1[5],RxData1[6],RxData1[7]);
 8003422:	4b21      	ldr	r3, [pc, #132]	; (80034a8 <HAL_FDCAN_RxFifo0Callback+0x128>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	461e      	mov	r6, r3
 8003428:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <HAL_FDCAN_RxFifo0Callback+0x128>)
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	469c      	mov	ip, r3
 800342e:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <HAL_FDCAN_RxFifo0Callback+0x128>)
 8003430:	789b      	ldrb	r3, [r3, #2]
 8003432:	461a      	mov	r2, r3
 8003434:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <HAL_FDCAN_RxFifo0Callback+0x128>)
 8003436:	78db      	ldrb	r3, [r3, #3]
 8003438:	4619      	mov	r1, r3
 800343a:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_FDCAN_RxFifo0Callback+0x128>)
 800343c:	791b      	ldrb	r3, [r3, #4]
 800343e:	4618      	mov	r0, r3
 8003440:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <HAL_FDCAN_RxFifo0Callback+0x128>)
 8003442:	795b      	ldrb	r3, [r3, #5]
 8003444:	461c      	mov	r4, r3
 8003446:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <HAL_FDCAN_RxFifo0Callback+0x128>)
 8003448:	799b      	ldrb	r3, [r3, #6]
 800344a:	461d      	mov	r5, r3
 800344c:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <HAL_FDCAN_RxFifo0Callback+0x128>)
 800344e:	79db      	ldrb	r3, [r3, #7]
 8003450:	9305      	str	r3, [sp, #20]
 8003452:	9504      	str	r5, [sp, #16]
 8003454:	9403      	str	r4, [sp, #12]
 8003456:	9002      	str	r0, [sp, #8]
 8003458:	9101      	str	r1, [sp, #4]
 800345a:	9200      	str	r2, [sp, #0]
 800345c:	4663      	mov	r3, ip
 800345e:	4632      	mov	r2, r6
 8003460:	4917      	ldr	r1, [pc, #92]	; (80034c0 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8003462:	480f      	ldr	r0, [pc, #60]	; (80034a0 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8003464:	f00c fac2 	bl	800f9ec <siprintf>
  	   	HAL_UART_Transmit(&huart7, (uint8_t *) buff, sizeof(buff), 100);
 8003468:	2364      	movs	r3, #100	; 0x64
 800346a:	2264      	movs	r2, #100	; 0x64
 800346c:	490c      	ldr	r1, [pc, #48]	; (80034a0 <HAL_FDCAN_RxFifo0Callback+0x120>)
 800346e:	480d      	ldr	r0, [pc, #52]	; (80034a4 <HAL_FDCAN_RxFifo0Callback+0x124>)
 8003470:	f005 ff0c 	bl	800928c <HAL_UART_Transmit>
  	    	memset(buff,0,sizeof(buff));
 8003474:	2264      	movs	r2, #100	; 0x64
 8003476:	2100      	movs	r1, #0
 8003478:	4809      	ldr	r0, [pc, #36]	; (80034a0 <HAL_FDCAN_RxFifo0Callback+0x120>)
 800347a:	f00c fad7 	bl	800fa2c <memset>

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800347e:	2200      	movs	r2, #0
 8003480:	2101      	movs	r1, #1
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f001 fb2a 	bl	8004adc <HAL_FDCAN_ActivateNotification>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_FDCAN_RxFifo0Callback+0x112>
    {
      /* Notification Error */
      Error_Handler();
 800348e:	f000 fb03 	bl	8003a98 <Error_Handler>
    }
  }
}
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800349a:	bf00      	nop
 800349c:	08010388 	.word	0x08010388
 80034a0:	2400149c 	.word	0x2400149c
 80034a4:	24001664 	.word	0x24001664
 80034a8:	24001500 	.word	0x24001500
 80034ac:	2400152c 	.word	0x2400152c
 80034b0:	080103a8 	.word	0x080103a8
 80034b4:	24001554 	.word	0x24001554
 80034b8:	2400027c 	.word	0x2400027c
 80034bc:	24001578 	.word	0x24001578
 80034c0:	080103c4 	.word	0x080103c4

080034c4 <task1>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs);

void task1()
{		//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
	if(flag ==0){
 80034c8:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <task1+0x3c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d108      	bne.n	80034e2 <task1+0x1e>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3,GPIO_PIN_SET);
 80034d0:	2201      	movs	r2, #1
 80034d2:	2108      	movs	r1, #8
 80034d4:	480b      	ldr	r0, [pc, #44]	; (8003504 <task1+0x40>)
 80034d6:	f002 fbf1 	bl	8005cbc <HAL_GPIO_WritePin>
			flag =1;
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <task1+0x3c>)
 80034dc:	2201      	movs	r2, #1
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e007      	b.n	80034f2 <task1+0x2e>
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80034e2:	2200      	movs	r2, #0
 80034e4:	2108      	movs	r1, #8
 80034e6:	4807      	ldr	r0, [pc, #28]	; (8003504 <task1+0x40>)
 80034e8:	f002 fbe8 	bl	8005cbc <HAL_GPIO_WritePin>
		flag =0;
 80034ec:	4b04      	ldr	r3, [pc, #16]	; (8003500 <task1+0x3c>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
	}
			ISOTP_Main();
 80034f2:	f00b fa37 	bl	800e964 <ISOTP_Main>
			ISOUDS_Main_Server();
 80034f6:	f007 fdc9 	bl	800b08c <ISOUDS_Main_Server>
//			HAL_Delay(5);

//			can_Tx();
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	240016fc 	.word	0x240016fc
 8003504:	58021000 	.word	0x58021000

08003508 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	if (htim2->Instance == TIM2) {
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003518:	d104      	bne.n	8003524 <HAL_TIM_PeriodElapsedCallback+0x1c>
		milliseconds ++;
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	4a09      	ldr	r2, [pc, #36]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003522:	6013      	str	r3, [r2, #0]

	}
	if(milliseconds %5 ==0)
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003526:	6819      	ldr	r1, [r3, #0]
 8003528:	4b08      	ldr	r3, [pc, #32]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800352a:	fba3 2301 	umull	r2, r3, r3, r1
 800352e:	089a      	lsrs	r2, r3, #2
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	1aca      	subs	r2, r1, r3
 8003538:	2a00      	cmp	r2, #0
 800353a:	d101      	bne.n	8003540 <HAL_TIM_PeriodElapsedCallback+0x38>
		    {
		  		  task1();
 800353c:	f7ff ffc2 	bl	80034c4 <task1>
		  	  }
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	240016f8 	.word	0x240016f8
 800354c:	cccccccd 	.word	0xcccccccd

08003550 <WriteDataToFlash>:

void WriteDataToFlash(uint32_t flashAddress, const uint8_t *data, uint32_t dataSize) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b08c      	sub	sp, #48	; 0x30
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
    // Unlock the Flash memory for write access
    HAL_FLASH_Unlock();
 800355c:	f002 f8a2 	bl	80056a4 <HAL_FLASH_Unlock>

    // Erase the specified Flash sectors (you may need to adjust the sector number)
    FLASH_EraseInitTypeDef eraseInitStruct;
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
    eraseInitStruct.Sector = FLASH_SECTOR_5; // Adjust the sector number
 8003564:	2305      	movs	r3, #5
 8003566:	61fb      	str	r3, [r7, #28]
    eraseInitStruct.NbSectors = 1;
 8003568:	2301      	movs	r3, #1
 800356a:	623b      	str	r3, [r7, #32]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800356c:	2320      	movs	r3, #32
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t sectorError = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	613b      	str	r3, [r7, #16]
    HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError);
 8003574:	f107 0210 	add.w	r2, r7, #16
 8003578:	f107 0314 	add.w	r3, r7, #20
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f002 f920 	bl	80057c4 <HAL_FLASHEx_Erase>

    // Write the data to Flash memory
    for (uint32_t i = 0; i < dataSize; i += 4) {
 8003584:	2300      	movs	r3, #0
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003588:	e00f      	b.n	80035aa <WriteDataToFlash+0x5a>
        uint32_t dataWord = *(uint32_t*)&data[i];
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358e:	4413      	add	r3, r2
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	62bb      	str	r3, [r7, #40]	; 0x28
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, flashAddress + i, dataWord);
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	4413      	add	r3, r2
 800359a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800359c:	4619      	mov	r1, r3
 800359e:	2001      	movs	r0, #1
 80035a0:	f002 f812 	bl	80055c8 <HAL_FLASH_Program>
    for (uint32_t i = 0; i < dataSize; i += 4) {
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	3304      	adds	r3, #4
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d3eb      	bcc.n	800358a <WriteDataToFlash+0x3a>
    }

    // Lock the Flash memory
    HAL_FLASH_Lock();
 80035b2:	f002 f899 	bl	80056e8 <HAL_FLASH_Lock>
}
 80035b6:	bf00      	nop
 80035b8:	3730      	adds	r7, #48	; 0x30
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b0c2      	sub	sp, #264	; 0x108
 80035c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80035c6:	f000 fc9f 	bl	8003f08 <HAL_Init>

  /* USER CODE BEGIN Init */
  ISOTP_Init();
 80035ca:	f00b f863 	bl	800e694 <ISOTP_Init>
  ISOUDS_Server_Init();
 80035ce:	f007 fcd7 	bl	800af80 <ISOUDS_Server_Init>
  FCM_Init();
 80035d2:	f00b fe51 	bl	800f278 <FCM_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035d6:	f000 f83d 	bl	8003654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035da:	f000 f9f5 	bl	80039c8 <MX_GPIO_Init>
  MX_FDCAN3_Init();
 80035de:	f000 f8a9 	bl	8003734 <MX_FDCAN3_Init>
  MX_UART7_Init();
 80035e2:	f000 f9a5 	bl	8003930 <MX_UART7_Init>
  MX_TIM2_Init();
 80035e6:	f000 f955 	bl	8003894 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim2);
 80035ea:	4818      	ldr	r0, [pc, #96]	; (800364c <main+0x8c>)
 80035ec:	f005 f93a 	bl	8008864 <HAL_TIM_Base_Start_IT>
  *mappedAddress = 55;
 80035f0:	4b17      	ldr	r3, [pc, #92]	; (8003650 <main+0x90>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2237      	movs	r2, #55	; 0x37
 80035f6:	601a      	str	r2, [r3, #0]
  uint8_t data[256];

  for (int i = 0; i < 256; i++) {
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035fe:	e012      	b.n	8003626 <main+0x66>
         data[i] = i +1; // Write values into the array (e.g., i * 2)
 8003600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003604:	b2db      	uxtb	r3, r3
 8003606:	3301      	adds	r3, #1
 8003608:	b2d9      	uxtb	r1, r3
 800360a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800360e:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8003612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003616:	4413      	add	r3, r2
 8003618:	460a      	mov	r2, r1
 800361a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 256; i++) {
 800361c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003620:	3301      	adds	r3, #1
 8003622:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800362a:	2bff      	cmp	r3, #255	; 0xff
 800362c:	dde8      	ble.n	8003600 <main+0x40>
     }

  // Flash address where you want to write the data
  uint32_t flashAddress = *mappedAddress; // Adjust the address based on your Flash layout
 800362e:	4b08      	ldr	r3, [pc, #32]	; (8003650 <main+0x90>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

  // Write the data to Flash
  WriteDataToFlash(flashAddress, data, sizeof(data));
 8003638:	463b      	mov	r3, r7
 800363a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800363e:	4619      	mov	r1, r3
 8003640:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8003644:	f7ff ff84 	bl	8003550 <WriteDataToFlash>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003648:	e7fe      	b.n	8003648 <main+0x88>
 800364a:	bf00      	nop
 800364c:	24001618 	.word	0x24001618
 8003650:	24000284 	.word	0x24000284

08003654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b09c      	sub	sp, #112	; 0x70
 8003658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800365a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800365e:	224c      	movs	r2, #76	; 0x4c
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f00c f9e2 	bl	800fa2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003668:	1d3b      	adds	r3, r7, #4
 800366a:	2220      	movs	r2, #32
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f00c f9dc 	bl	800fa2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003674:	2002      	movs	r0, #2
 8003676:	f002 fb3b 	bl	8005cf0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800367a:	2300      	movs	r3, #0
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	4b2c      	ldr	r3, [pc, #176]	; (8003730 <SystemClock_Config+0xdc>)
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003686:	4a2a      	ldr	r2, [pc, #168]	; (8003730 <SystemClock_Config+0xdc>)
 8003688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800368c:	6193      	str	r3, [r2, #24]
 800368e:	4b28      	ldr	r3, [pc, #160]	; (8003730 <SystemClock_Config+0xdc>)
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800369a:	bf00      	nop
 800369c:	4b24      	ldr	r3, [pc, #144]	; (8003730 <SystemClock_Config+0xdc>)
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a8:	d1f8      	bne.n	800369c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036aa:	2302      	movs	r3, #2
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80036b2:	2340      	movs	r3, #64	; 0x40
 80036b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036b6:	2302      	movs	r3, #2
 80036b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036ba:	2300      	movs	r3, #0
 80036bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80036be:	2304      	movs	r3, #4
 80036c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80036c2:	230c      	movs	r3, #12
 80036c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80036c6:	2302      	movs	r3, #2
 80036c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80036ca:	2304      	movs	r3, #4
 80036cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80036ce:	2302      	movs	r3, #2
 80036d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80036d2:	230c      	movs	r3, #12
 80036d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80036da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e4:	4618      	mov	r0, r3
 80036e6:	f002 fb3d 	bl	8005d64 <HAL_RCC_OscConfig>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80036f0:	f000 f9d2 	bl	8003a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036f4:	233f      	movs	r3, #63	; 0x3f
 80036f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003708:	2340      	movs	r3, #64	; 0x40
 800370a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003710:	2300      	movs	r3, #0
 8003712:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	2101      	movs	r1, #1
 8003718:	4618      	mov	r0, r3
 800371a:	f002 fefd 	bl	8006518 <HAL_RCC_ClockConfig>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003724:	f000 f9b8 	bl	8003a98 <Error_Handler>
  }
}
 8003728:	bf00      	nop
 800372a:	3770      	adds	r7, #112	; 0x70
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	58024800 	.word	0x58024800

08003734 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800373a:	4b53      	ldr	r3, [pc, #332]	; (8003888 <MX_FDCAN3_Init+0x154>)
 800373c:	4a53      	ldr	r2, [pc, #332]	; (800388c <MX_FDCAN3_Init+0x158>)
 800373e:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003740:	4b51      	ldr	r3, [pc, #324]	; (8003888 <MX_FDCAN3_Init+0x154>)
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8003746:	4b50      	ldr	r3, [pc, #320]	; (8003888 <MX_FDCAN3_Init+0x154>)
 8003748:	2200      	movs	r2, #0
 800374a:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = ENABLE;
 800374c:	4b4e      	ldr	r3, [pc, #312]	; (8003888 <MX_FDCAN3_Init+0x154>)
 800374e:	2201      	movs	r2, #1
 8003750:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8003752:	4b4d      	ldr	r3, [pc, #308]	; (8003888 <MX_FDCAN3_Init+0x154>)
 8003754:	2200      	movs	r2, #0
 8003756:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = ENABLE;
 8003758:	4b4b      	ldr	r3, [pc, #300]	; (8003888 <MX_FDCAN3_Init+0x154>)
 800375a:	2201      	movs	r2, #1
 800375c:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 800375e:	4b4a      	ldr	r3, [pc, #296]	; (8003888 <MX_FDCAN3_Init+0x154>)
 8003760:	2201      	movs	r2, #1
 8003762:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 14;
 8003764:	4b48      	ldr	r3, [pc, #288]	; (8003888 <MX_FDCAN3_Init+0x154>)
 8003766:	220e      	movs	r2, #14
 8003768:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 85;
 800376a:	4b47      	ldr	r3, [pc, #284]	; (8003888 <MX_FDCAN3_Init+0x154>)
 800376c:	2255      	movs	r2, #85	; 0x55
 800376e:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 14;
 8003770:	4b45      	ldr	r3, [pc, #276]	; (8003888 <MX_FDCAN3_Init+0x154>)
 8003772:	220e      	movs	r2, #14
 8003774:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 4;
 8003776:	4b44      	ldr	r3, [pc, #272]	; (8003888 <MX_FDCAN3_Init+0x154>)
 8003778:	2204      	movs	r2, #4
 800377a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 12;
 800377c:	4b42      	ldr	r3, [pc, #264]	; (8003888 <MX_FDCAN3_Init+0x154>)
 800377e:	220c      	movs	r2, #12
 8003780:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 12;
 8003782:	4b41      	ldr	r3, [pc, #260]	; (8003888 <MX_FDCAN3_Init+0x154>)
 8003784:	220c      	movs	r2, #12
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 12;
 8003788:	4b3f      	ldr	r3, [pc, #252]	; (8003888 <MX_FDCAN3_Init+0x154>)
 800378a:	220c      	movs	r2, #12
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 800378e:	4b3e      	ldr	r3, [pc, #248]	; (8003888 <MX_FDCAN3_Init+0x154>)
 8003790:	2200      	movs	r2, #0
 8003792:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 8003794:	4b3c      	ldr	r3, [pc, #240]	; (8003888 <MX_FDCAN3_Init+0x154>)
 8003796:	2201      	movs	r2, #1
 8003798:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 800379a:	4b3b      	ldr	r3, [pc, #236]	; (8003888 <MX_FDCAN3_Init+0x154>)
 800379c:	2200      	movs	r2, #0
 800379e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 1;
 80037a0:	4b39      	ldr	r3, [pc, #228]	; (8003888 <MX_FDCAN3_Init+0x154>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80037a6:	4b38      	ldr	r3, [pc, #224]	; (8003888 <MX_FDCAN3_Init+0x154>)
 80037a8:	2204      	movs	r2, #4
 80037aa:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80037ac:	4b36      	ldr	r3, [pc, #216]	; (8003888 <MX_FDCAN3_Init+0x154>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80037b2:	4b35      	ldr	r3, [pc, #212]	; (8003888 <MX_FDCAN3_Init+0x154>)
 80037b4:	2204      	movs	r2, #4
 80037b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80037b8:	4b33      	ldr	r3, [pc, #204]	; (8003888 <MX_FDCAN3_Init+0x154>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80037be:	4b32      	ldr	r3, [pc, #200]	; (8003888 <MX_FDCAN3_Init+0x154>)
 80037c0:	2204      	movs	r2, #4
 80037c2:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80037c4:	4b30      	ldr	r3, [pc, #192]	; (8003888 <MX_FDCAN3_Init+0x154>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80037ca:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <MX_FDCAN3_Init+0x154>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 1;
 80037d0:	4b2d      	ldr	r3, [pc, #180]	; (8003888 <MX_FDCAN3_Init+0x154>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80037d6:	4b2c      	ldr	r3, [pc, #176]	; (8003888 <MX_FDCAN3_Init+0x154>)
 80037d8:	2200      	movs	r2, #0
 80037da:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80037dc:	4b2a      	ldr	r3, [pc, #168]	; (8003888 <MX_FDCAN3_Init+0x154>)
 80037de:	2204      	movs	r2, #4
 80037e0:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80037e2:	4829      	ldr	r0, [pc, #164]	; (8003888 <MX_FDCAN3_Init+0x154>)
 80037e4:	f000 fd32 	bl	800424c <HAL_FDCAN_Init>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 80037ee:	f000 f953 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80037f2:	2300      	movs	r3, #0
 80037f4:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80037fa:	2302      	movs	r3, #2
 80037fc:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80037fe:	2301      	movs	r3, #1
 8003800:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x22;
 8003802:	2322      	movs	r3, #34	; 0x22
 8003804:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x731;
 8003806:	f240 7331 	movw	r3, #1841	; 0x731
 800380a:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 8003810:	463b      	mov	r3, r7
 8003812:	4619      	mov	r1, r3
 8003814:	481c      	ldr	r0, [pc, #112]	; (8003888 <MX_FDCAN3_Init+0x154>)
 8003816:	f000 fef7 	bl	8004608 <HAL_FDCAN_ConfigFilter>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <MX_FDCAN3_Init+0xf0>
  {
    /* Filter configuration Error */
    Error_Handler();
 8003820:	f000 f93a 	bl	8003a98 <Error_Handler>
  }
  if(HAL_FDCAN_Start(&hfdcan3)!= HAL_OK)
 8003824:	4818      	ldr	r0, [pc, #96]	; (8003888 <MX_FDCAN3_Init+0x154>)
 8003826:	f000 ff65 	bl	80046f4 <HAL_FDCAN_Start>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <MX_FDCAN3_Init+0x100>
  {
   Error_Handler();
 8003830:	f000 f932 	bl	8003a98 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8003834:	2200      	movs	r2, #0
 8003836:	2101      	movs	r1, #1
 8003838:	4813      	ldr	r0, [pc, #76]	; (8003888 <MX_FDCAN3_Init+0x154>)
 800383a:	f001 f94f 	bl	8004adc <HAL_FDCAN_ActivateNotification>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <MX_FDCAN3_Init+0x114>
   {
     /* Notification Error */
     Error_Handler();
 8003844:	f000 f928 	bl	8003a98 <Error_Handler>
   }


  // Configure TX Header for FDCAN1
  TxHeader1.Identifier = 0x11;
 8003848:	4b11      	ldr	r3, [pc, #68]	; (8003890 <MX_FDCAN3_Init+0x15c>)
 800384a:	2211      	movs	r2, #17
 800384c:	601a      	str	r2, [r3, #0]
  TxHeader1.IdType = FDCAN_STANDARD_ID;
 800384e:	4b10      	ldr	r3, [pc, #64]	; (8003890 <MX_FDCAN3_Init+0x15c>)
 8003850:	2200      	movs	r2, #0
 8003852:	605a      	str	r2, [r3, #4]
  TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 8003854:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <MX_FDCAN3_Init+0x15c>)
 8003856:	2200      	movs	r2, #0
 8003858:	609a      	str	r2, [r3, #8]
  TxHeader1.DataLength = FDCAN_DLC_BYTES_8;
 800385a:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <MX_FDCAN3_Init+0x15c>)
 800385c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003860:	60da      	str	r2, [r3, #12]
  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8003862:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <MX_FDCAN3_Init+0x15c>)
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
  TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <MX_FDCAN3_Init+0x15c>)
 800386a:	2200      	movs	r2, #0
 800386c:	615a      	str	r2, [r3, #20]
  TxHeader1.FDFormat = FDCAN_CLASSIC_CAN;
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <MX_FDCAN3_Init+0x15c>)
 8003870:	2200      	movs	r2, #0
 8003872:	619a      	str	r2, [r3, #24]
  TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <MX_FDCAN3_Init+0x15c>)
 8003876:	2200      	movs	r2, #0
 8003878:	61da      	str	r2, [r3, #28]
  TxHeader1.MessageMarker = 0;
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <MX_FDCAN3_Init+0x15c>)
 800387c:	2200      	movs	r2, #0
 800387e:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN3_Init 2 */

}
 8003880:	bf00      	nop
 8003882:	3720      	adds	r7, #32
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	24001578 	.word	0x24001578
 800388c:	4000d400 	.word	0x4000d400
 8003890:	24001508 	.word	0x24001508

08003894 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800389a:	f107 0310 	add.w	r3, r7, #16
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	605a      	str	r2, [r3, #4]
 80038a4:	609a      	str	r2, [r3, #8]
 80038a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038b2:	4b1e      	ldr	r3, [pc, #120]	; (800392c <MX_TIM2_Init+0x98>)
 80038b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80038ba:	4b1c      	ldr	r3, [pc, #112]	; (800392c <MX_TIM2_Init+0x98>)
 80038bc:	220a      	movs	r2, #10
 80038be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038c0:	4b1a      	ldr	r3, [pc, #104]	; (800392c <MX_TIM2_Init+0x98>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400;
 80038c6:	4b19      	ldr	r3, [pc, #100]	; (800392c <MX_TIM2_Init+0x98>)
 80038c8:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80038cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ce:	4b17      	ldr	r3, [pc, #92]	; (800392c <MX_TIM2_Init+0x98>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038d4:	4b15      	ldr	r3, [pc, #84]	; (800392c <MX_TIM2_Init+0x98>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038da:	4814      	ldr	r0, [pc, #80]	; (800392c <MX_TIM2_Init+0x98>)
 80038dc:	f004 ff6a 	bl	80087b4 <HAL_TIM_Base_Init>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80038e6:	f000 f8d7 	bl	8003a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038f0:	f107 0310 	add.w	r3, r7, #16
 80038f4:	4619      	mov	r1, r3
 80038f6:	480d      	ldr	r0, [pc, #52]	; (800392c <MX_TIM2_Init+0x98>)
 80038f8:	f005 f95a 	bl	8008bb0 <HAL_TIM_ConfigClockSource>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003902:	f000 f8c9 	bl	8003a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800390e:	1d3b      	adds	r3, r7, #4
 8003910:	4619      	mov	r1, r3
 8003912:	4806      	ldr	r0, [pc, #24]	; (800392c <MX_TIM2_Init+0x98>)
 8003914:	f005 fbb0 	bl	8009078 <HAL_TIMEx_MasterConfigSynchronization>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800391e:	f000 f8bb 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003922:	bf00      	nop
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	24001618 	.word	0x24001618

08003930 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8003934:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <MX_UART7_Init+0x90>)
 8003936:	4a23      	ldr	r2, [pc, #140]	; (80039c4 <MX_UART7_Init+0x94>)
 8003938:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800393a:	4b21      	ldr	r3, [pc, #132]	; (80039c0 <MX_UART7_Init+0x90>)
 800393c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003940:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003942:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <MX_UART7_Init+0x90>)
 8003944:	2200      	movs	r2, #0
 8003946:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003948:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <MX_UART7_Init+0x90>)
 800394a:	2200      	movs	r2, #0
 800394c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800394e:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <MX_UART7_Init+0x90>)
 8003950:	2200      	movs	r2, #0
 8003952:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003954:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <MX_UART7_Init+0x90>)
 8003956:	220c      	movs	r2, #12
 8003958:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800395a:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <MX_UART7_Init+0x90>)
 800395c:	2200      	movs	r2, #0
 800395e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003960:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <MX_UART7_Init+0x90>)
 8003962:	2200      	movs	r2, #0
 8003964:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003966:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <MX_UART7_Init+0x90>)
 8003968:	2200      	movs	r2, #0
 800396a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800396c:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <MX_UART7_Init+0x90>)
 800396e:	2200      	movs	r2, #0
 8003970:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003972:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <MX_UART7_Init+0x90>)
 8003974:	2200      	movs	r2, #0
 8003976:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003978:	4811      	ldr	r0, [pc, #68]	; (80039c0 <MX_UART7_Init+0x90>)
 800397a:	f005 fc37 	bl	80091ec <HAL_UART_Init>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8003984:	f000 f888 	bl	8003a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003988:	2100      	movs	r1, #0
 800398a:	480d      	ldr	r0, [pc, #52]	; (80039c0 <MX_UART7_Init+0x90>)
 800398c:	f006 fdcb 	bl	800a526 <HAL_UARTEx_SetTxFifoThreshold>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8003996:	f000 f87f 	bl	8003a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800399a:	2100      	movs	r1, #0
 800399c:	4808      	ldr	r0, [pc, #32]	; (80039c0 <MX_UART7_Init+0x90>)
 800399e:	f006 fe00 	bl	800a5a2 <HAL_UARTEx_SetRxFifoThreshold>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80039a8:	f000 f876 	bl	8003a98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80039ac:	4804      	ldr	r0, [pc, #16]	; (80039c0 <MX_UART7_Init+0x90>)
 80039ae:	f006 fd81 	bl	800a4b4 <HAL_UARTEx_DisableFifoMode>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80039b8:	f000 f86e 	bl	8003a98 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	24001664 	.word	0x24001664
 80039c4:	40007800 	.word	0x40007800

080039c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ce:	f107 030c 	add.w	r3, r7, #12
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	609a      	str	r2, [r3, #8]
 80039da:	60da      	str	r2, [r3, #12]
 80039dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039de:	4b2b      	ldr	r3, [pc, #172]	; (8003a8c <MX_GPIO_Init+0xc4>)
 80039e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e4:	4a29      	ldr	r2, [pc, #164]	; (8003a8c <MX_GPIO_Init+0xc4>)
 80039e6:	f043 0310 	orr.w	r3, r3, #16
 80039ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039ee:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <MX_GPIO_Init+0xc4>)
 80039f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039fc:	4b23      	ldr	r3, [pc, #140]	; (8003a8c <MX_GPIO_Init+0xc4>)
 80039fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a02:	4a22      	ldr	r2, [pc, #136]	; (8003a8c <MX_GPIO_Init+0xc4>)
 8003a04:	f043 0308 	orr.w	r3, r3, #8
 8003a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a0c:	4b1f      	ldr	r3, [pc, #124]	; (8003a8c <MX_GPIO_Init+0xc4>)
 8003a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	607b      	str	r3, [r7, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a1a:	4b1c      	ldr	r3, [pc, #112]	; (8003a8c <MX_GPIO_Init+0xc4>)
 8003a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a20:	4a1a      	ldr	r2, [pc, #104]	; (8003a8c <MX_GPIO_Init+0xc4>)
 8003a22:	f043 0304 	orr.w	r3, r3, #4
 8003a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a2a:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <MX_GPIO_Init+0xc4>)
 8003a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	210c      	movs	r1, #12
 8003a3c:	4814      	ldr	r0, [pc, #80]	; (8003a90 <MX_GPIO_Init+0xc8>)
 8003a3e:	f002 f93d 	bl	8005cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8003a42:	2201      	movs	r2, #1
 8003a44:	21c0      	movs	r1, #192	; 0xc0
 8003a46:	4813      	ldr	r0, [pc, #76]	; (8003a94 <MX_GPIO_Init+0xcc>)
 8003a48:	f002 f938 	bl	8005cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a4c:	230c      	movs	r3, #12
 8003a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a50:	2301      	movs	r3, #1
 8003a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a5c:	f107 030c 	add.w	r3, r7, #12
 8003a60:	4619      	mov	r1, r3
 8003a62:	480b      	ldr	r0, [pc, #44]	; (8003a90 <MX_GPIO_Init+0xc8>)
 8003a64:	f001 ff82 	bl	800596c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a68:	23c0      	movs	r3, #192	; 0xc0
 8003a6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a78:	f107 030c 	add.w	r3, r7, #12
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4805      	ldr	r0, [pc, #20]	; (8003a94 <MX_GPIO_Init+0xcc>)
 8003a80:	f001 ff74 	bl	800596c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a84:	bf00      	nop
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	58024400 	.word	0x58024400
 8003a90:	58021000 	.word	0x58021000
 8003a94:	58020800 	.word	0x58020800

08003a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a9c:	b672      	cpsid	i
}
 8003a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003aa0:	e7fe      	b.n	8003aa0 <Error_Handler+0x8>
	...

08003aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <HAL_MspInit+0x30>)
 8003aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ab0:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <HAL_MspInit+0x30>)
 8003ab2:	f043 0302 	orr.w	r3, r3, #2
 8003ab6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_MspInit+0x30>)
 8003abc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	607b      	str	r3, [r7, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	58024400 	.word	0x58024400

08003ad8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b0b8      	sub	sp, #224	; 0xe0
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	605a      	str	r2, [r3, #4]
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	60da      	str	r2, [r3, #12]
 8003aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003af0:	f107 0310 	add.w	r3, r7, #16
 8003af4:	22b8      	movs	r2, #184	; 0xb8
 8003af6:	2100      	movs	r1, #0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f00b ff97 	bl	800fa2c <memset>
  if(hfdcan->Instance==FDCAN3)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2b      	ldr	r2, [pc, #172]	; (8003bb0 <HAL_FDCAN_MspInit+0xd8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d14e      	bne.n	8003ba6 <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003b08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003b14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b18:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b1a:	f107 0310 	add.w	r3, r7, #16
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f003 f886 	bl	8006c30 <HAL_RCCEx_PeriphCLKConfig>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8003b2a:	f7ff ffb5 	bl	8003a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003b2e:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <HAL_FDCAN_MspInit+0xdc>)
 8003b30:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003b34:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <HAL_FDCAN_MspInit+0xdc>)
 8003b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <HAL_FDCAN_MspInit+0xdc>)
 8003b40:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b4c:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <HAL_FDCAN_MspInit+0xdc>)
 8003b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b52:	4a18      	ldr	r2, [pc, #96]	; (8003bb4 <HAL_FDCAN_MspInit+0xdc>)
 8003b54:	f043 0308 	orr.w	r3, r3, #8
 8003b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b5c:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <HAL_FDCAN_MspInit+0xdc>)
 8003b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PD12     ------> FDCAN3_RX
    PD13     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003b6a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003b6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b72:	2302      	movs	r3, #2
 8003b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_FDCAN3;
 8003b84:	2305      	movs	r3, #5
 8003b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4809      	ldr	r0, [pc, #36]	; (8003bb8 <HAL_FDCAN_MspInit+0xe0>)
 8003b92:	f001 feeb 	bl	800596c <HAL_GPIO_Init>

    /* FDCAN3 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	2100      	movs	r1, #0
 8003b9a:	209f      	movs	r0, #159	; 0x9f
 8003b9c:	f000 fb21 	bl	80041e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8003ba0:	209f      	movs	r0, #159	; 0x9f
 8003ba2:	f000 fb38 	bl	8004216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8003ba6:	bf00      	nop
 8003ba8:	37e0      	adds	r7, #224	; 0xe0
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	4000d400 	.word	0x4000d400
 8003bb4:	58024400 	.word	0x58024400
 8003bb8:	58020c00 	.word	0x58020c00

08003bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bcc:	d116      	bne.n	8003bfc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bce:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <HAL_TIM_Base_MspInit+0x48>)
 8003bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bd4:	4a0b      	ldr	r2, [pc, #44]	; (8003c04 <HAL_TIM_Base_MspInit+0x48>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_TIM_Base_MspInit+0x48>)
 8003be0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003bec:	2200      	movs	r2, #0
 8003bee:	2100      	movs	r1, #0
 8003bf0:	201c      	movs	r0, #28
 8003bf2:	f000 faf6 	bl	80041e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003bf6:	201c      	movs	r0, #28
 8003bf8:	f000 fb0d 	bl	8004216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003bfc:	bf00      	nop
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	58024400 	.word	0x58024400

08003c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b0b8      	sub	sp, #224	; 0xe0
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c20:	f107 0310 	add.w	r3, r7, #16
 8003c24:	22b8      	movs	r2, #184	; 0xb8
 8003c26:	2100      	movs	r1, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f00b feff 	bl	800fa2c <memset>
  if(huart->Instance==UART7)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a27      	ldr	r2, [pc, #156]	; (8003cd0 <HAL_UART_MspInit+0xc8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d146      	bne.n	8003cc6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003c38:	f04f 0202 	mov.w	r2, #2
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c4a:	f107 0310 	add.w	r3, r7, #16
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f002 ffee 	bl	8006c30 <HAL_RCCEx_PeriphCLKConfig>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003c5a:	f7ff ff1d 	bl	8003a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003c5e:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <HAL_UART_MspInit+0xcc>)
 8003c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c64:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <HAL_UART_MspInit+0xcc>)
 8003c66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c6e:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <HAL_UART_MspInit+0xcc>)
 8003c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c7c:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <HAL_UART_MspInit+0xcc>)
 8003c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c82:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <HAL_UART_MspInit+0xcc>)
 8003c84:	f043 0310 	orr.w	r3, r3, #16
 8003c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <HAL_UART_MspInit+0xcc>)
 8003c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003c9a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003c9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003cb4:	2307      	movs	r3, #7
 8003cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4805      	ldr	r0, [pc, #20]	; (8003cd8 <HAL_UART_MspInit+0xd0>)
 8003cc2:	f001 fe53 	bl	800596c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8003cc6:	bf00      	nop
 8003cc8:	37e0      	adds	r7, #224	; 0xe0
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40007800 	.word	0x40007800
 8003cd4:	58024400 	.word	0x58024400
 8003cd8:	58021000 	.word	0x58021000

08003cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ce0:	e7fe      	b.n	8003ce0 <NMI_Handler+0x4>

08003ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ce6:	e7fe      	b.n	8003ce6 <HardFault_Handler+0x4>

08003ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cec:	e7fe      	b.n	8003cec <MemManage_Handler+0x4>

08003cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cf2:	e7fe      	b.n	8003cf2 <BusFault_Handler+0x4>

08003cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cf8:	e7fe      	b.n	8003cf8 <UsageFault_Handler+0x4>

08003cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d16:	b480      	push	{r7}
 8003d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d28:	f000 f960 	bl	8003fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d2c:	bf00      	nop
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d34:	4802      	ldr	r0, [pc, #8]	; (8003d40 <TIM2_IRQHandler+0x10>)
 8003d36:	f004 fe1b 	bl	8008970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	24001618 	.word	0x24001618

08003d44 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8003d48:	4802      	ldr	r0, [pc, #8]	; (8003d54 <FDCAN3_IT0_IRQHandler+0x10>)
 8003d4a:	f000 ff41 	bl	8004bd0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	24001578 	.word	0x24001578

08003d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d60:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <_sbrk+0x5c>)
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <_sbrk+0x60>)
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d6c:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <_sbrk+0x64>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d102      	bne.n	8003d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <_sbrk+0x64>)
 8003d76:	4a12      	ldr	r2, [pc, #72]	; (8003dc0 <_sbrk+0x68>)
 8003d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d7a:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <_sbrk+0x64>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4413      	add	r3, r2
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d207      	bcs.n	8003d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d88:	f00b fe58 	bl	800fa3c <__errno>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	220c      	movs	r2, #12
 8003d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d92:	f04f 33ff 	mov.w	r3, #4294967295
 8003d96:	e009      	b.n	8003dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d98:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <_sbrk+0x64>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <_sbrk+0x64>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4413      	add	r3, r2
 8003da6:	4a05      	ldr	r2, [pc, #20]	; (8003dbc <_sbrk+0x64>)
 8003da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003daa:	68fb      	ldr	r3, [r7, #12]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	24050000 	.word	0x24050000
 8003db8:	00000400 	.word	0x00000400
 8003dbc:	24001700 	.word	0x24001700
 8003dc0:	240029a0 	.word	0x240029a0

08003dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003dc8:	4b32      	ldr	r3, [pc, #200]	; (8003e94 <SystemInit+0xd0>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dce:	4a31      	ldr	r2, [pc, #196]	; (8003e94 <SystemInit+0xd0>)
 8003dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003dd8:	4b2f      	ldr	r3, [pc, #188]	; (8003e98 <SystemInit+0xd4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	2b06      	cmp	r3, #6
 8003de2:	d807      	bhi.n	8003df4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003de4:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <SystemInit+0xd4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 030f 	bic.w	r3, r3, #15
 8003dec:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <SystemInit+0xd4>)
 8003dee:	f043 0307 	orr.w	r3, r3, #7
 8003df2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003df4:	4b29      	ldr	r3, [pc, #164]	; (8003e9c <SystemInit+0xd8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a28      	ldr	r2, [pc, #160]	; (8003e9c <SystemInit+0xd8>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e00:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <SystemInit+0xd8>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e06:	4b25      	ldr	r3, [pc, #148]	; (8003e9c <SystemInit+0xd8>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4924      	ldr	r1, [pc, #144]	; (8003e9c <SystemInit+0xd8>)
 8003e0c:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <SystemInit+0xdc>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e12:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <SystemInit+0xd4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <SystemInit+0xd4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f023 030f 	bic.w	r3, r3, #15
 8003e26:	4a1c      	ldr	r2, [pc, #112]	; (8003e98 <SystemInit+0xd4>)
 8003e28:	f043 0307 	orr.w	r3, r3, #7
 8003e2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003e2e:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <SystemInit+0xd8>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003e34:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <SystemInit+0xd8>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003e3a:	4b18      	ldr	r3, [pc, #96]	; (8003e9c <SystemInit+0xd8>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003e40:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <SystemInit+0xd8>)
 8003e42:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <SystemInit+0xe0>)
 8003e44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003e46:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <SystemInit+0xd8>)
 8003e48:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <SystemInit+0xe4>)
 8003e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003e4c:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <SystemInit+0xd8>)
 8003e4e:	4a17      	ldr	r2, [pc, #92]	; (8003eac <SystemInit+0xe8>)
 8003e50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e52:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <SystemInit+0xd8>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <SystemInit+0xd8>)
 8003e5a:	4a14      	ldr	r2, [pc, #80]	; (8003eac <SystemInit+0xe8>)
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e5e:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <SystemInit+0xd8>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003e64:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <SystemInit+0xd8>)
 8003e66:	4a11      	ldr	r2, [pc, #68]	; (8003eac <SystemInit+0xe8>)
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <SystemInit+0xd8>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <SystemInit+0xd8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a09      	ldr	r2, [pc, #36]	; (8003e9c <SystemInit+0xd8>)
 8003e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003e7c:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <SystemInit+0xd8>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <SystemInit+0xec>)
 8003e84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003e88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	e000ed00 	.word	0xe000ed00
 8003e98:	52002000 	.word	0x52002000
 8003e9c:	58024400 	.word	0x58024400
 8003ea0:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ea4:	02020200 	.word	0x02020200
 8003ea8:	01ff0000 	.word	0x01ff0000
 8003eac:	01010280 	.word	0x01010280
 8003eb0:	52004000 	.word	0x52004000

08003eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003eec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003eb8:	f7ff ff84 	bl	8003dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ebc:	480c      	ldr	r0, [pc, #48]	; (8003ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ebe:	490d      	ldr	r1, [pc, #52]	; (8003ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ec0:	4a0d      	ldr	r2, [pc, #52]	; (8003ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ec4:	e002      	b.n	8003ecc <LoopCopyDataInit>

08003ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eca:	3304      	adds	r3, #4

08003ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ed0:	d3f9      	bcc.n	8003ec6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ed2:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ed4:	4c0a      	ldr	r4, [pc, #40]	; (8003f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ed8:	e001      	b.n	8003ede <LoopFillZerobss>

08003eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003edc:	3204      	adds	r2, #4

08003ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ee0:	d3fb      	bcc.n	8003eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ee2:	f00b fdb1 	bl	800fa48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ee6:	f7ff fb6b 	bl	80035c0 <main>
  bx  lr
 8003eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003eec:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003ef0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003ef4:	240002f4 	.word	0x240002f4
  ldr r2, =_sidata
 8003ef8:	0801105c 	.word	0x0801105c
  ldr r2, =_sbss
 8003efc:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 8003f00:	240029a0 	.word	0x240029a0

08003f04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f04:	e7fe      	b.n	8003f04 <ADC3_IRQHandler>
	...

08003f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f0e:	2003      	movs	r0, #3
 8003f10:	f000 f95c 	bl	80041cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f14:	f002 fcb6 	bl	8006884 <HAL_RCC_GetSysClockFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <HAL_Init+0x68>)
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	4913      	ldr	r1, [pc, #76]	; (8003f74 <HAL_Init+0x6c>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f32:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <HAL_Init+0x68>)
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	4a0e      	ldr	r2, [pc, #56]	; (8003f74 <HAL_Init+0x6c>)
 8003f3c:	5cd3      	ldrb	r3, [r2, r3]
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
 8003f48:	4a0b      	ldr	r2, [pc, #44]	; (8003f78 <HAL_Init+0x70>)
 8003f4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f4c:	4a0b      	ldr	r2, [pc, #44]	; (8003f7c <HAL_Init+0x74>)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f52:	200f      	movs	r0, #15
 8003f54:	f000 f814 	bl	8003f80 <HAL_InitTick>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e002      	b.n	8003f68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f62:	f7ff fd9f 	bl	8003aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	58024400 	.word	0x58024400
 8003f74:	08010fd0 	.word	0x08010fd0
 8003f78:	2400028c 	.word	0x2400028c
 8003f7c:	24000288 	.word	0x24000288

08003f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003f88:	4b15      	ldr	r3, [pc, #84]	; (8003fe0 <HAL_InitTick+0x60>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e021      	b.n	8003fd8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003f94:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <HAL_InitTick+0x64>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <HAL_InitTick+0x60>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f941 	bl	8004232 <HAL_SYSTICK_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e00e      	b.n	8003fd8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b0f      	cmp	r3, #15
 8003fbe:	d80a      	bhi.n	8003fd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	f000 f90b 	bl	80041e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fcc:	4a06      	ldr	r2, [pc, #24]	; (8003fe8 <HAL_InitTick+0x68>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	24000294 	.word	0x24000294
 8003fe4:	24000288 	.word	0x24000288
 8003fe8:	24000290 	.word	0x24000290

08003fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_IncTick+0x20>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <HAL_IncTick+0x24>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <HAL_IncTick+0x24>)
 8003ffe:	6013      	str	r3, [r2, #0]
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	24000294 	.word	0x24000294
 8004010:	24001704 	.word	0x24001704

08004014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return uwTick;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_GetTick+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	24001704 	.word	0x24001704

0800402c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <__NVIC_SetPriorityGrouping+0x40>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004048:	4013      	ands	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004054:	4b06      	ldr	r3, [pc, #24]	; (8004070 <__NVIC_SetPriorityGrouping+0x44>)
 8004056:	4313      	orrs	r3, r2
 8004058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800405a:	4a04      	ldr	r2, [pc, #16]	; (800406c <__NVIC_SetPriorityGrouping+0x40>)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	60d3      	str	r3, [r2, #12]
}
 8004060:	bf00      	nop
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	e000ed00 	.word	0xe000ed00
 8004070:	05fa0000 	.word	0x05fa0000

08004074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004078:	4b04      	ldr	r3, [pc, #16]	; (800408c <__NVIC_GetPriorityGrouping+0x18>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	0a1b      	lsrs	r3, r3, #8
 800407e:	f003 0307 	and.w	r3, r3, #7
}
 8004082:	4618      	mov	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800409a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	db0b      	blt.n	80040ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	f003 021f 	and.w	r2, r3, #31
 80040a8:	4907      	ldr	r1, [pc, #28]	; (80040c8 <__NVIC_EnableIRQ+0x38>)
 80040aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	2001      	movs	r0, #1
 80040b2:	fa00 f202 	lsl.w	r2, r0, r2
 80040b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	e000e100 	.word	0xe000e100

080040cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	4603      	mov	r3, r0
 80040d4:	6039      	str	r1, [r7, #0]
 80040d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	db0a      	blt.n	80040f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	490c      	ldr	r1, [pc, #48]	; (8004118 <__NVIC_SetPriority+0x4c>)
 80040e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040ea:	0112      	lsls	r2, r2, #4
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	440b      	add	r3, r1
 80040f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040f4:	e00a      	b.n	800410c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	4908      	ldr	r1, [pc, #32]	; (800411c <__NVIC_SetPriority+0x50>)
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	3b04      	subs	r3, #4
 8004104:	0112      	lsls	r2, r2, #4
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	440b      	add	r3, r1
 800410a:	761a      	strb	r2, [r3, #24]
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	e000e100 	.word	0xe000e100
 800411c:	e000ed00 	.word	0xe000ed00

08004120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004120:	b480      	push	{r7}
 8004122:	b089      	sub	sp, #36	; 0x24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f1c3 0307 	rsb	r3, r3, #7
 800413a:	2b04      	cmp	r3, #4
 800413c:	bf28      	it	cs
 800413e:	2304      	movcs	r3, #4
 8004140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	3304      	adds	r3, #4
 8004146:	2b06      	cmp	r3, #6
 8004148:	d902      	bls.n	8004150 <NVIC_EncodePriority+0x30>
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	3b03      	subs	r3, #3
 800414e:	e000      	b.n	8004152 <NVIC_EncodePriority+0x32>
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004154:	f04f 32ff 	mov.w	r2, #4294967295
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	43da      	mvns	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	401a      	ands	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004168:	f04f 31ff 	mov.w	r1, #4294967295
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	fa01 f303 	lsl.w	r3, r1, r3
 8004172:	43d9      	mvns	r1, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004178:	4313      	orrs	r3, r2
         );
}
 800417a:	4618      	mov	r0, r3
 800417c:	3724      	adds	r7, #36	; 0x24
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3b01      	subs	r3, #1
 8004194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004198:	d301      	bcc.n	800419e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800419a:	2301      	movs	r3, #1
 800419c:	e00f      	b.n	80041be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800419e:	4a0a      	ldr	r2, [pc, #40]	; (80041c8 <SysTick_Config+0x40>)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041a6:	210f      	movs	r1, #15
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ac:	f7ff ff8e 	bl	80040cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <SysTick_Config+0x40>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041b6:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <SysTick_Config+0x40>)
 80041b8:	2207      	movs	r2, #7
 80041ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	e000e010 	.word	0xe000e010

080041cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff ff29 	bl	800402c <__NVIC_SetPriorityGrouping>
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b086      	sub	sp, #24
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	4603      	mov	r3, r0
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
 80041ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041f0:	f7ff ff40 	bl	8004074 <__NVIC_GetPriorityGrouping>
 80041f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	6978      	ldr	r0, [r7, #20]
 80041fc:	f7ff ff90 	bl	8004120 <NVIC_EncodePriority>
 8004200:	4602      	mov	r2, r0
 8004202:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004206:	4611      	mov	r1, r2
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff ff5f 	bl	80040cc <__NVIC_SetPriority>
}
 800420e:	bf00      	nop
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	4603      	mov	r3, r0
 800421e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004220:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff ff33 	bl	8004090 <__NVIC_EnableIRQ>
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff ffa4 	bl	8004188 <SysTick_Config>
 8004240:	4603      	mov	r3, r0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b098      	sub	sp, #96	; 0x60
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004254:	4a84      	ldr	r2, [pc, #528]	; (8004468 <HAL_FDCAN_Init+0x21c>)
 8004256:	f107 030c 	add.w	r3, r7, #12
 800425a:	4611      	mov	r1, r2
 800425c:	224c      	movs	r2, #76	; 0x4c
 800425e:	4618      	mov	r0, r3
 8004260:	f00b fc18 	bl	800fa94 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e1c6      	b.n	80045fc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a7e      	ldr	r2, [pc, #504]	; (800446c <HAL_FDCAN_Init+0x220>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d106      	bne.n	8004286 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004280:	461a      	mov	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff fc1c 	bl	8003ad8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0210 	bic.w	r2, r2, #16
 80042ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042b0:	f7ff feb0 	bl	8004014 <HAL_GetTick>
 80042b4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80042b6:	e014      	b.n	80042e2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80042b8:	f7ff feac 	bl	8004014 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b0a      	cmp	r3, #10
 80042c4:	d90d      	bls.n	80042e2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042cc:	f043 0201 	orr.w	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2203      	movs	r2, #3
 80042da:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e18c      	b.n	80045fc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d0e3      	beq.n	80042b8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004300:	f7ff fe88 	bl	8004014 <HAL_GetTick>
 8004304:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004306:	e014      	b.n	8004332 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004308:	f7ff fe84 	bl	8004014 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b0a      	cmp	r3, #10
 8004314:	d90d      	bls.n	8004332 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800431c:	f043 0201 	orr.w	r2, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2203      	movs	r2, #3
 800432a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e164      	b.n	80045fc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0e3      	beq.n	8004308 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0202 	orr.w	r2, r2, #2
 800434e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	7c1b      	ldrb	r3, [r3, #16]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d108      	bne.n	800436a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004366:	619a      	str	r2, [r3, #24]
 8004368:	e007      	b.n	800437a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004378:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	7c5b      	ldrb	r3, [r3, #17]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d108      	bne.n	8004394 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699a      	ldr	r2, [r3, #24]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004390:	619a      	str	r2, [r3, #24]
 8004392:	e007      	b.n	80043a4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043a2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	7c9b      	ldrb	r3, [r3, #18]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d108      	bne.n	80043be <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043ba:	619a      	str	r2, [r3, #24]
 80043bc:	e007      	b.n	80043ce <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699a      	ldr	r2, [r3, #24]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043cc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80043f2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0210 	bic.w	r2, r2, #16
 8004402:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d108      	bne.n	800441e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0204 	orr.w	r2, r2, #4
 800441a:	619a      	str	r2, [r3, #24]
 800441c:	e030      	b.n	8004480 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02c      	beq.n	8004480 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d020      	beq.n	8004470 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699a      	ldr	r2, [r3, #24]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800443c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0210 	orr.w	r2, r2, #16
 800444c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	2b03      	cmp	r3, #3
 8004454:	d114      	bne.n	8004480 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0220 	orr.w	r2, r2, #32
 8004464:	619a      	str	r2, [r3, #24]
 8004466:	e00b      	b.n	8004480 <HAL_FDCAN_Init+0x234>
 8004468:	08010410 	.word	0x08010410
 800446c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0220 	orr.w	r2, r2, #32
 800447e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	3b01      	subs	r3, #1
 8004486:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	3b01      	subs	r3, #1
 800448e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004490:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004498:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80044a8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80044aa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b4:	d115      	bne.n	80044e2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	3b01      	subs	r3, #1
 80044c2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80044c4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	3b01      	subs	r3, #1
 80044cc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80044ce:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	3b01      	subs	r3, #1
 80044d8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80044de:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80044e0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004508:	4413      	add	r3, r2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d011      	beq.n	8004532 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004516:	f023 0107 	bic.w	r1, r3, #7
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	3360      	adds	r3, #96	; 0x60
 8004522:	443b      	add	r3, r7
 8004524:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d011      	beq.n	800455e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004542:	f023 0107 	bic.w	r1, r3, #7
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	3360      	adds	r3, #96	; 0x60
 800454e:	443b      	add	r3, r7
 8004550:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004562:	2b00      	cmp	r3, #0
 8004564:	d012      	beq.n	800458c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800456e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	3360      	adds	r3, #96	; 0x60
 800457a:	443b      	add	r3, r7
 800457c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004580:	011a      	lsls	r2, r3, #4
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004590:	2b00      	cmp	r3, #0
 8004592:	d012      	beq.n	80045ba <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800459c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	3360      	adds	r3, #96	; 0x60
 80045a8:	443b      	add	r3, r7
 80045aa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80045ae:	021a      	lsls	r2, r3, #8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a11      	ldr	r2, [pc, #68]	; (8004604 <HAL_FDCAN_Init+0x3b8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d107      	bne.n	80045d4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f022 0203 	bic.w	r2, r2, #3
 80045d2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fde7 	bl	80051c0 <FDCAN_CalcultateRamBlockAddresses>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80045f8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3760      	adds	r7, #96	; 0x60
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	4000a000 	.word	0x4000a000

08004608 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004618:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d002      	beq.n	8004626 <HAL_FDCAN_ConfigFilter+0x1e>
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d157      	bne.n	80046d6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d12b      	bne.n	8004686 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b07      	cmp	r3, #7
 8004634:	d10d      	bne.n	8004652 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004642:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004648:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800464a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e00e      	b.n	8004670 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800465e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004666:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800466c:	4313      	orrs	r3, r2
 800466e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	e025      	b.n	80046d2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	075a      	lsls	r2, r3, #29
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b07      	cmp	r3, #7
 800469a:	d103      	bne.n	80046a4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	e006      	b.n	80046b2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	079a      	lsls	r2, r3, #30
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4413      	add	r3, r2
 80046be:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	3304      	adds	r3, #4
 80046ca:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e008      	b.n	80046e8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046dc:	f043 0202 	orr.w	r2, r3, #2
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
  }
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	d111      	bne.n	800472c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	e008      	b.n	800473e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004732:	f043 0204 	orr.w	r2, r3, #4
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
  }
}
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b086      	sub	sp, #24
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d141      	bne.n	80047e6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800476a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d109      	bne.n	8004786 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e038      	b.n	80047f8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800478e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800479c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e026      	b.n	80047f8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80047b2:	0c1b      	lsrs	r3, r3, #16
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 fe83 	bl	80054cc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2101      	movs	r1, #1
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	fa01 f202 	lsl.w	r2, r1, r2
 80047d2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80047d6:	2201      	movs	r2, #1
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	409a      	lsls	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	e008      	b.n	80047f8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047ec:	f043 0208 	orr.w	r2, r3, #8
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
  }
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004800:	b480      	push	{r7}
 8004802:	b08b      	sub	sp, #44	; 0x2c
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004818:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800481a:	7efb      	ldrb	r3, [r7, #27]
 800481c:	2b02      	cmp	r3, #2
 800481e:	f040 814b 	bne.w	8004ab8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	d14d      	bne.n	80048c4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004830:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800483e:	f043 0220 	orr.w	r2, r3, #32
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e13e      	b.n	8004aca <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004862:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e12c      	b.n	8004aca <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004878:	0e1b      	lsrs	r3, r3, #24
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b01      	cmp	r3, #1
 8004880:	d10b      	bne.n	800489a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800488a:	0fdb      	lsrs	r3, r3, #31
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004894:	d101      	bne.n	800489a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004896:	2301      	movs	r3, #1
 8004898:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	4413      	add	r3, r2
 80048ac:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b6:	69f9      	ldr	r1, [r7, #28]
 80048b8:	fb01 f303 	mul.w	r3, r1, r3
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
 80048c2:	e069      	b.n	8004998 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b41      	cmp	r3, #65	; 0x41
 80048c8:	d14d      	bne.n	8004966 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048e0:	f043 0220 	orr.w	r2, r3, #32
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e0ed      	b.n	8004aca <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004904:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e0db      	b.n	8004aca <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800491a:	0e1b      	lsrs	r3, r3, #24
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b01      	cmp	r3, #1
 8004922:	d10b      	bne.n	800493c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800492c:	0fdb      	lsrs	r3, r3, #31
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004936:	d101      	bne.n	800493c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004938:	2301      	movs	r3, #1
 800493a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004944:	0a1b      	lsrs	r3, r3, #8
 8004946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	4413      	add	r3, r2
 800494e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004958:	69f9      	ldr	r1, [r7, #28]
 800495a:	fb01 f303 	mul.w	r3, r1, r3
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
 8004964:	e018      	b.n	8004998 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	429a      	cmp	r2, r3
 800496e:	d309      	bcc.n	8004984 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004976:	f043 0220 	orr.w	r2, r3, #32
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e0a2      	b.n	8004aca <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d107      	bne.n	80049bc <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	0c9b      	lsrs	r3, r3, #18
 80049b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e005      	b.n	80049c8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	3304      	adds	r3, #4
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	0e1b      	lsrs	r3, r3, #24
 8004a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	0fda      	lsrs	r2, r3, #31
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	3304      	adds	r3, #4
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004a36:	2300      	movs	r3, #0
 8004a38:	623b      	str	r3, [r7, #32]
 8004a3a:	e00a      	b.n	8004a52 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	441a      	add	r2, r3
 8004a42:	6839      	ldr	r1, [r7, #0]
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	440b      	add	r3, r1
 8004a48:	7812      	ldrb	r2, [r2, #0]
 8004a4a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	623b      	str	r3, [r7, #32]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	0c1b      	lsrs	r3, r3, #16
 8004a58:	4a1f      	ldr	r2, [pc, #124]	; (8004ad8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8004a5a:	5cd3      	ldrb	r3, [r2, r3]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d3eb      	bcc.n	8004a3c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b40      	cmp	r3, #64	; 0x40
 8004a68:	d105      	bne.n	8004a76 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004a74:	e01e      	b.n	8004ab4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b41      	cmp	r3, #65	; 0x41
 8004a7a:	d105      	bne.n	8004a88 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004a86:	e015      	b.n	8004ab4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b1f      	cmp	r3, #31
 8004a8c:	d808      	bhi.n	8004aa0 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2101      	movs	r1, #1
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	fa01 f202 	lsl.w	r2, r1, r2
 8004a9a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004a9e:	e009      	b.n	8004ab4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 021f 	and.w	r2, r3, #31
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2101      	movs	r1, #1
 8004aac:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e008      	b.n	8004aca <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004abe:	f043 0208 	orr.w	r2, r3, #8
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
  }
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	372c      	adds	r7, #44	; 0x2c
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	08010fe0 	.word	0x08010fe0

08004adc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004aee:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d002      	beq.n	8004afc <HAL_FDCAN_ActivateNotification+0x20>
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d155      	bne.n	8004ba8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d108      	bne.n	8004b1c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b1a:	e014      	b.n	8004b46 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4013      	ands	r3, r2
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d108      	bne.n	8004b3e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0202 	orr.w	r2, r2, #2
 8004b3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b3c:	e003      	b.n	8004b46 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2203      	movs	r2, #3
 8004b44:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d009      	beq.n	8004b64 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d009      	beq.n	8004b82 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <HAL_FDCAN_ActivateNotification+0xec>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	6812      	ldr	r2, [r2, #0]
 8004b92:	430b      	orrs	r3, r1
 8004b94:	6553      	str	r3, [r2, #84]	; 0x54
 8004b96:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <HAL_FDCAN_ActivateNotification+0xf0>)
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	0f9b      	lsrs	r3, r3, #30
 8004b9e:	490b      	ldr	r1, [pc, #44]	; (8004bcc <HAL_FDCAN_ActivateNotification+0xf0>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	e008      	b.n	8004bba <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bae:	f043 0202 	orr.w	r2, r3, #2
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
  }
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	3fcfffff 	.word	0x3fcfffff
 8004bcc:	4000a800 	.word	0x4000a800

08004bd0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b096      	sub	sp, #88	; 0x58
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004bd8:	4b95      	ldr	r3, [pc, #596]	; (8004e30 <HAL_FDCAN_IRQHandler+0x260>)
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	079b      	lsls	r3, r3, #30
 8004bde:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004be0:	4b93      	ldr	r3, [pc, #588]	; (8004e30 <HAL_FDCAN_IRQHandler+0x260>)
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	079b      	lsls	r3, r3, #30
 8004be6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004be8:	4013      	ands	r3, r2
 8004bea:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004bf6:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c00:	4013      	ands	r3, r2
 8004c02:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c18:	4013      	ands	r3, r2
 8004c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c26:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c30:	4013      	ands	r3, r2
 8004c32:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8004c3e:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c48:	4013      	ands	r3, r2
 8004c4a:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c52:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8004c56:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c60:	4013      	ands	r3, r2
 8004c62:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c72:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00f      	beq.n	8004c9e <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c90:	651a      	str	r2, [r3, #80]	; 0x50
 8004c92:	4b67      	ldr	r3, [pc, #412]	; (8004e30 <HAL_FDCAN_IRQHandler+0x260>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fa44 	bl	8005126 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01c      	beq.n	8004ce2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d017      	beq.n	8004ce2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004cc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cd2:	651a      	str	r2, [r3, #80]	; 0x50
 8004cd4:	4b56      	ldr	r3, [pc, #344]	; (8004e30 <HAL_FDCAN_IRQHandler+0x260>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004cda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f9f9 	bl	80050d4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00d      	beq.n	8004d04 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cee:	4b51      	ldr	r3, [pc, #324]	; (8004e34 <HAL_FDCAN_IRQHandler+0x264>)
 8004cf0:	400b      	ands	r3, r1
 8004cf2:	6513      	str	r3, [r2, #80]	; 0x50
 8004cf4:	4a4e      	ldr	r2, [pc, #312]	; (8004e30 <HAL_FDCAN_IRQHandler+0x260>)
 8004cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf8:	0f9b      	lsrs	r3, r3, #30
 8004cfa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004cfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f9b2 	bl	8005068 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00d      	beq.n	8004d26 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d10:	4b48      	ldr	r3, [pc, #288]	; (8004e34 <HAL_FDCAN_IRQHandler+0x264>)
 8004d12:	400b      	ands	r3, r1
 8004d14:	6513      	str	r3, [r2, #80]	; 0x50
 8004d16:	4a46      	ldr	r2, [pc, #280]	; (8004e30 <HAL_FDCAN_IRQHandler+0x260>)
 8004d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d1a:	0f9b      	lsrs	r3, r3, #30
 8004d1c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004d1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f9ac 	bl	800507e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00d      	beq.n	8004d48 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004d32:	4b40      	ldr	r3, [pc, #256]	; (8004e34 <HAL_FDCAN_IRQHandler+0x264>)
 8004d34:	400b      	ands	r3, r1
 8004d36:	6513      	str	r3, [r2, #80]	; 0x50
 8004d38:	4a3d      	ldr	r2, [pc, #244]	; (8004e30 <HAL_FDCAN_IRQHandler+0x260>)
 8004d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d3c:	0f9b      	lsrs	r3, r3, #30
 8004d3e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004d40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fe fb1c 	bl	8003380 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00d      	beq.n	8004d6a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004d54:	4b37      	ldr	r3, [pc, #220]	; (8004e34 <HAL_FDCAN_IRQHandler+0x264>)
 8004d56:	400b      	ands	r3, r1
 8004d58:	6513      	str	r3, [r2, #80]	; 0x50
 8004d5a:	4a35      	ldr	r2, [pc, #212]	; (8004e30 <HAL_FDCAN_IRQHandler+0x260>)
 8004d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d5e:	0f9b      	lsrs	r3, r3, #30
 8004d60:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004d62:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f995 	bl	8005094 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00f      	beq.n	8004d94 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d86:	651a      	str	r2, [r3, #80]	; 0x50
 8004d88:	4b29      	ldr	r3, [pc, #164]	; (8004e30 <HAL_FDCAN_IRQHandler+0x260>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f98b 	bl	80050aa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01c      	beq.n	8004dd8 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d017      	beq.n	8004dd8 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004db0:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc8:	651a      	str	r2, [r3, #80]	; 0x50
 8004dca:	4b19      	ldr	r3, [pc, #100]	; (8004e30 <HAL_FDCAN_IRQHandler+0x260>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004dd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f973 	bl	80050be <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00f      	beq.n	8004e02 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004df4:	651a      	str	r2, [r3, #80]	; 0x50
 8004df6:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <HAL_FDCAN_IRQHandler+0x260>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f974 	bl	80050ea <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d015      	beq.n	8004e38 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d010      	beq.n	8004e38 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e1e:	651a      	str	r2, [r3, #80]	; 0x50
 8004e20:	4b03      	ldr	r3, [pc, #12]	; (8004e30 <HAL_FDCAN_IRQHandler+0x260>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f969 	bl	80050fe <HAL_FDCAN_TimestampWraparoundCallback>
 8004e2c:	e004      	b.n	8004e38 <HAL_FDCAN_IRQHandler+0x268>
 8004e2e:	bf00      	nop
 8004e30:	4000a800 	.word	0x4000a800
 8004e34:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00f      	beq.n	8004e62 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004e54:	651a      	str	r2, [r3, #80]	; 0x50
 8004e56:	4b81      	ldr	r3, [pc, #516]	; (800505c <HAL_FDCAN_IRQHandler+0x48c>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f958 	bl	8005112 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d014      	beq.n	8004e96 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00f      	beq.n	8004e96 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e7e:	651a      	str	r2, [r3, #80]	; 0x50
 8004e80:	4b76      	ldr	r3, [pc, #472]	; (800505c <HAL_FDCAN_IRQHandler+0x48c>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00d      	beq.n	8004eb8 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ea2:	4b6f      	ldr	r3, [pc, #444]	; (8005060 <HAL_FDCAN_IRQHandler+0x490>)
 8004ea4:	400b      	ands	r3, r1
 8004ea6:	6513      	str	r3, [r2, #80]	; 0x50
 8004ea8:	4a6c      	ldr	r2, [pc, #432]	; (800505c <HAL_FDCAN_IRQHandler+0x48c>)
 8004eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eac:	0f9b      	lsrs	r3, r3, #30
 8004eae:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004eb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f94b 	bl	800514e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d011      	beq.n	8004ee2 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ec4:	4b66      	ldr	r3, [pc, #408]	; (8005060 <HAL_FDCAN_IRQHandler+0x490>)
 8004ec6:	400b      	ands	r3, r1
 8004ec8:	6513      	str	r3, [r2, #80]	; 0x50
 8004eca:	4a64      	ldr	r2, [pc, #400]	; (800505c <HAL_FDCAN_IRQHandler+0x48c>)
 8004ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ece:	0f9b      	lsrs	r3, r3, #30
 8004ed0:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a5f      	ldr	r2, [pc, #380]	; (8005064 <HAL_FDCAN_IRQHandler+0x494>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	f040 80aa 	bne.w	8005042 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 0303 	and.w	r3, r3, #3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 80a2 	beq.w	8005042 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f12:	4013      	ands	r3, r2
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f42:	4013      	ands	r3, r2
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8004f50:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	6a3a      	ldr	r2, [r7, #32]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8004f68:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f92:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004f94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f8e4 	bl	8005164 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d007      	beq.n	8004fb2 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004faa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f8e4 	bl	800517a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d019      	beq.n	8004ff0 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d014      	beq.n	8004ff0 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fcc:	0c1b      	lsrs	r3, r3, #16
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fdc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2240      	movs	r2, #64	; 0x40
 8004fe4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	6939      	ldr	r1, [r7, #16]
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f8d0 	bl	8005190 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d007      	beq.n	8005006 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ffc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004ffe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f8d1 	bl	80051a8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00b      	beq.n	8005024 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	6a3a      	ldr	r2, [r7, #32]
 8005012:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00b      	beq.n	8005042 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f874 	bl	800513a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005052:	bf00      	nop
 8005054:	3758      	adds	r7, #88	; 0x58
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	4000a800 	.word	0x4000a800
 8005060:	3fcfffff 	.word	0x3fcfffff
 8005064:	4000a000 	.word	0x4000a000

08005068 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051cc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80051d6:	4ba7      	ldr	r3, [pc, #668]	; (8005474 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80051d8:	4013      	ands	r3, r2
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	0091      	lsls	r1, r2, #2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	430b      	orrs	r3, r1
 80051e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	041a      	lsls	r2, r3, #16
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	4413      	add	r3, r2
 800520c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005216:	4b97      	ldr	r3, [pc, #604]	; (8005474 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005218:	4013      	ands	r3, r2
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	0091      	lsls	r1, r2, #2
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6812      	ldr	r2, [r2, #0]
 8005222:	430b      	orrs	r3, r1
 8005224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005230:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005238:	041a      	lsls	r2, r3, #16
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	4413      	add	r3, r2
 800524e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005258:	4b86      	ldr	r3, [pc, #536]	; (8005474 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800525a:	4013      	ands	r3, r2
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	0091      	lsls	r1, r2, #2
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	430b      	orrs	r3, r1
 8005266:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005272:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	041a      	lsls	r2, r3, #16
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800528e:	fb02 f303 	mul.w	r3, r2, r3
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	4413      	add	r3, r2
 8005296:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80052a0:	4b74      	ldr	r3, [pc, #464]	; (8005474 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	0091      	lsls	r1, r2, #2
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	430b      	orrs	r3, r1
 80052ae:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052ba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c2:	041a      	lsls	r2, r3, #16
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	4413      	add	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80052e8:	4b62      	ldr	r3, [pc, #392]	; (8005474 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	0091      	lsls	r1, r2, #2
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6812      	ldr	r2, [r2, #0]
 80052f4:	430b      	orrs	r3, r1
 80052f6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005302:	fb02 f303 	mul.w	r3, r2, r3
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	4413      	add	r3, r2
 800530a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005314:	4b57      	ldr	r3, [pc, #348]	; (8005474 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005316:	4013      	ands	r3, r2
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	0091      	lsls	r1, r2, #2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	430b      	orrs	r3, r1
 8005322:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800532e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005336:	041a      	lsls	r2, r3, #16
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	4413      	add	r3, r2
 800534c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005356:	4b47      	ldr	r3, [pc, #284]	; (8005474 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005358:	4013      	ands	r3, r2
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	0091      	lsls	r1, r2, #2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6812      	ldr	r2, [r2, #0]
 8005362:	430b      	orrs	r3, r1
 8005364:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005370:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005378:	041a      	lsls	r2, r3, #16
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800538c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005394:	061a      	lsls	r2, r3, #24
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a4:	4b34      	ldr	r3, [pc, #208]	; (8005478 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80053a6:	4413      	add	r3, r2
 80053a8:	009a      	lsls	r2, r3, #2
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	441a      	add	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	441a      	add	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80053da:	fb01 f303 	mul.w	r3, r1, r3
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	441a      	add	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80053f2:	fb01 f303 	mul.w	r3, r1, r3
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	441a      	add	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800540a:	fb01 f303 	mul.w	r3, r1, r3
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	441a      	add	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	441a      	add	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800543a:	fb01 f303 	mul.w	r3, r1, r3
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	441a      	add	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005456:	fb01 f303 	mul.w	r3, r1, r3
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	441a      	add	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546a:	4a04      	ldr	r2, [pc, #16]	; (800547c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d915      	bls.n	800549c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005470:	e006      	b.n	8005480 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005472:	bf00      	nop
 8005474:	ffff0003 	.word	0xffff0003
 8005478:	10002b00 	.word	0x10002b00
 800547c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005486:	f043 0220 	orr.w	r2, r3, #32
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2203      	movs	r2, #3
 8005494:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e010      	b.n	80054be <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e005      	b.n	80054b0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3304      	adds	r3, #4
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d3f3      	bcc.n	80054a4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop

080054cc <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b089      	sub	sp, #36	; 0x24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80054ea:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80054f2:	4313      	orrs	r3, r2
 80054f4:	61fb      	str	r3, [r7, #28]
 80054f6:	e00a      	b.n	800550e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005500:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005506:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005508:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800550c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005518:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800551e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005524:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005538:	6839      	ldr	r1, [r7, #0]
 800553a:	fb01 f303 	mul.w	r3, r1, r3
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	3304      	adds	r3, #4
 800554e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	3304      	adds	r3, #4
 800555a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	e020      	b.n	80055a4 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	3303      	adds	r3, #3
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	4413      	add	r3, r2
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	3302      	adds	r3, #2
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	440b      	add	r3, r1
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800557a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	3301      	adds	r3, #1
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	440b      	add	r3, r1
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005588:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	440a      	add	r2, r1
 8005590:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005592:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	3304      	adds	r3, #4
 800559c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	3304      	adds	r3, #4
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	0c1b      	lsrs	r3, r3, #16
 80055aa:	4a06      	ldr	r2, [pc, #24]	; (80055c4 <FDCAN_CopyMessageToRAM+0xf8>)
 80055ac:	5cd3      	ldrb	r3, [r2, r3]
 80055ae:	461a      	mov	r2, r3
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d3d5      	bcc.n	8005562 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80055b6:	bf00      	nop
 80055b8:	bf00      	nop
 80055ba:	3724      	adds	r7, #36	; 0x24
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	08010fe0 	.word	0x08010fe0

080055c8 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80055dc:	2308      	movs	r3, #8
 80055de:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80055e0:	4b2e      	ldr	r3, [pc, #184]	; (800569c <HAL_FLASH_Program+0xd4>)
 80055e2:	7d1b      	ldrb	r3, [r3, #20]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_FLASH_Program+0x24>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e053      	b.n	8005694 <HAL_FLASH_Program+0xcc>
 80055ec:	4b2b      	ldr	r3, [pc, #172]	; (800569c <HAL_FLASH_Program+0xd4>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055f8:	d315      	bcc.n	8005626 <HAL_FLASH_Program+0x5e>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8005600:	d211      	bcs.n	8005626 <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8005602:	2301      	movs	r3, #1
 8005604:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005606:	4b25      	ldr	r3, [pc, #148]	; (800569c <HAL_FLASH_Program+0xd4>)
 8005608:	2200      	movs	r2, #0
 800560a:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800560c:	6979      	ldr	r1, [r7, #20]
 800560e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005612:	f000 f881 	bl	8005718 <FLASH_WaitForLastOperation>
 8005616:	4603      	mov	r3, r0
 8005618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800561c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <HAL_FLASH_Program+0x62>
 8005624:	e031      	b.n	800568a <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e034      	b.n	8005694 <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800562a:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <HAL_FLASH_Program+0xd8>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	4a1c      	ldr	r2, [pc, #112]	; (80056a0 <HAL_FLASH_Program+0xd8>)
 8005630:	f043 0302 	orr.w	r3, r3, #2
 8005634:	60d3      	str	r3, [r2, #12]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005636:	f3bf 8f6f 	isb	sy
}
 800563a:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800563c:	f3bf 8f4f 	dsb	sy
}
 8005640:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	3304      	adds	r3, #4
 800564e:	623b      	str	r3, [r7, #32]
        src_addr++;
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	3304      	adds	r3, #4
 8005654:	61fb      	str	r3, [r7, #28]
        row_index--;
 8005656:	7efb      	ldrb	r3, [r7, #27]
 8005658:	3b01      	subs	r3, #1
 800565a:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 800565c:	7efb      	ldrb	r3, [r7, #27]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1ef      	bne.n	8005642 <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 8005662:	f3bf 8f6f 	isb	sy
}
 8005666:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8005668:	f3bf 8f4f 	dsb	sy
}
 800566c:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800566e:	6979      	ldr	r1, [r7, #20]
 8005670:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005674:	f000 f850 	bl	8005718 <FLASH_WaitForLastOperation>
 8005678:	4603      	mov	r3, r0
 800567a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800567e:	4b08      	ldr	r3, [pc, #32]	; (80056a0 <HAL_FLASH_Program+0xd8>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	4a07      	ldr	r2, [pc, #28]	; (80056a0 <HAL_FLASH_Program+0xd8>)
 8005684:	f023 0302 	bic.w	r3, r3, #2
 8005688:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800568a:	4b04      	ldr	r3, [pc, #16]	; (800569c <HAL_FLASH_Program+0xd4>)
 800568c:	2200      	movs	r2, #0
 800568e:	751a      	strb	r2, [r3, #20]

  return status;
 8005690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005694:	4618      	mov	r0, r3
 8005696:	3728      	adds	r7, #40	; 0x28
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	24001708 	.word	0x24001708
 80056a0:	52002000 	.word	0x52002000

080056a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80056a8:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <HAL_FLASH_Unlock+0x38>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00d      	beq.n	80056d0 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <HAL_FLASH_Unlock+0x38>)
 80056b6:	4a0a      	ldr	r2, [pc, #40]	; (80056e0 <HAL_FLASH_Unlock+0x3c>)
 80056b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 80056ba:	4b08      	ldr	r3, [pc, #32]	; (80056dc <HAL_FLASH_Unlock+0x38>)
 80056bc:	4a09      	ldr	r2, [pc, #36]	; (80056e4 <HAL_FLASH_Unlock+0x40>)
 80056be:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <HAL_FLASH_Unlock+0x38>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	52002000 	.word	0x52002000
 80056e0:	45670123 	.word	0x45670123
 80056e4:	cdef89ab 	.word	0xcdef89ab

080056e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80056ec:	4b09      	ldr	r3, [pc, #36]	; (8005714 <HAL_FLASH_Lock+0x2c>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	4a08      	ldr	r2, [pc, #32]	; (8005714 <HAL_FLASH_Lock+0x2c>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <HAL_FLASH_Lock+0x2c>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e000      	b.n	800570a <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	52002000 	.word	0x52002000

08005718 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8005722:	2304      	movs	r3, #4
 8005724:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800572a:	f7fe fc73 	bl	8004014 <HAL_GetTick>
 800572e:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8005730:	e010      	b.n	8005754 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005738:	d00c      	beq.n	8005754 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800573a:	f7fe fc6b 	bl	8004014 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	429a      	cmp	r2, r3
 8005748:	d302      	bcc.n	8005750 <FLASH_WaitForLastOperation+0x38>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e02d      	b.n	80057b0 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8005754:	4b18      	ldr	r3, [pc, #96]	; (80057b8 <FLASH_WaitForLastOperation+0xa0>)
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	4013      	ands	r3, r2
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	429a      	cmp	r2, r3
 8005760:	d0e7      	beq.n	8005732 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d104      	bne.n	8005772 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8005768:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <FLASH_WaitForLastOperation+0xa0>)
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	4b13      	ldr	r3, [pc, #76]	; (80057bc <FLASH_WaitForLastOperation+0xa4>)
 800576e:	4013      	ands	r3, r2
 8005770:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800577c:	4b10      	ldr	r3, [pc, #64]	; (80057c0 <FLASH_WaitForLastOperation+0xa8>)
 800577e:	699a      	ldr	r2, [r3, #24]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	4a0e      	ldr	r2, [pc, #56]	; (80057c0 <FLASH_WaitForLastOperation+0xa8>)
 8005786:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8005788:	4a0b      	ldr	r2, [pc, #44]	; (80057b8 <FLASH_WaitForLastOperation+0xa0>)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e00e      	b.n	80057b0 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d10a      	bne.n	80057ae <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8005798:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <FLASH_WaitForLastOperation+0xa0>)
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a4:	d103      	bne.n	80057ae <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80057a6:	4b04      	ldr	r3, [pc, #16]	; (80057b8 <FLASH_WaitForLastOperation+0xa0>)
 80057a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80057ac:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	52002000 	.word	0x52002000
 80057bc:	17ee0000 	.word	0x17ee0000
 80057c0:	24001708 	.word	0x24001708

080057c4 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80057d2:	4b3f      	ldr	r3, [pc, #252]	; (80058d0 <HAL_FLASHEx_Erase+0x10c>)
 80057d4:	7d1b      	ldrb	r3, [r3, #20]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_FLASHEx_Erase+0x1a>
 80057da:	2302      	movs	r3, #2
 80057dc:	e074      	b.n	80058c8 <HAL_FLASHEx_Erase+0x104>
 80057de:	4b3c      	ldr	r3, [pc, #240]	; (80058d0 <HAL_FLASHEx_Erase+0x10c>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80057e4:	4b3a      	ldr	r3, [pc, #232]	; (80058d0 <HAL_FLASHEx_Erase+0x10c>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d009      	beq.n	800580a <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80057f6:	2101      	movs	r1, #1
 80057f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80057fc:	f7ff ff8c 	bl	8005718 <FLASH_WaitForLastOperation>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d157      	bne.n	80058c0 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d11e      	bne.n	8005856 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	4619      	mov	r1, r3
 8005822:	4610      	mov	r0, r2
 8005824:	f000 f85a 	bl	80058dc <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d045      	beq.n	80058c0 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8005834:	2101      	movs	r1, #1
 8005836:	f24c 3050 	movw	r0, #50000	; 0xc350
 800583a:	f7ff ff6d 	bl	8005718 <FLASH_WaitForLastOperation>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8005848:	4b22      	ldr	r3, [pc, #136]	; (80058d4 <HAL_FLASHEx_Erase+0x110>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	4a21      	ldr	r2, [pc, #132]	; (80058d4 <HAL_FLASHEx_Erase+0x110>)
 800584e:	f023 0308 	bic.w	r3, r3, #8
 8005852:	60d3      	str	r3, [r2, #12]
 8005854:	e034      	b.n	80058c0 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	f04f 32ff 	mov.w	r2, #4294967295
 800585c:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	60bb      	str	r3, [r7, #8]
 8005864:	e024      	b.n	80058b0 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6859      	ldr	r1, [r3, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	461a      	mov	r2, r3
 8005870:	68b8      	ldr	r0, [r7, #8]
 8005872:	f000 f857 	bl	8005924 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00c      	beq.n	800589c <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8005882:	2101      	movs	r1, #1
 8005884:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005888:	f7ff ff46 	bl	8005718 <FLASH_WaitForLastOperation>
 800588c:	4603      	mov	r3, r0
 800588e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8005890:	4b10      	ldr	r3, [pc, #64]	; (80058d4 <HAL_FLASHEx_Erase+0x110>)
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	490f      	ldr	r1, [pc, #60]	; (80058d4 <HAL_FLASHEx_Erase+0x110>)
 8005896:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <HAL_FLASHEx_Erase+0x114>)
 8005898:	4013      	ands	r3, r2
 800589a:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	601a      	str	r2, [r3, #0]
          break;
 80058a8:	e00a      	b.n	80058c0 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	3301      	adds	r3, #1
 80058ae:	60bb      	str	r3, [r7, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4413      	add	r3, r2
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d3d2      	bcc.n	8005866 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80058c0:	4b03      	ldr	r3, [pc, #12]	; (80058d0 <HAL_FLASHEx_Erase+0x10c>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	751a      	strb	r2, [r3, #20]

  return status;
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	24001708 	.word	0x24001708
 80058d4:	52002000 	.word	0x52002000
 80058d8:	fffff8fb 	.word	0xfffff8fb

080058dc <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d011      	beq.n	8005914 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80058f0:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <FLASH_MassErase+0x44>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4a0a      	ldr	r2, [pc, #40]	; (8005920 <FLASH_MassErase+0x44>)
 80058f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80058fa:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 80058fc:	4b08      	ldr	r3, [pc, #32]	; (8005920 <FLASH_MassErase+0x44>)
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	4907      	ldr	r1, [pc, #28]	; (8005920 <FLASH_MassErase+0x44>)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4313      	orrs	r3, r2
 8005906:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8005908:	4b05      	ldr	r3, [pc, #20]	; (8005920 <FLASH_MassErase+0x44>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	4a04      	ldr	r2, [pc, #16]	; (8005920 <FLASH_MassErase+0x44>)
 800590e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8005912:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	52002000 	.word	0x52002000

08005924 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d010      	beq.n	800595c <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800593a:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <FLASH_Erase_Sector+0x44>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	4a0a      	ldr	r2, [pc, #40]	; (8005968 <FLASH_Erase_Sector+0x44>)
 8005940:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8005944:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8005946:	4b08      	ldr	r3, [pc, #32]	; (8005968 <FLASH_Erase_Sector+0x44>)
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	0219      	lsls	r1, r3, #8
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	430b      	orrs	r3, r1
 8005952:	4313      	orrs	r3, r2
 8005954:	4a04      	ldr	r2, [pc, #16]	; (8005968 <FLASH_Erase_Sector+0x44>)
 8005956:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800595a:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800595c:	bf00      	nop
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	52002000 	.word	0x52002000

0800596c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800596c:	b480      	push	{r7}
 800596e:	b089      	sub	sp, #36	; 0x24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800597a:	4b86      	ldr	r3, [pc, #536]	; (8005b94 <HAL_GPIO_Init+0x228>)
 800597c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800597e:	e18c      	b.n	8005c9a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	2101      	movs	r1, #1
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	fa01 f303 	lsl.w	r3, r1, r3
 800598c:	4013      	ands	r3, r2
 800598e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 817e 	beq.w	8005c94 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f003 0303 	and.w	r3, r3, #3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d005      	beq.n	80059b0 <HAL_GPIO_Init+0x44>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d130      	bne.n	8005a12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	2203      	movs	r2, #3
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	43db      	mvns	r3, r3
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	4013      	ands	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059e6:	2201      	movs	r2, #1
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	43db      	mvns	r3, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4013      	ands	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	091b      	lsrs	r3, r3, #4
 80059fc:	f003 0201 	and.w	r2, r3, #1
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d017      	beq.n	8005a4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	2203      	movs	r2, #3
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	43db      	mvns	r3, r3
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	4013      	ands	r3, r2
 8005a34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d123      	bne.n	8005aa2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	08da      	lsrs	r2, r3, #3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3208      	adds	r2, #8
 8005a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	220f      	movs	r2, #15
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	43db      	mvns	r3, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	691a      	ldr	r2, [r3, #16]
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	08da      	lsrs	r2, r3, #3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3208      	adds	r2, #8
 8005a9c:	69b9      	ldr	r1, [r7, #24]
 8005a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	2203      	movs	r2, #3
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f003 0203 	and.w	r2, r3, #3
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 80d8 	beq.w	8005c94 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ae4:	4b2c      	ldr	r3, [pc, #176]	; (8005b98 <HAL_GPIO_Init+0x22c>)
 8005ae6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005aea:	4a2b      	ldr	r2, [pc, #172]	; (8005b98 <HAL_GPIO_Init+0x22c>)
 8005aec:	f043 0302 	orr.w	r3, r3, #2
 8005af0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005af4:	4b28      	ldr	r3, [pc, #160]	; (8005b98 <HAL_GPIO_Init+0x22c>)
 8005af6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b02:	4a26      	ldr	r2, [pc, #152]	; (8005b9c <HAL_GPIO_Init+0x230>)
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	089b      	lsrs	r3, r3, #2
 8005b08:	3302      	adds	r3, #2
 8005b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	220f      	movs	r2, #15
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	4013      	ands	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1d      	ldr	r2, [pc, #116]	; (8005ba0 <HAL_GPIO_Init+0x234>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d04a      	beq.n	8005bc4 <HAL_GPIO_Init+0x258>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1c      	ldr	r2, [pc, #112]	; (8005ba4 <HAL_GPIO_Init+0x238>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d02b      	beq.n	8005b8e <HAL_GPIO_Init+0x222>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1b      	ldr	r2, [pc, #108]	; (8005ba8 <HAL_GPIO_Init+0x23c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d025      	beq.n	8005b8a <HAL_GPIO_Init+0x21e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <HAL_GPIO_Init+0x240>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d01f      	beq.n	8005b86 <HAL_GPIO_Init+0x21a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a19      	ldr	r2, [pc, #100]	; (8005bb0 <HAL_GPIO_Init+0x244>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d019      	beq.n	8005b82 <HAL_GPIO_Init+0x216>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <HAL_GPIO_Init+0x248>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d013      	beq.n	8005b7e <HAL_GPIO_Init+0x212>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a17      	ldr	r2, [pc, #92]	; (8005bb8 <HAL_GPIO_Init+0x24c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00d      	beq.n	8005b7a <HAL_GPIO_Init+0x20e>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a16      	ldr	r2, [pc, #88]	; (8005bbc <HAL_GPIO_Init+0x250>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d007      	beq.n	8005b76 <HAL_GPIO_Init+0x20a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a15      	ldr	r2, [pc, #84]	; (8005bc0 <HAL_GPIO_Init+0x254>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d101      	bne.n	8005b72 <HAL_GPIO_Init+0x206>
 8005b6e:	2309      	movs	r3, #9
 8005b70:	e029      	b.n	8005bc6 <HAL_GPIO_Init+0x25a>
 8005b72:	230a      	movs	r3, #10
 8005b74:	e027      	b.n	8005bc6 <HAL_GPIO_Init+0x25a>
 8005b76:	2307      	movs	r3, #7
 8005b78:	e025      	b.n	8005bc6 <HAL_GPIO_Init+0x25a>
 8005b7a:	2306      	movs	r3, #6
 8005b7c:	e023      	b.n	8005bc6 <HAL_GPIO_Init+0x25a>
 8005b7e:	2305      	movs	r3, #5
 8005b80:	e021      	b.n	8005bc6 <HAL_GPIO_Init+0x25a>
 8005b82:	2304      	movs	r3, #4
 8005b84:	e01f      	b.n	8005bc6 <HAL_GPIO_Init+0x25a>
 8005b86:	2303      	movs	r3, #3
 8005b88:	e01d      	b.n	8005bc6 <HAL_GPIO_Init+0x25a>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e01b      	b.n	8005bc6 <HAL_GPIO_Init+0x25a>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e019      	b.n	8005bc6 <HAL_GPIO_Init+0x25a>
 8005b92:	bf00      	nop
 8005b94:	58000080 	.word	0x58000080
 8005b98:	58024400 	.word	0x58024400
 8005b9c:	58000400 	.word	0x58000400
 8005ba0:	58020000 	.word	0x58020000
 8005ba4:	58020400 	.word	0x58020400
 8005ba8:	58020800 	.word	0x58020800
 8005bac:	58020c00 	.word	0x58020c00
 8005bb0:	58021000 	.word	0x58021000
 8005bb4:	58021400 	.word	0x58021400
 8005bb8:	58021800 	.word	0x58021800
 8005bbc:	58021c00 	.word	0x58021c00
 8005bc0:	58022400 	.word	0x58022400
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	f002 0203 	and.w	r2, r2, #3
 8005bcc:	0092      	lsls	r2, r2, #2
 8005bce:	4093      	lsls	r3, r2
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bd6:	4938      	ldr	r1, [pc, #224]	; (8005cb8 <HAL_GPIO_Init+0x34c>)
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	089b      	lsrs	r3, r3, #2
 8005bdc:	3302      	adds	r3, #2
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	43db      	mvns	r3, r3
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	4013      	ands	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	43db      	mvns	r3, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4013      	ands	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	3301      	adds	r3, #1
 8005c98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f47f ae6b 	bne.w	8005980 <HAL_GPIO_Init+0x14>
  }
}
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
 8005cae:	3724      	adds	r7, #36	; 0x24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	58000400 	.word	0x58000400

08005cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	807b      	strh	r3, [r7, #2]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ccc:	787b      	ldrb	r3, [r7, #1]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cd2:	887a      	ldrh	r2, [r7, #2]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005cd8:	e003      	b.n	8005ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005cda:	887b      	ldrh	r3, [r7, #2]
 8005cdc:	041a      	lsls	r2, r3, #16
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	619a      	str	r2, [r3, #24]
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005cf8:	4b19      	ldr	r3, [pc, #100]	; (8005d60 <HAL_PWREx_ConfigSupply+0x70>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d00a      	beq.n	8005d1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d04:	4b16      	ldr	r3, [pc, #88]	; (8005d60 <HAL_PWREx_ConfigSupply+0x70>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d001      	beq.n	8005d16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e01f      	b.n	8005d56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	e01d      	b.n	8005d56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d1a:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <HAL_PWREx_ConfigSupply+0x70>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f023 0207 	bic.w	r2, r3, #7
 8005d22:	490f      	ldr	r1, [pc, #60]	; (8005d60 <HAL_PWREx_ConfigSupply+0x70>)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d2a:	f7fe f973 	bl	8004014 <HAL_GetTick>
 8005d2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d30:	e009      	b.n	8005d46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d32:	f7fe f96f 	bl	8004014 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d40:	d901      	bls.n	8005d46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e007      	b.n	8005d56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d46:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <HAL_PWREx_ConfigSupply+0x70>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d52:	d1ee      	bne.n	8005d32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	58024800 	.word	0x58024800

08005d64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08c      	sub	sp, #48	; 0x30
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e3c8      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 8087 	beq.w	8005e92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d84:	4b88      	ldr	r3, [pc, #544]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d8e:	4b86      	ldr	r3, [pc, #536]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d92:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	2b10      	cmp	r3, #16
 8005d98:	d007      	beq.n	8005daa <HAL_RCC_OscConfig+0x46>
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	2b18      	cmp	r3, #24
 8005d9e:	d110      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x5e>
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d10b      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005daa:	4b7f      	ldr	r3, [pc, #508]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d06c      	beq.n	8005e90 <HAL_RCC_OscConfig+0x12c>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d168      	bne.n	8005e90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e3a2      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dca:	d106      	bne.n	8005dda <HAL_RCC_OscConfig+0x76>
 8005dcc:	4b76      	ldr	r3, [pc, #472]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a75      	ldr	r2, [pc, #468]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	e02e      	b.n	8005e38 <HAL_RCC_OscConfig+0xd4>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10c      	bne.n	8005dfc <HAL_RCC_OscConfig+0x98>
 8005de2:	4b71      	ldr	r3, [pc, #452]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a70      	ldr	r2, [pc, #448]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	4b6e      	ldr	r3, [pc, #440]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a6d      	ldr	r2, [pc, #436]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	e01d      	b.n	8005e38 <HAL_RCC_OscConfig+0xd4>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e04:	d10c      	bne.n	8005e20 <HAL_RCC_OscConfig+0xbc>
 8005e06:	4b68      	ldr	r3, [pc, #416]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a67      	ldr	r2, [pc, #412]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	4b65      	ldr	r3, [pc, #404]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a64      	ldr	r2, [pc, #400]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	e00b      	b.n	8005e38 <HAL_RCC_OscConfig+0xd4>
 8005e20:	4b61      	ldr	r3, [pc, #388]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a60      	ldr	r2, [pc, #384]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	4b5e      	ldr	r3, [pc, #376]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a5d      	ldr	r2, [pc, #372]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d013      	beq.n	8005e68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e40:	f7fe f8e8 	bl	8004014 <HAL_GetTick>
 8005e44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e48:	f7fe f8e4 	bl	8004014 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b64      	cmp	r3, #100	; 0x64
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e356      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e5a:	4b53      	ldr	r3, [pc, #332]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0f0      	beq.n	8005e48 <HAL_RCC_OscConfig+0xe4>
 8005e66:	e014      	b.n	8005e92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e68:	f7fe f8d4 	bl	8004014 <HAL_GetTick>
 8005e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e70:	f7fe f8d0 	bl	8004014 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b64      	cmp	r3, #100	; 0x64
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e342      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e82:	4b49      	ldr	r3, [pc, #292]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f0      	bne.n	8005e70 <HAL_RCC_OscConfig+0x10c>
 8005e8e:	e000      	b.n	8005e92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 808c 	beq.w	8005fb8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ea0:	4b41      	ldr	r3, [pc, #260]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ea8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005eaa:	4b3f      	ldr	r3, [pc, #252]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d007      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x162>
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	2b18      	cmp	r3, #24
 8005eba:	d137      	bne.n	8005f2c <HAL_RCC_OscConfig+0x1c8>
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d132      	bne.n	8005f2c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ec6:	4b38      	ldr	r3, [pc, #224]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d005      	beq.n	8005ede <HAL_RCC_OscConfig+0x17a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e314      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ede:	4b32      	ldr	r3, [pc, #200]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f023 0219 	bic.w	r2, r3, #25
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	492f      	ldr	r1, [pc, #188]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef0:	f7fe f890 	bl	8004014 <HAL_GetTick>
 8005ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ef8:	f7fe f88c 	bl	8004014 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e2fe      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f0a:	4b27      	ldr	r3, [pc, #156]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0f0      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f16:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	061b      	lsls	r3, r3, #24
 8005f24:	4920      	ldr	r1, [pc, #128]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f2a:	e045      	b.n	8005fb8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d026      	beq.n	8005f82 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f34:	4b1c      	ldr	r3, [pc, #112]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f023 0219 	bic.w	r2, r3, #25
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	4919      	ldr	r1, [pc, #100]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f46:	f7fe f865 	bl	8004014 <HAL_GetTick>
 8005f4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f4c:	e008      	b.n	8005f60 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f4e:	f7fe f861 	bl	8004014 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e2d3      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f60:	4b11      	ldr	r3, [pc, #68]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0f0      	beq.n	8005f4e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6c:	4b0e      	ldr	r3, [pc, #56]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	061b      	lsls	r3, r3, #24
 8005f7a:	490b      	ldr	r1, [pc, #44]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	604b      	str	r3, [r1, #4]
 8005f80:	e01a      	b.n	8005fb8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f82:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a08      	ldr	r2, [pc, #32]	; (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8e:	f7fe f841 	bl	8004014 <HAL_GetTick>
 8005f92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f94:	e00a      	b.n	8005fac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f96:	f7fe f83d 	bl	8004014 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d903      	bls.n	8005fac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e2af      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
 8005fa8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fac:	4b96      	ldr	r3, [pc, #600]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1ee      	bne.n	8005f96 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0310 	and.w	r3, r3, #16
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d06a      	beq.n	800609a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fc4:	4b90      	ldr	r3, [pc, #576]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fcc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fce:	4b8e      	ldr	r3, [pc, #568]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d007      	beq.n	8005fea <HAL_RCC_OscConfig+0x286>
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b18      	cmp	r3, #24
 8005fde:	d11b      	bne.n	8006018 <HAL_RCC_OscConfig+0x2b4>
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f003 0303 	and.w	r3, r3, #3
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d116      	bne.n	8006018 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fea:	4b87      	ldr	r3, [pc, #540]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d005      	beq.n	8006002 <HAL_RCC_OscConfig+0x29e>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	2b80      	cmp	r3, #128	; 0x80
 8005ffc:	d001      	beq.n	8006002 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e282      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006002:	4b81      	ldr	r3, [pc, #516]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	061b      	lsls	r3, r3, #24
 8006010:	497d      	ldr	r1, [pc, #500]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 8006012:	4313      	orrs	r3, r2
 8006014:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006016:	e040      	b.n	800609a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d023      	beq.n	8006068 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006020:	4b79      	ldr	r3, [pc, #484]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a78      	ldr	r2, [pc, #480]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 8006026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602c:	f7fd fff2 	bl	8004014 <HAL_GetTick>
 8006030:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006034:	f7fd ffee 	bl	8004014 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e260      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006046:	4b70      	ldr	r3, [pc, #448]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f0      	beq.n	8006034 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006052:	4b6d      	ldr	r3, [pc, #436]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	061b      	lsls	r3, r3, #24
 8006060:	4969      	ldr	r1, [pc, #420]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 8006062:	4313      	orrs	r3, r2
 8006064:	60cb      	str	r3, [r1, #12]
 8006066:	e018      	b.n	800609a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006068:	4b67      	ldr	r3, [pc, #412]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a66      	ldr	r2, [pc, #408]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 800606e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006074:	f7fd ffce 	bl	8004014 <HAL_GetTick>
 8006078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800607c:	f7fd ffca 	bl	8004014 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e23c      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800608e:	4b5e      	ldr	r3, [pc, #376]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1f0      	bne.n	800607c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0308 	and.w	r3, r3, #8
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d036      	beq.n	8006114 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d019      	beq.n	80060e2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060ae:	4b56      	ldr	r3, [pc, #344]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 80060b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b2:	4a55      	ldr	r2, [pc, #340]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ba:	f7fd ffab 	bl	8004014 <HAL_GetTick>
 80060be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060c2:	f7fd ffa7 	bl	8004014 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e219      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060d4:	4b4c      	ldr	r3, [pc, #304]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 80060d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <HAL_RCC_OscConfig+0x35e>
 80060e0:	e018      	b.n	8006114 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060e2:	4b49      	ldr	r3, [pc, #292]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 80060e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e6:	4a48      	ldr	r2, [pc, #288]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 80060e8:	f023 0301 	bic.w	r3, r3, #1
 80060ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ee:	f7fd ff91 	bl	8004014 <HAL_GetTick>
 80060f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060f4:	e008      	b.n	8006108 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060f6:	f7fd ff8d 	bl	8004014 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e1ff      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006108:	4b3f      	ldr	r3, [pc, #252]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 800610a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1f0      	bne.n	80060f6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0320 	and.w	r3, r3, #32
 800611c:	2b00      	cmp	r3, #0
 800611e:	d036      	beq.n	800618e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d019      	beq.n	800615c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006128:	4b37      	ldr	r3, [pc, #220]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a36      	ldr	r2, [pc, #216]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 800612e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006132:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006134:	f7fd ff6e 	bl	8004014 <HAL_GetTick>
 8006138:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800613a:	e008      	b.n	800614e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800613c:	f7fd ff6a 	bl	8004014 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e1dc      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800614e:	4b2e      	ldr	r3, [pc, #184]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0f0      	beq.n	800613c <HAL_RCC_OscConfig+0x3d8>
 800615a:	e018      	b.n	800618e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800615c:	4b2a      	ldr	r3, [pc, #168]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a29      	ldr	r2, [pc, #164]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 8006162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006166:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006168:	f7fd ff54 	bl	8004014 <HAL_GetTick>
 800616c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006170:	f7fd ff50 	bl	8004014 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e1c2      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006182:	4b21      	ldr	r3, [pc, #132]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1f0      	bne.n	8006170 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 8086 	beq.w	80062a8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800619c:	4b1b      	ldr	r3, [pc, #108]	; (800620c <HAL_RCC_OscConfig+0x4a8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a1a      	ldr	r2, [pc, #104]	; (800620c <HAL_RCC_OscConfig+0x4a8>)
 80061a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061a8:	f7fd ff34 	bl	8004014 <HAL_GetTick>
 80061ac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b0:	f7fd ff30 	bl	8004014 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b64      	cmp	r3, #100	; 0x64
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e1a2      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061c2:	4b12      	ldr	r3, [pc, #72]	; (800620c <HAL_RCC_OscConfig+0x4a8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0f0      	beq.n	80061b0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d106      	bne.n	80061e4 <HAL_RCC_OscConfig+0x480>
 80061d6:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 80061d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061da:	4a0b      	ldr	r2, [pc, #44]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 80061dc:	f043 0301 	orr.w	r3, r3, #1
 80061e0:	6713      	str	r3, [r2, #112]	; 0x70
 80061e2:	e032      	b.n	800624a <HAL_RCC_OscConfig+0x4e6>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d111      	bne.n	8006210 <HAL_RCC_OscConfig+0x4ac>
 80061ec:	4b06      	ldr	r3, [pc, #24]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 80061ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f0:	4a05      	ldr	r2, [pc, #20]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 80061f2:	f023 0301 	bic.w	r3, r3, #1
 80061f6:	6713      	str	r3, [r2, #112]	; 0x70
 80061f8:	4b03      	ldr	r3, [pc, #12]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 80061fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fc:	4a02      	ldr	r2, [pc, #8]	; (8006208 <HAL_RCC_OscConfig+0x4a4>)
 80061fe:	f023 0304 	bic.w	r3, r3, #4
 8006202:	6713      	str	r3, [r2, #112]	; 0x70
 8006204:	e021      	b.n	800624a <HAL_RCC_OscConfig+0x4e6>
 8006206:	bf00      	nop
 8006208:	58024400 	.word	0x58024400
 800620c:	58024800 	.word	0x58024800
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b05      	cmp	r3, #5
 8006216:	d10c      	bne.n	8006232 <HAL_RCC_OscConfig+0x4ce>
 8006218:	4b83      	ldr	r3, [pc, #524]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 800621a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621c:	4a82      	ldr	r2, [pc, #520]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 800621e:	f043 0304 	orr.w	r3, r3, #4
 8006222:	6713      	str	r3, [r2, #112]	; 0x70
 8006224:	4b80      	ldr	r3, [pc, #512]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 8006226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006228:	4a7f      	ldr	r2, [pc, #508]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 800622a:	f043 0301 	orr.w	r3, r3, #1
 800622e:	6713      	str	r3, [r2, #112]	; 0x70
 8006230:	e00b      	b.n	800624a <HAL_RCC_OscConfig+0x4e6>
 8006232:	4b7d      	ldr	r3, [pc, #500]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 8006234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006236:	4a7c      	ldr	r2, [pc, #496]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 8006238:	f023 0301 	bic.w	r3, r3, #1
 800623c:	6713      	str	r3, [r2, #112]	; 0x70
 800623e:	4b7a      	ldr	r3, [pc, #488]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 8006240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006242:	4a79      	ldr	r2, [pc, #484]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 8006244:	f023 0304 	bic.w	r3, r3, #4
 8006248:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d015      	beq.n	800627e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006252:	f7fd fedf 	bl	8004014 <HAL_GetTick>
 8006256:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006258:	e00a      	b.n	8006270 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800625a:	f7fd fedb 	bl	8004014 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	f241 3288 	movw	r2, #5000	; 0x1388
 8006268:	4293      	cmp	r3, r2
 800626a:	d901      	bls.n	8006270 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e14b      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006270:	4b6d      	ldr	r3, [pc, #436]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 8006272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0ee      	beq.n	800625a <HAL_RCC_OscConfig+0x4f6>
 800627c:	e014      	b.n	80062a8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800627e:	f7fd fec9 	bl	8004014 <HAL_GetTick>
 8006282:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006284:	e00a      	b.n	800629c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006286:	f7fd fec5 	bl	8004014 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	f241 3288 	movw	r2, #5000	; 0x1388
 8006294:	4293      	cmp	r3, r2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e135      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800629c:	4b62      	ldr	r3, [pc, #392]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 800629e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1ee      	bne.n	8006286 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 812a 	beq.w	8006506 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80062b2:	4b5d      	ldr	r3, [pc, #372]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062ba:	2b18      	cmp	r3, #24
 80062bc:	f000 80ba 	beq.w	8006434 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	f040 8095 	bne.w	80063f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ca:	4b57      	ldr	r3, [pc, #348]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a56      	ldr	r2, [pc, #344]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 80062d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d6:	f7fd fe9d 	bl	8004014 <HAL_GetTick>
 80062da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062dc:	e008      	b.n	80062f0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062de:	f7fd fe99 	bl	8004014 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e10b      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062f0:	4b4d      	ldr	r3, [pc, #308]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1f0      	bne.n	80062de <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062fc:	4b4a      	ldr	r3, [pc, #296]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 80062fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006300:	4b4a      	ldr	r3, [pc, #296]	; (800642c <HAL_RCC_OscConfig+0x6c8>)
 8006302:	4013      	ands	r3, r2
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800630c:	0112      	lsls	r2, r2, #4
 800630e:	430a      	orrs	r2, r1
 8006310:	4945      	ldr	r1, [pc, #276]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 8006312:	4313      	orrs	r3, r2
 8006314:	628b      	str	r3, [r1, #40]	; 0x28
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631a:	3b01      	subs	r3, #1
 800631c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006324:	3b01      	subs	r3, #1
 8006326:	025b      	lsls	r3, r3, #9
 8006328:	b29b      	uxth	r3, r3
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	3b01      	subs	r3, #1
 8006332:	041b      	lsls	r3, r3, #16
 8006334:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006338:	431a      	orrs	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633e:	3b01      	subs	r3, #1
 8006340:	061b      	lsls	r3, r3, #24
 8006342:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006346:	4938      	ldr	r1, [pc, #224]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 8006348:	4313      	orrs	r3, r2
 800634a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800634c:	4b36      	ldr	r3, [pc, #216]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	4a35      	ldr	r2, [pc, #212]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 8006352:	f023 0301 	bic.w	r3, r3, #1
 8006356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006358:	4b33      	ldr	r3, [pc, #204]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 800635a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800635c:	4b34      	ldr	r3, [pc, #208]	; (8006430 <HAL_RCC_OscConfig+0x6cc>)
 800635e:	4013      	ands	r3, r2
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006364:	00d2      	lsls	r2, r2, #3
 8006366:	4930      	ldr	r1, [pc, #192]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 8006368:	4313      	orrs	r3, r2
 800636a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800636c:	4b2e      	ldr	r3, [pc, #184]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	f023 020c 	bic.w	r2, r3, #12
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006378:	492b      	ldr	r1, [pc, #172]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 800637a:	4313      	orrs	r3, r2
 800637c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800637e:	4b2a      	ldr	r3, [pc, #168]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 8006380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006382:	f023 0202 	bic.w	r2, r3, #2
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638a:	4927      	ldr	r1, [pc, #156]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 800638c:	4313      	orrs	r3, r2
 800638e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006390:	4b25      	ldr	r3, [pc, #148]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	4a24      	ldr	r2, [pc, #144]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 8006396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800639a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800639c:	4b22      	ldr	r3, [pc, #136]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	4a21      	ldr	r2, [pc, #132]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 80063a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80063a8:	4b1f      	ldr	r3, [pc, #124]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	4a1e      	ldr	r2, [pc, #120]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 80063ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80063b4:	4b1c      	ldr	r3, [pc, #112]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	4a1b      	ldr	r2, [pc, #108]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063c0:	4b19      	ldr	r3, [pc, #100]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a18      	ldr	r2, [pc, #96]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 80063c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063cc:	f7fd fe22 	bl	8004014 <HAL_GetTick>
 80063d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d4:	f7fd fe1e 	bl	8004014 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e090      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063e6:	4b10      	ldr	r3, [pc, #64]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0f0      	beq.n	80063d4 <HAL_RCC_OscConfig+0x670>
 80063f2:	e088      	b.n	8006506 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f4:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a0b      	ldr	r2, [pc, #44]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 80063fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006400:	f7fd fe08 	bl	8004014 <HAL_GetTick>
 8006404:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006408:	f7fd fe04 	bl	8004014 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e076      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800641a:	4b03      	ldr	r3, [pc, #12]	; (8006428 <HAL_RCC_OscConfig+0x6c4>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1f0      	bne.n	8006408 <HAL_RCC_OscConfig+0x6a4>
 8006426:	e06e      	b.n	8006506 <HAL_RCC_OscConfig+0x7a2>
 8006428:	58024400 	.word	0x58024400
 800642c:	fffffc0c 	.word	0xfffffc0c
 8006430:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006434:	4b36      	ldr	r3, [pc, #216]	; (8006510 <HAL_RCC_OscConfig+0x7ac>)
 8006436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006438:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800643a:	4b35      	ldr	r3, [pc, #212]	; (8006510 <HAL_RCC_OscConfig+0x7ac>)
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	2b01      	cmp	r3, #1
 8006446:	d031      	beq.n	80064ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f003 0203 	and.w	r2, r3, #3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006452:	429a      	cmp	r2, r3
 8006454:	d12a      	bne.n	80064ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	091b      	lsrs	r3, r3, #4
 800645a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006462:	429a      	cmp	r2, r3
 8006464:	d122      	bne.n	80064ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006472:	429a      	cmp	r2, r3
 8006474:	d11a      	bne.n	80064ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	0a5b      	lsrs	r3, r3, #9
 800647a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006482:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006484:	429a      	cmp	r2, r3
 8006486:	d111      	bne.n	80064ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	0c1b      	lsrs	r3, r3, #16
 800648c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006496:	429a      	cmp	r2, r3
 8006498:	d108      	bne.n	80064ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	0e1b      	lsrs	r3, r3, #24
 800649e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d001      	beq.n	80064b0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e02b      	b.n	8006508 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80064b0:	4b17      	ldr	r3, [pc, #92]	; (8006510 <HAL_RCC_OscConfig+0x7ac>)
 80064b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b4:	08db      	lsrs	r3, r3, #3
 80064b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d01f      	beq.n	8006506 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80064c6:	4b12      	ldr	r3, [pc, #72]	; (8006510 <HAL_RCC_OscConfig+0x7ac>)
 80064c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ca:	4a11      	ldr	r2, [pc, #68]	; (8006510 <HAL_RCC_OscConfig+0x7ac>)
 80064cc:	f023 0301 	bic.w	r3, r3, #1
 80064d0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064d2:	f7fd fd9f 	bl	8004014 <HAL_GetTick>
 80064d6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80064d8:	bf00      	nop
 80064da:	f7fd fd9b 	bl	8004014 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d0f9      	beq.n	80064da <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80064e6:	4b0a      	ldr	r3, [pc, #40]	; (8006510 <HAL_RCC_OscConfig+0x7ac>)
 80064e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ea:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <HAL_RCC_OscConfig+0x7b0>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064f2:	00d2      	lsls	r2, r2, #3
 80064f4:	4906      	ldr	r1, [pc, #24]	; (8006510 <HAL_RCC_OscConfig+0x7ac>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80064fa:	4b05      	ldr	r3, [pc, #20]	; (8006510 <HAL_RCC_OscConfig+0x7ac>)
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	4a04      	ldr	r2, [pc, #16]	; (8006510 <HAL_RCC_OscConfig+0x7ac>)
 8006500:	f043 0301 	orr.w	r3, r3, #1
 8006504:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3730      	adds	r7, #48	; 0x30
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	58024400 	.word	0x58024400
 8006514:	ffff0007 	.word	0xffff0007

08006518 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e19c      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800652c:	4b8a      	ldr	r3, [pc, #552]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 030f 	and.w	r3, r3, #15
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d910      	bls.n	800655c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800653a:	4b87      	ldr	r3, [pc, #540]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f023 020f 	bic.w	r2, r3, #15
 8006542:	4985      	ldr	r1, [pc, #532]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	4313      	orrs	r3, r2
 8006548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800654a:	4b83      	ldr	r3, [pc, #524]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 030f 	and.w	r3, r3, #15
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	429a      	cmp	r2, r3
 8006556:	d001      	beq.n	800655c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e184      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b00      	cmp	r3, #0
 8006566:	d010      	beq.n	800658a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691a      	ldr	r2, [r3, #16]
 800656c:	4b7b      	ldr	r3, [pc, #492]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006574:	429a      	cmp	r2, r3
 8006576:	d908      	bls.n	800658a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006578:	4b78      	ldr	r3, [pc, #480]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	4975      	ldr	r1, [pc, #468]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006586:	4313      	orrs	r3, r2
 8006588:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d010      	beq.n	80065b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695a      	ldr	r2, [r3, #20]
 800659a:	4b70      	ldr	r3, [pc, #448]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d908      	bls.n	80065b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065a6:	4b6d      	ldr	r3, [pc, #436]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	496a      	ldr	r1, [pc, #424]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0310 	and.w	r3, r3, #16
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d010      	beq.n	80065e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699a      	ldr	r2, [r3, #24]
 80065c8:	4b64      	ldr	r3, [pc, #400]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d908      	bls.n	80065e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065d4:	4b61      	ldr	r3, [pc, #388]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	495e      	ldr	r1, [pc, #376]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d010      	beq.n	8006614 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69da      	ldr	r2, [r3, #28]
 80065f6:	4b59      	ldr	r3, [pc, #356]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065fe:	429a      	cmp	r2, r3
 8006600:	d908      	bls.n	8006614 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006602:	4b56      	ldr	r3, [pc, #344]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	4953      	ldr	r1, [pc, #332]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006610:	4313      	orrs	r3, r2
 8006612:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d010      	beq.n	8006642 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	4b4d      	ldr	r3, [pc, #308]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	f003 030f 	and.w	r3, r3, #15
 800662c:	429a      	cmp	r2, r3
 800662e:	d908      	bls.n	8006642 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006630:	4b4a      	ldr	r3, [pc, #296]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	f023 020f 	bic.w	r2, r3, #15
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	4947      	ldr	r1, [pc, #284]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800663e:	4313      	orrs	r3, r2
 8006640:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d055      	beq.n	80066fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800664e:	4b43      	ldr	r3, [pc, #268]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	4940      	ldr	r1, [pc, #256]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800665c:	4313      	orrs	r3, r2
 800665e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d107      	bne.n	8006678 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006668:	4b3c      	ldr	r3, [pc, #240]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d121      	bne.n	80066b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0f6      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2b03      	cmp	r3, #3
 800667e:	d107      	bne.n	8006690 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006680:	4b36      	ldr	r3, [pc, #216]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d115      	bne.n	80066b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0ea      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d107      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006698:	4b30      	ldr	r3, [pc, #192]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d109      	bne.n	80066b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e0de      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066a8:	4b2c      	ldr	r3, [pc, #176]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0d6      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066b8:	4b28      	ldr	r3, [pc, #160]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	f023 0207 	bic.w	r2, r3, #7
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	4925      	ldr	r1, [pc, #148]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ca:	f7fd fca3 	bl	8004014 <HAL_GetTick>
 80066ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d0:	e00a      	b.n	80066e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066d2:	f7fd fc9f 	bl	8004014 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e0be      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066e8:	4b1c      	ldr	r3, [pc, #112]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d1eb      	bne.n	80066d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d010      	beq.n	8006728 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	4b14      	ldr	r3, [pc, #80]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	429a      	cmp	r2, r3
 8006714:	d208      	bcs.n	8006728 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006716:	4b11      	ldr	r3, [pc, #68]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	f023 020f 	bic.w	r2, r3, #15
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	490e      	ldr	r1, [pc, #56]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006724:	4313      	orrs	r3, r2
 8006726:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006728:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	429a      	cmp	r2, r3
 8006734:	d214      	bcs.n	8006760 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006736:	4b08      	ldr	r3, [pc, #32]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f023 020f 	bic.w	r2, r3, #15
 800673e:	4906      	ldr	r1, [pc, #24]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	4313      	orrs	r3, r2
 8006744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006746:	4b04      	ldr	r3, [pc, #16]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	429a      	cmp	r2, r3
 8006752:	d005      	beq.n	8006760 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e086      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>
 8006758:	52002000 	.word	0x52002000
 800675c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b00      	cmp	r3, #0
 800676a:	d010      	beq.n	800678e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691a      	ldr	r2, [r3, #16]
 8006770:	4b3f      	ldr	r3, [pc, #252]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006778:	429a      	cmp	r2, r3
 800677a:	d208      	bcs.n	800678e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800677c:	4b3c      	ldr	r3, [pc, #240]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	4939      	ldr	r1, [pc, #228]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 800678a:	4313      	orrs	r3, r2
 800678c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d010      	beq.n	80067bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695a      	ldr	r2, [r3, #20]
 800679e:	4b34      	ldr	r3, [pc, #208]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d208      	bcs.n	80067bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067aa:	4b31      	ldr	r3, [pc, #196]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	492e      	ldr	r1, [pc, #184]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0310 	and.w	r3, r3, #16
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d010      	beq.n	80067ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699a      	ldr	r2, [r3, #24]
 80067cc:	4b28      	ldr	r3, [pc, #160]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d208      	bcs.n	80067ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067d8:	4b25      	ldr	r3, [pc, #148]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	4922      	ldr	r1, [pc, #136]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0320 	and.w	r3, r3, #32
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d010      	beq.n	8006818 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69da      	ldr	r2, [r3, #28]
 80067fa:	4b1d      	ldr	r3, [pc, #116]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006802:	429a      	cmp	r2, r3
 8006804:	d208      	bcs.n	8006818 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006806:	4b1a      	ldr	r3, [pc, #104]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	4917      	ldr	r1, [pc, #92]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 8006814:	4313      	orrs	r3, r2
 8006816:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006818:	f000 f834 	bl	8006884 <HAL_RCC_GetSysClockFreq>
 800681c:	4602      	mov	r2, r0
 800681e:	4b14      	ldr	r3, [pc, #80]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	0a1b      	lsrs	r3, r3, #8
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	4912      	ldr	r1, [pc, #72]	; (8006874 <HAL_RCC_ClockConfig+0x35c>)
 800682a:	5ccb      	ldrb	r3, [r1, r3]
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	fa22 f303 	lsr.w	r3, r2, r3
 8006834:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006836:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	4a0d      	ldr	r2, [pc, #52]	; (8006874 <HAL_RCC_ClockConfig+0x35c>)
 8006840:	5cd3      	ldrb	r3, [r2, r3]
 8006842:	f003 031f 	and.w	r3, r3, #31
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	fa22 f303 	lsr.w	r3, r2, r3
 800684c:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <HAL_RCC_ClockConfig+0x360>)
 800684e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006850:	4a0a      	ldr	r2, [pc, #40]	; (800687c <HAL_RCC_ClockConfig+0x364>)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006856:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <HAL_RCC_ClockConfig+0x368>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f7fd fb90 	bl	8003f80 <HAL_InitTick>
 8006860:	4603      	mov	r3, r0
 8006862:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	58024400 	.word	0x58024400
 8006874:	08010fd0 	.word	0x08010fd0
 8006878:	2400028c 	.word	0x2400028c
 800687c:	24000288 	.word	0x24000288
 8006880:	24000290 	.word	0x24000290

08006884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006884:	b480      	push	{r7}
 8006886:	b089      	sub	sp, #36	; 0x24
 8006888:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800688a:	4bb3      	ldr	r3, [pc, #716]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006892:	2b18      	cmp	r3, #24
 8006894:	f200 8155 	bhi.w	8006b42 <HAL_RCC_GetSysClockFreq+0x2be>
 8006898:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	08006905 	.word	0x08006905
 80068a4:	08006b43 	.word	0x08006b43
 80068a8:	08006b43 	.word	0x08006b43
 80068ac:	08006b43 	.word	0x08006b43
 80068b0:	08006b43 	.word	0x08006b43
 80068b4:	08006b43 	.word	0x08006b43
 80068b8:	08006b43 	.word	0x08006b43
 80068bc:	08006b43 	.word	0x08006b43
 80068c0:	0800692b 	.word	0x0800692b
 80068c4:	08006b43 	.word	0x08006b43
 80068c8:	08006b43 	.word	0x08006b43
 80068cc:	08006b43 	.word	0x08006b43
 80068d0:	08006b43 	.word	0x08006b43
 80068d4:	08006b43 	.word	0x08006b43
 80068d8:	08006b43 	.word	0x08006b43
 80068dc:	08006b43 	.word	0x08006b43
 80068e0:	08006931 	.word	0x08006931
 80068e4:	08006b43 	.word	0x08006b43
 80068e8:	08006b43 	.word	0x08006b43
 80068ec:	08006b43 	.word	0x08006b43
 80068f0:	08006b43 	.word	0x08006b43
 80068f4:	08006b43 	.word	0x08006b43
 80068f8:	08006b43 	.word	0x08006b43
 80068fc:	08006b43 	.word	0x08006b43
 8006900:	08006937 	.word	0x08006937
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006904:	4b94      	ldr	r3, [pc, #592]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	d009      	beq.n	8006924 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006910:	4b91      	ldr	r3, [pc, #580]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	08db      	lsrs	r3, r3, #3
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	4a90      	ldr	r2, [pc, #576]	; (8006b5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800691c:	fa22 f303 	lsr.w	r3, r2, r3
 8006920:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006922:	e111      	b.n	8006b48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006924:	4b8d      	ldr	r3, [pc, #564]	; (8006b5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006926:	61bb      	str	r3, [r7, #24]
      break;
 8006928:	e10e      	b.n	8006b48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800692a:	4b8d      	ldr	r3, [pc, #564]	; (8006b60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800692c:	61bb      	str	r3, [r7, #24]
      break;
 800692e:	e10b      	b.n	8006b48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006930:	4b8c      	ldr	r3, [pc, #560]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006932:	61bb      	str	r3, [r7, #24]
      break;
 8006934:	e108      	b.n	8006b48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006936:	4b88      	ldr	r3, [pc, #544]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006940:	4b85      	ldr	r3, [pc, #532]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	091b      	lsrs	r3, r3, #4
 8006946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800694a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800694c:	4b82      	ldr	r3, [pc, #520]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006956:	4b80      	ldr	r3, [pc, #512]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695a:	08db      	lsrs	r3, r3, #3
 800695c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	fb02 f303 	mul.w	r3, r2, r3
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 80e1 	beq.w	8006b3c <HAL_RCC_GetSysClockFreq+0x2b8>
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b02      	cmp	r3, #2
 800697e:	f000 8083 	beq.w	8006a88 <HAL_RCC_GetSysClockFreq+0x204>
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b02      	cmp	r3, #2
 8006986:	f200 80a1 	bhi.w	8006acc <HAL_RCC_GetSysClockFreq+0x248>
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <HAL_RCC_GetSysClockFreq+0x114>
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d056      	beq.n	8006a44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006996:	e099      	b.n	8006acc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006998:	4b6f      	ldr	r3, [pc, #444]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0320 	and.w	r3, r3, #32
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d02d      	beq.n	8006a00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069a4:	4b6c      	ldr	r3, [pc, #432]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	08db      	lsrs	r3, r3, #3
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	4a6b      	ldr	r2, [pc, #428]	; (8006b5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069b0:	fa22 f303 	lsr.w	r3, r2, r3
 80069b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	ee07 3a90 	vmov	s15, r3
 80069bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ce:	4b62      	ldr	r3, [pc, #392]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d6:	ee07 3a90 	vmov	s15, r3
 80069da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069de:	ed97 6a02 	vldr	s12, [r7, #8]
 80069e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80069fe:	e087      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	ee07 3a90 	vmov	s15, r3
 8006a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006b6c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a12:	4b51      	ldr	r3, [pc, #324]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a26:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a42:	e065      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006b70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a56:	4b40      	ldr	r3, [pc, #256]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a6a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a86:	e043      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006b74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a9a:	4b2f      	ldr	r3, [pc, #188]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006aca:	e021      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006b70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ade:	4b1e      	ldr	r3, [pc, #120]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8006af2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006b10:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b14:	0a5b      	lsrs	r3, r3, #9
 8006b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	ee07 3a90 	vmov	s15, r3
 8006b24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b28:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b34:	ee17 3a90 	vmov	r3, s15
 8006b38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006b3a:	e005      	b.n	8006b48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61bb      	str	r3, [r7, #24]
      break;
 8006b40:	e002      	b.n	8006b48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006b42:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b44:	61bb      	str	r3, [r7, #24]
      break;
 8006b46:	bf00      	nop
  }

  return sysclockfreq;
 8006b48:	69bb      	ldr	r3, [r7, #24]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3724      	adds	r7, #36	; 0x24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	58024400 	.word	0x58024400
 8006b5c:	03d09000 	.word	0x03d09000
 8006b60:	003d0900 	.word	0x003d0900
 8006b64:	017d7840 	.word	0x017d7840
 8006b68:	46000000 	.word	0x46000000
 8006b6c:	4c742400 	.word	0x4c742400
 8006b70:	4a742400 	.word	0x4a742400
 8006b74:	4bbebc20 	.word	0x4bbebc20

08006b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b7e:	f7ff fe81 	bl	8006884 <HAL_RCC_GetSysClockFreq>
 8006b82:	4602      	mov	r2, r0
 8006b84:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	0a1b      	lsrs	r3, r3, #8
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	490f      	ldr	r1, [pc, #60]	; (8006bcc <HAL_RCC_GetHCLKFreq+0x54>)
 8006b90:	5ccb      	ldrb	r3, [r1, r3]
 8006b92:	f003 031f 	and.w	r3, r3, #31
 8006b96:	fa22 f303 	lsr.w	r3, r2, r3
 8006b9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	4a09      	ldr	r2, [pc, #36]	; (8006bcc <HAL_RCC_GetHCLKFreq+0x54>)
 8006ba6:	5cd3      	ldrb	r3, [r2, r3]
 8006ba8:	f003 031f 	and.w	r3, r3, #31
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb2:	4a07      	ldr	r2, [pc, #28]	; (8006bd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006bb4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bb6:	4a07      	ldr	r2, [pc, #28]	; (8006bd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006bbc:	4b04      	ldr	r3, [pc, #16]	; (8006bd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	58024400 	.word	0x58024400
 8006bcc:	08010fd0 	.word	0x08010fd0
 8006bd0:	2400028c 	.word	0x2400028c
 8006bd4:	24000288 	.word	0x24000288

08006bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006bdc:	f7ff ffcc 	bl	8006b78 <HAL_RCC_GetHCLKFreq>
 8006be0:	4602      	mov	r2, r0
 8006be2:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	091b      	lsrs	r3, r3, #4
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	4904      	ldr	r1, [pc, #16]	; (8006c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bee:	5ccb      	ldrb	r3, [r1, r3]
 8006bf0:	f003 031f 	and.w	r3, r3, #31
 8006bf4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	58024400 	.word	0x58024400
 8006c00:	08010fd0 	.word	0x08010fd0

08006c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006c08:	f7ff ffb6 	bl	8006b78 <HAL_RCC_GetHCLKFreq>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	0a1b      	lsrs	r3, r3, #8
 8006c14:	f003 0307 	and.w	r3, r3, #7
 8006c18:	4904      	ldr	r1, [pc, #16]	; (8006c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c1a:	5ccb      	ldrb	r3, [r1, r3]
 8006c1c:	f003 031f 	and.w	r3, r3, #31
 8006c20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	58024400 	.word	0x58024400
 8006c2c:	08010fd0 	.word	0x08010fd0

08006c30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c34:	b0c6      	sub	sp, #280	; 0x118
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c42:	2300      	movs	r3, #0
 8006c44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006c54:	2500      	movs	r5, #0
 8006c56:	ea54 0305 	orrs.w	r3, r4, r5
 8006c5a:	d049      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c66:	d02f      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006c68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c6c:	d828      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c72:	d01a      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006c74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c78:	d822      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c82:	d007      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c84:	e01c      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c86:	4bab      	ldr	r3, [pc, #684]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	4aaa      	ldr	r2, [pc, #680]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c92:	e01a      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c98:	3308      	adds	r3, #8
 8006c9a:	2102      	movs	r1, #2
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 fc25 	bl	80084ec <RCCEx_PLL2_Config>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ca8:	e00f      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cae:	3328      	adds	r3, #40	; 0x28
 8006cb0:	2102      	movs	r1, #2
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f001 fccc 	bl	8008650 <RCCEx_PLL3_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006cbe:	e004      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006cc6:	e000      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10a      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006cd2:	4b98      	ldr	r3, [pc, #608]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce0:	4a94      	ldr	r2, [pc, #592]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	6513      	str	r3, [r2, #80]	; 0x50
 8006ce6:	e003      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006cfc:	f04f 0900 	mov.w	r9, #0
 8006d00:	ea58 0309 	orrs.w	r3, r8, r9
 8006d04:	d047      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d82a      	bhi.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006d10:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d16:	bf00      	nop
 8006d18:	08006d2d 	.word	0x08006d2d
 8006d1c:	08006d3b 	.word	0x08006d3b
 8006d20:	08006d51 	.word	0x08006d51
 8006d24:	08006d6f 	.word	0x08006d6f
 8006d28:	08006d6f 	.word	0x08006d6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d2c:	4b81      	ldr	r3, [pc, #516]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	4a80      	ldr	r2, [pc, #512]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d38:	e01a      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d3e:	3308      	adds	r3, #8
 8006d40:	2100      	movs	r1, #0
 8006d42:	4618      	mov	r0, r3
 8006d44:	f001 fbd2 	bl	80084ec <RCCEx_PLL2_Config>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d4e:	e00f      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d54:	3328      	adds	r3, #40	; 0x28
 8006d56:	2100      	movs	r1, #0
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f001 fc79 	bl	8008650 <RCCEx_PLL3_Config>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d64:	e004      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d6c:	e000      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d78:	4b6e      	ldr	r3, [pc, #440]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d7c:	f023 0107 	bic.w	r1, r3, #7
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d86:	4a6b      	ldr	r2, [pc, #428]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	6513      	str	r3, [r2, #80]	; 0x50
 8006d8c:	e003      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d92:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8006da2:	f04f 0b00 	mov.w	fp, #0
 8006da6:	ea5a 030b 	orrs.w	r3, sl, fp
 8006daa:	d05b      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006db4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006db8:	d03b      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006dba:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006dbe:	d834      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006dc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dc4:	d037      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006dc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dca:	d82e      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006dcc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dd0:	d033      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006dd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dd6:	d828      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ddc:	d01a      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006de2:	d822      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006de8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dec:	d007      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006dee:	e01c      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df0:	4b50      	ldr	r3, [pc, #320]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df4:	4a4f      	ldr	r2, [pc, #316]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dfc:	e01e      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e02:	3308      	adds	r3, #8
 8006e04:	2100      	movs	r1, #0
 8006e06:	4618      	mov	r0, r3
 8006e08:	f001 fb70 	bl	80084ec <RCCEx_PLL2_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006e12:	e013      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e18:	3328      	adds	r3, #40	; 0x28
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f001 fc17 	bl	8008650 <RCCEx_PLL3_Config>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e28:	e008      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e30:	e004      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006e32:	bf00      	nop
 8006e34:	e002      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006e36:	bf00      	nop
 8006e38:	e000      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10b      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e44:	4b3b      	ldr	r3, [pc, #236]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e48:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e54:	4a37      	ldr	r2, [pc, #220]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e56:	430b      	orrs	r3, r1
 8006e58:	6593      	str	r3, [r2, #88]	; 0x58
 8006e5a:	e003      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006e70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e74:	2300      	movs	r3, #0
 8006e76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e7a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4313      	orrs	r3, r2
 8006e82:	d05d      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e8c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006e90:	d03b      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006e92:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006e96:	d834      	bhi.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006e98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e9c:	d037      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006e9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ea2:	d82e      	bhi.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ea4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ea8:	d033      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006eaa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006eae:	d828      	bhi.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006eb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eb4:	d01a      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006eb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eba:	d822      	bhi.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ec4:	d007      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006ec6:	e01c      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec8:	4b1a      	ldr	r3, [pc, #104]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	4a19      	ldr	r2, [pc, #100]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ed4:	e01e      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eda:	3308      	adds	r3, #8
 8006edc:	2100      	movs	r1, #0
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f001 fb04 	bl	80084ec <RCCEx_PLL2_Config>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006eea:	e013      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef0:	3328      	adds	r3, #40	; 0x28
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 fbab 	bl	8008650 <RCCEx_PLL3_Config>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f00:	e008      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f08:	e004      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006f0a:	bf00      	nop
 8006f0c:	e002      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006f0e:	bf00      	nop
 8006f10:	e000      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10d      	bne.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006f1c:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f20:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f2c:	4a01      	ldr	r2, [pc, #4]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	6593      	str	r3, [r2, #88]	; 0x58
 8006f32:	e005      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006f34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f48:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006f4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f50:	2300      	movs	r3, #0
 8006f52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f56:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	d03a      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f66:	2b30      	cmp	r3, #48	; 0x30
 8006f68:	d01f      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006f6a:	2b30      	cmp	r3, #48	; 0x30
 8006f6c:	d819      	bhi.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	d00c      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	d815      	bhi.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d019      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006f7a:	2b10      	cmp	r3, #16
 8006f7c:	d111      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f7e:	4baa      	ldr	r3, [pc, #680]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	4aa9      	ldr	r2, [pc, #676]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006f8a:	e011      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f90:	3308      	adds	r3, #8
 8006f92:	2102      	movs	r1, #2
 8006f94:	4618      	mov	r0, r3
 8006f96:	f001 faa9 	bl	80084ec <RCCEx_PLL2_Config>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006fa0:	e006      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006fa8:	e002      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006faa:	bf00      	nop
 8006fac:	e000      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10a      	bne.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006fb8:	4b9b      	ldr	r3, [pc, #620]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fbc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc6:	4a98      	ldr	r2, [pc, #608]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fcc:	e003      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fd2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	d051      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007000:	d035      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007002:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007006:	d82e      	bhi.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007008:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800700c:	d031      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800700e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007012:	d828      	bhi.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007018:	d01a      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800701a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800701e:	d822      	bhi.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007028:	d007      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800702a:	e01c      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800702c:	4b7e      	ldr	r3, [pc, #504]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	4a7d      	ldr	r2, [pc, #500]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007038:	e01c      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800703a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703e:	3308      	adds	r3, #8
 8007040:	2100      	movs	r1, #0
 8007042:	4618      	mov	r0, r3
 8007044:	f001 fa52 	bl	80084ec <RCCEx_PLL2_Config>
 8007048:	4603      	mov	r3, r0
 800704a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800704e:	e011      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007054:	3328      	adds	r3, #40	; 0x28
 8007056:	2100      	movs	r1, #0
 8007058:	4618      	mov	r0, r3
 800705a:	f001 faf9 	bl	8008650 <RCCEx_PLL3_Config>
 800705e:	4603      	mov	r3, r0
 8007060:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007064:	e006      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800706c:	e002      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800706e:	bf00      	nop
 8007070:	e000      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007074:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800707c:	4b6a      	ldr	r3, [pc, #424]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800707e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007080:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708a:	4a67      	ldr	r2, [pc, #412]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800708c:	430b      	orrs	r3, r1
 800708e:	6513      	str	r3, [r2, #80]	; 0x50
 8007090:	e003      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007092:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007096:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800709a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80070a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070aa:	2300      	movs	r3, #0
 80070ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070b0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4313      	orrs	r3, r2
 80070b8:	d053      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80070ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070c4:	d033      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80070c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070ca:	d82c      	bhi.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80070cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070d0:	d02f      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80070d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070d6:	d826      	bhi.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80070d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070dc:	d02b      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80070de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070e2:	d820      	bhi.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80070e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070e8:	d012      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80070ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070ee:	d81a      	bhi.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d022      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80070f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f8:	d115      	bne.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fe:	3308      	adds	r3, #8
 8007100:	2101      	movs	r1, #1
 8007102:	4618      	mov	r0, r3
 8007104:	f001 f9f2 	bl	80084ec <RCCEx_PLL2_Config>
 8007108:	4603      	mov	r3, r0
 800710a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800710e:	e015      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007114:	3328      	adds	r3, #40	; 0x28
 8007116:	2101      	movs	r1, #1
 8007118:	4618      	mov	r0, r3
 800711a:	f001 fa99 	bl	8008650 <RCCEx_PLL3_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007124:	e00a      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800712c:	e006      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800712e:	bf00      	nop
 8007130:	e004      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007132:	bf00      	nop
 8007134:	e002      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007136:	bf00      	nop
 8007138:	e000      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800713a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800713c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007144:	4b38      	ldr	r3, [pc, #224]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007148:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800714c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007152:	4a35      	ldr	r2, [pc, #212]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007154:	430b      	orrs	r3, r1
 8007156:	6513      	str	r3, [r2, #80]	; 0x50
 8007158:	e003      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800715a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800715e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800716e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007172:	2300      	movs	r3, #0
 8007174:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007178:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800717c:	460b      	mov	r3, r1
 800717e:	4313      	orrs	r3, r2
 8007180:	d058      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007186:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800718a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800718e:	d033      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007194:	d82c      	bhi.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719a:	d02f      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800719c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a0:	d826      	bhi.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80071a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071a6:	d02b      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80071a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071ac:	d820      	bhi.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80071ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071b2:	d012      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80071b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071b8:	d81a      	bhi.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d022      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80071be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071c2:	d115      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c8:	3308      	adds	r3, #8
 80071ca:	2101      	movs	r1, #1
 80071cc:	4618      	mov	r0, r3
 80071ce:	f001 f98d 	bl	80084ec <RCCEx_PLL2_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80071d8:	e015      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071de:	3328      	adds	r3, #40	; 0x28
 80071e0:	2101      	movs	r1, #1
 80071e2:	4618      	mov	r0, r3
 80071e4:	f001 fa34 	bl	8008650 <RCCEx_PLL3_Config>
 80071e8:	4603      	mov	r3, r0
 80071ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80071ee:	e00a      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80071f6:	e006      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80071f8:	bf00      	nop
 80071fa:	e004      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80071fc:	bf00      	nop
 80071fe:	e002      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007200:	bf00      	nop
 8007202:	e000      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007206:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10e      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800720e:	4b06      	ldr	r3, [pc, #24]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007212:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800721a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800721e:	4a02      	ldr	r2, [pc, #8]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007220:	430b      	orrs	r3, r1
 8007222:	6593      	str	r3, [r2, #88]	; 0x58
 8007224:	e006      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007226:	bf00      	nop
 8007228:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007230:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007244:	2300      	movs	r3, #0
 8007246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800724a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800724e:	460b      	mov	r3, r1
 8007250:	4313      	orrs	r3, r2
 8007252:	d037      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800725a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800725e:	d00e      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007264:	d816      	bhi.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d018      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800726a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800726e:	d111      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007270:	4bc4      	ldr	r3, [pc, #784]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	4ac3      	ldr	r2, [pc, #780]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800727a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800727c:	e00f      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800727e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007282:	3308      	adds	r3, #8
 8007284:	2101      	movs	r1, #1
 8007286:	4618      	mov	r0, r3
 8007288:	f001 f930 	bl	80084ec <RCCEx_PLL2_Config>
 800728c:	4603      	mov	r3, r0
 800728e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007292:	e004      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800729a:	e000      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800729c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800729e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80072a6:	4bb7      	ldr	r3, [pc, #732]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80072ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072b4:	4ab3      	ldr	r2, [pc, #716]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072b6:	430b      	orrs	r3, r1
 80072b8:	6513      	str	r3, [r2, #80]	; 0x50
 80072ba:	e003      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80072c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80072d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072d4:	2300      	movs	r3, #0
 80072d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80072de:	460b      	mov	r3, r1
 80072e0:	4313      	orrs	r3, r2
 80072e2:	d039      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d81c      	bhi.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80072ee:	a201      	add	r2, pc, #4	; (adr r2, 80072f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80072f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f4:	08007331 	.word	0x08007331
 80072f8:	08007305 	.word	0x08007305
 80072fc:	08007313 	.word	0x08007313
 8007300:	08007331 	.word	0x08007331
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007304:	4b9f      	ldr	r3, [pc, #636]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	4a9e      	ldr	r2, [pc, #632]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800730a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800730e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007310:	e00f      	b.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007316:	3308      	adds	r3, #8
 8007318:	2102      	movs	r1, #2
 800731a:	4618      	mov	r0, r3
 800731c:	f001 f8e6 	bl	80084ec <RCCEx_PLL2_Config>
 8007320:	4603      	mov	r3, r0
 8007322:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007326:	e004      	b.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800732e:	e000      	b.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007332:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10a      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800733a:	4b92      	ldr	r3, [pc, #584]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800733c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800733e:	f023 0103 	bic.w	r1, r3, #3
 8007342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007348:	4a8e      	ldr	r2, [pc, #568]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800734a:	430b      	orrs	r3, r1
 800734c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800734e:	e003      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007350:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007354:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007364:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007368:	2300      	movs	r3, #0
 800736a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800736e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007372:	460b      	mov	r3, r1
 8007374:	4313      	orrs	r3, r2
 8007376:	f000 8099 	beq.w	80074ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800737a:	4b83      	ldr	r3, [pc, #524]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a82      	ldr	r2, [pc, #520]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007384:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007386:	f7fc fe45 	bl	8004014 <HAL_GetTick>
 800738a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800738e:	e00b      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007390:	f7fc fe40 	bl	8004014 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	2b64      	cmp	r3, #100	; 0x64
 800739e:	d903      	bls.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80073a6:	e005      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073a8:	4b77      	ldr	r3, [pc, #476]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d0ed      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80073b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d173      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80073bc:	4b71      	ldr	r3, [pc, #452]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073c8:	4053      	eors	r3, r2
 80073ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d015      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073d2:	4b6c      	ldr	r3, [pc, #432]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073de:	4b69      	ldr	r3, [pc, #420]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e2:	4a68      	ldr	r2, [pc, #416]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073ea:	4b66      	ldr	r3, [pc, #408]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ee:	4a65      	ldr	r2, [pc, #404]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80073f6:	4a63      	ldr	r2, [pc, #396]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007402:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800740a:	d118      	bne.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740c:	f7fc fe02 	bl	8004014 <HAL_GetTick>
 8007410:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007414:	e00d      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007416:	f7fc fdfd 	bl	8004014 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007420:	1ad2      	subs	r2, r2, r3
 8007422:	f241 3388 	movw	r3, #5000	; 0x1388
 8007426:	429a      	cmp	r2, r3
 8007428:	d903      	bls.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8007430:	e005      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007432:	4b54      	ldr	r3, [pc, #336]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007436:	f003 0302 	and.w	r3, r3, #2
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0eb      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800743e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007442:	2b00      	cmp	r3, #0
 8007444:	d129      	bne.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800744e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007452:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007456:	d10e      	bne.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007458:	4b4a      	ldr	r3, [pc, #296]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007464:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007468:	091a      	lsrs	r2, r3, #4
 800746a:	4b48      	ldr	r3, [pc, #288]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800746c:	4013      	ands	r3, r2
 800746e:	4a45      	ldr	r2, [pc, #276]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007470:	430b      	orrs	r3, r1
 8007472:	6113      	str	r3, [r2, #16]
 8007474:	e005      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007476:	4b43      	ldr	r3, [pc, #268]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	4a42      	ldr	r2, [pc, #264]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800747c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007480:	6113      	str	r3, [r2, #16]
 8007482:	4b40      	ldr	r3, [pc, #256]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007484:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800748a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800748e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007492:	4a3c      	ldr	r2, [pc, #240]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007494:	430b      	orrs	r3, r1
 8007496:	6713      	str	r3, [r2, #112]	; 0x70
 8007498:	e008      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800749a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800749e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80074a2:	e003      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80074a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80074ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f002 0301 	and.w	r3, r2, #1
 80074b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074bc:	2300      	movs	r3, #0
 80074be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80074c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80074c6:	460b      	mov	r3, r1
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f000 808f 	beq.w	80075ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80074ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074d4:	2b28      	cmp	r3, #40	; 0x28
 80074d6:	d871      	bhi.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80074d8:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	080075c5 	.word	0x080075c5
 80074e4:	080075bd 	.word	0x080075bd
 80074e8:	080075bd 	.word	0x080075bd
 80074ec:	080075bd 	.word	0x080075bd
 80074f0:	080075bd 	.word	0x080075bd
 80074f4:	080075bd 	.word	0x080075bd
 80074f8:	080075bd 	.word	0x080075bd
 80074fc:	080075bd 	.word	0x080075bd
 8007500:	08007591 	.word	0x08007591
 8007504:	080075bd 	.word	0x080075bd
 8007508:	080075bd 	.word	0x080075bd
 800750c:	080075bd 	.word	0x080075bd
 8007510:	080075bd 	.word	0x080075bd
 8007514:	080075bd 	.word	0x080075bd
 8007518:	080075bd 	.word	0x080075bd
 800751c:	080075bd 	.word	0x080075bd
 8007520:	080075a7 	.word	0x080075a7
 8007524:	080075bd 	.word	0x080075bd
 8007528:	080075bd 	.word	0x080075bd
 800752c:	080075bd 	.word	0x080075bd
 8007530:	080075bd 	.word	0x080075bd
 8007534:	080075bd 	.word	0x080075bd
 8007538:	080075bd 	.word	0x080075bd
 800753c:	080075bd 	.word	0x080075bd
 8007540:	080075c5 	.word	0x080075c5
 8007544:	080075bd 	.word	0x080075bd
 8007548:	080075bd 	.word	0x080075bd
 800754c:	080075bd 	.word	0x080075bd
 8007550:	080075bd 	.word	0x080075bd
 8007554:	080075bd 	.word	0x080075bd
 8007558:	080075bd 	.word	0x080075bd
 800755c:	080075bd 	.word	0x080075bd
 8007560:	080075c5 	.word	0x080075c5
 8007564:	080075bd 	.word	0x080075bd
 8007568:	080075bd 	.word	0x080075bd
 800756c:	080075bd 	.word	0x080075bd
 8007570:	080075bd 	.word	0x080075bd
 8007574:	080075bd 	.word	0x080075bd
 8007578:	080075bd 	.word	0x080075bd
 800757c:	080075bd 	.word	0x080075bd
 8007580:	080075c5 	.word	0x080075c5
 8007584:	58024400 	.word	0x58024400
 8007588:	58024800 	.word	0x58024800
 800758c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007594:	3308      	adds	r3, #8
 8007596:	2101      	movs	r1, #1
 8007598:	4618      	mov	r0, r3
 800759a:	f000 ffa7 	bl	80084ec <RCCEx_PLL2_Config>
 800759e:	4603      	mov	r3, r0
 80075a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80075a4:	e00f      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075aa:	3328      	adds	r3, #40	; 0x28
 80075ac:	2101      	movs	r1, #1
 80075ae:	4618      	mov	r0, r3
 80075b0:	f001 f84e 	bl	8008650 <RCCEx_PLL3_Config>
 80075b4:	4603      	mov	r3, r0
 80075b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80075ba:	e004      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80075c2:	e000      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80075c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10a      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80075ce:	4bbf      	ldr	r3, [pc, #764]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80075d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075dc:	4abb      	ldr	r2, [pc, #748]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075de:	430b      	orrs	r3, r1
 80075e0:	6553      	str	r3, [r2, #84]	; 0x54
 80075e2:	e003      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80075ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	f002 0302 	and.w	r3, r2, #2
 80075f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075fc:	2300      	movs	r3, #0
 80075fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007602:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007606:	460b      	mov	r3, r1
 8007608:	4313      	orrs	r3, r2
 800760a:	d041      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800760c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007612:	2b05      	cmp	r3, #5
 8007614:	d824      	bhi.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007616:	a201      	add	r2, pc, #4	; (adr r2, 800761c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761c:	08007669 	.word	0x08007669
 8007620:	08007635 	.word	0x08007635
 8007624:	0800764b 	.word	0x0800764b
 8007628:	08007669 	.word	0x08007669
 800762c:	08007669 	.word	0x08007669
 8007630:	08007669 	.word	0x08007669
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007638:	3308      	adds	r3, #8
 800763a:	2101      	movs	r1, #1
 800763c:	4618      	mov	r0, r3
 800763e:	f000 ff55 	bl	80084ec <RCCEx_PLL2_Config>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007648:	e00f      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800764a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800764e:	3328      	adds	r3, #40	; 0x28
 8007650:	2101      	movs	r1, #1
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fffc 	bl	8008650 <RCCEx_PLL3_Config>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800765e:	e004      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007666:	e000      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800766a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10a      	bne.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007672:	4b96      	ldr	r3, [pc, #600]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007676:	f023 0107 	bic.w	r1, r3, #7
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007680:	4a92      	ldr	r2, [pc, #584]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007682:	430b      	orrs	r3, r1
 8007684:	6553      	str	r3, [r2, #84]	; 0x54
 8007686:	e003      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007688:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800768c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007698:	f002 0304 	and.w	r3, r2, #4
 800769c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80076a0:	2300      	movs	r3, #0
 80076a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076a6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80076aa:	460b      	mov	r3, r1
 80076ac:	4313      	orrs	r3, r2
 80076ae:	d044      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80076b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b8:	2b05      	cmp	r3, #5
 80076ba:	d825      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80076bc:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	08007711 	.word	0x08007711
 80076c8:	080076dd 	.word	0x080076dd
 80076cc:	080076f3 	.word	0x080076f3
 80076d0:	08007711 	.word	0x08007711
 80076d4:	08007711 	.word	0x08007711
 80076d8:	08007711 	.word	0x08007711
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e0:	3308      	adds	r3, #8
 80076e2:	2101      	movs	r1, #1
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 ff01 	bl	80084ec <RCCEx_PLL2_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80076f0:	e00f      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f6:	3328      	adds	r3, #40	; 0x28
 80076f8:	2101      	movs	r1, #1
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 ffa8 	bl	8008650 <RCCEx_PLL3_Config>
 8007700:	4603      	mov	r3, r0
 8007702:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007706:	e004      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800770e:	e000      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007712:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10b      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800771a:	4b6c      	ldr	r3, [pc, #432]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800771c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771e:	f023 0107 	bic.w	r1, r3, #7
 8007722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772a:	4a68      	ldr	r2, [pc, #416]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800772c:	430b      	orrs	r3, r1
 800772e:	6593      	str	r3, [r2, #88]	; 0x58
 8007730:	e003      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007732:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007736:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800773a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	f002 0320 	and.w	r3, r2, #32
 8007746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800774a:	2300      	movs	r3, #0
 800774c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007750:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007754:	460b      	mov	r3, r1
 8007756:	4313      	orrs	r3, r2
 8007758:	d055      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800775a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800775e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007762:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007766:	d033      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800776c:	d82c      	bhi.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800776e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007772:	d02f      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007778:	d826      	bhi.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800777a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800777e:	d02b      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007780:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007784:	d820      	bhi.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800778a:	d012      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800778c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007790:	d81a      	bhi.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d022      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800779a:	d115      	bne.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800779c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a0:	3308      	adds	r3, #8
 80077a2:	2100      	movs	r1, #0
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 fea1 	bl	80084ec <RCCEx_PLL2_Config>
 80077aa:	4603      	mov	r3, r0
 80077ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80077b0:	e015      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b6:	3328      	adds	r3, #40	; 0x28
 80077b8:	2102      	movs	r1, #2
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 ff48 	bl	8008650 <RCCEx_PLL3_Config>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80077c6:	e00a      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80077ce:	e006      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80077d0:	bf00      	nop
 80077d2:	e004      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80077d4:	bf00      	nop
 80077d6:	e002      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80077d8:	bf00      	nop
 80077da:	e000      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80077dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10b      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077e6:	4b39      	ldr	r3, [pc, #228]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80077e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80077ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077f6:	4a35      	ldr	r2, [pc, #212]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80077f8:	430b      	orrs	r3, r1
 80077fa:	6553      	str	r3, [r2, #84]	; 0x54
 80077fc:	e003      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007802:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007812:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007816:	2300      	movs	r3, #0
 8007818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800781c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007820:	460b      	mov	r3, r1
 8007822:	4313      	orrs	r3, r2
 8007824:	d058      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800782a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800782e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007832:	d033      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007834:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007838:	d82c      	bhi.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800783a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800783e:	d02f      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007844:	d826      	bhi.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007846:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800784a:	d02b      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800784c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007850:	d820      	bhi.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007856:	d012      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800785c:	d81a      	bhi.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800785e:	2b00      	cmp	r3, #0
 8007860:	d022      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007866:	d115      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800786c:	3308      	adds	r3, #8
 800786e:	2100      	movs	r1, #0
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fe3b 	bl	80084ec <RCCEx_PLL2_Config>
 8007876:	4603      	mov	r3, r0
 8007878:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800787c:	e015      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800787e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007882:	3328      	adds	r3, #40	; 0x28
 8007884:	2102      	movs	r1, #2
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fee2 	bl	8008650 <RCCEx_PLL3_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007892:	e00a      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800789a:	e006      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800789c:	bf00      	nop
 800789e:	e004      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80078a0:	bf00      	nop
 80078a2:	e002      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80078a4:	bf00      	nop
 80078a6:	e000      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80078a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10e      	bne.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80078b2:	4b06      	ldr	r3, [pc, #24]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80078b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80078ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078c2:	4a02      	ldr	r2, [pc, #8]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80078c4:	430b      	orrs	r3, r1
 80078c6:	6593      	str	r3, [r2, #88]	; 0x58
 80078c8:	e006      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80078ca:	bf00      	nop
 80078cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80078d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80078e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078e8:	2300      	movs	r3, #0
 80078ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80078f2:	460b      	mov	r3, r1
 80078f4:	4313      	orrs	r3, r2
 80078f6:	d055      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80078f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007900:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007904:	d033      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007906:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800790a:	d82c      	bhi.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800790c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007910:	d02f      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007916:	d826      	bhi.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007918:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800791c:	d02b      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800791e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007922:	d820      	bhi.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007928:	d012      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800792a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800792e:	d81a      	bhi.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007930:	2b00      	cmp	r3, #0
 8007932:	d022      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007938:	d115      	bne.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800793a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800793e:	3308      	adds	r3, #8
 8007940:	2100      	movs	r1, #0
 8007942:	4618      	mov	r0, r3
 8007944:	f000 fdd2 	bl	80084ec <RCCEx_PLL2_Config>
 8007948:	4603      	mov	r3, r0
 800794a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800794e:	e015      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007954:	3328      	adds	r3, #40	; 0x28
 8007956:	2102      	movs	r1, #2
 8007958:	4618      	mov	r0, r3
 800795a:	f000 fe79 	bl	8008650 <RCCEx_PLL3_Config>
 800795e:	4603      	mov	r3, r0
 8007960:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007964:	e00a      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800796c:	e006      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800796e:	bf00      	nop
 8007970:	e004      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007972:	bf00      	nop
 8007974:	e002      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007976:	bf00      	nop
 8007978:	e000      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800797a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800797c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10b      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007984:	4ba0      	ldr	r3, [pc, #640]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007988:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800798c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007990:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007994:	4a9c      	ldr	r2, [pc, #624]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007996:	430b      	orrs	r3, r1
 8007998:	6593      	str	r3, [r2, #88]	; 0x58
 800799a:	e003      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800799c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80079a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	f002 0308 	and.w	r3, r2, #8
 80079b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079b4:	2300      	movs	r3, #0
 80079b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80079ba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80079be:	460b      	mov	r3, r1
 80079c0:	4313      	orrs	r3, r2
 80079c2:	d01e      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80079c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d0:	d10c      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80079d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d6:	3328      	adds	r3, #40	; 0x28
 80079d8:	2102      	movs	r1, #2
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fe38 	bl	8008650 <RCCEx_PLL3_Config>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80079ec:	4b86      	ldr	r3, [pc, #536]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079fc:	4a82      	ldr	r2, [pc, #520]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079fe:	430b      	orrs	r3, r1
 8007a00:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0a:	f002 0310 	and.w	r3, r2, #16
 8007a0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a12:	2300      	movs	r3, #0
 8007a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a18:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	d01e      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2e:	d10c      	bne.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a34:	3328      	adds	r3, #40	; 0x28
 8007a36:	2102      	movs	r1, #2
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 fe09 	bl	8008650 <RCCEx_PLL3_Config>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a4a:	4b6f      	ldr	r3, [pc, #444]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a5a:	4a6b      	ldr	r2, [pc, #428]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a68:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007a6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a6e:	2300      	movs	r3, #0
 8007a70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a72:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007a76:	460b      	mov	r3, r1
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	d03e      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a88:	d022      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007a8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a8e:	d81b      	bhi.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a98:	d00b      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007a9a:	e015      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 fd21 	bl	80084ec <RCCEx_PLL2_Config>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ab0:	e00f      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ab6:	3328      	adds	r3, #40	; 0x28
 8007ab8:	2102      	movs	r1, #2
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fdc8 	bl	8008650 <RCCEx_PLL3_Config>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ac6:	e004      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007ace:	e000      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ad2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10b      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ada:	4b4b      	ldr	r3, [pc, #300]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ade:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007aea:	4a47      	ldr	r2, [pc, #284]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007aec:	430b      	orrs	r3, r1
 8007aee:	6593      	str	r3, [r2, #88]	; 0x58
 8007af0:	e003      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007af6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007b06:	673b      	str	r3, [r7, #112]	; 0x70
 8007b08:	2300      	movs	r3, #0
 8007b0a:	677b      	str	r3, [r7, #116]	; 0x74
 8007b0c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007b10:	460b      	mov	r3, r1
 8007b12:	4313      	orrs	r3, r2
 8007b14:	d03b      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b22:	d01f      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007b24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b28:	d818      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b2e:	d003      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b34:	d007      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007b36:	e011      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b38:	4b33      	ldr	r3, [pc, #204]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	4a32      	ldr	r2, [pc, #200]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b44:	e00f      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b4a:	3328      	adds	r3, #40	; 0x28
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fd7e 	bl	8008650 <RCCEx_PLL3_Config>
 8007b54:	4603      	mov	r3, r0
 8007b56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b5a:	e004      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007b62:	e000      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10b      	bne.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b6e:	4b26      	ldr	r3, [pc, #152]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b72:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b7e:	4a22      	ldr	r2, [pc, #136]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b80:	430b      	orrs	r3, r1
 8007b82:	6553      	str	r3, [r2, #84]	; 0x54
 8007b84:	e003      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b8a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007b9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ba0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	d034      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bb8:	d007      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007bba:	e011      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bbc:	4b12      	ldr	r3, [pc, #72]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc0:	4a11      	ldr	r2, [pc, #68]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007bc8:	e00e      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bce:	3308      	adds	r3, #8
 8007bd0:	2102      	movs	r1, #2
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fc8a 	bl	80084ec <RCCEx_PLL2_Config>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007bde:	e003      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007be8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10d      	bne.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007bf0:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bfe:	4a02      	ldr	r2, [pc, #8]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c00:	430b      	orrs	r3, r1
 8007c02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c04:	e006      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007c06:	bf00      	nop
 8007c08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007c20:	663b      	str	r3, [r7, #96]	; 0x60
 8007c22:	2300      	movs	r3, #0
 8007c24:	667b      	str	r3, [r7, #100]	; 0x64
 8007c26:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	d00c      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c34:	3328      	adds	r3, #40	; 0x28
 8007c36:	2102      	movs	r1, #2
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fd09 	bl	8008650 <RCCEx_PLL3_Config>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c52:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007c56:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c58:	2300      	movs	r3, #0
 8007c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c5c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007c60:	460b      	mov	r3, r1
 8007c62:	4313      	orrs	r3, r2
 8007c64:	d036      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c70:	d018      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c76:	d811      	bhi.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c7c:	d014      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c82:	d80b      	bhi.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d011      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c8c:	d106      	bne.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c8e:	4bb7      	ldr	r3, [pc, #732]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	4ab6      	ldr	r2, [pc, #728]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007c9a:	e008      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007ca2:	e004      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ca4:	bf00      	nop
 8007ca6:	e002      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ca8:	bf00      	nop
 8007caa:	e000      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10a      	bne.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007cb6:	4bad      	ldr	r3, [pc, #692]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cc4:	4aa9      	ldr	r2, [pc, #676]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007cc6:	430b      	orrs	r3, r1
 8007cc8:	6553      	str	r3, [r2, #84]	; 0x54
 8007cca:	e003      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007cd0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007ce0:	653b      	str	r3, [r7, #80]	; 0x50
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ce6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007cea:	460b      	mov	r3, r1
 8007cec:	4313      	orrs	r3, r2
 8007cee:	d009      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007cf0:	4b9e      	ldr	r3, [pc, #632]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfe:	4a9b      	ldr	r2, [pc, #620]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d00:	430b      	orrs	r3, r1
 8007d02:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007d10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d12:	2300      	movs	r3, #0
 8007d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d16:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	d009      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d20:	4b92      	ldr	r3, [pc, #584]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d24:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d2e:	4a8f      	ldr	r2, [pc, #572]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d30:	430b      	orrs	r3, r1
 8007d32:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007d40:	643b      	str	r3, [r7, #64]	; 0x40
 8007d42:	2300      	movs	r3, #0
 8007d44:	647b      	str	r3, [r7, #68]	; 0x44
 8007d46:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	d00e      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d50:	4b86      	ldr	r3, [pc, #536]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	4a85      	ldr	r2, [pc, #532]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d5a:	6113      	str	r3, [r2, #16]
 8007d5c:	4b83      	ldr	r3, [pc, #524]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d5e:	6919      	ldr	r1, [r3, #16]
 8007d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d68:	4a80      	ldr	r2, [pc, #512]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d6a:	430b      	orrs	r3, r1
 8007d6c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d80:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007d84:	460b      	mov	r3, r1
 8007d86:	4313      	orrs	r3, r2
 8007d88:	d009      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d8a:	4b78      	ldr	r3, [pc, #480]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d98:	4a74      	ldr	r2, [pc, #464]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d9a:	430b      	orrs	r3, r1
 8007d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007daa:	633b      	str	r3, [r7, #48]	; 0x30
 8007dac:	2300      	movs	r3, #0
 8007dae:	637b      	str	r3, [r7, #52]	; 0x34
 8007db0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007db4:	460b      	mov	r3, r1
 8007db6:	4313      	orrs	r3, r2
 8007db8:	d00a      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007dba:	4b6c      	ldr	r3, [pc, #432]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dbe:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dca:	4a68      	ldr	r2, [pc, #416]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007dcc:	430b      	orrs	r3, r1
 8007dce:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	2100      	movs	r1, #0
 8007dda:	62b9      	str	r1, [r7, #40]	; 0x28
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007de2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007de6:	460b      	mov	r3, r1
 8007de8:	4313      	orrs	r3, r2
 8007dea:	d011      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df0:	3308      	adds	r3, #8
 8007df2:	2100      	movs	r1, #0
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 fb79 	bl	80084ec <RCCEx_PLL2_Config>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007e00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	2100      	movs	r1, #0
 8007e1a:	6239      	str	r1, [r7, #32]
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
 8007e22:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007e26:	460b      	mov	r3, r1
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	d011      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e30:	3308      	adds	r3, #8
 8007e32:	2101      	movs	r1, #1
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 fb59 	bl	80084ec <RCCEx_PLL2_Config>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007e40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d003      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	2100      	movs	r1, #0
 8007e5a:	61b9      	str	r1, [r7, #24]
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007e66:	460b      	mov	r3, r1
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	d011      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e70:	3308      	adds	r3, #8
 8007e72:	2102      	movs	r1, #2
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 fb39 	bl	80084ec <RCCEx_PLL2_Config>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007e80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	6139      	str	r1, [r7, #16]
 8007e9c:	f003 0308 	and.w	r3, r3, #8
 8007ea0:	617b      	str	r3, [r7, #20]
 8007ea2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	d011      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb0:	3328      	adds	r3, #40	; 0x28
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 fbcb 	bl	8008650 <RCCEx_PLL3_Config>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8007ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ecc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	2100      	movs	r1, #0
 8007eda:	60b9      	str	r1, [r7, #8]
 8007edc:	f003 0310 	and.w	r3, r3, #16
 8007ee0:	60fb      	str	r3, [r7, #12]
 8007ee2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	d011      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef0:	3328      	adds	r3, #40	; 0x28
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fbab 	bl	8008650 <RCCEx_PLL3_Config>
 8007efa:	4603      	mov	r3, r0
 8007efc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007f00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	2100      	movs	r1, #0
 8007f1a:	6039      	str	r1, [r7, #0]
 8007f1c:	f003 0320 	and.w	r3, r3, #32
 8007f20:	607b      	str	r3, [r7, #4]
 8007f22:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007f26:	460b      	mov	r3, r1
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	d011      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f30:	3328      	adds	r3, #40	; 0x28
 8007f32:	2102      	movs	r1, #2
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 fb8b 	bl	8008650 <RCCEx_PLL3_Config>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007f40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007f50:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	e000      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007f64:	46bd      	mov	sp, r7
 8007f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f6a:	bf00      	nop
 8007f6c:	58024400 	.word	0x58024400

08007f70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f74:	f7fe fe00 	bl	8006b78 <HAL_RCC_GetHCLKFreq>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	4b06      	ldr	r3, [pc, #24]	; (8007f94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	091b      	lsrs	r3, r3, #4
 8007f80:	f003 0307 	and.w	r3, r3, #7
 8007f84:	4904      	ldr	r1, [pc, #16]	; (8007f98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f86:	5ccb      	ldrb	r3, [r1, r3]
 8007f88:	f003 031f 	and.w	r3, r3, #31
 8007f8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	58024400 	.word	0x58024400
 8007f98:	08010fd0 	.word	0x08010fd0

08007f9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b089      	sub	sp, #36	; 0x24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fa4:	4ba1      	ldr	r3, [pc, #644]	; (800822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa8:	f003 0303 	and.w	r3, r3, #3
 8007fac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007fae:	4b9f      	ldr	r3, [pc, #636]	; (800822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb2:	0b1b      	lsrs	r3, r3, #12
 8007fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fb8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007fba:	4b9c      	ldr	r3, [pc, #624]	; (800822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbe:	091b      	lsrs	r3, r3, #4
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007fc6:	4b99      	ldr	r3, [pc, #612]	; (800822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fca:	08db      	lsrs	r3, r3, #3
 8007fcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	fb02 f303 	mul.w	r3, r2, r3
 8007fd6:	ee07 3a90 	vmov	s15, r3
 8007fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 8111 	beq.w	800820c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	f000 8083 	beq.w	80080f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	f200 80a1 	bhi.w	800813c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d003      	beq.n	8008008 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d056      	beq.n	80080b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008006:	e099      	b.n	800813c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008008:	4b88      	ldr	r3, [pc, #544]	; (800822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0320 	and.w	r3, r3, #32
 8008010:	2b00      	cmp	r3, #0
 8008012:	d02d      	beq.n	8008070 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008014:	4b85      	ldr	r3, [pc, #532]	; (800822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	08db      	lsrs	r3, r3, #3
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	4a84      	ldr	r2, [pc, #528]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008020:	fa22 f303 	lsr.w	r3, r2, r3
 8008024:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	ee07 3a90 	vmov	s15, r3
 800802c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800803e:	4b7b      	ldr	r3, [pc, #492]	; (800822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008046:	ee07 3a90 	vmov	s15, r3
 800804a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800804e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008052:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008234 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800805a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800805e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800806a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800806e:	e087      	b.n	8008180 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	ee07 3a90 	vmov	s15, r3
 8008076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800807a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800807e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008082:	4b6a      	ldr	r3, [pc, #424]	; (800822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800808a:	ee07 3a90 	vmov	s15, r3
 800808e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008092:	ed97 6a03 	vldr	s12, [r7, #12]
 8008096:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008234 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800809a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800809e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080b2:	e065      	b.n	8008180 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	ee07 3a90 	vmov	s15, r3
 80080ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800823c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080c6:	4b59      	ldr	r3, [pc, #356]	; (800822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008234 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080f6:	e043      	b.n	8008180 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	ee07 3a90 	vmov	s15, r3
 80080fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008102:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800810a:	4b48      	ldr	r3, [pc, #288]	; (800822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800810c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800811a:	ed97 6a03 	vldr	s12, [r7, #12]
 800811e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008234 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800812a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800812e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800813a:	e021      	b.n	8008180 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	ee07 3a90 	vmov	s15, r3
 8008142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008146:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800823c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800814a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800814e:	4b37      	ldr	r3, [pc, #220]	; (800822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800815e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008162:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008234 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800816a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800816e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800817e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008180:	4b2a      	ldr	r3, [pc, #168]	; (800822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008184:	0a5b      	lsrs	r3, r3, #9
 8008186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800818a:	ee07 3a90 	vmov	s15, r3
 800818e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008192:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008196:	ee37 7a87 	vadd.f32	s14, s15, s14
 800819a:	edd7 6a07 	vldr	s13, [r7, #28]
 800819e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081a6:	ee17 2a90 	vmov	r2, s15
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80081ae:	4b1f      	ldr	r3, [pc, #124]	; (800822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b2:	0c1b      	lsrs	r3, r3, #16
 80081b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081b8:	ee07 3a90 	vmov	s15, r3
 80081bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80081cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081d4:	ee17 2a90 	vmov	r2, s15
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80081dc:	4b13      	ldr	r3, [pc, #76]	; (800822c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e0:	0e1b      	lsrs	r3, r3, #24
 80081e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80081fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008202:	ee17 2a90 	vmov	r2, s15
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800820a:	e008      	b.n	800821e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	609a      	str	r2, [r3, #8]
}
 800821e:	bf00      	nop
 8008220:	3724      	adds	r7, #36	; 0x24
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	58024400 	.word	0x58024400
 8008230:	03d09000 	.word	0x03d09000
 8008234:	46000000 	.word	0x46000000
 8008238:	4c742400 	.word	0x4c742400
 800823c:	4a742400 	.word	0x4a742400
 8008240:	4bbebc20 	.word	0x4bbebc20

08008244 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008244:	b480      	push	{r7}
 8008246:	b089      	sub	sp, #36	; 0x24
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800824c:	4ba1      	ldr	r3, [pc, #644]	; (80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800824e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008250:	f003 0303 	and.w	r3, r3, #3
 8008254:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008256:	4b9f      	ldr	r3, [pc, #636]	; (80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825a:	0d1b      	lsrs	r3, r3, #20
 800825c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008260:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008262:	4b9c      	ldr	r3, [pc, #624]	; (80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008266:	0a1b      	lsrs	r3, r3, #8
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800826e:	4b99      	ldr	r3, [pc, #612]	; (80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008272:	08db      	lsrs	r3, r3, #3
 8008274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	fb02 f303 	mul.w	r3, r2, r3
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008286:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 8111 	beq.w	80084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	2b02      	cmp	r3, #2
 8008296:	f000 8083 	beq.w	80083a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	2b02      	cmp	r3, #2
 800829e:	f200 80a1 	bhi.w	80083e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d056      	beq.n	800835c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80082ae:	e099      	b.n	80083e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082b0:	4b88      	ldr	r3, [pc, #544]	; (80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0320 	and.w	r3, r3, #32
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d02d      	beq.n	8008318 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082bc:	4b85      	ldr	r3, [pc, #532]	; (80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	08db      	lsrs	r3, r3, #3
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	4a84      	ldr	r2, [pc, #528]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80082c8:	fa22 f303 	lsr.w	r3, r2, r3
 80082cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	ee07 3a90 	vmov	s15, r3
 80082d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	ee07 3a90 	vmov	s15, r3
 80082de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e6:	4b7b      	ldr	r3, [pc, #492]	; (80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80084dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800830a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800830e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008312:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008316:	e087      	b.n	8008428 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008322:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800832a:	4b6a      	ldr	r3, [pc, #424]	; (80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800832c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800833a:	ed97 6a03 	vldr	s12, [r7, #12]
 800833e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80084dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800834a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800834e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800835a:	e065      	b.n	8008428 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008366:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800836a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800836e:	4b59      	ldr	r3, [pc, #356]	; (80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008382:	eddf 5a56 	vldr	s11, [pc, #344]	; 80084dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800838a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800838e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800839a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800839e:	e043      	b.n	8008428 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	ee07 3a90 	vmov	s15, r3
 80083a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80084e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80083ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083b2:	4b48      	ldr	r3, [pc, #288]	; (80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ba:	ee07 3a90 	vmov	s15, r3
 80083be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80084dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083e2:	e021      	b.n	8008428 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083f6:	4b37      	ldr	r3, [pc, #220]	; (80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008406:	ed97 6a03 	vldr	s12, [r7, #12]
 800840a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80084dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800840e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800841a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800841e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008426:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008428:	4b2a      	ldr	r3, [pc, #168]	; (80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800842a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842c:	0a5b      	lsrs	r3, r3, #9
 800842e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800843e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008442:	edd7 6a07 	vldr	s13, [r7, #28]
 8008446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800844a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800844e:	ee17 2a90 	vmov	r2, s15
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008456:	4b1f      	ldr	r3, [pc, #124]	; (80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	0c1b      	lsrs	r3, r3, #16
 800845c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008460:	ee07 3a90 	vmov	s15, r3
 8008464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008468:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800846c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008470:	edd7 6a07 	vldr	s13, [r7, #28]
 8008474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800847c:	ee17 2a90 	vmov	r2, s15
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008484:	4b13      	ldr	r3, [pc, #76]	; (80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008488:	0e1b      	lsrs	r3, r3, #24
 800848a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800849a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800849e:	edd7 6a07 	vldr	s13, [r7, #28]
 80084a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084aa:	ee17 2a90 	vmov	r2, s15
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80084b2:	e008      	b.n	80084c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	609a      	str	r2, [r3, #8]
}
 80084c6:	bf00      	nop
 80084c8:	3724      	adds	r7, #36	; 0x24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	58024400 	.word	0x58024400
 80084d8:	03d09000 	.word	0x03d09000
 80084dc:	46000000 	.word	0x46000000
 80084e0:	4c742400 	.word	0x4c742400
 80084e4:	4a742400 	.word	0x4a742400
 80084e8:	4bbebc20 	.word	0x4bbebc20

080084ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084fa:	4b53      	ldr	r3, [pc, #332]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 80084fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fe:	f003 0303 	and.w	r3, r3, #3
 8008502:	2b03      	cmp	r3, #3
 8008504:	d101      	bne.n	800850a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e099      	b.n	800863e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800850a:	4b4f      	ldr	r3, [pc, #316]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a4e      	ldr	r2, [pc, #312]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 8008510:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008516:	f7fb fd7d 	bl	8004014 <HAL_GetTick>
 800851a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800851c:	e008      	b.n	8008530 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800851e:	f7fb fd79 	bl	8004014 <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	2b02      	cmp	r3, #2
 800852a:	d901      	bls.n	8008530 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e086      	b.n	800863e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008530:	4b45      	ldr	r3, [pc, #276]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1f0      	bne.n	800851e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800853c:	4b42      	ldr	r3, [pc, #264]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 800853e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008540:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	031b      	lsls	r3, r3, #12
 800854a:	493f      	ldr	r1, [pc, #252]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 800854c:	4313      	orrs	r3, r2
 800854e:	628b      	str	r3, [r1, #40]	; 0x28
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	3b01      	subs	r3, #1
 8008556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	3b01      	subs	r3, #1
 8008560:	025b      	lsls	r3, r3, #9
 8008562:	b29b      	uxth	r3, r3
 8008564:	431a      	orrs	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	3b01      	subs	r3, #1
 800856c:	041b      	lsls	r3, r3, #16
 800856e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008572:	431a      	orrs	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	3b01      	subs	r3, #1
 800857a:	061b      	lsls	r3, r3, #24
 800857c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008580:	4931      	ldr	r1, [pc, #196]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 8008582:	4313      	orrs	r3, r2
 8008584:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008586:	4b30      	ldr	r3, [pc, #192]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 8008588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	492d      	ldr	r1, [pc, #180]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 8008594:	4313      	orrs	r3, r2
 8008596:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008598:	4b2b      	ldr	r3, [pc, #172]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	f023 0220 	bic.w	r2, r3, #32
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	4928      	ldr	r1, [pc, #160]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80085aa:	4b27      	ldr	r3, [pc, #156]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	4a26      	ldr	r2, [pc, #152]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 80085b0:	f023 0310 	bic.w	r3, r3, #16
 80085b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80085b6:	4b24      	ldr	r3, [pc, #144]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 80085b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085ba:	4b24      	ldr	r3, [pc, #144]	; (800864c <RCCEx_PLL2_Config+0x160>)
 80085bc:	4013      	ands	r3, r2
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	69d2      	ldr	r2, [r2, #28]
 80085c2:	00d2      	lsls	r2, r2, #3
 80085c4:	4920      	ldr	r1, [pc, #128]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80085ca:	4b1f      	ldr	r3, [pc, #124]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 80085cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ce:	4a1e      	ldr	r2, [pc, #120]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 80085d0:	f043 0310 	orr.w	r3, r3, #16
 80085d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d106      	bne.n	80085ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80085dc:	4b1a      	ldr	r3, [pc, #104]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 80085de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e0:	4a19      	ldr	r2, [pc, #100]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 80085e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085e8:	e00f      	b.n	800860a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d106      	bne.n	80085fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80085f0:	4b15      	ldr	r3, [pc, #84]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 80085f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f4:	4a14      	ldr	r2, [pc, #80]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 80085f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085fc:	e005      	b.n	800860a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80085fe:	4b12      	ldr	r3, [pc, #72]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 8008600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008602:	4a11      	ldr	r2, [pc, #68]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 8008604:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008608:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800860a:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a0e      	ldr	r2, [pc, #56]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 8008610:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008616:	f7fb fcfd 	bl	8004014 <HAL_GetTick>
 800861a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800861c:	e008      	b.n	8008630 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800861e:	f7fb fcf9 	bl	8004014 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e006      	b.n	800863e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008630:	4b05      	ldr	r3, [pc, #20]	; (8008648 <RCCEx_PLL2_Config+0x15c>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d0f0      	beq.n	800861e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800863c:	7bfb      	ldrb	r3, [r7, #15]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	58024400 	.word	0x58024400
 800864c:	ffff0007 	.word	0xffff0007

08008650 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800865e:	4b53      	ldr	r3, [pc, #332]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008662:	f003 0303 	and.w	r3, r3, #3
 8008666:	2b03      	cmp	r3, #3
 8008668:	d101      	bne.n	800866e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e099      	b.n	80087a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800866e:	4b4f      	ldr	r3, [pc, #316]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a4e      	ldr	r2, [pc, #312]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800867a:	f7fb fccb 	bl	8004014 <HAL_GetTick>
 800867e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008680:	e008      	b.n	8008694 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008682:	f7fb fcc7 	bl	8004014 <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	2b02      	cmp	r3, #2
 800868e:	d901      	bls.n	8008694 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e086      	b.n	80087a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008694:	4b45      	ldr	r3, [pc, #276]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1f0      	bne.n	8008682 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80086a0:	4b42      	ldr	r3, [pc, #264]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 80086a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	051b      	lsls	r3, r3, #20
 80086ae:	493f      	ldr	r1, [pc, #252]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	628b      	str	r3, [r1, #40]	; 0x28
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	025b      	lsls	r3, r3, #9
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	431a      	orrs	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	3b01      	subs	r3, #1
 80086d0:	041b      	lsls	r3, r3, #16
 80086d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086d6:	431a      	orrs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	3b01      	subs	r3, #1
 80086de:	061b      	lsls	r3, r3, #24
 80086e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80086e4:	4931      	ldr	r1, [pc, #196]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80086ea:	4b30      	ldr	r3, [pc, #192]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 80086ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	492d      	ldr	r1, [pc, #180]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80086fc:	4b2b      	ldr	r3, [pc, #172]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 80086fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008700:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	4928      	ldr	r1, [pc, #160]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 800870a:	4313      	orrs	r3, r2
 800870c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800870e:	4b27      	ldr	r3, [pc, #156]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008712:	4a26      	ldr	r2, [pc, #152]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008718:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800871a:	4b24      	ldr	r3, [pc, #144]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 800871c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800871e:	4b24      	ldr	r3, [pc, #144]	; (80087b0 <RCCEx_PLL3_Config+0x160>)
 8008720:	4013      	ands	r3, r2
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	69d2      	ldr	r2, [r2, #28]
 8008726:	00d2      	lsls	r2, r2, #3
 8008728:	4920      	ldr	r1, [pc, #128]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 800872a:	4313      	orrs	r3, r2
 800872c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800872e:	4b1f      	ldr	r3, [pc, #124]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008732:	4a1e      	ldr	r2, [pc, #120]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008738:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d106      	bne.n	800874e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008740:	4b1a      	ldr	r3, [pc, #104]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008744:	4a19      	ldr	r2, [pc, #100]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008746:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800874a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800874c:	e00f      	b.n	800876e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d106      	bne.n	8008762 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008754:	4b15      	ldr	r3, [pc, #84]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	4a14      	ldr	r2, [pc, #80]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 800875a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800875e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008760:	e005      	b.n	800876e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008762:	4b12      	ldr	r3, [pc, #72]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008766:	4a11      	ldr	r2, [pc, #68]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008768:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800876c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800876e:	4b0f      	ldr	r3, [pc, #60]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a0e      	ldr	r2, [pc, #56]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800877a:	f7fb fc4b 	bl	8004014 <HAL_GetTick>
 800877e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008780:	e008      	b.n	8008794 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008782:	f7fb fc47 	bl	8004014 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d901      	bls.n	8008794 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e006      	b.n	80087a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008794:	4b05      	ldr	r3, [pc, #20]	; (80087ac <RCCEx_PLL3_Config+0x15c>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0f0      	beq.n	8008782 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	58024400 	.word	0x58024400
 80087b0:	ffff0007 	.word	0xffff0007

080087b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e049      	b.n	800885a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d106      	bne.n	80087e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7fb f9ee 	bl	8003bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2202      	movs	r2, #2
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3304      	adds	r3, #4
 80087f0:	4619      	mov	r1, r3
 80087f2:	4610      	mov	r0, r2
 80087f4:	f000 fafc 	bl	8008df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008872:	b2db      	uxtb	r3, r3
 8008874:	2b01      	cmp	r3, #1
 8008876:	d001      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e05e      	b.n	800893a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2202      	movs	r2, #2
 8008880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68da      	ldr	r2, [r3, #12]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f042 0201 	orr.w	r2, r2, #1
 8008892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a2b      	ldr	r2, [pc, #172]	; (8008948 <HAL_TIM_Base_Start_IT+0xe4>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d02c      	beq.n	80088f8 <HAL_TIM_Base_Start_IT+0x94>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088a6:	d027      	beq.n	80088f8 <HAL_TIM_Base_Start_IT+0x94>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a27      	ldr	r2, [pc, #156]	; (800894c <HAL_TIM_Base_Start_IT+0xe8>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d022      	beq.n	80088f8 <HAL_TIM_Base_Start_IT+0x94>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a26      	ldr	r2, [pc, #152]	; (8008950 <HAL_TIM_Base_Start_IT+0xec>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d01d      	beq.n	80088f8 <HAL_TIM_Base_Start_IT+0x94>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a24      	ldr	r2, [pc, #144]	; (8008954 <HAL_TIM_Base_Start_IT+0xf0>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d018      	beq.n	80088f8 <HAL_TIM_Base_Start_IT+0x94>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a23      	ldr	r2, [pc, #140]	; (8008958 <HAL_TIM_Base_Start_IT+0xf4>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d013      	beq.n	80088f8 <HAL_TIM_Base_Start_IT+0x94>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a21      	ldr	r2, [pc, #132]	; (800895c <HAL_TIM_Base_Start_IT+0xf8>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d00e      	beq.n	80088f8 <HAL_TIM_Base_Start_IT+0x94>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a20      	ldr	r2, [pc, #128]	; (8008960 <HAL_TIM_Base_Start_IT+0xfc>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d009      	beq.n	80088f8 <HAL_TIM_Base_Start_IT+0x94>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a1e      	ldr	r2, [pc, #120]	; (8008964 <HAL_TIM_Base_Start_IT+0x100>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d004      	beq.n	80088f8 <HAL_TIM_Base_Start_IT+0x94>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a1d      	ldr	r2, [pc, #116]	; (8008968 <HAL_TIM_Base_Start_IT+0x104>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d115      	bne.n	8008924 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	689a      	ldr	r2, [r3, #8]
 80088fe:	4b1b      	ldr	r3, [pc, #108]	; (800896c <HAL_TIM_Base_Start_IT+0x108>)
 8008900:	4013      	ands	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b06      	cmp	r3, #6
 8008908:	d015      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0xd2>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008910:	d011      	beq.n	8008936 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f042 0201 	orr.w	r2, r2, #1
 8008920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008922:	e008      	b.n	8008936 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f042 0201 	orr.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	e000      	b.n	8008938 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008936:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	40010000 	.word	0x40010000
 800894c:	40000400 	.word	0x40000400
 8008950:	40000800 	.word	0x40000800
 8008954:	40000c00 	.word	0x40000c00
 8008958:	40010400 	.word	0x40010400
 800895c:	40001800 	.word	0x40001800
 8008960:	40014000 	.word	0x40014000
 8008964:	4000e000 	.word	0x4000e000
 8008968:	4000e400 	.word	0x4000e400
 800896c:	00010007 	.word	0x00010007

08008970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	f003 0302 	and.w	r3, r3, #2
 8008982:	2b02      	cmp	r3, #2
 8008984:	d122      	bne.n	80089cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b02      	cmp	r3, #2
 8008992:	d11b      	bne.n	80089cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f06f 0202 	mvn.w	r2, #2
 800899c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	f003 0303 	and.w	r3, r3, #3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f9fe 	bl	8008db4 <HAL_TIM_IC_CaptureCallback>
 80089b8:	e005      	b.n	80089c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f9f0 	bl	8008da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fa01 	bl	8008dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	f003 0304 	and.w	r3, r3, #4
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d122      	bne.n	8008a20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	f003 0304 	and.w	r3, r3, #4
 80089e4:	2b04      	cmp	r3, #4
 80089e6:	d11b      	bne.n	8008a20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f06f 0204 	mvn.w	r2, #4
 80089f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2202      	movs	r2, #2
 80089f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f9d4 	bl	8008db4 <HAL_TIM_IC_CaptureCallback>
 8008a0c:	e005      	b.n	8008a1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f9c6 	bl	8008da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f9d7 	bl	8008dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	f003 0308 	and.w	r3, r3, #8
 8008a2a:	2b08      	cmp	r3, #8
 8008a2c:	d122      	bne.n	8008a74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f003 0308 	and.w	r3, r3, #8
 8008a38:	2b08      	cmp	r3, #8
 8008a3a:	d11b      	bne.n	8008a74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f06f 0208 	mvn.w	r2, #8
 8008a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2204      	movs	r2, #4
 8008a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	f003 0303 	and.w	r3, r3, #3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f9aa 	bl	8008db4 <HAL_TIM_IC_CaptureCallback>
 8008a60:	e005      	b.n	8008a6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f99c 	bl	8008da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f9ad 	bl	8008dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	f003 0310 	and.w	r3, r3, #16
 8008a7e:	2b10      	cmp	r3, #16
 8008a80:	d122      	bne.n	8008ac8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f003 0310 	and.w	r3, r3, #16
 8008a8c:	2b10      	cmp	r3, #16
 8008a8e:	d11b      	bne.n	8008ac8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f06f 0210 	mvn.w	r2, #16
 8008a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2208      	movs	r2, #8
 8008a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f980 	bl	8008db4 <HAL_TIM_IC_CaptureCallback>
 8008ab4:	e005      	b.n	8008ac2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f972 	bl	8008da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f983 	bl	8008dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d10e      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d107      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f06f 0201 	mvn.w	r2, #1
 8008aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7fa fd0a 	bl	8003508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afe:	2b80      	cmp	r3, #128	; 0x80
 8008b00:	d10e      	bne.n	8008b20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b0c:	2b80      	cmp	r3, #128	; 0x80
 8008b0e:	d107      	bne.n	8008b20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fb52 	bl	80091c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b2e:	d10e      	bne.n	8008b4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b3a:	2b80      	cmp	r3, #128	; 0x80
 8008b3c:	d107      	bne.n	8008b4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fb45 	bl	80091d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b58:	2b40      	cmp	r3, #64	; 0x40
 8008b5a:	d10e      	bne.n	8008b7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b66:	2b40      	cmp	r3, #64	; 0x40
 8008b68:	d107      	bne.n	8008b7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f931 	bl	8008ddc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	f003 0320 	and.w	r3, r3, #32
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	d10e      	bne.n	8008ba6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	f003 0320 	and.w	r3, r3, #32
 8008b92:	2b20      	cmp	r3, #32
 8008b94:	d107      	bne.n	8008ba6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f06f 0220 	mvn.w	r2, #32
 8008b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fb05 	bl	80091b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ba6:	bf00      	nop
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
	...

08008bb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d101      	bne.n	8008bcc <HAL_TIM_ConfigClockSource+0x1c>
 8008bc8:	2302      	movs	r3, #2
 8008bca:	e0dc      	b.n	8008d86 <HAL_TIM_ConfigClockSource+0x1d6>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	4b6a      	ldr	r3, [pc, #424]	; (8008d90 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008be8:	4013      	ands	r3, r2
 8008bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a64      	ldr	r2, [pc, #400]	; (8008d94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	f000 80a9 	beq.w	8008d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c08:	4a62      	ldr	r2, [pc, #392]	; (8008d94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	f200 80ae 	bhi.w	8008d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c10:	4a61      	ldr	r2, [pc, #388]	; (8008d98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	f000 80a1 	beq.w	8008d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c18:	4a5f      	ldr	r2, [pc, #380]	; (8008d98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	f200 80a6 	bhi.w	8008d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c20:	4a5e      	ldr	r2, [pc, #376]	; (8008d9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	f000 8099 	beq.w	8008d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c28:	4a5c      	ldr	r2, [pc, #368]	; (8008d9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	f200 809e 	bhi.w	8008d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c34:	f000 8091 	beq.w	8008d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c3c:	f200 8096 	bhi.w	8008d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c44:	f000 8089 	beq.w	8008d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c4c:	f200 808e 	bhi.w	8008d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c54:	d03e      	beq.n	8008cd4 <HAL_TIM_ConfigClockSource+0x124>
 8008c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c5a:	f200 8087 	bhi.w	8008d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c62:	f000 8086 	beq.w	8008d72 <HAL_TIM_ConfigClockSource+0x1c2>
 8008c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c6a:	d87f      	bhi.n	8008d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c6c:	2b70      	cmp	r3, #112	; 0x70
 8008c6e:	d01a      	beq.n	8008ca6 <HAL_TIM_ConfigClockSource+0xf6>
 8008c70:	2b70      	cmp	r3, #112	; 0x70
 8008c72:	d87b      	bhi.n	8008d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c74:	2b60      	cmp	r3, #96	; 0x60
 8008c76:	d050      	beq.n	8008d1a <HAL_TIM_ConfigClockSource+0x16a>
 8008c78:	2b60      	cmp	r3, #96	; 0x60
 8008c7a:	d877      	bhi.n	8008d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c7c:	2b50      	cmp	r3, #80	; 0x50
 8008c7e:	d03c      	beq.n	8008cfa <HAL_TIM_ConfigClockSource+0x14a>
 8008c80:	2b50      	cmp	r3, #80	; 0x50
 8008c82:	d873      	bhi.n	8008d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c84:	2b40      	cmp	r3, #64	; 0x40
 8008c86:	d058      	beq.n	8008d3a <HAL_TIM_ConfigClockSource+0x18a>
 8008c88:	2b40      	cmp	r3, #64	; 0x40
 8008c8a:	d86f      	bhi.n	8008d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c8c:	2b30      	cmp	r3, #48	; 0x30
 8008c8e:	d064      	beq.n	8008d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c90:	2b30      	cmp	r3, #48	; 0x30
 8008c92:	d86b      	bhi.n	8008d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	d060      	beq.n	8008d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008c98:	2b20      	cmp	r3, #32
 8008c9a:	d867      	bhi.n	8008d6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d05c      	beq.n	8008d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008ca0:	2b10      	cmp	r3, #16
 8008ca2:	d05a      	beq.n	8008d5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008ca4:	e062      	b.n	8008d6c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008cb6:	f000 f9bf 	bl	8009038 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008cc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	609a      	str	r2, [r3, #8]
      break;
 8008cd2:	e04f      	b.n	8008d74 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ce4:	f000 f9a8 	bl	8009038 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689a      	ldr	r2, [r3, #8]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cf6:	609a      	str	r2, [r3, #8]
      break;
 8008cf8:	e03c      	b.n	8008d74 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d06:	461a      	mov	r2, r3
 8008d08:	f000 f918 	bl	8008f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2150      	movs	r1, #80	; 0x50
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 f972 	bl	8008ffc <TIM_ITRx_SetConfig>
      break;
 8008d18:	e02c      	b.n	8008d74 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d26:	461a      	mov	r2, r3
 8008d28:	f000 f937 	bl	8008f9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2160      	movs	r1, #96	; 0x60
 8008d32:	4618      	mov	r0, r3
 8008d34:	f000 f962 	bl	8008ffc <TIM_ITRx_SetConfig>
      break;
 8008d38:	e01c      	b.n	8008d74 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d46:	461a      	mov	r2, r3
 8008d48:	f000 f8f8 	bl	8008f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2140      	movs	r1, #64	; 0x40
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 f952 	bl	8008ffc <TIM_ITRx_SetConfig>
      break;
 8008d58:	e00c      	b.n	8008d74 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4619      	mov	r1, r3
 8008d64:	4610      	mov	r0, r2
 8008d66:	f000 f949 	bl	8008ffc <TIM_ITRx_SetConfig>
      break;
 8008d6a:	e003      	b.n	8008d74 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d70:	e000      	b.n	8008d74 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008d72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	ffceff88 	.word	0xffceff88
 8008d94:	00100040 	.word	0x00100040
 8008d98:	00100030 	.word	0x00100030
 8008d9c:	00100020 	.word	0x00100020

08008da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a44      	ldr	r2, [pc, #272]	; (8008f14 <TIM_Base_SetConfig+0x124>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d013      	beq.n	8008e30 <TIM_Base_SetConfig+0x40>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e0e:	d00f      	beq.n	8008e30 <TIM_Base_SetConfig+0x40>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a41      	ldr	r2, [pc, #260]	; (8008f18 <TIM_Base_SetConfig+0x128>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00b      	beq.n	8008e30 <TIM_Base_SetConfig+0x40>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a40      	ldr	r2, [pc, #256]	; (8008f1c <TIM_Base_SetConfig+0x12c>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d007      	beq.n	8008e30 <TIM_Base_SetConfig+0x40>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a3f      	ldr	r2, [pc, #252]	; (8008f20 <TIM_Base_SetConfig+0x130>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d003      	beq.n	8008e30 <TIM_Base_SetConfig+0x40>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a3e      	ldr	r2, [pc, #248]	; (8008f24 <TIM_Base_SetConfig+0x134>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d108      	bne.n	8008e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a33      	ldr	r2, [pc, #204]	; (8008f14 <TIM_Base_SetConfig+0x124>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d027      	beq.n	8008e9a <TIM_Base_SetConfig+0xaa>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e50:	d023      	beq.n	8008e9a <TIM_Base_SetConfig+0xaa>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a30      	ldr	r2, [pc, #192]	; (8008f18 <TIM_Base_SetConfig+0x128>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d01f      	beq.n	8008e9a <TIM_Base_SetConfig+0xaa>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a2f      	ldr	r2, [pc, #188]	; (8008f1c <TIM_Base_SetConfig+0x12c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d01b      	beq.n	8008e9a <TIM_Base_SetConfig+0xaa>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a2e      	ldr	r2, [pc, #184]	; (8008f20 <TIM_Base_SetConfig+0x130>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d017      	beq.n	8008e9a <TIM_Base_SetConfig+0xaa>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a2d      	ldr	r2, [pc, #180]	; (8008f24 <TIM_Base_SetConfig+0x134>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d013      	beq.n	8008e9a <TIM_Base_SetConfig+0xaa>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a2c      	ldr	r2, [pc, #176]	; (8008f28 <TIM_Base_SetConfig+0x138>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d00f      	beq.n	8008e9a <TIM_Base_SetConfig+0xaa>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a2b      	ldr	r2, [pc, #172]	; (8008f2c <TIM_Base_SetConfig+0x13c>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d00b      	beq.n	8008e9a <TIM_Base_SetConfig+0xaa>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a2a      	ldr	r2, [pc, #168]	; (8008f30 <TIM_Base_SetConfig+0x140>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d007      	beq.n	8008e9a <TIM_Base_SetConfig+0xaa>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a29      	ldr	r2, [pc, #164]	; (8008f34 <TIM_Base_SetConfig+0x144>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d003      	beq.n	8008e9a <TIM_Base_SetConfig+0xaa>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a28      	ldr	r2, [pc, #160]	; (8008f38 <TIM_Base_SetConfig+0x148>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d108      	bne.n	8008eac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	695b      	ldr	r3, [r3, #20]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	689a      	ldr	r2, [r3, #8]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a10      	ldr	r2, [pc, #64]	; (8008f14 <TIM_Base_SetConfig+0x124>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d00f      	beq.n	8008ef8 <TIM_Base_SetConfig+0x108>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a12      	ldr	r2, [pc, #72]	; (8008f24 <TIM_Base_SetConfig+0x134>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d00b      	beq.n	8008ef8 <TIM_Base_SetConfig+0x108>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a11      	ldr	r2, [pc, #68]	; (8008f28 <TIM_Base_SetConfig+0x138>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d007      	beq.n	8008ef8 <TIM_Base_SetConfig+0x108>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a10      	ldr	r2, [pc, #64]	; (8008f2c <TIM_Base_SetConfig+0x13c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d003      	beq.n	8008ef8 <TIM_Base_SetConfig+0x108>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a0f      	ldr	r2, [pc, #60]	; (8008f30 <TIM_Base_SetConfig+0x140>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d103      	bne.n	8008f00 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	691a      	ldr	r2, [r3, #16]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	615a      	str	r2, [r3, #20]
}
 8008f06:	bf00      	nop
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	40010000 	.word	0x40010000
 8008f18:	40000400 	.word	0x40000400
 8008f1c:	40000800 	.word	0x40000800
 8008f20:	40000c00 	.word	0x40000c00
 8008f24:	40010400 	.word	0x40010400
 8008f28:	40014000 	.word	0x40014000
 8008f2c:	40014400 	.word	0x40014400
 8008f30:	40014800 	.word	0x40014800
 8008f34:	4000e000 	.word	0x4000e000
 8008f38:	4000e400 	.word	0x4000e400

08008f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b087      	sub	sp, #28
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6a1b      	ldr	r3, [r3, #32]
 8008f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	f023 0201 	bic.w	r2, r3, #1
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	011b      	lsls	r3, r3, #4
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f023 030a 	bic.w	r3, r3, #10
 8008f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	621a      	str	r2, [r3, #32]
}
 8008f8e:	bf00      	nop
 8008f90:	371c      	adds	r7, #28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b087      	sub	sp, #28
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	60f8      	str	r0, [r7, #12]
 8008fa2:	60b9      	str	r1, [r7, #8]
 8008fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	f023 0210 	bic.w	r2, r3, #16
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6a1b      	ldr	r3, [r3, #32]
 8008fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	031b      	lsls	r3, r3, #12
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008fd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	011b      	lsls	r3, r3, #4
 8008fdc:	693a      	ldr	r2, [r7, #16]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	621a      	str	r2, [r3, #32]
}
 8008fee:	bf00      	nop
 8008ff0:	371c      	adds	r7, #28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
	...

08008ffc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	4b09      	ldr	r3, [pc, #36]	; (8009034 <TIM_ITRx_SetConfig+0x38>)
 8009010:	4013      	ands	r3, r2
 8009012:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009014:	683a      	ldr	r2, [r7, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	4313      	orrs	r3, r2
 800901a:	f043 0307 	orr.w	r3, r3, #7
 800901e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	609a      	str	r2, [r3, #8]
}
 8009026:	bf00      	nop
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	ffcfff8f 	.word	0xffcfff8f

08009038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009038:	b480      	push	{r7}
 800903a:	b087      	sub	sp, #28
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
 8009044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	021a      	lsls	r2, r3, #8
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	431a      	orrs	r2, r3
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	4313      	orrs	r3, r2
 8009060:	697a      	ldr	r2, [r7, #20]
 8009062:	4313      	orrs	r3, r2
 8009064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	609a      	str	r2, [r3, #8]
}
 800906c:	bf00      	nop
 800906e:	371c      	adds	r7, #28
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009088:	2b01      	cmp	r3, #1
 800908a:	d101      	bne.n	8009090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800908c:	2302      	movs	r3, #2
 800908e:	e077      	b.n	8009180 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2202      	movs	r2, #2
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a35      	ldr	r2, [pc, #212]	; (800918c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d004      	beq.n	80090c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a34      	ldr	r2, [pc, #208]	; (8009190 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d108      	bne.n	80090d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a25      	ldr	r2, [pc, #148]	; (800918c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d02c      	beq.n	8009154 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009102:	d027      	beq.n	8009154 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a22      	ldr	r2, [pc, #136]	; (8009194 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d022      	beq.n	8009154 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a21      	ldr	r2, [pc, #132]	; (8009198 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d01d      	beq.n	8009154 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a1f      	ldr	r2, [pc, #124]	; (800919c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d018      	beq.n	8009154 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a1a      	ldr	r2, [pc, #104]	; (8009190 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d013      	beq.n	8009154 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a1b      	ldr	r2, [pc, #108]	; (80091a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d00e      	beq.n	8009154 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a1a      	ldr	r2, [pc, #104]	; (80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d009      	beq.n	8009154 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a18      	ldr	r2, [pc, #96]	; (80091a8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d004      	beq.n	8009154 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a17      	ldr	r2, [pc, #92]	; (80091ac <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d10c      	bne.n	800916e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800915a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	4313      	orrs	r3, r2
 8009164:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3714      	adds	r7, #20
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr
 800918c:	40010000 	.word	0x40010000
 8009190:	40010400 	.word	0x40010400
 8009194:	40000400 	.word	0x40000400
 8009198:	40000800 	.word	0x40000800
 800919c:	40000c00 	.word	0x40000c00
 80091a0:	40001800 	.word	0x40001800
 80091a4:	40014000 	.word	0x40014000
 80091a8:	4000e000 	.word	0x4000e000
 80091ac:	4000e400 	.word	0x4000e400

080091b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e042      	b.n	8009284 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009204:	2b00      	cmp	r3, #0
 8009206:	d106      	bne.n	8009216 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7fa fcf9 	bl	8003c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2224      	movs	r2, #36	; 0x24
 800921a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f022 0201 	bic.w	r2, r2, #1
 800922c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f8ba 	bl	80093a8 <UART_SetConfig>
 8009234:	4603      	mov	r3, r0
 8009236:	2b01      	cmp	r3, #1
 8009238:	d101      	bne.n	800923e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e022      	b.n	8009284 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009242:	2b00      	cmp	r3, #0
 8009244:	d002      	beq.n	800924c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 ff1a 	bl	800a080 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800925a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800926a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0201 	orr.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 ffa1 	bl	800a1c4 <UART_CheckIdleState>
 8009282:	4603      	mov	r3, r0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	; 0x28
 8009290:	af02      	add	r7, sp, #8
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	603b      	str	r3, [r7, #0]
 8009298:	4613      	mov	r3, r2
 800929a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a2:	2b20      	cmp	r3, #32
 80092a4:	d17b      	bne.n	800939e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <HAL_UART_Transmit+0x26>
 80092ac:	88fb      	ldrh	r3, [r7, #6]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e074      	b.n	80093a0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2221      	movs	r2, #33	; 0x21
 80092c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092c6:	f7fa fea5 	bl	8004014 <HAL_GetTick>
 80092ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	88fa      	ldrh	r2, [r7, #6]
 80092d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	88fa      	ldrh	r2, [r7, #6]
 80092d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092e4:	d108      	bne.n	80092f8 <HAL_UART_Transmit+0x6c>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d104      	bne.n	80092f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80092ee:	2300      	movs	r3, #0
 80092f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	61bb      	str	r3, [r7, #24]
 80092f6:	e003      	b.n	8009300 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092fc:	2300      	movs	r3, #0
 80092fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009300:	e030      	b.n	8009364 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	2200      	movs	r2, #0
 800930a:	2180      	movs	r1, #128	; 0x80
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f001 f803 	bl	800a318 <UART_WaitOnFlagUntilTimeout>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d005      	beq.n	8009324 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2220      	movs	r2, #32
 800931c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009320:	2303      	movs	r3, #3
 8009322:	e03d      	b.n	80093a0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10b      	bne.n	8009342 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	881b      	ldrh	r3, [r3, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009338:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	3302      	adds	r3, #2
 800933e:	61bb      	str	r3, [r7, #24]
 8009340:	e007      	b.n	8009352 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	781a      	ldrb	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	3301      	adds	r3, #1
 8009350:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009358:	b29b      	uxth	r3, r3
 800935a:	3b01      	subs	r3, #1
 800935c:	b29a      	uxth	r2, r3
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800936a:	b29b      	uxth	r3, r3
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1c8      	bne.n	8009302 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	2200      	movs	r2, #0
 8009378:	2140      	movs	r1, #64	; 0x40
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 ffcc 	bl	800a318 <UART_WaitOnFlagUntilTimeout>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d005      	beq.n	8009392 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2220      	movs	r2, #32
 800938a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e006      	b.n	80093a0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2220      	movs	r2, #32
 8009396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	e000      	b.n	80093a0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800939e:	2302      	movs	r3, #2
  }
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3720      	adds	r7, #32
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093ac:	b092      	sub	sp, #72	; 0x48
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	431a      	orrs	r2, r3
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	431a      	orrs	r2, r3
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	69db      	ldr	r3, [r3, #28]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	4bbe      	ldr	r3, [pc, #760]	; (80096d0 <UART_SetConfig+0x328>)
 80093d8:	4013      	ands	r3, r2
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	6812      	ldr	r2, [r2, #0]
 80093de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093e0:	430b      	orrs	r3, r1
 80093e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	68da      	ldr	r2, [r3, #12]
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4ab3      	ldr	r2, [pc, #716]	; (80096d4 <UART_SetConfig+0x32c>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d004      	beq.n	8009414 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009410:	4313      	orrs	r3, r2
 8009412:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	689a      	ldr	r2, [r3, #8]
 800941a:	4baf      	ldr	r3, [pc, #700]	; (80096d8 <UART_SetConfig+0x330>)
 800941c:	4013      	ands	r3, r2
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	6812      	ldr	r2, [r2, #0]
 8009422:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009424:	430b      	orrs	r3, r1
 8009426:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942e:	f023 010f 	bic.w	r1, r3, #15
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4aa6      	ldr	r2, [pc, #664]	; (80096dc <UART_SetConfig+0x334>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d177      	bne.n	8009538 <UART_SetConfig+0x190>
 8009448:	4ba5      	ldr	r3, [pc, #660]	; (80096e0 <UART_SetConfig+0x338>)
 800944a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800944c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009450:	2b28      	cmp	r3, #40	; 0x28
 8009452:	d86d      	bhi.n	8009530 <UART_SetConfig+0x188>
 8009454:	a201      	add	r2, pc, #4	; (adr r2, 800945c <UART_SetConfig+0xb4>)
 8009456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945a:	bf00      	nop
 800945c:	08009501 	.word	0x08009501
 8009460:	08009531 	.word	0x08009531
 8009464:	08009531 	.word	0x08009531
 8009468:	08009531 	.word	0x08009531
 800946c:	08009531 	.word	0x08009531
 8009470:	08009531 	.word	0x08009531
 8009474:	08009531 	.word	0x08009531
 8009478:	08009531 	.word	0x08009531
 800947c:	08009509 	.word	0x08009509
 8009480:	08009531 	.word	0x08009531
 8009484:	08009531 	.word	0x08009531
 8009488:	08009531 	.word	0x08009531
 800948c:	08009531 	.word	0x08009531
 8009490:	08009531 	.word	0x08009531
 8009494:	08009531 	.word	0x08009531
 8009498:	08009531 	.word	0x08009531
 800949c:	08009511 	.word	0x08009511
 80094a0:	08009531 	.word	0x08009531
 80094a4:	08009531 	.word	0x08009531
 80094a8:	08009531 	.word	0x08009531
 80094ac:	08009531 	.word	0x08009531
 80094b0:	08009531 	.word	0x08009531
 80094b4:	08009531 	.word	0x08009531
 80094b8:	08009531 	.word	0x08009531
 80094bc:	08009519 	.word	0x08009519
 80094c0:	08009531 	.word	0x08009531
 80094c4:	08009531 	.word	0x08009531
 80094c8:	08009531 	.word	0x08009531
 80094cc:	08009531 	.word	0x08009531
 80094d0:	08009531 	.word	0x08009531
 80094d4:	08009531 	.word	0x08009531
 80094d8:	08009531 	.word	0x08009531
 80094dc:	08009521 	.word	0x08009521
 80094e0:	08009531 	.word	0x08009531
 80094e4:	08009531 	.word	0x08009531
 80094e8:	08009531 	.word	0x08009531
 80094ec:	08009531 	.word	0x08009531
 80094f0:	08009531 	.word	0x08009531
 80094f4:	08009531 	.word	0x08009531
 80094f8:	08009531 	.word	0x08009531
 80094fc:	08009529 	.word	0x08009529
 8009500:	2301      	movs	r3, #1
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009506:	e326      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009508:	2304      	movs	r3, #4
 800950a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800950e:	e322      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009510:	2308      	movs	r3, #8
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009516:	e31e      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009518:	2310      	movs	r3, #16
 800951a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800951e:	e31a      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009520:	2320      	movs	r3, #32
 8009522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009526:	e316      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009528:	2340      	movs	r3, #64	; 0x40
 800952a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800952e:	e312      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009530:	2380      	movs	r3, #128	; 0x80
 8009532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009536:	e30e      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a69      	ldr	r2, [pc, #420]	; (80096e4 <UART_SetConfig+0x33c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d130      	bne.n	80095a4 <UART_SetConfig+0x1fc>
 8009542:	4b67      	ldr	r3, [pc, #412]	; (80096e0 <UART_SetConfig+0x338>)
 8009544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009546:	f003 0307 	and.w	r3, r3, #7
 800954a:	2b05      	cmp	r3, #5
 800954c:	d826      	bhi.n	800959c <UART_SetConfig+0x1f4>
 800954e:	a201      	add	r2, pc, #4	; (adr r2, 8009554 <UART_SetConfig+0x1ac>)
 8009550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009554:	0800956d 	.word	0x0800956d
 8009558:	08009575 	.word	0x08009575
 800955c:	0800957d 	.word	0x0800957d
 8009560:	08009585 	.word	0x08009585
 8009564:	0800958d 	.word	0x0800958d
 8009568:	08009595 	.word	0x08009595
 800956c:	2300      	movs	r3, #0
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009572:	e2f0      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009574:	2304      	movs	r3, #4
 8009576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800957a:	e2ec      	b.n	8009b56 <UART_SetConfig+0x7ae>
 800957c:	2308      	movs	r3, #8
 800957e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009582:	e2e8      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009584:	2310      	movs	r3, #16
 8009586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800958a:	e2e4      	b.n	8009b56 <UART_SetConfig+0x7ae>
 800958c:	2320      	movs	r3, #32
 800958e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009592:	e2e0      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009594:	2340      	movs	r3, #64	; 0x40
 8009596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800959a:	e2dc      	b.n	8009b56 <UART_SetConfig+0x7ae>
 800959c:	2380      	movs	r3, #128	; 0x80
 800959e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095a2:	e2d8      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a4f      	ldr	r2, [pc, #316]	; (80096e8 <UART_SetConfig+0x340>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d130      	bne.n	8009610 <UART_SetConfig+0x268>
 80095ae:	4b4c      	ldr	r3, [pc, #304]	; (80096e0 <UART_SetConfig+0x338>)
 80095b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b2:	f003 0307 	and.w	r3, r3, #7
 80095b6:	2b05      	cmp	r3, #5
 80095b8:	d826      	bhi.n	8009608 <UART_SetConfig+0x260>
 80095ba:	a201      	add	r2, pc, #4	; (adr r2, 80095c0 <UART_SetConfig+0x218>)
 80095bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c0:	080095d9 	.word	0x080095d9
 80095c4:	080095e1 	.word	0x080095e1
 80095c8:	080095e9 	.word	0x080095e9
 80095cc:	080095f1 	.word	0x080095f1
 80095d0:	080095f9 	.word	0x080095f9
 80095d4:	08009601 	.word	0x08009601
 80095d8:	2300      	movs	r3, #0
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095de:	e2ba      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80095e0:	2304      	movs	r3, #4
 80095e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095e6:	e2b6      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80095e8:	2308      	movs	r3, #8
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ee:	e2b2      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80095f0:	2310      	movs	r3, #16
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095f6:	e2ae      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80095f8:	2320      	movs	r3, #32
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095fe:	e2aa      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009600:	2340      	movs	r3, #64	; 0x40
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009606:	e2a6      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009608:	2380      	movs	r3, #128	; 0x80
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800960e:	e2a2      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a35      	ldr	r2, [pc, #212]	; (80096ec <UART_SetConfig+0x344>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d130      	bne.n	800967c <UART_SetConfig+0x2d4>
 800961a:	4b31      	ldr	r3, [pc, #196]	; (80096e0 <UART_SetConfig+0x338>)
 800961c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800961e:	f003 0307 	and.w	r3, r3, #7
 8009622:	2b05      	cmp	r3, #5
 8009624:	d826      	bhi.n	8009674 <UART_SetConfig+0x2cc>
 8009626:	a201      	add	r2, pc, #4	; (adr r2, 800962c <UART_SetConfig+0x284>)
 8009628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962c:	08009645 	.word	0x08009645
 8009630:	0800964d 	.word	0x0800964d
 8009634:	08009655 	.word	0x08009655
 8009638:	0800965d 	.word	0x0800965d
 800963c:	08009665 	.word	0x08009665
 8009640:	0800966d 	.word	0x0800966d
 8009644:	2300      	movs	r3, #0
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800964a:	e284      	b.n	8009b56 <UART_SetConfig+0x7ae>
 800964c:	2304      	movs	r3, #4
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009652:	e280      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009654:	2308      	movs	r3, #8
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965a:	e27c      	b.n	8009b56 <UART_SetConfig+0x7ae>
 800965c:	2310      	movs	r3, #16
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009662:	e278      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009664:	2320      	movs	r3, #32
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800966a:	e274      	b.n	8009b56 <UART_SetConfig+0x7ae>
 800966c:	2340      	movs	r3, #64	; 0x40
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009672:	e270      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009674:	2380      	movs	r3, #128	; 0x80
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800967a:	e26c      	b.n	8009b56 <UART_SetConfig+0x7ae>
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a1b      	ldr	r2, [pc, #108]	; (80096f0 <UART_SetConfig+0x348>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d142      	bne.n	800970c <UART_SetConfig+0x364>
 8009686:	4b16      	ldr	r3, [pc, #88]	; (80096e0 <UART_SetConfig+0x338>)
 8009688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968a:	f003 0307 	and.w	r3, r3, #7
 800968e:	2b05      	cmp	r3, #5
 8009690:	d838      	bhi.n	8009704 <UART_SetConfig+0x35c>
 8009692:	a201      	add	r2, pc, #4	; (adr r2, 8009698 <UART_SetConfig+0x2f0>)
 8009694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009698:	080096b1 	.word	0x080096b1
 800969c:	080096b9 	.word	0x080096b9
 80096a0:	080096c1 	.word	0x080096c1
 80096a4:	080096c9 	.word	0x080096c9
 80096a8:	080096f5 	.word	0x080096f5
 80096ac:	080096fd 	.word	0x080096fd
 80096b0:	2300      	movs	r3, #0
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096b6:	e24e      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80096b8:	2304      	movs	r3, #4
 80096ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096be:	e24a      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80096c0:	2308      	movs	r3, #8
 80096c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096c6:	e246      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80096c8:	2310      	movs	r3, #16
 80096ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ce:	e242      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80096d0:	cfff69f3 	.word	0xcfff69f3
 80096d4:	58000c00 	.word	0x58000c00
 80096d8:	11fff4ff 	.word	0x11fff4ff
 80096dc:	40011000 	.word	0x40011000
 80096e0:	58024400 	.word	0x58024400
 80096e4:	40004400 	.word	0x40004400
 80096e8:	40004800 	.word	0x40004800
 80096ec:	40004c00 	.word	0x40004c00
 80096f0:	40005000 	.word	0x40005000
 80096f4:	2320      	movs	r3, #32
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096fa:	e22c      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80096fc:	2340      	movs	r3, #64	; 0x40
 80096fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009702:	e228      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009704:	2380      	movs	r3, #128	; 0x80
 8009706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800970a:	e224      	b.n	8009b56 <UART_SetConfig+0x7ae>
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4ab1      	ldr	r2, [pc, #708]	; (80099d8 <UART_SetConfig+0x630>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d176      	bne.n	8009804 <UART_SetConfig+0x45c>
 8009716:	4bb1      	ldr	r3, [pc, #708]	; (80099dc <UART_SetConfig+0x634>)
 8009718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800971a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800971e:	2b28      	cmp	r3, #40	; 0x28
 8009720:	d86c      	bhi.n	80097fc <UART_SetConfig+0x454>
 8009722:	a201      	add	r2, pc, #4	; (adr r2, 8009728 <UART_SetConfig+0x380>)
 8009724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009728:	080097cd 	.word	0x080097cd
 800972c:	080097fd 	.word	0x080097fd
 8009730:	080097fd 	.word	0x080097fd
 8009734:	080097fd 	.word	0x080097fd
 8009738:	080097fd 	.word	0x080097fd
 800973c:	080097fd 	.word	0x080097fd
 8009740:	080097fd 	.word	0x080097fd
 8009744:	080097fd 	.word	0x080097fd
 8009748:	080097d5 	.word	0x080097d5
 800974c:	080097fd 	.word	0x080097fd
 8009750:	080097fd 	.word	0x080097fd
 8009754:	080097fd 	.word	0x080097fd
 8009758:	080097fd 	.word	0x080097fd
 800975c:	080097fd 	.word	0x080097fd
 8009760:	080097fd 	.word	0x080097fd
 8009764:	080097fd 	.word	0x080097fd
 8009768:	080097dd 	.word	0x080097dd
 800976c:	080097fd 	.word	0x080097fd
 8009770:	080097fd 	.word	0x080097fd
 8009774:	080097fd 	.word	0x080097fd
 8009778:	080097fd 	.word	0x080097fd
 800977c:	080097fd 	.word	0x080097fd
 8009780:	080097fd 	.word	0x080097fd
 8009784:	080097fd 	.word	0x080097fd
 8009788:	080097e5 	.word	0x080097e5
 800978c:	080097fd 	.word	0x080097fd
 8009790:	080097fd 	.word	0x080097fd
 8009794:	080097fd 	.word	0x080097fd
 8009798:	080097fd 	.word	0x080097fd
 800979c:	080097fd 	.word	0x080097fd
 80097a0:	080097fd 	.word	0x080097fd
 80097a4:	080097fd 	.word	0x080097fd
 80097a8:	080097ed 	.word	0x080097ed
 80097ac:	080097fd 	.word	0x080097fd
 80097b0:	080097fd 	.word	0x080097fd
 80097b4:	080097fd 	.word	0x080097fd
 80097b8:	080097fd 	.word	0x080097fd
 80097bc:	080097fd 	.word	0x080097fd
 80097c0:	080097fd 	.word	0x080097fd
 80097c4:	080097fd 	.word	0x080097fd
 80097c8:	080097f5 	.word	0x080097f5
 80097cc:	2301      	movs	r3, #1
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097d2:	e1c0      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80097d4:	2304      	movs	r3, #4
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097da:	e1bc      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80097dc:	2308      	movs	r3, #8
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097e2:	e1b8      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80097e4:	2310      	movs	r3, #16
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ea:	e1b4      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80097ec:	2320      	movs	r3, #32
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f2:	e1b0      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80097f4:	2340      	movs	r3, #64	; 0x40
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fa:	e1ac      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80097fc:	2380      	movs	r3, #128	; 0x80
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009802:	e1a8      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a75      	ldr	r2, [pc, #468]	; (80099e0 <UART_SetConfig+0x638>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d130      	bne.n	8009870 <UART_SetConfig+0x4c8>
 800980e:	4b73      	ldr	r3, [pc, #460]	; (80099dc <UART_SetConfig+0x634>)
 8009810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009812:	f003 0307 	and.w	r3, r3, #7
 8009816:	2b05      	cmp	r3, #5
 8009818:	d826      	bhi.n	8009868 <UART_SetConfig+0x4c0>
 800981a:	a201      	add	r2, pc, #4	; (adr r2, 8009820 <UART_SetConfig+0x478>)
 800981c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009820:	08009839 	.word	0x08009839
 8009824:	08009841 	.word	0x08009841
 8009828:	08009849 	.word	0x08009849
 800982c:	08009851 	.word	0x08009851
 8009830:	08009859 	.word	0x08009859
 8009834:	08009861 	.word	0x08009861
 8009838:	2300      	movs	r3, #0
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800983e:	e18a      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009840:	2304      	movs	r3, #4
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009846:	e186      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009848:	2308      	movs	r3, #8
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800984e:	e182      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009850:	2310      	movs	r3, #16
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009856:	e17e      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009858:	2320      	movs	r3, #32
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985e:	e17a      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009860:	2340      	movs	r3, #64	; 0x40
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009866:	e176      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009868:	2380      	movs	r3, #128	; 0x80
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800986e:	e172      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a5b      	ldr	r2, [pc, #364]	; (80099e4 <UART_SetConfig+0x63c>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d130      	bne.n	80098dc <UART_SetConfig+0x534>
 800987a:	4b58      	ldr	r3, [pc, #352]	; (80099dc <UART_SetConfig+0x634>)
 800987c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800987e:	f003 0307 	and.w	r3, r3, #7
 8009882:	2b05      	cmp	r3, #5
 8009884:	d826      	bhi.n	80098d4 <UART_SetConfig+0x52c>
 8009886:	a201      	add	r2, pc, #4	; (adr r2, 800988c <UART_SetConfig+0x4e4>)
 8009888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988c:	080098a5 	.word	0x080098a5
 8009890:	080098ad 	.word	0x080098ad
 8009894:	080098b5 	.word	0x080098b5
 8009898:	080098bd 	.word	0x080098bd
 800989c:	080098c5 	.word	0x080098c5
 80098a0:	080098cd 	.word	0x080098cd
 80098a4:	2300      	movs	r3, #0
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098aa:	e154      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80098ac:	2304      	movs	r3, #4
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098b2:	e150      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80098b4:	2308      	movs	r3, #8
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ba:	e14c      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80098bc:	2310      	movs	r3, #16
 80098be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098c2:	e148      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80098c4:	2320      	movs	r3, #32
 80098c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ca:	e144      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80098cc:	2340      	movs	r3, #64	; 0x40
 80098ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098d2:	e140      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80098d4:	2380      	movs	r3, #128	; 0x80
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098da:	e13c      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a41      	ldr	r2, [pc, #260]	; (80099e8 <UART_SetConfig+0x640>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	f040 8082 	bne.w	80099ec <UART_SetConfig+0x644>
 80098e8:	4b3c      	ldr	r3, [pc, #240]	; (80099dc <UART_SetConfig+0x634>)
 80098ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098f0:	2b28      	cmp	r3, #40	; 0x28
 80098f2:	d86d      	bhi.n	80099d0 <UART_SetConfig+0x628>
 80098f4:	a201      	add	r2, pc, #4	; (adr r2, 80098fc <UART_SetConfig+0x554>)
 80098f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fa:	bf00      	nop
 80098fc:	080099a1 	.word	0x080099a1
 8009900:	080099d1 	.word	0x080099d1
 8009904:	080099d1 	.word	0x080099d1
 8009908:	080099d1 	.word	0x080099d1
 800990c:	080099d1 	.word	0x080099d1
 8009910:	080099d1 	.word	0x080099d1
 8009914:	080099d1 	.word	0x080099d1
 8009918:	080099d1 	.word	0x080099d1
 800991c:	080099a9 	.word	0x080099a9
 8009920:	080099d1 	.word	0x080099d1
 8009924:	080099d1 	.word	0x080099d1
 8009928:	080099d1 	.word	0x080099d1
 800992c:	080099d1 	.word	0x080099d1
 8009930:	080099d1 	.word	0x080099d1
 8009934:	080099d1 	.word	0x080099d1
 8009938:	080099d1 	.word	0x080099d1
 800993c:	080099b1 	.word	0x080099b1
 8009940:	080099d1 	.word	0x080099d1
 8009944:	080099d1 	.word	0x080099d1
 8009948:	080099d1 	.word	0x080099d1
 800994c:	080099d1 	.word	0x080099d1
 8009950:	080099d1 	.word	0x080099d1
 8009954:	080099d1 	.word	0x080099d1
 8009958:	080099d1 	.word	0x080099d1
 800995c:	080099b9 	.word	0x080099b9
 8009960:	080099d1 	.word	0x080099d1
 8009964:	080099d1 	.word	0x080099d1
 8009968:	080099d1 	.word	0x080099d1
 800996c:	080099d1 	.word	0x080099d1
 8009970:	080099d1 	.word	0x080099d1
 8009974:	080099d1 	.word	0x080099d1
 8009978:	080099d1 	.word	0x080099d1
 800997c:	080099c1 	.word	0x080099c1
 8009980:	080099d1 	.word	0x080099d1
 8009984:	080099d1 	.word	0x080099d1
 8009988:	080099d1 	.word	0x080099d1
 800998c:	080099d1 	.word	0x080099d1
 8009990:	080099d1 	.word	0x080099d1
 8009994:	080099d1 	.word	0x080099d1
 8009998:	080099d1 	.word	0x080099d1
 800999c:	080099c9 	.word	0x080099c9
 80099a0:	2301      	movs	r3, #1
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a6:	e0d6      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80099a8:	2304      	movs	r3, #4
 80099aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ae:	e0d2      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80099b0:	2308      	movs	r3, #8
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099b6:	e0ce      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80099b8:	2310      	movs	r3, #16
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099be:	e0ca      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80099c0:	2320      	movs	r3, #32
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c6:	e0c6      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80099c8:	2340      	movs	r3, #64	; 0x40
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ce:	e0c2      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80099d0:	2380      	movs	r3, #128	; 0x80
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099d6:	e0be      	b.n	8009b56 <UART_SetConfig+0x7ae>
 80099d8:	40011400 	.word	0x40011400
 80099dc:	58024400 	.word	0x58024400
 80099e0:	40007800 	.word	0x40007800
 80099e4:	40007c00 	.word	0x40007c00
 80099e8:	40011800 	.word	0x40011800
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4aad      	ldr	r2, [pc, #692]	; (8009ca8 <UART_SetConfig+0x900>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d176      	bne.n	8009ae4 <UART_SetConfig+0x73c>
 80099f6:	4bad      	ldr	r3, [pc, #692]	; (8009cac <UART_SetConfig+0x904>)
 80099f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099fe:	2b28      	cmp	r3, #40	; 0x28
 8009a00:	d86c      	bhi.n	8009adc <UART_SetConfig+0x734>
 8009a02:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <UART_SetConfig+0x660>)
 8009a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a08:	08009aad 	.word	0x08009aad
 8009a0c:	08009add 	.word	0x08009add
 8009a10:	08009add 	.word	0x08009add
 8009a14:	08009add 	.word	0x08009add
 8009a18:	08009add 	.word	0x08009add
 8009a1c:	08009add 	.word	0x08009add
 8009a20:	08009add 	.word	0x08009add
 8009a24:	08009add 	.word	0x08009add
 8009a28:	08009ab5 	.word	0x08009ab5
 8009a2c:	08009add 	.word	0x08009add
 8009a30:	08009add 	.word	0x08009add
 8009a34:	08009add 	.word	0x08009add
 8009a38:	08009add 	.word	0x08009add
 8009a3c:	08009add 	.word	0x08009add
 8009a40:	08009add 	.word	0x08009add
 8009a44:	08009add 	.word	0x08009add
 8009a48:	08009abd 	.word	0x08009abd
 8009a4c:	08009add 	.word	0x08009add
 8009a50:	08009add 	.word	0x08009add
 8009a54:	08009add 	.word	0x08009add
 8009a58:	08009add 	.word	0x08009add
 8009a5c:	08009add 	.word	0x08009add
 8009a60:	08009add 	.word	0x08009add
 8009a64:	08009add 	.word	0x08009add
 8009a68:	08009ac5 	.word	0x08009ac5
 8009a6c:	08009add 	.word	0x08009add
 8009a70:	08009add 	.word	0x08009add
 8009a74:	08009add 	.word	0x08009add
 8009a78:	08009add 	.word	0x08009add
 8009a7c:	08009add 	.word	0x08009add
 8009a80:	08009add 	.word	0x08009add
 8009a84:	08009add 	.word	0x08009add
 8009a88:	08009acd 	.word	0x08009acd
 8009a8c:	08009add 	.word	0x08009add
 8009a90:	08009add 	.word	0x08009add
 8009a94:	08009add 	.word	0x08009add
 8009a98:	08009add 	.word	0x08009add
 8009a9c:	08009add 	.word	0x08009add
 8009aa0:	08009add 	.word	0x08009add
 8009aa4:	08009add 	.word	0x08009add
 8009aa8:	08009ad5 	.word	0x08009ad5
 8009aac:	2301      	movs	r3, #1
 8009aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ab2:	e050      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009ab4:	2304      	movs	r3, #4
 8009ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aba:	e04c      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009abc:	2308      	movs	r3, #8
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac2:	e048      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009ac4:	2310      	movs	r3, #16
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aca:	e044      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009acc:	2320      	movs	r3, #32
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad2:	e040      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009ad4:	2340      	movs	r3, #64	; 0x40
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ada:	e03c      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009adc:	2380      	movs	r3, #128	; 0x80
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae2:	e038      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a71      	ldr	r2, [pc, #452]	; (8009cb0 <UART_SetConfig+0x908>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d130      	bne.n	8009b50 <UART_SetConfig+0x7a8>
 8009aee:	4b6f      	ldr	r3, [pc, #444]	; (8009cac <UART_SetConfig+0x904>)
 8009af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af2:	f003 0307 	and.w	r3, r3, #7
 8009af6:	2b05      	cmp	r3, #5
 8009af8:	d826      	bhi.n	8009b48 <UART_SetConfig+0x7a0>
 8009afa:	a201      	add	r2, pc, #4	; (adr r2, 8009b00 <UART_SetConfig+0x758>)
 8009afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b00:	08009b19 	.word	0x08009b19
 8009b04:	08009b21 	.word	0x08009b21
 8009b08:	08009b29 	.word	0x08009b29
 8009b0c:	08009b31 	.word	0x08009b31
 8009b10:	08009b39 	.word	0x08009b39
 8009b14:	08009b41 	.word	0x08009b41
 8009b18:	2302      	movs	r3, #2
 8009b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1e:	e01a      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009b20:	2304      	movs	r3, #4
 8009b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b26:	e016      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009b28:	2308      	movs	r3, #8
 8009b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2e:	e012      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009b30:	2310      	movs	r3, #16
 8009b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b36:	e00e      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009b38:	2320      	movs	r3, #32
 8009b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b3e:	e00a      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009b40:	2340      	movs	r3, #64	; 0x40
 8009b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b46:	e006      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009b48:	2380      	movs	r3, #128	; 0x80
 8009b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b4e:	e002      	b.n	8009b56 <UART_SetConfig+0x7ae>
 8009b50:	2380      	movs	r3, #128	; 0x80
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a55      	ldr	r2, [pc, #340]	; (8009cb0 <UART_SetConfig+0x908>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	f040 80f8 	bne.w	8009d52 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b66:	2b20      	cmp	r3, #32
 8009b68:	dc46      	bgt.n	8009bf8 <UART_SetConfig+0x850>
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	db75      	blt.n	8009c5a <UART_SetConfig+0x8b2>
 8009b6e:	3b02      	subs	r3, #2
 8009b70:	2b1e      	cmp	r3, #30
 8009b72:	d872      	bhi.n	8009c5a <UART_SetConfig+0x8b2>
 8009b74:	a201      	add	r2, pc, #4	; (adr r2, 8009b7c <UART_SetConfig+0x7d4>)
 8009b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7a:	bf00      	nop
 8009b7c:	08009bff 	.word	0x08009bff
 8009b80:	08009c5b 	.word	0x08009c5b
 8009b84:	08009c07 	.word	0x08009c07
 8009b88:	08009c5b 	.word	0x08009c5b
 8009b8c:	08009c5b 	.word	0x08009c5b
 8009b90:	08009c5b 	.word	0x08009c5b
 8009b94:	08009c17 	.word	0x08009c17
 8009b98:	08009c5b 	.word	0x08009c5b
 8009b9c:	08009c5b 	.word	0x08009c5b
 8009ba0:	08009c5b 	.word	0x08009c5b
 8009ba4:	08009c5b 	.word	0x08009c5b
 8009ba8:	08009c5b 	.word	0x08009c5b
 8009bac:	08009c5b 	.word	0x08009c5b
 8009bb0:	08009c5b 	.word	0x08009c5b
 8009bb4:	08009c27 	.word	0x08009c27
 8009bb8:	08009c5b 	.word	0x08009c5b
 8009bbc:	08009c5b 	.word	0x08009c5b
 8009bc0:	08009c5b 	.word	0x08009c5b
 8009bc4:	08009c5b 	.word	0x08009c5b
 8009bc8:	08009c5b 	.word	0x08009c5b
 8009bcc:	08009c5b 	.word	0x08009c5b
 8009bd0:	08009c5b 	.word	0x08009c5b
 8009bd4:	08009c5b 	.word	0x08009c5b
 8009bd8:	08009c5b 	.word	0x08009c5b
 8009bdc:	08009c5b 	.word	0x08009c5b
 8009be0:	08009c5b 	.word	0x08009c5b
 8009be4:	08009c5b 	.word	0x08009c5b
 8009be8:	08009c5b 	.word	0x08009c5b
 8009bec:	08009c5b 	.word	0x08009c5b
 8009bf0:	08009c5b 	.word	0x08009c5b
 8009bf4:	08009c4d 	.word	0x08009c4d
 8009bf8:	2b40      	cmp	r3, #64	; 0x40
 8009bfa:	d02a      	beq.n	8009c52 <UART_SetConfig+0x8aa>
 8009bfc:	e02d      	b.n	8009c5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009bfe:	f7fe f9b7 	bl	8007f70 <HAL_RCCEx_GetD3PCLK1Freq>
 8009c02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c04:	e02f      	b.n	8009c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fe f9c6 	bl	8007f9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c14:	e027      	b.n	8009c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c16:	f107 0318 	add.w	r3, r7, #24
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fe fb12 	bl	8008244 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c24:	e01f      	b.n	8009c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c26:	4b21      	ldr	r3, [pc, #132]	; (8009cac <UART_SetConfig+0x904>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0320 	and.w	r3, r3, #32
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d009      	beq.n	8009c46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c32:	4b1e      	ldr	r3, [pc, #120]	; (8009cac <UART_SetConfig+0x904>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	08db      	lsrs	r3, r3, #3
 8009c38:	f003 0303 	and.w	r3, r3, #3
 8009c3c:	4a1d      	ldr	r2, [pc, #116]	; (8009cb4 <UART_SetConfig+0x90c>)
 8009c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c44:	e00f      	b.n	8009c66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009c46:	4b1b      	ldr	r3, [pc, #108]	; (8009cb4 <UART_SetConfig+0x90c>)
 8009c48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c4a:	e00c      	b.n	8009c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c4c:	4b1a      	ldr	r3, [pc, #104]	; (8009cb8 <UART_SetConfig+0x910>)
 8009c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c50:	e009      	b.n	8009c66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c58:	e005      	b.n	8009c66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009c64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 81ee 	beq.w	800a04a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	4a12      	ldr	r2, [pc, #72]	; (8009cbc <UART_SetConfig+0x914>)
 8009c74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c80:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	4613      	mov	r3, r2
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	4413      	add	r3, r2
 8009c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d305      	bcc.n	8009c9e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d910      	bls.n	8009cc0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ca4:	e1d1      	b.n	800a04a <UART_SetConfig+0xca2>
 8009ca6:	bf00      	nop
 8009ca8:	40011c00 	.word	0x40011c00
 8009cac:	58024400 	.word	0x58024400
 8009cb0:	58000c00 	.word	0x58000c00
 8009cb4:	03d09000 	.word	0x03d09000
 8009cb8:	003d0900 	.word	0x003d0900
 8009cbc:	08010ff0 	.word	0x08010ff0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	60bb      	str	r3, [r7, #8]
 8009cc6:	60fa      	str	r2, [r7, #12]
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ccc:	4ac0      	ldr	r2, [pc, #768]	; (8009fd0 <UART_SetConfig+0xc28>)
 8009cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	603b      	str	r3, [r7, #0]
 8009cd8:	607a      	str	r2, [r7, #4]
 8009cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ce2:	f7f6 fb65 	bl	80003b0 <__aeabi_uldivmod>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4610      	mov	r0, r2
 8009cec:	4619      	mov	r1, r3
 8009cee:	f04f 0200 	mov.w	r2, #0
 8009cf2:	f04f 0300 	mov.w	r3, #0
 8009cf6:	020b      	lsls	r3, r1, #8
 8009cf8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cfc:	0202      	lsls	r2, r0, #8
 8009cfe:	6979      	ldr	r1, [r7, #20]
 8009d00:	6849      	ldr	r1, [r1, #4]
 8009d02:	0849      	lsrs	r1, r1, #1
 8009d04:	2000      	movs	r0, #0
 8009d06:	460c      	mov	r4, r1
 8009d08:	4605      	mov	r5, r0
 8009d0a:	eb12 0804 	adds.w	r8, r2, r4
 8009d0e:	eb43 0905 	adc.w	r9, r3, r5
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	469a      	mov	sl, r3
 8009d1a:	4693      	mov	fp, r2
 8009d1c:	4652      	mov	r2, sl
 8009d1e:	465b      	mov	r3, fp
 8009d20:	4640      	mov	r0, r8
 8009d22:	4649      	mov	r1, r9
 8009d24:	f7f6 fb44 	bl	80003b0 <__aeabi_uldivmod>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d36:	d308      	bcc.n	8009d4a <UART_SetConfig+0x9a2>
 8009d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d3e:	d204      	bcs.n	8009d4a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d46:	60da      	str	r2, [r3, #12]
 8009d48:	e17f      	b.n	800a04a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009d50:	e17b      	b.n	800a04a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d5a:	f040 80bd 	bne.w	8009ed8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009d5e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d62:	2b20      	cmp	r3, #32
 8009d64:	dc48      	bgt.n	8009df8 <UART_SetConfig+0xa50>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	db7b      	blt.n	8009e62 <UART_SetConfig+0xaba>
 8009d6a:	2b20      	cmp	r3, #32
 8009d6c:	d879      	bhi.n	8009e62 <UART_SetConfig+0xaba>
 8009d6e:	a201      	add	r2, pc, #4	; (adr r2, 8009d74 <UART_SetConfig+0x9cc>)
 8009d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d74:	08009dff 	.word	0x08009dff
 8009d78:	08009e07 	.word	0x08009e07
 8009d7c:	08009e63 	.word	0x08009e63
 8009d80:	08009e63 	.word	0x08009e63
 8009d84:	08009e0f 	.word	0x08009e0f
 8009d88:	08009e63 	.word	0x08009e63
 8009d8c:	08009e63 	.word	0x08009e63
 8009d90:	08009e63 	.word	0x08009e63
 8009d94:	08009e1f 	.word	0x08009e1f
 8009d98:	08009e63 	.word	0x08009e63
 8009d9c:	08009e63 	.word	0x08009e63
 8009da0:	08009e63 	.word	0x08009e63
 8009da4:	08009e63 	.word	0x08009e63
 8009da8:	08009e63 	.word	0x08009e63
 8009dac:	08009e63 	.word	0x08009e63
 8009db0:	08009e63 	.word	0x08009e63
 8009db4:	08009e2f 	.word	0x08009e2f
 8009db8:	08009e63 	.word	0x08009e63
 8009dbc:	08009e63 	.word	0x08009e63
 8009dc0:	08009e63 	.word	0x08009e63
 8009dc4:	08009e63 	.word	0x08009e63
 8009dc8:	08009e63 	.word	0x08009e63
 8009dcc:	08009e63 	.word	0x08009e63
 8009dd0:	08009e63 	.word	0x08009e63
 8009dd4:	08009e63 	.word	0x08009e63
 8009dd8:	08009e63 	.word	0x08009e63
 8009ddc:	08009e63 	.word	0x08009e63
 8009de0:	08009e63 	.word	0x08009e63
 8009de4:	08009e63 	.word	0x08009e63
 8009de8:	08009e63 	.word	0x08009e63
 8009dec:	08009e63 	.word	0x08009e63
 8009df0:	08009e63 	.word	0x08009e63
 8009df4:	08009e55 	.word	0x08009e55
 8009df8:	2b40      	cmp	r3, #64	; 0x40
 8009dfa:	d02e      	beq.n	8009e5a <UART_SetConfig+0xab2>
 8009dfc:	e031      	b.n	8009e62 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dfe:	f7fc feeb 	bl	8006bd8 <HAL_RCC_GetPCLK1Freq>
 8009e02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009e04:	e033      	b.n	8009e6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e06:	f7fc fefd 	bl	8006c04 <HAL_RCC_GetPCLK2Freq>
 8009e0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009e0c:	e02f      	b.n	8009e6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fe f8c2 	bl	8007f9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e1c:	e027      	b.n	8009e6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e1e:	f107 0318 	add.w	r3, r7, #24
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fe fa0e 	bl	8008244 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e2c:	e01f      	b.n	8009e6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e2e:	4b69      	ldr	r3, [pc, #420]	; (8009fd4 <UART_SetConfig+0xc2c>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0320 	and.w	r3, r3, #32
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d009      	beq.n	8009e4e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e3a:	4b66      	ldr	r3, [pc, #408]	; (8009fd4 <UART_SetConfig+0xc2c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	08db      	lsrs	r3, r3, #3
 8009e40:	f003 0303 	and.w	r3, r3, #3
 8009e44:	4a64      	ldr	r2, [pc, #400]	; (8009fd8 <UART_SetConfig+0xc30>)
 8009e46:	fa22 f303 	lsr.w	r3, r2, r3
 8009e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e4c:	e00f      	b.n	8009e6e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009e4e:	4b62      	ldr	r3, [pc, #392]	; (8009fd8 <UART_SetConfig+0xc30>)
 8009e50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e52:	e00c      	b.n	8009e6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e54:	4b61      	ldr	r3, [pc, #388]	; (8009fdc <UART_SetConfig+0xc34>)
 8009e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e58:	e009      	b.n	8009e6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e60:	e005      	b.n	8009e6e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009e62:	2300      	movs	r3, #0
 8009e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f000 80ea 	beq.w	800a04a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	4a55      	ldr	r2, [pc, #340]	; (8009fd0 <UART_SetConfig+0xc28>)
 8009e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e80:	461a      	mov	r2, r3
 8009e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e84:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e88:	005a      	lsls	r2, r3, #1
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	085b      	lsrs	r3, r3, #1
 8009e90:	441a      	add	r2, r3
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e9a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9e:	2b0f      	cmp	r3, #15
 8009ea0:	d916      	bls.n	8009ed0 <UART_SetConfig+0xb28>
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ea8:	d212      	bcs.n	8009ed0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	f023 030f 	bic.w	r3, r3, #15
 8009eb2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb6:	085b      	lsrs	r3, r3, #1
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	f003 0307 	and.w	r3, r3, #7
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009ecc:	60da      	str	r2, [r3, #12]
 8009ece:	e0bc      	b.n	800a04a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ed6:	e0b8      	b.n	800a04a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ed8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009edc:	2b20      	cmp	r3, #32
 8009ede:	dc4b      	bgt.n	8009f78 <UART_SetConfig+0xbd0>
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f2c0 8087 	blt.w	8009ff4 <UART_SetConfig+0xc4c>
 8009ee6:	2b20      	cmp	r3, #32
 8009ee8:	f200 8084 	bhi.w	8009ff4 <UART_SetConfig+0xc4c>
 8009eec:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <UART_SetConfig+0xb4c>)
 8009eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef2:	bf00      	nop
 8009ef4:	08009f7f 	.word	0x08009f7f
 8009ef8:	08009f87 	.word	0x08009f87
 8009efc:	08009ff5 	.word	0x08009ff5
 8009f00:	08009ff5 	.word	0x08009ff5
 8009f04:	08009f8f 	.word	0x08009f8f
 8009f08:	08009ff5 	.word	0x08009ff5
 8009f0c:	08009ff5 	.word	0x08009ff5
 8009f10:	08009ff5 	.word	0x08009ff5
 8009f14:	08009f9f 	.word	0x08009f9f
 8009f18:	08009ff5 	.word	0x08009ff5
 8009f1c:	08009ff5 	.word	0x08009ff5
 8009f20:	08009ff5 	.word	0x08009ff5
 8009f24:	08009ff5 	.word	0x08009ff5
 8009f28:	08009ff5 	.word	0x08009ff5
 8009f2c:	08009ff5 	.word	0x08009ff5
 8009f30:	08009ff5 	.word	0x08009ff5
 8009f34:	08009faf 	.word	0x08009faf
 8009f38:	08009ff5 	.word	0x08009ff5
 8009f3c:	08009ff5 	.word	0x08009ff5
 8009f40:	08009ff5 	.word	0x08009ff5
 8009f44:	08009ff5 	.word	0x08009ff5
 8009f48:	08009ff5 	.word	0x08009ff5
 8009f4c:	08009ff5 	.word	0x08009ff5
 8009f50:	08009ff5 	.word	0x08009ff5
 8009f54:	08009ff5 	.word	0x08009ff5
 8009f58:	08009ff5 	.word	0x08009ff5
 8009f5c:	08009ff5 	.word	0x08009ff5
 8009f60:	08009ff5 	.word	0x08009ff5
 8009f64:	08009ff5 	.word	0x08009ff5
 8009f68:	08009ff5 	.word	0x08009ff5
 8009f6c:	08009ff5 	.word	0x08009ff5
 8009f70:	08009ff5 	.word	0x08009ff5
 8009f74:	08009fe7 	.word	0x08009fe7
 8009f78:	2b40      	cmp	r3, #64	; 0x40
 8009f7a:	d037      	beq.n	8009fec <UART_SetConfig+0xc44>
 8009f7c:	e03a      	b.n	8009ff4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f7e:	f7fc fe2b 	bl	8006bd8 <HAL_RCC_GetPCLK1Freq>
 8009f82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f84:	e03c      	b.n	800a000 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f86:	f7fc fe3d 	bl	8006c04 <HAL_RCC_GetPCLK2Freq>
 8009f8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f8c:	e038      	b.n	800a000 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7fe f802 	bl	8007f9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f9c:	e030      	b.n	800a000 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f9e:	f107 0318 	add.w	r3, r7, #24
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fe f94e 	bl	8008244 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fac:	e028      	b.n	800a000 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fae:	4b09      	ldr	r3, [pc, #36]	; (8009fd4 <UART_SetConfig+0xc2c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 0320 	and.w	r3, r3, #32
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d012      	beq.n	8009fe0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fba:	4b06      	ldr	r3, [pc, #24]	; (8009fd4 <UART_SetConfig+0xc2c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	08db      	lsrs	r3, r3, #3
 8009fc0:	f003 0303 	and.w	r3, r3, #3
 8009fc4:	4a04      	ldr	r2, [pc, #16]	; (8009fd8 <UART_SetConfig+0xc30>)
 8009fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8009fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fcc:	e018      	b.n	800a000 <UART_SetConfig+0xc58>
 8009fce:	bf00      	nop
 8009fd0:	08010ff0 	.word	0x08010ff0
 8009fd4:	58024400 	.word	0x58024400
 8009fd8:	03d09000 	.word	0x03d09000
 8009fdc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009fe0:	4b24      	ldr	r3, [pc, #144]	; (800a074 <UART_SetConfig+0xccc>)
 8009fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fe4:	e00c      	b.n	800a000 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fe6:	4b24      	ldr	r3, [pc, #144]	; (800a078 <UART_SetConfig+0xcd0>)
 8009fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fea:	e009      	b.n	800a000 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ff2:	e005      	b.n	800a000 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009ffe:	bf00      	nop
    }

    if (pclk != 0U)
 800a000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a002:	2b00      	cmp	r3, #0
 800a004:	d021      	beq.n	800a04a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00a:	4a1c      	ldr	r2, [pc, #112]	; (800a07c <UART_SetConfig+0xcd4>)
 800a00c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a010:	461a      	mov	r2, r3
 800a012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a014:	fbb3 f2f2 	udiv	r2, r3, r2
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	085b      	lsrs	r3, r3, #1
 800a01e:	441a      	add	r2, r3
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	fbb2 f3f3 	udiv	r3, r2, r3
 800a028:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02c:	2b0f      	cmp	r3, #15
 800a02e:	d909      	bls.n	800a044 <UART_SetConfig+0xc9c>
 800a030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a036:	d205      	bcs.n	800a044 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	60da      	str	r2, [r3, #12]
 800a042:	e002      	b.n	800a04a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	2201      	movs	r2, #1
 800a056:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2200      	movs	r2, #0
 800a05e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	2200      	movs	r2, #0
 800a064:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a066:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3748      	adds	r7, #72	; 0x48
 800a06e:	46bd      	mov	sp, r7
 800a070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a074:	03d09000 	.word	0x03d09000
 800a078:	003d0900 	.word	0x003d0900
 800a07c:	08010ff0 	.word	0x08010ff0

0800a080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08c:	f003 0301 	and.w	r3, r3, #1
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00a      	beq.n	800a0aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ae:	f003 0302 	and.w	r3, r3, #2
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00a      	beq.n	800a0cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	430a      	orrs	r2, r1
 800a0ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d0:	f003 0304 	and.w	r3, r3, #4
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00a      	beq.n	800a0ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f2:	f003 0308 	and.w	r3, r3, #8
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00a      	beq.n	800a110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	430a      	orrs	r2, r1
 800a10e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a114:	f003 0310 	and.w	r3, r3, #16
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00a      	beq.n	800a132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	430a      	orrs	r2, r1
 800a130:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a136:	f003 0320 	and.w	r3, r3, #32
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00a      	beq.n	800a154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	430a      	orrs	r2, r1
 800a152:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d01a      	beq.n	800a196 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	430a      	orrs	r2, r1
 800a174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a17a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a17e:	d10a      	bne.n	800a196 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00a      	beq.n	800a1b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	605a      	str	r2, [r3, #4]
  }
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b098      	sub	sp, #96	; 0x60
 800a1c8:	af02      	add	r7, sp, #8
 800a1ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1d4:	f7f9 ff1e 	bl	8004014 <HAL_GetTick>
 800a1d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 0308 	and.w	r3, r3, #8
 800a1e4:	2b08      	cmp	r3, #8
 800a1e6:	d12f      	bne.n	800a248 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f88e 	bl	800a318 <UART_WaitOnFlagUntilTimeout>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d022      	beq.n	800a248 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20a:	e853 3f00 	ldrex	r3, [r3]
 800a20e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a216:	653b      	str	r3, [r7, #80]	; 0x50
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	461a      	mov	r2, r3
 800a21e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a220:	647b      	str	r3, [r7, #68]	; 0x44
 800a222:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a224:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a228:	e841 2300 	strex	r3, r2, [r1]
 800a22c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1e6      	bne.n	800a202 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2220      	movs	r2, #32
 800a238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a244:	2303      	movs	r3, #3
 800a246:	e063      	b.n	800a310 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 0304 	and.w	r3, r3, #4
 800a252:	2b04      	cmp	r3, #4
 800a254:	d149      	bne.n	800a2ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a256:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a25e:	2200      	movs	r2, #0
 800a260:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 f857 	bl	800a318 <UART_WaitOnFlagUntilTimeout>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d03c      	beq.n	800a2ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	e853 3f00 	ldrex	r3, [r3]
 800a27c:	623b      	str	r3, [r7, #32]
   return(result);
 800a27e:	6a3b      	ldr	r3, [r7, #32]
 800a280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a284:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	461a      	mov	r2, r3
 800a28c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a28e:	633b      	str	r3, [r7, #48]	; 0x30
 800a290:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a296:	e841 2300 	strex	r3, r2, [r1]
 800a29a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1e6      	bne.n	800a270 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	e853 3f00 	ldrex	r3, [r3]
 800a2b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f023 0301 	bic.w	r3, r3, #1
 800a2b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	3308      	adds	r3, #8
 800a2c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2c2:	61fa      	str	r2, [r7, #28]
 800a2c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c6:	69b9      	ldr	r1, [r7, #24]
 800a2c8:	69fa      	ldr	r2, [r7, #28]
 800a2ca:	e841 2300 	strex	r3, r2, [r1]
 800a2ce:	617b      	str	r3, [r7, #20]
   return(result);
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1e5      	bne.n	800a2a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2220      	movs	r2, #32
 800a2da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e012      	b.n	800a310 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2220      	movs	r2, #32
 800a2ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2220      	movs	r2, #32
 800a2f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3758      	adds	r7, #88	; 0x58
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	4613      	mov	r3, r2
 800a326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a328:	e049      	b.n	800a3be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a330:	d045      	beq.n	800a3be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a332:	f7f9 fe6f 	bl	8004014 <HAL_GetTick>
 800a336:	4602      	mov	r2, r0
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	69ba      	ldr	r2, [r7, #24]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d302      	bcc.n	800a348 <UART_WaitOnFlagUntilTimeout+0x30>
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d101      	bne.n	800a34c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a348:	2303      	movs	r3, #3
 800a34a:	e048      	b.n	800a3de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0304 	and.w	r3, r3, #4
 800a356:	2b00      	cmp	r3, #0
 800a358:	d031      	beq.n	800a3be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	69db      	ldr	r3, [r3, #28]
 800a360:	f003 0308 	and.w	r3, r3, #8
 800a364:	2b08      	cmp	r3, #8
 800a366:	d110      	bne.n	800a38a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2208      	movs	r2, #8
 800a36e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f000 f839 	bl	800a3e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2208      	movs	r2, #8
 800a37a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e029      	b.n	800a3de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a398:	d111      	bne.n	800a3be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 f81f 	bl	800a3e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2220      	movs	r2, #32
 800a3ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e00f      	b.n	800a3de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	69da      	ldr	r2, [r3, #28]
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	bf0c      	ite	eq
 800a3ce:	2301      	moveq	r3, #1
 800a3d0:	2300      	movne	r3, #0
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	79fb      	ldrb	r3, [r7, #7]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d0a6      	beq.n	800a32a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
	...

0800a3e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b095      	sub	sp, #84	; 0x54
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f8:	e853 3f00 	ldrex	r3, [r3]
 800a3fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a404:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	461a      	mov	r2, r3
 800a40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a40e:	643b      	str	r3, [r7, #64]	; 0x40
 800a410:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a412:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a414:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a416:	e841 2300 	strex	r3, r2, [r1]
 800a41a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1e6      	bne.n	800a3f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	3308      	adds	r3, #8
 800a428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	e853 3f00 	ldrex	r3, [r3]
 800a430:	61fb      	str	r3, [r7, #28]
   return(result);
 800a432:	69fa      	ldr	r2, [r7, #28]
 800a434:	4b1e      	ldr	r3, [pc, #120]	; (800a4b0 <UART_EndRxTransfer+0xc8>)
 800a436:	4013      	ands	r3, r2
 800a438:	64bb      	str	r3, [r7, #72]	; 0x48
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	3308      	adds	r3, #8
 800a440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a442:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a444:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a44a:	e841 2300 	strex	r3, r2, [r1]
 800a44e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1e5      	bne.n	800a422 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d118      	bne.n	800a490 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	e853 3f00 	ldrex	r3, [r3]
 800a46a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	f023 0310 	bic.w	r3, r3, #16
 800a472:	647b      	str	r3, [r7, #68]	; 0x44
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	461a      	mov	r2, r3
 800a47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a47c:	61bb      	str	r3, [r7, #24]
 800a47e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a480:	6979      	ldr	r1, [r7, #20]
 800a482:	69ba      	ldr	r2, [r7, #24]
 800a484:	e841 2300 	strex	r3, r2, [r1]
 800a488:	613b      	str	r3, [r7, #16]
   return(result);
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1e6      	bne.n	800a45e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2220      	movs	r2, #32
 800a494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a4a4:	bf00      	nop
 800a4a6:	3754      	adds	r7, #84	; 0x54
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr
 800a4b0:	effffffe 	.word	0xeffffffe

0800a4b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d101      	bne.n	800a4ca <HAL_UARTEx_DisableFifoMode+0x16>
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	e027      	b.n	800a51a <HAL_UARTEx_DisableFifoMode+0x66>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2224      	movs	r2, #36	; 0x24
 800a4d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f022 0201 	bic.w	r2, r2, #1
 800a4f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a4f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2220      	movs	r2, #32
 800a50c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b084      	sub	sp, #16
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
 800a52e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a536:	2b01      	cmp	r3, #1
 800a538:	d101      	bne.n	800a53e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a53a:	2302      	movs	r3, #2
 800a53c:	e02d      	b.n	800a59a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2224      	movs	r2, #36	; 0x24
 800a54a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f022 0201 	bic.w	r2, r2, #1
 800a564:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 f850 	bl	800a620 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2220      	movs	r2, #32
 800a58c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b084      	sub	sp, #16
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d101      	bne.n	800a5ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	e02d      	b.n	800a616 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2224      	movs	r2, #36	; 0x24
 800a5c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f022 0201 	bic.w	r2, r2, #1
 800a5e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f812 	bl	800a620 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2220      	movs	r2, #32
 800a608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
	...

0800a620 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d108      	bne.n	800a642 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a640:	e031      	b.n	800a6a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a642:	2310      	movs	r3, #16
 800a644:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a646:	2310      	movs	r3, #16
 800a648:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	0e5b      	lsrs	r3, r3, #25
 800a652:	b2db      	uxtb	r3, r3
 800a654:	f003 0307 	and.w	r3, r3, #7
 800a658:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	0f5b      	lsrs	r3, r3, #29
 800a662:	b2db      	uxtb	r3, r3
 800a664:	f003 0307 	and.w	r3, r3, #7
 800a668:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
 800a66c:	7b3a      	ldrb	r2, [r7, #12]
 800a66e:	4911      	ldr	r1, [pc, #68]	; (800a6b4 <UARTEx_SetNbDataToProcess+0x94>)
 800a670:	5c8a      	ldrb	r2, [r1, r2]
 800a672:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a676:	7b3a      	ldrb	r2, [r7, #12]
 800a678:	490f      	ldr	r1, [pc, #60]	; (800a6b8 <UARTEx_SetNbDataToProcess+0x98>)
 800a67a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a67c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a680:	b29a      	uxth	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a688:	7bfb      	ldrb	r3, [r7, #15]
 800a68a:	7b7a      	ldrb	r2, [r7, #13]
 800a68c:	4909      	ldr	r1, [pc, #36]	; (800a6b4 <UARTEx_SetNbDataToProcess+0x94>)
 800a68e:	5c8a      	ldrb	r2, [r1, r2]
 800a690:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a694:	7b7a      	ldrb	r2, [r7, #13]
 800a696:	4908      	ldr	r1, [pc, #32]	; (800a6b8 <UARTEx_SetNbDataToProcess+0x98>)
 800a698:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a69a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a6a6:	bf00      	nop
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	08011008 	.word	0x08011008
 800a6b8:	08011010 	.word	0x08011010

0800a6bc <ISOUDS_ClearDiagInfo>:
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	60fb      	str	r3, [r7, #12]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	72fb      	strb	r3, [r7, #11]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d13b      	bne.n	800a74e <ISOUDS_ClearDiagInfo+0x92>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2204      	movs	r2, #4
 800a6da:	701a      	strb	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	889b      	ldrh	r3, [r3, #4]
 800a6e0:	2b04      	cmp	r3, #4
 800a6e2:	d12d      	bne.n	800a740 <ISOUDS_ClearDiagInfo+0x84>
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	041a      	lsls	r2, r3, #16
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	021b      	lsls	r3, r3, #8
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	683a      	ldr	r2, [r7, #0]
 800a6f6:	3202      	adds	r2, #2
 800a6f8:	7812      	ldrb	r2, [r2, #0]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	60fb      	str	r3, [r7, #12]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	791b      	ldrb	r3, [r3, #4]
 800a702:	72fb      	strb	r3, [r7, #11]
 800a704:	f7f6 fbbc 	bl	8000e80 <ISOUDS_ClearDTCInfoPreCondCheck>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d114      	bne.n	800a738 <ISOUDS_ClearDiagInfo+0x7c>
 800a70e:	7afb      	ldrb	r3, [r7, #11]
 800a710:	4619      	mov	r1, r3
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f7f6 fbc2 	bl	8000e9c <ISOUDS_CLearDTCInfoReq>
 800a718:	4603      	mov	r3, r0
 800a71a:	72bb      	strb	r3, [r7, #10]
 800a71c:	7abb      	ldrb	r3, [r7, #10]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d106      	bne.n	800a730 <ISOUDS_ClearDiagInfo+0x74>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	809a      	strh	r2, [r3, #4]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2203      	movs	r2, #3
 800a72c:	701a      	strb	r2, [r3, #0]
 800a72e:	e022      	b.n	800a776 <ISOUDS_ClearDiagInfo+0xba>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	7aba      	ldrb	r2, [r7, #10]
 800a734:	709a      	strb	r2, [r3, #2]
 800a736:	e01e      	b.n	800a776 <ISOUDS_ClearDiagInfo+0xba>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2222      	movs	r2, #34	; 0x22
 800a73c:	709a      	strb	r2, [r3, #2]
 800a73e:	e01a      	b.n	800a776 <ISOUDS_ClearDiagInfo+0xba>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2204      	movs	r2, #4
 800a744:	701a      	strb	r2, [r3, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2213      	movs	r2, #19
 800a74a:	709a      	strb	r2, [r3, #2]
 800a74c:	e013      	b.n	800a776 <ISOUDS_ClearDiagInfo+0xba>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2204      	movs	r2, #4
 800a752:	701a      	strb	r2, [r3, #0]
 800a754:	f7f6 fbb6 	bl	8000ec4 <ISOUDS_CLearDTCInfoReqStat>
 800a758:	4603      	mov	r3, r0
 800a75a:	72bb      	strb	r3, [r7, #10]
 800a75c:	7abb      	ldrb	r3, [r7, #10]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d106      	bne.n	800a770 <ISOUDS_ClearDiagInfo+0xb4>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	809a      	strh	r2, [r3, #4]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2203      	movs	r2, #3
 800a76c:	701a      	strb	r2, [r3, #0]
 800a76e:	e002      	b.n	800a776 <ISOUDS_ClearDiagInfo+0xba>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	7aba      	ldrb	r2, [r7, #10]
 800a774:	709a      	strb	r2, [r3, #2]
 800a776:	bf00      	nop
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
	...

0800a780 <ISOUDS_CntrlDTCSetting>:
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f000 80b0 	beq.w	800a8f2 <ISOUDS_CntrlDTCSetting+0x172>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2204      	movs	r2, #4
 800a796:	701a      	strb	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	889b      	ldrh	r3, [r3, #4]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	f240 80a5 	bls.w	800a8ec <ISOUDS_CntrlDTCSetting+0x16c>
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7aa:	72fb      	strb	r3, [r7, #11]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a7b4:	72bb      	strb	r3, [r7, #10]
 800a7b6:	7afb      	ldrb	r3, [r7, #11]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 f8a5 	bl	800a908 <ISOUDS_CntrlDTCSetValidSubfun>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	f040 808f 	bne.w	800a8e4 <ISOUDS_CntrlDTCSetting+0x164>
 800a7c6:	4b4d      	ldr	r3, [pc, #308]	; (800a8fc <ISOUDS_CntrlDTCSetting+0x17c>)
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	4a4c      	ldr	r2, [pc, #304]	; (800a900 <ISOUDS_CntrlDTCSetting+0x180>)
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	005b      	lsls	r3, r3, #1
 800a7d2:	440b      	add	r3, r1
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	4413      	add	r3, r2
 800a7d8:	3301      	adds	r3, #1
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	4b49      	ldr	r3, [pc, #292]	; (800a904 <ISOUDS_CntrlDTCSetting+0x184>)
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	fa42 f303 	asr.w	r3, r2, r3
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d076      	beq.n	800a8dc <ISOUDS_CntrlDTCSetting+0x15c>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	73fb      	strb	r3, [r7, #15]
 800a7f2:	4b42      	ldr	r3, [pc, #264]	; (800a8fc <ISOUDS_CntrlDTCSetting+0x17c>)
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	4a41      	ldr	r2, [pc, #260]	; (800a900 <ISOUDS_CntrlDTCSetting+0x180>)
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	005b      	lsls	r3, r3, #1
 800a7fe:	440b      	add	r3, r1
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4413      	add	r3, r2
 800a804:	3302      	adds	r3, #2
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d12b      	bne.n	800a864 <ISOUDS_CntrlDTCSetting+0xe4>
 800a80c:	2300      	movs	r3, #0
 800a80e:	73fb      	strb	r3, [r7, #15]
 800a810:	2300      	movs	r3, #0
 800a812:	81bb      	strh	r3, [r7, #12]
 800a814:	e014      	b.n	800a840 <ISOUDS_CntrlDTCSetting+0xc0>
 800a816:	4b39      	ldr	r3, [pc, #228]	; (800a8fc <ISOUDS_CntrlDTCSetting+0x17c>)
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	4618      	mov	r0, r3
 800a81c:	89ba      	ldrh	r2, [r7, #12]
 800a81e:	4938      	ldr	r1, [pc, #224]	; (800a900 <ISOUDS_CntrlDTCSetting+0x180>)
 800a820:	4603      	mov	r3, r0
 800a822:	005b      	lsls	r3, r3, #1
 800a824:	4403      	add	r3, r0
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	440b      	add	r3, r1
 800a82a:	4413      	add	r3, r2
 800a82c:	3304      	adds	r3, #4
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	4618      	mov	r0, r3
 800a832:	f002 fe7d 	bl	800d530 <ISOUDS_GetSAStLevel>
 800a836:	4603      	mov	r3, r0
 800a838:	73fb      	strb	r3, [r7, #15]
 800a83a:	89bb      	ldrh	r3, [r7, #12]
 800a83c:	3301      	adds	r3, #1
 800a83e:	81bb      	strh	r3, [r7, #12]
 800a840:	4b2e      	ldr	r3, [pc, #184]	; (800a8fc <ISOUDS_CntrlDTCSetting+0x17c>)
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	4619      	mov	r1, r3
 800a846:	4a2e      	ldr	r2, [pc, #184]	; (800a900 <ISOUDS_CntrlDTCSetting+0x180>)
 800a848:	460b      	mov	r3, r1
 800a84a:	005b      	lsls	r3, r3, #1
 800a84c:	440b      	add	r3, r1
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	3303      	adds	r3, #3
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	b29b      	uxth	r3, r3
 800a858:	89ba      	ldrh	r2, [r7, #12]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d202      	bcs.n	800a864 <ISOUDS_CntrlDTCSetting+0xe4>
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d0d8      	beq.n	800a816 <ISOUDS_CntrlDTCSetting+0x96>
 800a864:	7bfb      	ldrb	r3, [r7, #15]
 800a866:	2b01      	cmp	r3, #1
 800a868:	d134      	bne.n	800a8d4 <ISOUDS_CntrlDTCSetting+0x154>
 800a86a:	f7f6 fb7d 	bl	8000f68 <ISOUDS_CntrlDTCSetngPreCondCheck>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b01      	cmp	r3, #1
 800a872:	d12b      	bne.n	800a8cc <ISOUDS_CntrlDTCSetting+0x14c>
 800a874:	4b21      	ldr	r3, [pc, #132]	; (800a8fc <ISOUDS_CntrlDTCSetting+0x17c>)
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	4619      	mov	r1, r3
 800a87a:	4a21      	ldr	r2, [pc, #132]	; (800a900 <ISOUDS_CntrlDTCSetting+0x180>)
 800a87c:	460b      	mov	r3, r1
 800a87e:	005b      	lsls	r3, r3, #1
 800a880:	440b      	add	r3, r1
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	3308      	adds	r3, #8
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	1c51      	adds	r1, r2, #1
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	8892      	ldrh	r2, [r2, #4]
 800a892:	3a02      	subs	r2, #2
 800a894:	b292      	uxth	r2, r2
 800a896:	7af8      	ldrb	r0, [r7, #11]
 800a898:	4798      	blx	r3
 800a89a:	4603      	mov	r3, r0
 800a89c:	727b      	strb	r3, [r7, #9]
 800a89e:	7a7b      	ldrb	r3, [r7, #9]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10f      	bne.n	800a8c4 <ISOUDS_CntrlDTCSetting+0x144>
 800a8a4:	7abb      	ldrb	r3, [r7, #10]
 800a8a6:	2b80      	cmp	r3, #128	; 0x80
 800a8a8:	d009      	beq.n	800a8be <ISOUDS_CntrlDTCSetting+0x13e>
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	7afa      	ldrb	r2, [r7, #11]
 800a8ae:	701a      	strb	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	809a      	strh	r2, [r3, #4]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2203      	movs	r2, #3
 800a8ba:	701a      	strb	r2, [r3, #0]
 800a8bc:	e019      	b.n	800a8f2 <ISOUDS_CntrlDTCSetting+0x172>
 800a8be:	f000 fd3b 	bl	800b338 <ISOUDS_ServerRst>
 800a8c2:	e016      	b.n	800a8f2 <ISOUDS_CntrlDTCSetting+0x172>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	7a7a      	ldrb	r2, [r7, #9]
 800a8c8:	709a      	strb	r2, [r3, #2]
 800a8ca:	e012      	b.n	800a8f2 <ISOUDS_CntrlDTCSetting+0x172>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2222      	movs	r2, #34	; 0x22
 800a8d0:	709a      	strb	r2, [r3, #2]
 800a8d2:	e00e      	b.n	800a8f2 <ISOUDS_CntrlDTCSetting+0x172>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2233      	movs	r2, #51	; 0x33
 800a8d8:	709a      	strb	r2, [r3, #2]
 800a8da:	e00a      	b.n	800a8f2 <ISOUDS_CntrlDTCSetting+0x172>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	227e      	movs	r2, #126	; 0x7e
 800a8e0:	709a      	strb	r2, [r3, #2]
 800a8e2:	e006      	b.n	800a8f2 <ISOUDS_CntrlDTCSetting+0x172>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2212      	movs	r2, #18
 800a8e8:	709a      	strb	r2, [r3, #2]
 800a8ea:	e002      	b.n	800a8f2 <ISOUDS_CntrlDTCSetting+0x172>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2213      	movs	r2, #19
 800a8f0:	709a      	strb	r2, [r3, #2]
 800a8f2:	bf00      	nop
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	24001724 	.word	0x24001724
 800a900:	24000064 	.word	0x24000064
 800a904:	2400173c 	.word	0x2400173c

0800a908 <ISOUDS_CntrlDTCSetValidSubfun>:
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	71fb      	strb	r3, [r7, #7]
 800a912:	2300      	movs	r3, #0
 800a914:	73bb      	strb	r3, [r7, #14]
 800a916:	2300      	movs	r3, #0
 800a918:	73fb      	strb	r3, [r7, #15]
 800a91a:	e012      	b.n	800a942 <ISOUDS_CntrlDTCSetValidSubfun+0x3a>
 800a91c:	7bfa      	ldrb	r2, [r7, #15]
 800a91e:	4910      	ldr	r1, [pc, #64]	; (800a960 <ISOUDS_CntrlDTCSetValidSubfun+0x58>)
 800a920:	4613      	mov	r3, r2
 800a922:	005b      	lsls	r3, r3, #1
 800a924:	4413      	add	r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	440b      	add	r3, r1
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	79fa      	ldrb	r2, [r7, #7]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d104      	bne.n	800a93c <ISOUDS_CntrlDTCSetValidSubfun+0x34>
 800a932:	4a0c      	ldr	r2, [pc, #48]	; (800a964 <ISOUDS_CntrlDTCSetValidSubfun+0x5c>)
 800a934:	7bfb      	ldrb	r3, [r7, #15]
 800a936:	7013      	strb	r3, [r2, #0]
 800a938:	2301      	movs	r3, #1
 800a93a:	73bb      	strb	r3, [r7, #14]
 800a93c:	7bfb      	ldrb	r3, [r7, #15]
 800a93e:	3301      	adds	r3, #1
 800a940:	73fb      	strb	r3, [r7, #15]
 800a942:	f7f6 fb09 	bl	8000f58 <ISOUDS_Get_CntrlDTCSetMaxSubFun>
 800a946:	4603      	mov	r3, r0
 800a948:	461a      	mov	r2, r3
 800a94a:	7bfb      	ldrb	r3, [r7, #15]
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d202      	bcs.n	800a956 <ISOUDS_CntrlDTCSetValidSubfun+0x4e>
 800a950:	7bbb      	ldrb	r3, [r7, #14]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d0e2      	beq.n	800a91c <ISOUDS_CntrlDTCSetValidSubfun+0x14>
 800a956:	7bbb      	ldrb	r3, [r7, #14]
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	24000064 	.word	0x24000064
 800a964:	24001724 	.word	0x24001724

0800a968 <ISOUDS_CommCntrl>:
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2204      	movs	r2, #4
 800a976:	701a      	strb	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	889b      	ldrh	r3, [r3, #4]
 800a97c:	2b03      	cmp	r3, #3
 800a97e:	f040 80b4 	bne.w	800aaea <ISOUDS_CommCntrl+0x182>
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a98a:	72fb      	strb	r3, [r7, #11]
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a994:	72bb      	strb	r3, [r7, #10]
 800a996:	7afb      	ldrb	r3, [r7, #11]
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 f8b3 	bl	800ab04 <ISOUDS_ComCntValidSubfun>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	f040 809e 	bne.w	800aae2 <ISOUDS_CommCntrl+0x17a>
 800a9a6:	4b54      	ldr	r3, [pc, #336]	; (800aaf8 <ISOUDS_CommCntrl+0x190>)
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	4a53      	ldr	r2, [pc, #332]	; (800aafc <ISOUDS_CommCntrl+0x194>)
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	005b      	lsls	r3, r3, #1
 800a9b2:	440b      	add	r3, r1
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4413      	add	r3, r2
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	4b50      	ldr	r3, [pc, #320]	; (800ab00 <ISOUDS_CommCntrl+0x198>)
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	fa42 f303 	asr.w	r3, r2, r3
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 8085 	beq.w	800aada <ISOUDS_CommCntrl+0x172>
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	73fb      	strb	r3, [r7, #15]
 800a9d4:	4b48      	ldr	r3, [pc, #288]	; (800aaf8 <ISOUDS_CommCntrl+0x190>)
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	4619      	mov	r1, r3
 800a9da:	4a48      	ldr	r2, [pc, #288]	; (800aafc <ISOUDS_CommCntrl+0x194>)
 800a9dc:	460b      	mov	r3, r1
 800a9de:	005b      	lsls	r3, r3, #1
 800a9e0:	440b      	add	r3, r1
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4413      	add	r3, r2
 800a9e6:	3302      	adds	r3, #2
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d12b      	bne.n	800aa46 <ISOUDS_CommCntrl+0xde>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	73fb      	strb	r3, [r7, #15]
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	81bb      	strh	r3, [r7, #12]
 800a9f6:	e014      	b.n	800aa22 <ISOUDS_CommCntrl+0xba>
 800a9f8:	4b3f      	ldr	r3, [pc, #252]	; (800aaf8 <ISOUDS_CommCntrl+0x190>)
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	89ba      	ldrh	r2, [r7, #12]
 800aa00:	493e      	ldr	r1, [pc, #248]	; (800aafc <ISOUDS_CommCntrl+0x194>)
 800aa02:	4603      	mov	r3, r0
 800aa04:	005b      	lsls	r3, r3, #1
 800aa06:	4403      	add	r3, r0
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	440b      	add	r3, r1
 800aa0c:	4413      	add	r3, r2
 800aa0e:	3304      	adds	r3, #4
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f002 fd8c 	bl	800d530 <ISOUDS_GetSAStLevel>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	73fb      	strb	r3, [r7, #15]
 800aa1c:	89bb      	ldrh	r3, [r7, #12]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	81bb      	strh	r3, [r7, #12]
 800aa22:	4b35      	ldr	r3, [pc, #212]	; (800aaf8 <ISOUDS_CommCntrl+0x190>)
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	4619      	mov	r1, r3
 800aa28:	4a34      	ldr	r2, [pc, #208]	; (800aafc <ISOUDS_CommCntrl+0x194>)
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	005b      	lsls	r3, r3, #1
 800aa2e:	440b      	add	r3, r1
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	3303      	adds	r3, #3
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	89ba      	ldrh	r2, [r7, #12]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d202      	bcs.n	800aa46 <ISOUDS_CommCntrl+0xde>
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d0d8      	beq.n	800a9f8 <ISOUDS_CommCntrl+0x90>
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d13f      	bne.n	800aacc <ISOUDS_CommCntrl+0x164>
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	785b      	ldrb	r3, [r3, #1]
 800aa50:	727b      	strb	r3, [r7, #9]
 800aa52:	7a7b      	ldrb	r3, [r7, #9]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7f6 fb0b 	bl	8001070 <ISOUDS_CommTypeSupp>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d131      	bne.n	800aac4 <ISOUDS_CommCntrl+0x15c>
 800aa60:	f7f6 fb1b 	bl	800109a <ISOUDS_CommCntlPreCondCheck>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d128      	bne.n	800aabc <ISOUDS_CommCntrl+0x154>
 800aa6a:	4b23      	ldr	r3, [pc, #140]	; (800aaf8 <ISOUDS_CommCntrl+0x190>)
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	4a22      	ldr	r2, [pc, #136]	; (800aafc <ISOUDS_CommCntrl+0x194>)
 800aa72:	460b      	mov	r3, r1
 800aa74:	005b      	lsls	r3, r3, #1
 800aa76:	440b      	add	r3, r1
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	4413      	add	r3, r2
 800aa7c:	3308      	adds	r3, #8
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	683a      	ldr	r2, [r7, #0]
 800aa82:	3202      	adds	r2, #2
 800aa84:	7a79      	ldrb	r1, [r7, #9]
 800aa86:	7af8      	ldrb	r0, [r7, #11]
 800aa88:	4798      	blx	r3
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	723b      	strb	r3, [r7, #8]
 800aa8e:	7a3b      	ldrb	r3, [r7, #8]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10f      	bne.n	800aab4 <ISOUDS_CommCntrl+0x14c>
 800aa94:	7abb      	ldrb	r3, [r7, #10]
 800aa96:	2b80      	cmp	r3, #128	; 0x80
 800aa98:	d009      	beq.n	800aaae <ISOUDS_CommCntrl+0x146>
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	7afa      	ldrb	r2, [r7, #11]
 800aa9e:	701a      	strb	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	809a      	strh	r2, [r3, #4]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2203      	movs	r2, #3
 800aaaa:	701a      	strb	r2, [r3, #0]
 800aaac:	e020      	b.n	800aaf0 <ISOUDS_CommCntrl+0x188>
 800aaae:	f000 fc43 	bl	800b338 <ISOUDS_ServerRst>
 800aab2:	e01d      	b.n	800aaf0 <ISOUDS_CommCntrl+0x188>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	7a3a      	ldrb	r2, [r7, #8]
 800aab8:	709a      	strb	r2, [r3, #2]
 800aaba:	e019      	b.n	800aaf0 <ISOUDS_CommCntrl+0x188>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2222      	movs	r2, #34	; 0x22
 800aac0:	709a      	strb	r2, [r3, #2]
 800aac2:	e015      	b.n	800aaf0 <ISOUDS_CommCntrl+0x188>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2231      	movs	r2, #49	; 0x31
 800aac8:	709a      	strb	r2, [r3, #2]
 800aaca:	e011      	b.n	800aaf0 <ISOUDS_CommCntrl+0x188>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2204      	movs	r2, #4
 800aad0:	701a      	strb	r2, [r3, #0]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2233      	movs	r2, #51	; 0x33
 800aad6:	709a      	strb	r2, [r3, #2]
 800aad8:	e00a      	b.n	800aaf0 <ISOUDS_CommCntrl+0x188>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	227e      	movs	r2, #126	; 0x7e
 800aade:	709a      	strb	r2, [r3, #2]
 800aae0:	e006      	b.n	800aaf0 <ISOUDS_CommCntrl+0x188>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2212      	movs	r2, #18
 800aae6:	709a      	strb	r2, [r3, #2]
 800aae8:	e002      	b.n	800aaf0 <ISOUDS_CommCntrl+0x188>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2213      	movs	r2, #19
 800aaee:	709a      	strb	r2, [r3, #2]
 800aaf0:	bf00      	nop
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	24001725 	.word	0x24001725
 800aafc:	2400007c 	.word	0x2400007c
 800ab00:	2400173c 	.word	0x2400173c

0800ab04 <ISOUDS_ComCntValidSubfun>:
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	71fb      	strb	r3, [r7, #7]
 800ab0e:	2300      	movs	r3, #0
 800ab10:	73bb      	strb	r3, [r7, #14]
 800ab12:	2300      	movs	r3, #0
 800ab14:	73fb      	strb	r3, [r7, #15]
 800ab16:	e012      	b.n	800ab3e <ISOUDS_ComCntValidSubfun+0x3a>
 800ab18:	7bfa      	ldrb	r2, [r7, #15]
 800ab1a:	4910      	ldr	r1, [pc, #64]	; (800ab5c <ISOUDS_ComCntValidSubfun+0x58>)
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	005b      	lsls	r3, r3, #1
 800ab20:	4413      	add	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	440b      	add	r3, r1
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	79fa      	ldrb	r2, [r7, #7]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d104      	bne.n	800ab38 <ISOUDS_ComCntValidSubfun+0x34>
 800ab2e:	4a0c      	ldr	r2, [pc, #48]	; (800ab60 <ISOUDS_ComCntValidSubfun+0x5c>)
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
 800ab32:	7013      	strb	r3, [r2, #0]
 800ab34:	2301      	movs	r3, #1
 800ab36:	73bb      	strb	r3, [r7, #14]
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	73fb      	strb	r3, [r7, #15]
 800ab3e:	f7f6 fa8f 	bl	8001060 <ISOUDS_Get_ComContMaxSubFun>
 800ab42:	4603      	mov	r3, r0
 800ab44:	461a      	mov	r2, r3
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d202      	bcs.n	800ab52 <ISOUDS_ComCntValidSubfun+0x4e>
 800ab4c:	7bbb      	ldrb	r3, [r7, #14]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d0e2      	beq.n	800ab18 <ISOUDS_ComCntValidSubfun+0x14>
 800ab52:	7bbb      	ldrb	r3, [r7, #14]
 800ab54:	4618      	mov	r0, r3
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	2400007c 	.word	0x2400007c
 800ab60:	24001725 	.word	0x24001725

0800ab64 <ISOUDS_ECUReset>:
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
 800ab6e:	2300      	movs	r3, #0
 800ab70:	73fb      	strb	r3, [r7, #15]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d02d      	beq.n	800abd4 <ISOUDS_ECUReset+0x70>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2204      	movs	r2, #4
 800ab7c:	701a      	strb	r2, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	889b      	ldrh	r3, [r3, #4]
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d123      	bne.n	800abce <ISOUDS_ECUReset+0x6a>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab8e:	73bb      	strb	r3, [r7, #14]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab98:	737b      	strb	r3, [r7, #13]
 800ab9a:	7bbb      	ldrb	r3, [r7, #14]
 800ab9c:	6879      	ldr	r1, [r7, #4]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f000 f81c 	bl	800abdc <ISOUDS_ResetReqHandler>
 800aba4:	4603      	mov	r3, r0
 800aba6:	73fb      	strb	r3, [r7, #15]
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d112      	bne.n	800abd4 <ISOUDS_ECUReset+0x70>
 800abae:	7b7b      	ldrb	r3, [r7, #13]
 800abb0:	2b80      	cmp	r3, #128	; 0x80
 800abb2:	d009      	beq.n	800abc8 <ISOUDS_ECUReset+0x64>
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	7bba      	ldrb	r2, [r7, #14]
 800abb8:	701a      	strb	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2202      	movs	r2, #2
 800abbe:	809a      	strh	r2, [r3, #4]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2203      	movs	r2, #3
 800abc4:	701a      	strb	r2, [r3, #0]
 800abc6:	e005      	b.n	800abd4 <ISOUDS_ECUReset+0x70>
 800abc8:	f000 fbb6 	bl	800b338 <ISOUDS_ServerRst>
 800abcc:	e002      	b.n	800abd4 <ISOUDS_ECUReset+0x70>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2213      	movs	r2, #19
 800abd2:	709a      	strb	r2, [r3, #2]
 800abd4:	bf00      	nop
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <ISOUDS_ResetReqHandler>:
 800abdc:	b580      	push	{r7, lr}
 800abde:	b086      	sub	sp, #24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	4603      	mov	r3, r0
 800abe4:	6039      	str	r1, [r7, #0]
 800abe6:	71fb      	strb	r3, [r7, #7]
 800abe8:	2300      	movs	r3, #0
 800abea:	73fb      	strb	r3, [r7, #15]
 800abec:	2300      	movs	r3, #0
 800abee:	75fb      	strb	r3, [r7, #23]
 800abf0:	2300      	movs	r3, #0
 800abf2:	753b      	strb	r3, [r7, #20]
 800abf4:	2300      	movs	r3, #0
 800abf6:	75bb      	strb	r3, [r7, #22]
 800abf8:	e011      	b.n	800ac1e <ISOUDS_ResetReqHandler+0x42>
 800abfa:	7dba      	ldrb	r2, [r7, #22]
 800abfc:	494a      	ldr	r1, [pc, #296]	; (800ad28 <ISOUDS_ResetReqHandler+0x14c>)
 800abfe:	4613      	mov	r3, r2
 800ac00:	005b      	lsls	r3, r3, #1
 800ac02:	4413      	add	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	440b      	add	r3, r1
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	79fa      	ldrb	r2, [r7, #7]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d103      	bne.n	800ac18 <ISOUDS_ResetReqHandler+0x3c>
 800ac10:	2301      	movs	r3, #1
 800ac12:	753b      	strb	r3, [r7, #20]
 800ac14:	7dbb      	ldrb	r3, [r7, #22]
 800ac16:	757b      	strb	r3, [r7, #21]
 800ac18:	7dbb      	ldrb	r3, [r7, #22]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	75bb      	strb	r3, [r7, #22]
 800ac1e:	7dbb      	ldrb	r3, [r7, #22]
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d802      	bhi.n	800ac2a <ISOUDS_ResetReqHandler+0x4e>
 800ac24:	7d3b      	ldrb	r3, [r7, #20]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d0e7      	beq.n	800abfa <ISOUDS_ResetReqHandler+0x1e>
 800ac2a:	7d3b      	ldrb	r3, [r7, #20]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d170      	bne.n	800ad12 <ISOUDS_ResetReqHandler+0x136>
 800ac30:	7d7a      	ldrb	r2, [r7, #21]
 800ac32:	493d      	ldr	r1, [pc, #244]	; (800ad28 <ISOUDS_ResetReqHandler+0x14c>)
 800ac34:	4613      	mov	r3, r2
 800ac36:	005b      	lsls	r3, r3, #1
 800ac38:	4413      	add	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	440b      	add	r3, r1
 800ac3e:	3301      	adds	r3, #1
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	461a      	mov	r2, r3
 800ac44:	4b39      	ldr	r3, [pc, #228]	; (800ad2c <ISOUDS_ResetReqHandler+0x150>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	fa42 f303 	asr.w	r3, r2, r3
 800ac4c:	f003 0301 	and.w	r3, r3, #1
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d057      	beq.n	800ad04 <ISOUDS_ResetReqHandler+0x128>
 800ac54:	2301      	movs	r3, #1
 800ac56:	74fb      	strb	r3, [r7, #19]
 800ac58:	7d7a      	ldrb	r2, [r7, #21]
 800ac5a:	4933      	ldr	r1, [pc, #204]	; (800ad28 <ISOUDS_ResetReqHandler+0x14c>)
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	005b      	lsls	r3, r3, #1
 800ac60:	4413      	add	r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	440b      	add	r3, r1
 800ac66:	3302      	adds	r3, #2
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d127      	bne.n	800acbe <ISOUDS_ResetReqHandler+0xe2>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	74fb      	strb	r3, [r7, #19]
 800ac72:	2300      	movs	r3, #0
 800ac74:	823b      	strh	r3, [r7, #16]
 800ac76:	e012      	b.n	800ac9e <ISOUDS_ResetReqHandler+0xc2>
 800ac78:	7d7a      	ldrb	r2, [r7, #21]
 800ac7a:	8a39      	ldrh	r1, [r7, #16]
 800ac7c:	482a      	ldr	r0, [pc, #168]	; (800ad28 <ISOUDS_ResetReqHandler+0x14c>)
 800ac7e:	4613      	mov	r3, r2
 800ac80:	005b      	lsls	r3, r3, #1
 800ac82:	4413      	add	r3, r2
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	4403      	add	r3, r0
 800ac88:	440b      	add	r3, r1
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f002 fc4e 	bl	800d530 <ISOUDS_GetSAStLevel>
 800ac94:	4603      	mov	r3, r0
 800ac96:	74fb      	strb	r3, [r7, #19]
 800ac98:	8a3b      	ldrh	r3, [r7, #16]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	823b      	strh	r3, [r7, #16]
 800ac9e:	7d7a      	ldrb	r2, [r7, #21]
 800aca0:	4921      	ldr	r1, [pc, #132]	; (800ad28 <ISOUDS_ResetReqHandler+0x14c>)
 800aca2:	4613      	mov	r3, r2
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	4413      	add	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	440b      	add	r3, r1
 800acac:	3303      	adds	r3, #3
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	8a3a      	ldrh	r2, [r7, #16]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d202      	bcs.n	800acbe <ISOUDS_ResetReqHandler+0xe2>
 800acb8:	7cfb      	ldrb	r3, [r7, #19]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d0dc      	beq.n	800ac78 <ISOUDS_ResetReqHandler+0x9c>
 800acbe:	7cfb      	ldrb	r3, [r7, #19]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d118      	bne.n	800acf6 <ISOUDS_ResetReqHandler+0x11a>
 800acc4:	7d7a      	ldrb	r2, [r7, #21]
 800acc6:	4918      	ldr	r1, [pc, #96]	; (800ad28 <ISOUDS_ResetReqHandler+0x14c>)
 800acc8:	4613      	mov	r3, r2
 800acca:	005b      	lsls	r3, r3, #1
 800accc:	4413      	add	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	440b      	add	r3, r1
 800acd2:	3308      	adds	r3, #8
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4798      	blx	r3
 800acd8:	4603      	mov	r3, r0
 800acda:	73fb      	strb	r3, [r7, #15]
 800acdc:	7bfb      	ldrb	r3, [r7, #15]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d102      	bne.n	800ace8 <ISOUDS_ResetReqHandler+0x10c>
 800ace2:	2301      	movs	r3, #1
 800ace4:	75fb      	strb	r3, [r7, #23]
 800ace6:	e01a      	b.n	800ad1e <ISOUDS_ResetReqHandler+0x142>
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2204      	movs	r2, #4
 800acec:	701a      	strb	r2, [r3, #0]
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	7bfa      	ldrb	r2, [r7, #15]
 800acf2:	709a      	strb	r2, [r3, #2]
 800acf4:	e013      	b.n	800ad1e <ISOUDS_ResetReqHandler+0x142>
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	2204      	movs	r2, #4
 800acfa:	701a      	strb	r2, [r3, #0]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	2233      	movs	r2, #51	; 0x33
 800ad00:	709a      	strb	r2, [r3, #2]
 800ad02:	e00c      	b.n	800ad1e <ISOUDS_ResetReqHandler+0x142>
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	2204      	movs	r2, #4
 800ad08:	701a      	strb	r2, [r3, #0]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	227e      	movs	r2, #126	; 0x7e
 800ad0e:	709a      	strb	r2, [r3, #2]
 800ad10:	e005      	b.n	800ad1e <ISOUDS_ResetReqHandler+0x142>
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	2204      	movs	r2, #4
 800ad16:	701a      	strb	r2, [r3, #0]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	2212      	movs	r2, #18
 800ad1c:	709a      	strb	r2, [r3, #2]
 800ad1e:	7dfb      	ldrb	r3, [r7, #23]
 800ad20:	4618      	mov	r0, r3
 800ad22:	3718      	adds	r7, #24
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	08010b28 	.word	0x08010b28
 800ad2c:	2400173c 	.word	0x2400173c

0800ad30 <ISOUDS_IOCtrlByID>:
 800ad30:	b590      	push	{r4, r7, lr}
 800ad32:	b087      	sub	sp, #28
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f000 80e3 	beq.w	800af08 <ISOUDS_IOCtrlByID+0x1d8>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	889b      	ldrh	r3, [r3, #4]
 800ad46:	2b04      	cmp	r3, #4
 800ad48:	f240 80d8 	bls.w	800aefc <ISOUDS_IOCtrlByID+0x1cc>
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	021b      	lsls	r3, r3, #8
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	827b      	strh	r3, [r7, #18]
 800ad62:	8a7b      	ldrh	r3, [r7, #18]
 800ad64:	4618      	mov	r0, r3
 800ad66:	f000 f8d9 	bl	800af1c <ISOUDS_ValidatIOCntrlID>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	f040 80be 	bne.w	800aeee <ISOUDS_IOCtrlByID+0x1be>
 800ad72:	4b67      	ldr	r3, [pc, #412]	; (800af10 <ISOUDS_IOCtrlByID+0x1e0>)
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	4619      	mov	r1, r3
 800ad78:	4a66      	ldr	r2, [pc, #408]	; (800af14 <ISOUDS_IOCtrlByID+0x1e4>)
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	440b      	add	r3, r1
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	4413      	add	r3, r2
 800ad84:	3302      	adds	r3, #2
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	461a      	mov	r2, r3
 800ad8a:	4b63      	ldr	r3, [pc, #396]	; (800af18 <ISOUDS_IOCtrlByID+0x1e8>)
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	fa42 f303 	asr.w	r3, r2, r3
 800ad92:	f003 0301 	and.w	r3, r3, #1
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f000 80a2 	beq.w	800aee0 <ISOUDS_IOCtrlByID+0x1b0>
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	789b      	ldrb	r3, [r3, #2]
 800ada0:	747b      	strb	r3, [r7, #17]
 800ada2:	4b5b      	ldr	r3, [pc, #364]	; (800af10 <ISOUDS_IOCtrlByID+0x1e0>)
 800ada4:	781a      	ldrb	r2, [r3, #0]
 800ada6:	7c7b      	ldrb	r3, [r7, #17]
 800ada8:	4611      	mov	r1, r2
 800adaa:	4618      	mov	r0, r3
 800adac:	f7f6 fb14 	bl	80013d8 <ISOUDS_IOControlParameterSupp>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	f040 808d 	bne.w	800aed2 <ISOUDS_IOCtrlByID+0x1a2>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	889a      	ldrh	r2, [r3, #4]
 800adbc:	4b54      	ldr	r3, [pc, #336]	; (800af10 <ISOUDS_IOCtrlByID+0x1e0>)
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	4618      	mov	r0, r3
 800adc2:	4954      	ldr	r1, [pc, #336]	; (800af14 <ISOUDS_IOCtrlByID+0x1e4>)
 800adc4:	4603      	mov	r3, r0
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4403      	add	r3, r0
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	440b      	add	r3, r1
 800adce:	3308      	adds	r3, #8
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	429a      	cmp	r2, r3
 800add4:	d176      	bne.n	800aec4 <ISOUDS_IOCtrlByID+0x194>
 800add6:	2301      	movs	r3, #1
 800add8:	75fb      	strb	r3, [r7, #23]
 800adda:	4b4d      	ldr	r3, [pc, #308]	; (800af10 <ISOUDS_IOCtrlByID+0x1e0>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	4619      	mov	r1, r3
 800ade0:	4a4c      	ldr	r2, [pc, #304]	; (800af14 <ISOUDS_IOCtrlByID+0x1e4>)
 800ade2:	460b      	mov	r3, r1
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	440b      	add	r3, r1
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	330a      	adds	r3, #10
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d12b      	bne.n	800ae4c <ISOUDS_IOCtrlByID+0x11c>
 800adf4:	2300      	movs	r3, #0
 800adf6:	75fb      	strb	r3, [r7, #23]
 800adf8:	2300      	movs	r3, #0
 800adfa:	82bb      	strh	r3, [r7, #20]
 800adfc:	e014      	b.n	800ae28 <ISOUDS_IOCtrlByID+0xf8>
 800adfe:	4b44      	ldr	r3, [pc, #272]	; (800af10 <ISOUDS_IOCtrlByID+0x1e0>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	4618      	mov	r0, r3
 800ae04:	8aba      	ldrh	r2, [r7, #20]
 800ae06:	4943      	ldr	r1, [pc, #268]	; (800af14 <ISOUDS_IOCtrlByID+0x1e4>)
 800ae08:	4603      	mov	r3, r0
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4403      	add	r3, r0
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	440b      	add	r3, r1
 800ae12:	4413      	add	r3, r2
 800ae14:	330c      	adds	r3, #12
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f002 fb89 	bl	800d530 <ISOUDS_GetSAStLevel>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	75fb      	strb	r3, [r7, #23]
 800ae22:	8abb      	ldrh	r3, [r7, #20]
 800ae24:	3301      	adds	r3, #1
 800ae26:	82bb      	strh	r3, [r7, #20]
 800ae28:	4b39      	ldr	r3, [pc, #228]	; (800af10 <ISOUDS_IOCtrlByID+0x1e0>)
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	4a39      	ldr	r2, [pc, #228]	; (800af14 <ISOUDS_IOCtrlByID+0x1e4>)
 800ae30:	460b      	mov	r3, r1
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	440b      	add	r3, r1
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4413      	add	r3, r2
 800ae3a:	330b      	adds	r3, #11
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	8aba      	ldrh	r2, [r7, #20]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d202      	bcs.n	800ae4c <ISOUDS_IOCtrlByID+0x11c>
 800ae46:	7dfb      	ldrb	r3, [r7, #23]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d0d8      	beq.n	800adfe <ISOUDS_IOCtrlByID+0xce>
 800ae4c:	7dfb      	ldrb	r3, [r7, #23]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d131      	bne.n	800aeb6 <ISOUDS_IOCtrlByID+0x186>
 800ae52:	f7f6 fafd 	bl	8001450 <ISOUDS_IOCntrlPreCondCheck>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d125      	bne.n	800aea8 <ISOUDS_IOCtrlByID+0x178>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	81fb      	strh	r3, [r7, #14]
 800ae60:	4b2b      	ldr	r3, [pc, #172]	; (800af10 <ISOUDS_IOCtrlByID+0x1e0>)
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	4619      	mov	r1, r3
 800ae66:	4a2b      	ldr	r2, [pc, #172]	; (800af14 <ISOUDS_IOCtrlByID+0x1e4>)
 800ae68:	460b      	mov	r3, r1
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	440b      	add	r3, r1
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	4413      	add	r3, r2
 800ae72:	3310      	adds	r3, #16
 800ae74:	681c      	ldr	r4, [r3, #0]
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	1cda      	adds	r2, r3, #3
 800ae7a:	f107 030e 	add.w	r3, r7, #14
 800ae7e:	7c79      	ldrb	r1, [r7, #17]
 800ae80:	8a78      	ldrh	r0, [r7, #18]
 800ae82:	47a0      	blx	r4
 800ae84:	4603      	mov	r3, r0
 800ae86:	743b      	strb	r3, [r7, #16]
 800ae88:	7c3b      	ldrb	r3, [r7, #16]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d108      	bne.n	800aea0 <ISOUDS_IOCtrlByID+0x170>
 800ae8e:	89fb      	ldrh	r3, [r7, #14]
 800ae90:	3304      	adds	r3, #4
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	809a      	strh	r2, [r3, #4]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2203      	movs	r2, #3
 800ae9c:	701a      	strb	r2, [r3, #0]
 800ae9e:	e033      	b.n	800af08 <ISOUDS_IOCtrlByID+0x1d8>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	7c3a      	ldrb	r2, [r7, #16]
 800aea4:	709a      	strb	r2, [r3, #2]
 800aea6:	e02f      	b.n	800af08 <ISOUDS_IOCtrlByID+0x1d8>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2204      	movs	r2, #4
 800aeac:	701a      	strb	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2222      	movs	r2, #34	; 0x22
 800aeb2:	709a      	strb	r2, [r3, #2]
 800aeb4:	e028      	b.n	800af08 <ISOUDS_IOCtrlByID+0x1d8>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2204      	movs	r2, #4
 800aeba:	701a      	strb	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2233      	movs	r2, #51	; 0x33
 800aec0:	709a      	strb	r2, [r3, #2]
 800aec2:	e021      	b.n	800af08 <ISOUDS_IOCtrlByID+0x1d8>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2204      	movs	r2, #4
 800aec8:	701a      	strb	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2213      	movs	r2, #19
 800aece:	709a      	strb	r2, [r3, #2]
 800aed0:	e01a      	b.n	800af08 <ISOUDS_IOCtrlByID+0x1d8>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2204      	movs	r2, #4
 800aed6:	701a      	strb	r2, [r3, #0]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2231      	movs	r2, #49	; 0x31
 800aedc:	709a      	strb	r2, [r3, #2]
 800aede:	e013      	b.n	800af08 <ISOUDS_IOCtrlByID+0x1d8>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2204      	movs	r2, #4
 800aee4:	701a      	strb	r2, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2231      	movs	r2, #49	; 0x31
 800aeea:	709a      	strb	r2, [r3, #2]
 800aeec:	e00c      	b.n	800af08 <ISOUDS_IOCtrlByID+0x1d8>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2204      	movs	r2, #4
 800aef2:	701a      	strb	r2, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2231      	movs	r2, #49	; 0x31
 800aef8:	709a      	strb	r2, [r3, #2]
 800aefa:	e005      	b.n	800af08 <ISOUDS_IOCtrlByID+0x1d8>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2204      	movs	r2, #4
 800af00:	701a      	strb	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2213      	movs	r2, #19
 800af06:	709a      	strb	r2, [r3, #2]
 800af08:	bf00      	nop
 800af0a:	371c      	adds	r7, #28
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd90      	pop	{r4, r7, pc}
 800af10:	24001726 	.word	0x24001726
 800af14:	24000184 	.word	0x24000184
 800af18:	2400173c 	.word	0x2400173c

0800af1c <ISOUDS_ValidatIOCntrlID>:
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	4603      	mov	r3, r0
 800af24:	80fb      	strh	r3, [r7, #6]
 800af26:	2300      	movs	r3, #0
 800af28:	737b      	strb	r3, [r7, #13]
 800af2a:	2300      	movs	r3, #0
 800af2c:	81fb      	strh	r3, [r7, #14]
 800af2e:	e013      	b.n	800af58 <ISOUDS_ValidatIOCntrlID+0x3c>
 800af30:	89fa      	ldrh	r2, [r7, #14]
 800af32:	4911      	ldr	r1, [pc, #68]	; (800af78 <ISOUDS_ValidatIOCntrlID+0x5c>)
 800af34:	4613      	mov	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	440b      	add	r3, r1
 800af3e:	881b      	ldrh	r3, [r3, #0]
 800af40:	88fa      	ldrh	r2, [r7, #6]
 800af42:	429a      	cmp	r2, r3
 800af44:	d105      	bne.n	800af52 <ISOUDS_ValidatIOCntrlID+0x36>
 800af46:	89fb      	ldrh	r3, [r7, #14]
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	4b0c      	ldr	r3, [pc, #48]	; (800af7c <ISOUDS_ValidatIOCntrlID+0x60>)
 800af4c:	701a      	strb	r2, [r3, #0]
 800af4e:	2301      	movs	r3, #1
 800af50:	737b      	strb	r3, [r7, #13]
 800af52:	89fb      	ldrh	r3, [r7, #14]
 800af54:	3301      	adds	r3, #1
 800af56:	81fb      	strh	r3, [r7, #14]
 800af58:	f7f6 fa35 	bl	80013c6 <ISOUDS_Get_IOContrlMaxSubFun>
 800af5c:	4603      	mov	r3, r0
 800af5e:	b29b      	uxth	r3, r3
 800af60:	89fa      	ldrh	r2, [r7, #14]
 800af62:	429a      	cmp	r2, r3
 800af64:	d202      	bcs.n	800af6c <ISOUDS_ValidatIOCntrlID+0x50>
 800af66:	7b7b      	ldrb	r3, [r7, #13]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d0e1      	beq.n	800af30 <ISOUDS_ValidatIOCntrlID+0x14>
 800af6c:	7b7b      	ldrb	r3, [r7, #13]
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	24000184 	.word	0x24000184
 800af7c:	24001726 	.word	0x24001726

0800af80 <ISOUDS_Server_Init>:
 800af80:	b580      	push	{r7, lr}
 800af82:	af00      	add	r7, sp, #0
 800af84:	4b16      	ldr	r3, [pc, #88]	; (800afe0 <ISOUDS_Server_Init+0x60>)
 800af86:	2201      	movs	r2, #1
 800af88:	701a      	strb	r2, [r3, #0]
 800af8a:	4b16      	ldr	r3, [pc, #88]	; (800afe4 <ISOUDS_Server_Init+0x64>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	701a      	strb	r2, [r3, #0]
 800af90:	4b15      	ldr	r3, [pc, #84]	; (800afe8 <ISOUDS_Server_Init+0x68>)
 800af92:	2200      	movs	r2, #0
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	4b15      	ldr	r3, [pc, #84]	; (800afec <ISOUDS_Server_Init+0x6c>)
 800af98:	2200      	movs	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]
 800af9c:	f7f6 fbe0 	bl	8001760 <ISOUDS_GetNRC78P2MimLim>
 800afa0:	4603      	mov	r3, r0
 800afa2:	4a13      	ldr	r2, [pc, #76]	; (800aff0 <ISOUDS_Server_Init+0x70>)
 800afa4:	6013      	str	r3, [r2, #0]
 800afa6:	f7f6 fbe4 	bl	8001772 <ISOUDS_GetNRC78P2MaxLim>
 800afaa:	4603      	mov	r3, r0
 800afac:	4a11      	ldr	r2, [pc, #68]	; (800aff4 <ISOUDS_Server_Init+0x74>)
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	f7f6 fbe8 	bl	8001784 <ISOUDS_GetS3TimerLim>
 800afb4:	4603      	mov	r3, r0
 800afb6:	4a10      	ldr	r2, [pc, #64]	; (800aff8 <ISOUDS_Server_Init+0x78>)
 800afb8:	6013      	str	r3, [r2, #0]
 800afba:	4b10      	ldr	r3, [pc, #64]	; (800affc <ISOUDS_Server_Init+0x7c>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	701a      	strb	r2, [r3, #0]
 800afc0:	4b0f      	ldr	r3, [pc, #60]	; (800b000 <ISOUDS_Server_Init+0x80>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	701a      	strb	r2, [r3, #0]
 800afc6:	4b0f      	ldr	r3, [pc, #60]	; (800b004 <ISOUDS_Server_Init+0x84>)
 800afc8:	2200      	movs	r2, #0
 800afca:	601a      	str	r2, [r3, #0]
 800afcc:	f002 f8b0 	bl	800d130 <ISOUDS_SAInit>
 800afd0:	f003 fac0 	bl	800e554 <ISOUDS_AUTHENInit>
 800afd4:	f7f6 fb42 	bl	800165c <ISOUDS_ServerSetReqCANid>
 800afd8:	f7f6 fb56 	bl	8001688 <ISOUDS_ServerSetRespCANid>
 800afdc:	bf00      	nop
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	2400173c 	.word	0x2400173c
 800afe4:	24001744 	.word	0x24001744
 800afe8:	2400172c 	.word	0x2400172c
 800afec:	24001730 	.word	0x24001730
 800aff0:	24001754 	.word	0x24001754
 800aff4:	24001758 	.word	0x24001758
 800aff8:	2400175c 	.word	0x2400175c
 800affc:	2400173b 	.word	0x2400173b
 800b000:	24001728 	.word	0x24001728
 800b004:	24001740 	.word	0x24001740

0800b008 <ISOUDS_ServerMsgIndi>:
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	4603      	mov	r3, r0
 800b010:	6039      	str	r1, [r7, #0]
 800b012:	80fb      	strh	r3, [r7, #6]
 800b014:	4613      	mov	r3, r2
 800b016:	717b      	strb	r3, [r7, #5]
 800b018:	4b18      	ldr	r3, [pc, #96]	; (800b07c <ISOUDS_ServerMsgIndi+0x74>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d003      	beq.n	800b028 <ISOUDS_ServerMsgIndi+0x20>
 800b020:	4b16      	ldr	r3, [pc, #88]	; (800b07c <ISOUDS_ServerMsgIndi+0x74>)
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d124      	bne.n	800b072 <ISOUDS_ServerMsgIndi+0x6a>
 800b028:	4a14      	ldr	r2, [pc, #80]	; (800b07c <ISOUDS_ServerMsgIndi+0x74>)
 800b02a:	88fb      	ldrh	r3, [r7, #6]
 800b02c:	8093      	strh	r3, [r2, #4]
 800b02e:	f000 fa7b 	bl	800b528 <ISOUDS_ResetiS3Timer>
 800b032:	2300      	movs	r3, #0
 800b034:	81fb      	strh	r3, [r7, #14]
 800b036:	e009      	b.n	800b04c <ISOUDS_ServerMsgIndi+0x44>
 800b038:	89fb      	ldrh	r3, [r7, #14]
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	441a      	add	r2, r3
 800b03e:	89fb      	ldrh	r3, [r7, #14]
 800b040:	7811      	ldrb	r1, [r2, #0]
 800b042:	4a0f      	ldr	r2, [pc, #60]	; (800b080 <ISOUDS_ServerMsgIndi+0x78>)
 800b044:	54d1      	strb	r1, [r2, r3]
 800b046:	89fb      	ldrh	r3, [r7, #14]
 800b048:	3301      	adds	r3, #1
 800b04a:	81fb      	strh	r3, [r7, #14]
 800b04c:	4b0b      	ldr	r3, [pc, #44]	; (800b07c <ISOUDS_ServerMsgIndi+0x74>)
 800b04e:	889b      	ldrh	r3, [r3, #4]
 800b050:	89fa      	ldrh	r2, [r7, #14]
 800b052:	429a      	cmp	r2, r3
 800b054:	d3f0      	bcc.n	800b038 <ISOUDS_ServerMsgIndi+0x30>
 800b056:	f7f6 fb7b 	bl	8001750 <ISOUDS_GetSTDP2Limit>
 800b05a:	4603      	mov	r3, r0
 800b05c:	4a09      	ldr	r2, [pc, #36]	; (800b084 <ISOUDS_ServerMsgIndi+0x7c>)
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	4b09      	ldr	r3, [pc, #36]	; (800b088 <ISOUDS_ServerMsgIndi+0x80>)
 800b062:	2201      	movs	r2, #1
 800b064:	601a      	str	r2, [r3, #0]
 800b066:	4b05      	ldr	r3, [pc, #20]	; (800b07c <ISOUDS_ServerMsgIndi+0x74>)
 800b068:	2202      	movs	r2, #2
 800b06a:	701a      	strb	r2, [r3, #0]
 800b06c:	4a03      	ldr	r2, [pc, #12]	; (800b07c <ISOUDS_ServerMsgIndi+0x74>)
 800b06e:	797b      	ldrb	r3, [r7, #5]
 800b070:	7193      	strb	r3, [r2, #6]
 800b072:	bf00      	nop
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	24001744 	.word	0x24001744
 800b080:	24000354 	.word	0x24000354
 800b084:	24001734 	.word	0x24001734
 800b088:	2400172c 	.word	0x2400172c

0800b08c <ISOUDS_Main_Server>:
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	2300      	movs	r3, #0
 800b094:	71bb      	strb	r3, [r7, #6]
 800b096:	4ba0      	ldr	r3, [pc, #640]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	f040 80b5 	bne.w	800b20a <ISOUDS_Main_Server+0x17e>
 800b0a0:	4b9e      	ldr	r3, [pc, #632]	; (800b31c <ISOUDS_Main_Server+0x290>)
 800b0a2:	781a      	ldrb	r2, [r3, #0]
 800b0a4:	4b9c      	ldr	r3, [pc, #624]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b0a6:	705a      	strb	r2, [r3, #1]
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	71fb      	strb	r3, [r7, #7]
 800b0ac:	e08e      	b.n	800b1cc <ISOUDS_Main_Server+0x140>
 800b0ae:	79fb      	ldrb	r3, [r7, #7]
 800b0b0:	4a9b      	ldr	r2, [pc, #620]	; (800b320 <ISOUDS_Main_Server+0x294>)
 800b0b2:	011b      	lsls	r3, r3, #4
 800b0b4:	4413      	add	r3, r2
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	781a      	ldrb	r2, [r3, #0]
 800b0ba:	4b97      	ldr	r3, [pc, #604]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b0bc:	785b      	ldrb	r3, [r3, #1]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	f040 8081 	bne.w	800b1c6 <ISOUDS_Main_Server+0x13a>
 800b0c4:	79fb      	ldrb	r3, [r7, #7]
 800b0c6:	4a96      	ldr	r2, [pc, #600]	; (800b320 <ISOUDS_Main_Server+0x294>)
 800b0c8:	011b      	lsls	r3, r3, #4
 800b0ca:	4413      	add	r3, r2
 800b0cc:	781a      	ldrb	r2, [r3, #0]
 800b0ce:	4b92      	ldr	r3, [pc, #584]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b0d0:	799b      	ldrb	r3, [r3, #6]
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d075      	beq.n	800b1c6 <ISOUDS_Main_Server+0x13a>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	71bb      	strb	r3, [r7, #6]
 800b0de:	2301      	movs	r3, #1
 800b0e0:	707b      	strb	r3, [r7, #1]
 800b0e2:	79fb      	ldrb	r3, [r7, #7]
 800b0e4:	4a8e      	ldr	r2, [pc, #568]	; (800b320 <ISOUDS_Main_Server+0x294>)
 800b0e6:	011b      	lsls	r3, r3, #4
 800b0e8:	4413      	add	r3, r2
 800b0ea:	330d      	adds	r3, #13
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d106      	bne.n	800b100 <ISOUDS_Main_Server+0x74>
 800b0f2:	f003 fa93 	bl	800e61c <ISOUDS_GetAAUTHENTICATEStatus>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d001      	beq.n	800b100 <ISOUDS_Main_Server+0x74>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	707b      	strb	r3, [r7, #1]
 800b100:	787b      	ldrb	r3, [r7, #1]
 800b102:	2b01      	cmp	r3, #1
 800b104:	d159      	bne.n	800b1ba <ISOUDS_Main_Server+0x12e>
 800b106:	79fb      	ldrb	r3, [r7, #7]
 800b108:	4a85      	ldr	r2, [pc, #532]	; (800b320 <ISOUDS_Main_Server+0x294>)
 800b10a:	011b      	lsls	r3, r3, #4
 800b10c:	4413      	add	r3, r2
 800b10e:	3308      	adds	r3, #8
 800b110:	781a      	ldrb	r2, [r3, #0]
 800b112:	4b84      	ldr	r3, [pc, #528]	; (800b324 <ISOUDS_Main_Server+0x298>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	4619      	mov	r1, r3
 800b118:	2301      	movs	r3, #1
 800b11a:	408b      	lsls	r3, r1
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	4013      	ands	r3, r2
 800b120:	b2db      	uxtb	r3, r3
 800b122:	2b00      	cmp	r3, #0
 800b124:	d042      	beq.n	800b1ac <ISOUDS_Main_Server+0x120>
 800b126:	2301      	movs	r3, #1
 800b128:	717b      	strb	r3, [r7, #5]
 800b12a:	79fb      	ldrb	r3, [r7, #7]
 800b12c:	4a7c      	ldr	r2, [pc, #496]	; (800b320 <ISOUDS_Main_Server+0x294>)
 800b12e:	011b      	lsls	r3, r3, #4
 800b130:	4413      	add	r3, r2
 800b132:	3309      	adds	r3, #9
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	2b01      	cmp	r3, #1
 800b138:	d121      	bne.n	800b17e <ISOUDS_Main_Server+0xf2>
 800b13a:	2300      	movs	r3, #0
 800b13c:	717b      	strb	r3, [r7, #5]
 800b13e:	2300      	movs	r3, #0
 800b140:	807b      	strh	r3, [r7, #2]
 800b142:	e00f      	b.n	800b164 <ISOUDS_Main_Server+0xd8>
 800b144:	79fa      	ldrb	r2, [r7, #7]
 800b146:	887b      	ldrh	r3, [r7, #2]
 800b148:	4975      	ldr	r1, [pc, #468]	; (800b320 <ISOUDS_Main_Server+0x294>)
 800b14a:	0112      	lsls	r2, r2, #4
 800b14c:	440a      	add	r2, r1
 800b14e:	4413      	add	r3, r2
 800b150:	330b      	adds	r3, #11
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	4618      	mov	r0, r3
 800b156:	f002 f9eb 	bl	800d530 <ISOUDS_GetSAStLevel>
 800b15a:	4603      	mov	r3, r0
 800b15c:	717b      	strb	r3, [r7, #5]
 800b15e:	887b      	ldrh	r3, [r7, #2]
 800b160:	3301      	adds	r3, #1
 800b162:	807b      	strh	r3, [r7, #2]
 800b164:	79fb      	ldrb	r3, [r7, #7]
 800b166:	4a6e      	ldr	r2, [pc, #440]	; (800b320 <ISOUDS_Main_Server+0x294>)
 800b168:	011b      	lsls	r3, r3, #4
 800b16a:	4413      	add	r3, r2
 800b16c:	330a      	adds	r3, #10
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	b29b      	uxth	r3, r3
 800b172:	887a      	ldrh	r2, [r7, #2]
 800b174:	429a      	cmp	r2, r3
 800b176:	d202      	bcs.n	800b17e <ISOUDS_Main_Server+0xf2>
 800b178:	797b      	ldrb	r3, [r7, #5]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d0e2      	beq.n	800b144 <ISOUDS_Main_Server+0xb8>
 800b17e:	797b      	ldrb	r3, [r7, #5]
 800b180:	2b01      	cmp	r3, #1
 800b182:	d10c      	bne.n	800b19e <ISOUDS_Main_Server+0x112>
 800b184:	4a68      	ldr	r2, [pc, #416]	; (800b328 <ISOUDS_Main_Server+0x29c>)
 800b186:	79fb      	ldrb	r3, [r7, #7]
 800b188:	7013      	strb	r3, [r2, #0]
 800b18a:	79fb      	ldrb	r3, [r7, #7]
 800b18c:	4a64      	ldr	r2, [pc, #400]	; (800b320 <ISOUDS_Main_Server+0x294>)
 800b18e:	011b      	lsls	r3, r3, #4
 800b190:	4413      	add	r3, r2
 800b192:	3304      	adds	r3, #4
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4965      	ldr	r1, [pc, #404]	; (800b32c <ISOUDS_Main_Server+0x2a0>)
 800b198:	485f      	ldr	r0, [pc, #380]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b19a:	4798      	blx	r3
 800b19c:	e013      	b.n	800b1c6 <ISOUDS_Main_Server+0x13a>
 800b19e:	4b5e      	ldr	r3, [pc, #376]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b1a0:	2233      	movs	r2, #51	; 0x33
 800b1a2:	709a      	strb	r2, [r3, #2]
 800b1a4:	4b5c      	ldr	r3, [pc, #368]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b1a6:	2204      	movs	r2, #4
 800b1a8:	701a      	strb	r2, [r3, #0]
 800b1aa:	e00c      	b.n	800b1c6 <ISOUDS_Main_Server+0x13a>
 800b1ac:	4b5a      	ldr	r3, [pc, #360]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b1ae:	227f      	movs	r2, #127	; 0x7f
 800b1b0:	709a      	strb	r2, [r3, #2]
 800b1b2:	4b59      	ldr	r3, [pc, #356]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b1b4:	2204      	movs	r2, #4
 800b1b6:	701a      	strb	r2, [r3, #0]
 800b1b8:	e005      	b.n	800b1c6 <ISOUDS_Main_Server+0x13a>
 800b1ba:	4b57      	ldr	r3, [pc, #348]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b1bc:	2234      	movs	r2, #52	; 0x34
 800b1be:	709a      	strb	r2, [r3, #2]
 800b1c0:	4b55      	ldr	r3, [pc, #340]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b1c2:	2204      	movs	r2, #4
 800b1c4:	701a      	strb	r2, [r3, #0]
 800b1c6:	79fb      	ldrb	r3, [r7, #7]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	71fb      	strb	r3, [r7, #7]
 800b1cc:	f7f6 fa9f 	bl	800170e <ISOUDS_Get_NoOfServConfgrd>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	79fb      	ldrb	r3, [r7, #7]
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d203      	bcs.n	800b1e2 <ISOUDS_Main_Server+0x156>
 800b1da:	79bb      	ldrb	r3, [r7, #6]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	f47f af66 	bne.w	800b0ae <ISOUDS_Main_Server+0x22>
 800b1e2:	79bb      	ldrb	r3, [r7, #6]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d12a      	bne.n	800b23e <ISOUDS_Main_Server+0x1b2>
 800b1e8:	4b4b      	ldr	r3, [pc, #300]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b1ea:	799b      	ldrb	r3, [r3, #6]
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	d109      	bne.n	800b204 <ISOUDS_Main_Server+0x178>
 800b1f0:	4b49      	ldr	r3, [pc, #292]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b1f2:	2203      	movs	r2, #3
 800b1f4:	809a      	strh	r2, [r3, #4]
 800b1f6:	4b48      	ldr	r3, [pc, #288]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b1f8:	2211      	movs	r2, #17
 800b1fa:	709a      	strb	r2, [r3, #2]
 800b1fc:	4b46      	ldr	r3, [pc, #280]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b1fe:	2204      	movs	r2, #4
 800b200:	701a      	strb	r2, [r3, #0]
 800b202:	e01c      	b.n	800b23e <ISOUDS_Main_Server+0x1b2>
 800b204:	f000 f898 	bl	800b338 <ISOUDS_ServerRst>
 800b208:	e019      	b.n	800b23e <ISOUDS_Main_Server+0x1b2>
 800b20a:	4b43      	ldr	r3, [pc, #268]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	2b05      	cmp	r3, #5
 800b210:	d115      	bne.n	800b23e <ISOUDS_Main_Server+0x1b2>
 800b212:	f7f6 fa7c 	bl	800170e <ISOUDS_Get_NoOfServConfgrd>
 800b216:	4603      	mov	r3, r0
 800b218:	461a      	mov	r2, r3
 800b21a:	4b43      	ldr	r3, [pc, #268]	; (800b328 <ISOUDS_Main_Server+0x29c>)
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d90a      	bls.n	800b238 <ISOUDS_Main_Server+0x1ac>
 800b222:	4b41      	ldr	r3, [pc, #260]	; (800b328 <ISOUDS_Main_Server+0x29c>)
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	4a3e      	ldr	r2, [pc, #248]	; (800b320 <ISOUDS_Main_Server+0x294>)
 800b228:	011b      	lsls	r3, r3, #4
 800b22a:	4413      	add	r3, r2
 800b22c:	3304      	adds	r3, #4
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	493e      	ldr	r1, [pc, #248]	; (800b32c <ISOUDS_Main_Server+0x2a0>)
 800b232:	4839      	ldr	r0, [pc, #228]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b234:	4798      	blx	r3
 800b236:	e002      	b.n	800b23e <ISOUDS_Main_Server+0x1b2>
 800b238:	4b37      	ldr	r3, [pc, #220]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b23a:	2200      	movs	r2, #0
 800b23c:	701a      	strb	r2, [r3, #0]
 800b23e:	4b36      	ldr	r3, [pc, #216]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	2b03      	cmp	r3, #3
 800b244:	d119      	bne.n	800b27a <ISOUDS_Main_Server+0x1ee>
 800b246:	4b34      	ldr	r3, [pc, #208]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b248:	785b      	ldrb	r3, [r3, #1]
 800b24a:	3340      	adds	r3, #64	; 0x40
 800b24c:	b2da      	uxtb	r2, r3
 800b24e:	4b33      	ldr	r3, [pc, #204]	; (800b31c <ISOUDS_Main_Server+0x290>)
 800b250:	701a      	strb	r2, [r3, #0]
 800b252:	4b37      	ldr	r3, [pc, #220]	; (800b330 <ISOUDS_Main_Server+0x2a4>)
 800b254:	2200      	movs	r2, #0
 800b256:	601a      	str	r2, [r3, #0]
 800b258:	4b2f      	ldr	r3, [pc, #188]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b25a:	2207      	movs	r2, #7
 800b25c:	701a      	strb	r2, [r3, #0]
 800b25e:	f7f6 fa77 	bl	8001750 <ISOUDS_GetSTDP2Limit>
 800b262:	4603      	mov	r3, r0
 800b264:	4a33      	ldr	r2, [pc, #204]	; (800b334 <ISOUDS_Main_Server+0x2a8>)
 800b266:	6013      	str	r3, [r2, #0]
 800b268:	f7f6 fa0e 	bl	8001688 <ISOUDS_ServerSetRespCANid>
 800b26c:	4b2a      	ldr	r3, [pc, #168]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b26e:	889b      	ldrh	r3, [r3, #4]
 800b270:	492a      	ldr	r1, [pc, #168]	; (800b31c <ISOUDS_Main_Server+0x290>)
 800b272:	4618      	mov	r0, r3
 800b274:	f7f6 fa1d 	bl	80016b2 <ISOUDS_ServerTxRequest>
 800b278:	e039      	b.n	800b2ee <ISOUDS_Main_Server+0x262>
 800b27a:	4b27      	ldr	r3, [pc, #156]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	2b04      	cmp	r3, #4
 800b280:	d135      	bne.n	800b2ee <ISOUDS_Main_Server+0x262>
 800b282:	4b25      	ldr	r3, [pc, #148]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b284:	789b      	ldrb	r3, [r3, #2]
 800b286:	2b78      	cmp	r3, #120	; 0x78
 800b288:	d105      	bne.n	800b296 <ISOUDS_Main_Server+0x20a>
 800b28a:	4b23      	ldr	r3, [pc, #140]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b28c:	2205      	movs	r2, #5
 800b28e:	701a      	strb	r2, [r3, #0]
 800b290:	f000 f904 	bl	800b49c <ISOUDS_iTxRespPend>
 800b294:	e02b      	b.n	800b2ee <ISOUDS_Main_Server+0x262>
 800b296:	4b20      	ldr	r3, [pc, #128]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b298:	799b      	ldrb	r3, [r3, #6]
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d017      	beq.n	800b2ce <ISOUDS_Main_Server+0x242>
 800b29e:	4b1e      	ldr	r3, [pc, #120]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b2a0:	799b      	ldrb	r3, [r3, #6]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d121      	bne.n	800b2ea <ISOUDS_Main_Server+0x25e>
 800b2a6:	4b1c      	ldr	r3, [pc, #112]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b2a8:	789b      	ldrb	r3, [r3, #2]
 800b2aa:	2b11      	cmp	r3, #17
 800b2ac:	d01d      	beq.n	800b2ea <ISOUDS_Main_Server+0x25e>
 800b2ae:	4b1a      	ldr	r3, [pc, #104]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b2b0:	789b      	ldrb	r3, [r3, #2]
 800b2b2:	2b12      	cmp	r3, #18
 800b2b4:	d019      	beq.n	800b2ea <ISOUDS_Main_Server+0x25e>
 800b2b6:	4b18      	ldr	r3, [pc, #96]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b2b8:	789b      	ldrb	r3, [r3, #2]
 800b2ba:	2b7e      	cmp	r3, #126	; 0x7e
 800b2bc:	d015      	beq.n	800b2ea <ISOUDS_Main_Server+0x25e>
 800b2be:	4b16      	ldr	r3, [pc, #88]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b2c0:	789b      	ldrb	r3, [r3, #2]
 800b2c2:	2b7f      	cmp	r3, #127	; 0x7f
 800b2c4:	d011      	beq.n	800b2ea <ISOUDS_Main_Server+0x25e>
 800b2c6:	4b14      	ldr	r3, [pc, #80]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b2c8:	789b      	ldrb	r3, [r3, #2]
 800b2ca:	2b31      	cmp	r3, #49	; 0x31
 800b2cc:	d00d      	beq.n	800b2ea <ISOUDS_Main_Server+0x25e>
 800b2ce:	4b12      	ldr	r3, [pc, #72]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b2d0:	2207      	movs	r2, #7
 800b2d2:	701a      	strb	r2, [r3, #0]
 800b2d4:	f7f6 fa3c 	bl	8001750 <ISOUDS_GetSTDP2Limit>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	4a16      	ldr	r2, [pc, #88]	; (800b334 <ISOUDS_Main_Server+0x2a8>)
 800b2dc:	6013      	str	r3, [r2, #0]
 800b2de:	4b14      	ldr	r3, [pc, #80]	; (800b330 <ISOUDS_Main_Server+0x2a4>)
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	601a      	str	r2, [r3, #0]
 800b2e4:	f000 f8bc 	bl	800b460 <ISOUDS_iTxNegResp>
 800b2e8:	e001      	b.n	800b2ee <ISOUDS_Main_Server+0x262>
 800b2ea:	f000 f825 	bl	800b338 <ISOUDS_ServerRst>
 800b2ee:	4b0a      	ldr	r3, [pc, #40]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	2b06      	cmp	r3, #6
 800b2f4:	d102      	bne.n	800b2fc <ISOUDS_Main_Server+0x270>
 800b2f6:	4b08      	ldr	r3, [pc, #32]	; (800b318 <ISOUDS_Main_Server+0x28c>)
 800b2f8:	2205      	movs	r2, #5
 800b2fa:	701a      	strb	r2, [r3, #0]
 800b2fc:	f002 f806 	bl	800d30c <ISOUDS_SAChkTimer>
 800b300:	f000 fe78 	bl	800bff4 <ISOUDS_RdDataPeriodicDIDMainFunction>
 800b304:	f7f7 f8ba 	bl	800247c <ISOUDS_RespOnEvent_Sched>
 800b308:	f003 f944 	bl	800e594 <ISOUDS_AUTHENChkTimer>
 800b30c:	f000 f82c 	bl	800b368 <ISOUDS_SrvMon>
 800b310:	bf00      	nop
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	24001744 	.word	0x24001744
 800b31c:	24000354 	.word	0x24000354
 800b320:	08010b4c 	.word	0x08010b4c
 800b324:	2400173c 	.word	0x2400173c
 800b328:	24001727 	.word	0x24001727
 800b32c:	24000355 	.word	0x24000355
 800b330:	2400172c 	.word	0x2400172c
 800b334:	24001734 	.word	0x24001734

0800b338 <ISOUDS_ServerRst>:
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	4b07      	ldr	r3, [pc, #28]	; (800b35c <ISOUDS_ServerRst+0x24>)
 800b33e:	2200      	movs	r2, #0
 800b340:	701a      	strb	r2, [r3, #0]
 800b342:	4b06      	ldr	r3, [pc, #24]	; (800b35c <ISOUDS_ServerRst+0x24>)
 800b344:	2200      	movs	r2, #0
 800b346:	705a      	strb	r2, [r3, #1]
 800b348:	4b05      	ldr	r3, [pc, #20]	; (800b360 <ISOUDS_ServerRst+0x28>)
 800b34a:	22ff      	movs	r2, #255	; 0xff
 800b34c:	701a      	strb	r2, [r3, #0]
 800b34e:	4b05      	ldr	r3, [pc, #20]	; (800b364 <ISOUDS_ServerRst+0x2c>)
 800b350:	2200      	movs	r2, #0
 800b352:	701a      	strb	r2, [r3, #0]
 800b354:	f000 f8e8 	bl	800b528 <ISOUDS_ResetiS3Timer>
 800b358:	bf00      	nop
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	24001744 	.word	0x24001744
 800b360:	24001727 	.word	0x24001727
 800b364:	24001728 	.word	0x24001728

0800b368 <ISOUDS_SrvMon>:
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	4b2c      	ldr	r3, [pc, #176]	; (800b420 <ISOUDS_SrvMon+0xb8>)
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d01e      	beq.n	800b3b2 <ISOUDS_SrvMon+0x4a>
 800b374:	4b2b      	ldr	r3, [pc, #172]	; (800b424 <ISOUDS_SrvMon+0xbc>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d01a      	beq.n	800b3b2 <ISOUDS_SrvMon+0x4a>
 800b37c:	4b29      	ldr	r3, [pc, #164]	; (800b424 <ISOUDS_SrvMon+0xbc>)
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	4b29      	ldr	r3, [pc, #164]	; (800b428 <ISOUDS_SrvMon+0xc0>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	429a      	cmp	r2, r3
 800b386:	d30c      	bcc.n	800b3a2 <ISOUDS_SrvMon+0x3a>
 800b388:	4b25      	ldr	r3, [pc, #148]	; (800b420 <ISOUDS_SrvMon+0xb8>)
 800b38a:	2201      	movs	r2, #1
 800b38c:	701a      	strb	r2, [r3, #0]
 800b38e:	4b25      	ldr	r3, [pc, #148]	; (800b424 <ISOUDS_SrvMon+0xbc>)
 800b390:	2200      	movs	r2, #0
 800b392:	601a      	str	r2, [r3, #0]
 800b394:	f7ff ffd0 	bl	800b338 <ISOUDS_ServerRst>
 800b398:	f002 f8a4 	bl	800d4e4 <ISOUDS_SAReset>
 800b39c:	f002 fea2 	bl	800e0e4 <ISOUDS_TrnsfrDaExit>
 800b3a0:	e007      	b.n	800b3b2 <ISOUDS_SrvMon+0x4a>
 800b3a2:	f7f6 f9bc 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	4b1e      	ldr	r3, [pc, #120]	; (800b424 <ISOUDS_SrvMon+0xbc>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	4a1d      	ldr	r2, [pc, #116]	; (800b424 <ISOUDS_SrvMon+0xbc>)
 800b3b0:	6013      	str	r3, [r2, #0]
 800b3b2:	4b1e      	ldr	r3, [pc, #120]	; (800b42c <ISOUDS_SrvMon+0xc4>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d013      	beq.n	800b3e2 <ISOUDS_SrvMon+0x7a>
 800b3ba:	4b1c      	ldr	r3, [pc, #112]	; (800b42c <ISOUDS_SrvMon+0xc4>)
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	4b1c      	ldr	r3, [pc, #112]	; (800b430 <ISOUDS_SrvMon+0xc8>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d305      	bcc.n	800b3d2 <ISOUDS_SrvMon+0x6a>
 800b3c6:	f7ff ffb7 	bl	800b338 <ISOUDS_ServerRst>
 800b3ca:	4b18      	ldr	r3, [pc, #96]	; (800b42c <ISOUDS_SrvMon+0xc4>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	601a      	str	r2, [r3, #0]
 800b3d0:	e007      	b.n	800b3e2 <ISOUDS_SrvMon+0x7a>
 800b3d2:	f7f6 f9a4 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	4b14      	ldr	r3, [pc, #80]	; (800b42c <ISOUDS_SrvMon+0xc4>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4413      	add	r3, r2
 800b3de:	4a13      	ldr	r2, [pc, #76]	; (800b42c <ISOUDS_SrvMon+0xc4>)
 800b3e0:	6013      	str	r3, [r2, #0]
 800b3e2:	4b14      	ldr	r3, [pc, #80]	; (800b434 <ISOUDS_SrvMon+0xcc>)
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d117      	bne.n	800b41a <ISOUDS_SrvMon+0xb2>
 800b3ea:	f7f6 f9a0 	bl	800172e <ISOUDS_GetTimerThresh>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	4b11      	ldr	r3, [pc, #68]	; (800b438 <ISOUDS_SrvMon+0xd0>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d808      	bhi.n	800b40a <ISOUDS_SrvMon+0xa2>
 800b3f8:	4b0e      	ldr	r3, [pc, #56]	; (800b434 <ISOUDS_SrvMon+0xcc>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	701a      	strb	r2, [r3, #0]
 800b3fe:	4b0e      	ldr	r3, [pc, #56]	; (800b438 <ISOUDS_SrvMon+0xd0>)
 800b400:	2200      	movs	r2, #0
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	f7f6 f964 	bl	80016d0 <DelayedSystemSoftwareResetIndication>
 800b408:	e007      	b.n	800b41a <ISOUDS_SrvMon+0xb2>
 800b40a:	f7f6 f988 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800b40e:	4602      	mov	r2, r0
 800b410:	4b09      	ldr	r3, [pc, #36]	; (800b438 <ISOUDS_SrvMon+0xd0>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4413      	add	r3, r2
 800b416:	4a08      	ldr	r2, [pc, #32]	; (800b438 <ISOUDS_SrvMon+0xd0>)
 800b418:	6013      	str	r3, [r2, #0]
 800b41a:	bf00      	nop
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	2400173c 	.word	0x2400173c
 800b424:	24001730 	.word	0x24001730
 800b428:	2400175c 	.word	0x2400175c
 800b42c:	2400172c 	.word	0x2400172c
 800b430:	24001734 	.word	0x24001734
 800b434:	2400173b 	.word	0x2400173b
 800b438:	24001740 	.word	0x24001740

0800b43c <ISOUDS_ReqECUReset>:
 800b43c:	b480      	push	{r7}
 800b43e:	af00      	add	r7, sp, #0
 800b440:	4b05      	ldr	r3, [pc, #20]	; (800b458 <ISOUDS_ReqECUReset+0x1c>)
 800b442:	2201      	movs	r2, #1
 800b444:	701a      	strb	r2, [r3, #0]
 800b446:	4b05      	ldr	r3, [pc, #20]	; (800b45c <ISOUDS_ReqECUReset+0x20>)
 800b448:	2201      	movs	r2, #1
 800b44a:	601a      	str	r2, [r3, #0]
 800b44c:	bf00      	nop
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	2400173b 	.word	0x2400173b
 800b45c:	24001740 	.word	0x24001740

0800b460 <ISOUDS_iTxNegResp>:
 800b460:	b580      	push	{r7, lr}
 800b462:	af00      	add	r7, sp, #0
 800b464:	4b0a      	ldr	r3, [pc, #40]	; (800b490 <ISOUDS_iTxNegResp+0x30>)
 800b466:	227f      	movs	r2, #127	; 0x7f
 800b468:	701a      	strb	r2, [r3, #0]
 800b46a:	4b0a      	ldr	r3, [pc, #40]	; (800b494 <ISOUDS_iTxNegResp+0x34>)
 800b46c:	785a      	ldrb	r2, [r3, #1]
 800b46e:	4b08      	ldr	r3, [pc, #32]	; (800b490 <ISOUDS_iTxNegResp+0x30>)
 800b470:	705a      	strb	r2, [r3, #1]
 800b472:	4b08      	ldr	r3, [pc, #32]	; (800b494 <ISOUDS_iTxNegResp+0x34>)
 800b474:	789a      	ldrb	r2, [r3, #2]
 800b476:	4b06      	ldr	r3, [pc, #24]	; (800b490 <ISOUDS_iTxNegResp+0x30>)
 800b478:	709a      	strb	r2, [r3, #2]
 800b47a:	4b07      	ldr	r3, [pc, #28]	; (800b498 <ISOUDS_iTxNegResp+0x38>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	601a      	str	r2, [r3, #0]
 800b480:	f7f6 f902 	bl	8001688 <ISOUDS_ServerSetRespCANid>
 800b484:	4902      	ldr	r1, [pc, #8]	; (800b490 <ISOUDS_iTxNegResp+0x30>)
 800b486:	2003      	movs	r0, #3
 800b488:	f7f6 f913 	bl	80016b2 <ISOUDS_ServerTxRequest>
 800b48c:	bf00      	nop
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	24000354 	.word	0x24000354
 800b494:	24001744 	.word	0x24001744
 800b498:	2400172c 	.word	0x2400172c

0800b49c <ISOUDS_iTxRespPend>:
 800b49c:	b580      	push	{r7, lr}
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	4b1c      	ldr	r3, [pc, #112]	; (800b514 <ISOUDS_iTxRespPend+0x78>)
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	701a      	strb	r2, [r3, #0]
 800b4a6:	4b1b      	ldr	r3, [pc, #108]	; (800b514 <ISOUDS_iTxRespPend+0x78>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	705a      	strb	r2, [r3, #1]
 800b4ac:	4b19      	ldr	r3, [pc, #100]	; (800b514 <ISOUDS_iTxRespPend+0x78>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	709a      	strb	r2, [r3, #2]
 800b4b2:	f7f6 f955 	bl	8001760 <ISOUDS_GetNRC78P2MimLim>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	4b17      	ldr	r3, [pc, #92]	; (800b518 <ISOUDS_iTxRespPend+0x7c>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d303      	bcc.n	800b4c8 <ISOUDS_iTxRespPend+0x2c>
 800b4c0:	4b16      	ldr	r3, [pc, #88]	; (800b51c <ISOUDS_iTxRespPend+0x80>)
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d11f      	bne.n	800b508 <ISOUDS_iTxRespPend+0x6c>
 800b4c8:	4b12      	ldr	r3, [pc, #72]	; (800b514 <ISOUDS_iTxRespPend+0x78>)
 800b4ca:	227f      	movs	r2, #127	; 0x7f
 800b4cc:	701a      	strb	r2, [r3, #0]
 800b4ce:	4b14      	ldr	r3, [pc, #80]	; (800b520 <ISOUDS_iTxRespPend+0x84>)
 800b4d0:	785a      	ldrb	r2, [r3, #1]
 800b4d2:	4b10      	ldr	r3, [pc, #64]	; (800b514 <ISOUDS_iTxRespPend+0x78>)
 800b4d4:	705a      	strb	r2, [r3, #1]
 800b4d6:	4b12      	ldr	r3, [pc, #72]	; (800b520 <ISOUDS_iTxRespPend+0x84>)
 800b4d8:	789a      	ldrb	r2, [r3, #2]
 800b4da:	4b0e      	ldr	r3, [pc, #56]	; (800b514 <ISOUDS_iTxRespPend+0x78>)
 800b4dc:	709a      	strb	r2, [r3, #2]
 800b4de:	f7f6 f8d3 	bl	8001688 <ISOUDS_ServerSetRespCANid>
 800b4e2:	490c      	ldr	r1, [pc, #48]	; (800b514 <ISOUDS_iTxRespPend+0x78>)
 800b4e4:	2003      	movs	r0, #3
 800b4e6:	f7f6 f8e4 	bl	80016b2 <ISOUDS_ServerTxRequest>
 800b4ea:	f7f6 f942 	bl	8001772 <ISOUDS_GetNRC78P2MaxLim>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	4a0c      	ldr	r2, [pc, #48]	; (800b524 <ISOUDS_iTxRespPend+0x88>)
 800b4f2:	6013      	str	r3, [r2, #0]
 800b4f4:	4b08      	ldr	r3, [pc, #32]	; (800b518 <ISOUDS_iTxRespPend+0x7c>)
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	601a      	str	r2, [r3, #0]
 800b4fa:	4b09      	ldr	r3, [pc, #36]	; (800b520 <ISOUDS_iTxRespPend+0x84>)
 800b4fc:	2206      	movs	r2, #6
 800b4fe:	701a      	strb	r2, [r3, #0]
 800b500:	4b06      	ldr	r3, [pc, #24]	; (800b51c <ISOUDS_iTxRespPend+0x80>)
 800b502:	2201      	movs	r2, #1
 800b504:	701a      	strb	r2, [r3, #0]
 800b506:	e003      	b.n	800b510 <ISOUDS_iTxRespPend+0x74>
 800b508:	4b05      	ldr	r3, [pc, #20]	; (800b520 <ISOUDS_iTxRespPend+0x84>)
 800b50a:	2205      	movs	r2, #5
 800b50c:	701a      	strb	r2, [r3, #0]
 800b50e:	bf00      	nop
 800b510:	bf00      	nop
 800b512:	bd80      	pop	{r7, pc}
 800b514:	24001738 	.word	0x24001738
 800b518:	2400172c 	.word	0x2400172c
 800b51c:	24001728 	.word	0x24001728
 800b520:	24001744 	.word	0x24001744
 800b524:	24001734 	.word	0x24001734

0800b528 <ISOUDS_ResetiS3Timer>:
 800b528:	b480      	push	{r7}
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	4b05      	ldr	r3, [pc, #20]	; (800b544 <ISOUDS_ResetiS3Timer+0x1c>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d002      	beq.n	800b53a <ISOUDS_ResetiS3Timer+0x12>
 800b534:	4b04      	ldr	r3, [pc, #16]	; (800b548 <ISOUDS_ResetiS3Timer+0x20>)
 800b536:	2201      	movs	r2, #1
 800b538:	601a      	str	r2, [r3, #0]
 800b53a:	bf00      	nop
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr
 800b544:	2400173c 	.word	0x2400173c
 800b548:	24001730 	.word	0x24001730

0800b54c <ISOUDS_GetUDSStat>:
 800b54c:	b480      	push	{r7}
 800b54e:	af00      	add	r7, sp, #0
 800b550:	4b03      	ldr	r3, [pc, #12]	; (800b560 <ISOUDS_GetUDSStat+0x14>)
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	4618      	mov	r0, r3
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	24001744 	.word	0x24001744

0800b564 <ISUDS_SessionChangeInd>:
 800b564:	b580      	push	{r7, lr}
 800b566:	af00      	add	r7, sp, #0
 800b568:	f001 ffbc 	bl	800d4e4 <ISOUDS_SAReset>
 800b56c:	f002 fdba 	bl	800e0e4 <ISOUDS_TrnsfrDaExit>
 800b570:	bf00      	nop
 800b572:	bd80      	pop	{r7, pc}

0800b574 <ISOUDS_RdDTCInf>:
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	889b      	ldrh	r3, [r3, #4]
 800b582:	2b01      	cmp	r3, #1
 800b584:	f240 80ad 	bls.w	800b6e2 <ISOUDS_RdDTCInf+0x16e>
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b590:	73bb      	strb	r3, [r7, #14]
 800b592:	7bbb      	ldrb	r3, [r7, #14]
 800b594:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b598:	737b      	strb	r3, [r7, #13]
 800b59a:	7bbb      	ldrb	r3, [r7, #14]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f000 f8b1 	bl	800b704 <ISOUDS_RDDTCValidSubfun>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	f040 8095 	bne.w	800b6d4 <ISOUDS_RdDTCInf+0x160>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	889a      	ldrh	r2, [r3, #4]
 800b5ae:	4b52      	ldr	r3, [pc, #328]	; (800b6f8 <ISOUDS_RdDTCInf+0x184>)
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	4951      	ldr	r1, [pc, #324]	; (800b6fc <ISOUDS_RdDTCInf+0x188>)
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	005b      	lsls	r3, r3, #1
 800b5ba:	4403      	add	r3, r0
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	440b      	add	r3, r1
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d17d      	bne.n	800b6c6 <ISOUDS_RdDTCInf+0x152>
 800b5ca:	4b4b      	ldr	r3, [pc, #300]	; (800b6f8 <ISOUDS_RdDTCInf+0x184>)
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	4a4a      	ldr	r2, [pc, #296]	; (800b6fc <ISOUDS_RdDTCInf+0x188>)
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	005b      	lsls	r3, r3, #1
 800b5d6:	440b      	add	r3, r1
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4413      	add	r3, r2
 800b5dc:	3302      	adds	r3, #2
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	4b47      	ldr	r3, [pc, #284]	; (800b700 <ISOUDS_RdDTCInf+0x18c>)
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	fa42 f303 	asr.w	r3, r2, r3
 800b5ea:	f003 0301 	and.w	r3, r3, #1
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d062      	beq.n	800b6b8 <ISOUDS_RdDTCInf+0x144>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	73fb      	strb	r3, [r7, #15]
 800b5f6:	4b40      	ldr	r3, [pc, #256]	; (800b6f8 <ISOUDS_RdDTCInf+0x184>)
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	4a3f      	ldr	r2, [pc, #252]	; (800b6fc <ISOUDS_RdDTCInf+0x188>)
 800b5fe:	460b      	mov	r3, r1
 800b600:	005b      	lsls	r3, r3, #1
 800b602:	440b      	add	r3, r1
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4413      	add	r3, r2
 800b608:	3303      	adds	r3, #3
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d10f      	bne.n	800b630 <ISOUDS_RdDTCInf+0xbc>
 800b610:	4b39      	ldr	r3, [pc, #228]	; (800b6f8 <ISOUDS_RdDTCInf+0x184>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	4619      	mov	r1, r3
 800b616:	4a39      	ldr	r2, [pc, #228]	; (800b6fc <ISOUDS_RdDTCInf+0x188>)
 800b618:	460b      	mov	r3, r1
 800b61a:	005b      	lsls	r3, r3, #1
 800b61c:	440b      	add	r3, r1
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4413      	add	r3, r2
 800b622:	3304      	adds	r3, #4
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	4618      	mov	r0, r3
 800b628:	f001 ff82 	bl	800d530 <ISOUDS_GetSAStLevel>
 800b62c:	4603      	mov	r3, r0
 800b62e:	73fb      	strb	r3, [r7, #15]
 800b630:	7bfb      	ldrb	r3, [r7, #15]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d139      	bne.n	800b6aa <ISOUDS_RdDTCInf+0x136>
 800b636:	f7f6 f8ae 	bl	8001796 <ISOUDS_RdDTCPreCondCheck>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d12d      	bne.n	800b69c <ISOUDS_RdDTCInf+0x128>
 800b640:	2300      	movs	r3, #0
 800b642:	817b      	strh	r3, [r7, #10]
 800b644:	4b2c      	ldr	r3, [pc, #176]	; (800b6f8 <ISOUDS_RdDTCInf+0x184>)
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	4619      	mov	r1, r3
 800b64a:	4a2c      	ldr	r2, [pc, #176]	; (800b6fc <ISOUDS_RdDTCInf+0x188>)
 800b64c:	460b      	mov	r3, r1
 800b64e:	005b      	lsls	r3, r3, #1
 800b650:	440b      	add	r3, r1
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4413      	add	r3, r2
 800b656:	3308      	adds	r3, #8
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	683a      	ldr	r2, [r7, #0]
 800b65c:	3201      	adds	r2, #1
 800b65e:	f107 010a 	add.w	r1, r7, #10
 800b662:	4610      	mov	r0, r2
 800b664:	4798      	blx	r3
 800b666:	4603      	mov	r3, r0
 800b668:	733b      	strb	r3, [r7, #12]
 800b66a:	7b3b      	ldrb	r3, [r7, #12]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d10e      	bne.n	800b68e <ISOUDS_RdDTCInf+0x11a>
 800b670:	7b7b      	ldrb	r3, [r7, #13]
 800b672:	2b80      	cmp	r3, #128	; 0x80
 800b674:	d008      	beq.n	800b688 <ISOUDS_RdDTCInf+0x114>
 800b676:	897b      	ldrh	r3, [r7, #10]
 800b678:	3302      	adds	r3, #2
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	809a      	strh	r2, [r3, #4]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2203      	movs	r2, #3
 800b684:	701a      	strb	r2, [r3, #0]
 800b686:	e032      	b.n	800b6ee <ISOUDS_RdDTCInf+0x17a>
 800b688:	f7ff fe56 	bl	800b338 <ISOUDS_ServerRst>
 800b68c:	e02f      	b.n	800b6ee <ISOUDS_RdDTCInf+0x17a>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2204      	movs	r2, #4
 800b692:	701a      	strb	r2, [r3, #0]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	7b3a      	ldrb	r2, [r7, #12]
 800b698:	709a      	strb	r2, [r3, #2]
 800b69a:	e028      	b.n	800b6ee <ISOUDS_RdDTCInf+0x17a>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2204      	movs	r2, #4
 800b6a0:	701a      	strb	r2, [r3, #0]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2222      	movs	r2, #34	; 0x22
 800b6a6:	709a      	strb	r2, [r3, #2]
 800b6a8:	e021      	b.n	800b6ee <ISOUDS_RdDTCInf+0x17a>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2204      	movs	r2, #4
 800b6ae:	701a      	strb	r2, [r3, #0]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2233      	movs	r2, #51	; 0x33
 800b6b4:	709a      	strb	r2, [r3, #2]
 800b6b6:	e01a      	b.n	800b6ee <ISOUDS_RdDTCInf+0x17a>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2204      	movs	r2, #4
 800b6bc:	701a      	strb	r2, [r3, #0]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	227e      	movs	r2, #126	; 0x7e
 800b6c2:	709a      	strb	r2, [r3, #2]
 800b6c4:	e013      	b.n	800b6ee <ISOUDS_RdDTCInf+0x17a>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2204      	movs	r2, #4
 800b6ca:	701a      	strb	r2, [r3, #0]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2213      	movs	r2, #19
 800b6d0:	709a      	strb	r2, [r3, #2]
 800b6d2:	e00c      	b.n	800b6ee <ISOUDS_RdDTCInf+0x17a>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2204      	movs	r2, #4
 800b6d8:	701a      	strb	r2, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2212      	movs	r2, #18
 800b6de:	709a      	strb	r2, [r3, #2]
 800b6e0:	e005      	b.n	800b6ee <ISOUDS_RdDTCInf+0x17a>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2204      	movs	r2, #4
 800b6e6:	701a      	strb	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2213      	movs	r2, #19
 800b6ec:	709a      	strb	r2, [r3, #2]
 800b6ee:	bf00      	nop
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	24001760 	.word	0x24001760
 800b6fc:	240001ec 	.word	0x240001ec
 800b700:	2400173c 	.word	0x2400173c

0800b704 <ISOUDS_RDDTCValidSubfun>:
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	71fb      	strb	r3, [r7, #7]
 800b70e:	2300      	movs	r3, #0
 800b710:	73bb      	strb	r3, [r7, #14]
 800b712:	2300      	movs	r3, #0
 800b714:	73fb      	strb	r3, [r7, #15]
 800b716:	e012      	b.n	800b73e <ISOUDS_RDDTCValidSubfun+0x3a>
 800b718:	7bfa      	ldrb	r2, [r7, #15]
 800b71a:	490f      	ldr	r1, [pc, #60]	; (800b758 <ISOUDS_RDDTCValidSubfun+0x54>)
 800b71c:	4613      	mov	r3, r2
 800b71e:	005b      	lsls	r3, r3, #1
 800b720:	4413      	add	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	440b      	add	r3, r1
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	79fa      	ldrb	r2, [r7, #7]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d104      	bne.n	800b738 <ISOUDS_RDDTCValidSubfun+0x34>
 800b72e:	4a0b      	ldr	r2, [pc, #44]	; (800b75c <ISOUDS_RDDTCValidSubfun+0x58>)
 800b730:	7bfb      	ldrb	r3, [r7, #15]
 800b732:	7013      	strb	r3, [r2, #0]
 800b734:	2301      	movs	r3, #1
 800b736:	73bb      	strb	r3, [r7, #14]
 800b738:	7bfb      	ldrb	r3, [r7, #15]
 800b73a:	3301      	adds	r3, #1
 800b73c:	73fb      	strb	r3, [r7, #15]
 800b73e:	7bfb      	ldrb	r3, [r7, #15]
 800b740:	2b04      	cmp	r3, #4
 800b742:	d802      	bhi.n	800b74a <ISOUDS_RDDTCValidSubfun+0x46>
 800b744:	7bbb      	ldrb	r3, [r7, #14]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d0e6      	beq.n	800b718 <ISOUDS_RDDTCValidSubfun+0x14>
 800b74a:	7bbb      	ldrb	r3, [r7, #14]
 800b74c:	4618      	mov	r0, r3
 800b74e:	3714      	adds	r7, #20
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	240001ec 	.word	0x240001ec
 800b75c:	24001760 	.word	0x24001760

0800b760 <ISOUDS_RdDaByID>:
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
 800b76a:	2300      	movs	r3, #0
 800b76c:	817b      	strh	r3, [r7, #10]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	889b      	ldrh	r3, [r3, #4]
 800b772:	2b01      	cmp	r3, #1
 800b774:	f240 8084 	bls.w	800b880 <ISOUDS_RdDaByID+0x120>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	889b      	ldrh	r3, [r3, #4]
 800b77c:	3b01      	subs	r3, #1
 800b77e:	f003 0301 	and.w	r3, r3, #1
 800b782:	2b00      	cmp	r3, #0
 800b784:	d17c      	bne.n	800b880 <ISOUDS_RdDaByID+0x120>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	889b      	ldrh	r3, [r3, #4]
 800b78a:	3b01      	subs	r3, #1
 800b78c:	0fda      	lsrs	r2, r3, #31
 800b78e:	4413      	add	r3, r2
 800b790:	105b      	asrs	r3, r3, #1
 800b792:	81bb      	strh	r3, [r7, #12]
 800b794:	f7f6 f93e 	bl	8001a14 <ISOUDS_Get_MAXNoOfDIDAllowd>
 800b798:	4603      	mov	r3, r0
 800b79a:	461a      	mov	r2, r3
 800b79c:	89bb      	ldrh	r3, [r7, #12]
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d903      	bls.n	800b7aa <ISOUDS_RdDaByID+0x4a>
 800b7a2:	4b45      	ldr	r3, [pc, #276]	; (800b8b8 <ISOUDS_RdDaByID+0x158>)
 800b7a4:	2231      	movs	r2, #49	; 0x31
 800b7a6:	701a      	strb	r2, [r3, #0]
 800b7a8:	e06d      	b.n	800b886 <ISOUDS_RdDaByID+0x126>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	81fb      	strh	r3, [r7, #14]
 800b7ae:	e019      	b.n	800b7e4 <ISOUDS_RdDaByID+0x84>
 800b7b0:	89fb      	ldrh	r3, [r7, #14]
 800b7b2:	005b      	lsls	r3, r3, #1
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	021b      	lsls	r3, r3, #8
 800b7c0:	b299      	uxth	r1, r3
 800b7c2:	89fb      	ldrh	r3, [r7, #14]
 800b7c4:	005b      	lsls	r3, r3, #1
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	b29a      	uxth	r2, r3
 800b7d2:	89fb      	ldrh	r3, [r7, #14]
 800b7d4:	440a      	add	r2, r1
 800b7d6:	b291      	uxth	r1, r2
 800b7d8:	4a38      	ldr	r2, [pc, #224]	; (800b8bc <ISOUDS_RdDaByID+0x15c>)
 800b7da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b7de:	89fb      	ldrh	r3, [r7, #14]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	81fb      	strh	r3, [r7, #14]
 800b7e4:	89fa      	ldrh	r2, [r7, #14]
 800b7e6:	89bb      	ldrh	r3, [r7, #12]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d3e1      	bcc.n	800b7b0 <ISOUDS_RdDaByID+0x50>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	81fb      	strh	r3, [r7, #14]
 800b7f0:	e041      	b.n	800b876 <ISOUDS_RdDaByID+0x116>
 800b7f2:	89fb      	ldrh	r3, [r7, #14]
 800b7f4:	4a31      	ldr	r2, [pc, #196]	; (800b8bc <ISOUDS_RdDaByID+0x15c>)
 800b7f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7fa:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 800b7fe:	d31f      	bcc.n	800b840 <ISOUDS_RdDaByID+0xe0>
 800b800:	89fb      	ldrh	r3, [r7, #14]
 800b802:	4a2e      	ldr	r2, [pc, #184]	; (800b8bc <ISOUDS_RdDaByID+0x15c>)
 800b804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b808:	f5b3 4f74 	cmp.w	r3, #62464	; 0xf400
 800b80c:	d218      	bcs.n	800b840 <ISOUDS_RdDaByID+0xe0>
 800b80e:	89fb      	ldrh	r3, [r7, #14]
 800b810:	4a2a      	ldr	r2, [pc, #168]	; (800b8bc <ISOUDS_RdDaByID+0x15c>)
 800b812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b816:	4618      	mov	r0, r3
 800b818:	f002 ff0c 	bl	800e634 <ISOUDS_DyLookUp>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d10a      	bne.n	800b838 <ISOUDS_RdDaByID+0xd8>
 800b822:	89fb      	ldrh	r3, [r7, #14]
 800b824:	4a25      	ldr	r2, [pc, #148]	; (800b8bc <ISOUDS_RdDaByID+0x15c>)
 800b826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b82a:	f107 020a 	add.w	r2, r7, #10
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	4618      	mov	r0, r3
 800b832:	f000 fa25 	bl	800bc80 <ISOUDS_ProcessReadDyDID>
 800b836:	e01b      	b.n	800b870 <ISOUDS_RdDaByID+0x110>
 800b838:	4b1f      	ldr	r3, [pc, #124]	; (800b8b8 <ISOUDS_RdDaByID+0x158>)
 800b83a:	2231      	movs	r2, #49	; 0x31
 800b83c:	701a      	strb	r2, [r3, #0]
 800b83e:	e017      	b.n	800b870 <ISOUDS_RdDaByID+0x110>
 800b840:	89fb      	ldrh	r3, [r7, #14]
 800b842:	4a1e      	ldr	r2, [pc, #120]	; (800b8bc <ISOUDS_RdDaByID+0x15c>)
 800b844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 f8e5 	bl	800ba18 <ISOUDS_RdLookUp>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b01      	cmp	r3, #1
 800b852:	d10a      	bne.n	800b86a <ISOUDS_RdDaByID+0x10a>
 800b854:	89fb      	ldrh	r3, [r7, #14]
 800b856:	4a19      	ldr	r2, [pc, #100]	; (800b8bc <ISOUDS_RdDaByID+0x15c>)
 800b858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b85c:	f107 020a 	add.w	r2, r7, #10
 800b860:	6839      	ldr	r1, [r7, #0]
 800b862:	4618      	mov	r0, r3
 800b864:	f000 f97e 	bl	800bb64 <ISOUDS_ProcessReadDID>
 800b868:	e002      	b.n	800b870 <ISOUDS_RdDaByID+0x110>
 800b86a:	4b13      	ldr	r3, [pc, #76]	; (800b8b8 <ISOUDS_RdDaByID+0x158>)
 800b86c:	2231      	movs	r2, #49	; 0x31
 800b86e:	701a      	strb	r2, [r3, #0]
 800b870:	89fb      	ldrh	r3, [r7, #14]
 800b872:	3301      	adds	r3, #1
 800b874:	81fb      	strh	r3, [r7, #14]
 800b876:	89fa      	ldrh	r2, [r7, #14]
 800b878:	89bb      	ldrh	r3, [r7, #12]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d3b9      	bcc.n	800b7f2 <ISOUDS_RdDaByID+0x92>
 800b87e:	e002      	b.n	800b886 <ISOUDS_RdDaByID+0x126>
 800b880:	4b0d      	ldr	r3, [pc, #52]	; (800b8b8 <ISOUDS_RdDaByID+0x158>)
 800b882:	2213      	movs	r2, #19
 800b884:	701a      	strb	r2, [r3, #0]
 800b886:	4b0c      	ldr	r3, [pc, #48]	; (800b8b8 <ISOUDS_RdDaByID+0x158>)
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d108      	bne.n	800b8a0 <ISOUDS_RdDaByID+0x140>
 800b88e:	897b      	ldrh	r3, [r7, #10]
 800b890:	3301      	adds	r3, #1
 800b892:	b29a      	uxth	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	809a      	strh	r2, [r3, #4]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2203      	movs	r2, #3
 800b89c:	701a      	strb	r2, [r3, #0]
 800b89e:	e006      	b.n	800b8ae <ISOUDS_RdDaByID+0x14e>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2204      	movs	r2, #4
 800b8a4:	701a      	strb	r2, [r3, #0]
 800b8a6:	4b04      	ldr	r3, [pc, #16]	; (800b8b8 <ISOUDS_RdDaByID+0x158>)
 800b8a8:	781a      	ldrb	r2, [r3, #0]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	709a      	strb	r2, [r3, #2]
 800b8ae:	bf00      	nop
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	24001762 	.word	0x24001762
 800b8bc:	24001354 	.word	0x24001354

0800b8c0 <ISOUDS_RdDidData>:
 800b8c0:	b590      	push	{r4, r7, lr}
 800b8c2:	b087      	sub	sp, #28
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	607a      	str	r2, [r7, #4]
 800b8cc:	81fb      	strh	r3, [r7, #14]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	881b      	ldrh	r3, [r3, #0]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	4b4d      	ldr	r3, [pc, #308]	; (800ba0c <ISOUDS_RdDidData+0x14c>)
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	4a4d      	ldr	r2, [pc, #308]	; (800ba10 <ISOUDS_RdDidData+0x150>)
 800b8da:	011b      	lsls	r3, r3, #4
 800b8dc:	4413      	add	r3, r2
 800b8de:	3302      	adds	r3, #2
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	440b      	add	r3, r1
 800b8e4:	1c9c      	adds	r4, r3, #2
 800b8e6:	f7f5 ff2a 	bl	800173e <ISOUDS_GetServerBuffSize>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	429c      	cmp	r4, r3
 800b8f0:	f280 8083 	bge.w	800b9fa <ISOUDS_RdDidData+0x13a>
 800b8f4:	89fb      	ldrh	r3, [r7, #14]
 800b8f6:	0a1b      	lsrs	r3, r3, #8
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	881b      	ldrh	r3, [r3, #0]
 800b8fe:	4619      	mov	r1, r3
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	440b      	add	r3, r1
 800b904:	b2d2      	uxtb	r2, r2
 800b906:	701a      	strb	r2, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	881b      	ldrh	r3, [r3, #0]
 800b90c:	3301      	adds	r3, #1
 800b90e:	b29a      	uxth	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	801a      	strh	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	881b      	ldrh	r3, [r3, #0]
 800b918:	461a      	mov	r2, r3
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	4413      	add	r3, r2
 800b91e:	89fa      	ldrh	r2, [r7, #14]
 800b920:	b2d2      	uxtb	r2, r2
 800b922:	701a      	strb	r2, [r3, #0]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	881b      	ldrh	r3, [r3, #0]
 800b928:	3301      	adds	r3, #1
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	801a      	strh	r2, [r3, #0]
 800b930:	4b36      	ldr	r3, [pc, #216]	; (800ba0c <ISOUDS_RdDidData+0x14c>)
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	4a36      	ldr	r2, [pc, #216]	; (800ba10 <ISOUDS_RdDidData+0x150>)
 800b936:	011b      	lsls	r3, r3, #4
 800b938:	4413      	add	r3, r2
 800b93a:	3308      	adds	r3, #8
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d028      	beq.n	800b994 <ISOUDS_RdDidData+0xd4>
 800b942:	4b32      	ldr	r3, [pc, #200]	; (800ba0c <ISOUDS_RdDidData+0x14c>)
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	4a32      	ldr	r2, [pc, #200]	; (800ba10 <ISOUDS_RdDidData+0x150>)
 800b948:	011b      	lsls	r3, r3, #4
 800b94a:	4413      	add	r3, r2
 800b94c:	3308      	adds	r3, #8
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	8812      	ldrh	r2, [r2, #0]
 800b954:	4611      	mov	r1, r2
 800b956:	68ba      	ldr	r2, [r7, #8]
 800b958:	1850      	adds	r0, r2, r1
 800b95a:	4a2c      	ldr	r2, [pc, #176]	; (800ba0c <ISOUDS_RdDidData+0x14c>)
 800b95c:	7812      	ldrb	r2, [r2, #0]
 800b95e:	492c      	ldr	r1, [pc, #176]	; (800ba10 <ISOUDS_RdDidData+0x150>)
 800b960:	0112      	lsls	r2, r2, #4
 800b962:	440a      	add	r2, r1
 800b964:	3202      	adds	r2, #2
 800b966:	7812      	ldrb	r2, [r2, #0]
 800b968:	b292      	uxth	r2, r2
 800b96a:	4611      	mov	r1, r2
 800b96c:	4798      	blx	r3
 800b96e:	4603      	mov	r3, r0
 800b970:	461a      	mov	r2, r3
 800b972:	4b28      	ldr	r3, [pc, #160]	; (800ba14 <ISOUDS_RdDidData+0x154>)
 800b974:	701a      	strb	r2, [r3, #0]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	881a      	ldrh	r2, [r3, #0]
 800b97a:	4b24      	ldr	r3, [pc, #144]	; (800ba0c <ISOUDS_RdDidData+0x14c>)
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	4924      	ldr	r1, [pc, #144]	; (800ba10 <ISOUDS_RdDidData+0x150>)
 800b980:	011b      	lsls	r3, r3, #4
 800b982:	440b      	add	r3, r1
 800b984:	3302      	adds	r3, #2
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	b29b      	uxth	r3, r3
 800b98a:	4413      	add	r3, r2
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	801a      	strh	r2, [r3, #0]
 800b992:	e035      	b.n	800ba00 <ISOUDS_RdDidData+0x140>
 800b994:	4b1d      	ldr	r3, [pc, #116]	; (800ba0c <ISOUDS_RdDidData+0x14c>)
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	4a1d      	ldr	r2, [pc, #116]	; (800ba10 <ISOUDS_RdDidData+0x150>)
 800b99a:	011b      	lsls	r3, r3, #4
 800b99c:	4413      	add	r3, r2
 800b99e:	3304      	adds	r3, #4
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d02c      	beq.n	800ba00 <ISOUDS_RdDidData+0x140>
 800b9a6:	4b19      	ldr	r3, [pc, #100]	; (800ba0c <ISOUDS_RdDidData+0x14c>)
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	4a19      	ldr	r2, [pc, #100]	; (800ba10 <ISOUDS_RdDidData+0x150>)
 800b9ac:	011b      	lsls	r3, r3, #4
 800b9ae:	4413      	add	r3, r2
 800b9b0:	3302      	adds	r3, #2
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	75fb      	strb	r3, [r7, #23]
 800b9b6:	e019      	b.n	800b9ec <ISOUDS_RdDidData+0x12c>
 800b9b8:	4b14      	ldr	r3, [pc, #80]	; (800ba0c <ISOUDS_RdDidData+0x14c>)
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	4a14      	ldr	r2, [pc, #80]	; (800ba10 <ISOUDS_RdDidData+0x150>)
 800b9be:	011b      	lsls	r3, r3, #4
 800b9c0:	4413      	add	r3, r2
 800b9c2:	3304      	adds	r3, #4
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	7dfb      	ldrb	r3, [r7, #23]
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	441a      	add	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	881b      	ldrh	r3, [r3, #0]
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	440b      	add	r3, r1
 800b9d6:	7812      	ldrb	r2, [r2, #0]
 800b9d8:	701a      	strb	r2, [r3, #0]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	881b      	ldrh	r3, [r3, #0]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	801a      	strh	r2, [r3, #0]
 800b9e6:	7dfb      	ldrb	r3, [r7, #23]
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	75fb      	strb	r3, [r7, #23]
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1e2      	bne.n	800b9b8 <ISOUDS_RdDidData+0xf8>
 800b9f2:	4b08      	ldr	r3, [pc, #32]	; (800ba14 <ISOUDS_RdDidData+0x154>)
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	701a      	strb	r2, [r3, #0]
 800b9f8:	e002      	b.n	800ba00 <ISOUDS_RdDidData+0x140>
 800b9fa:	4b06      	ldr	r3, [pc, #24]	; (800ba14 <ISOUDS_RdDidData+0x154>)
 800b9fc:	2231      	movs	r2, #49	; 0x31
 800b9fe:	701a      	strb	r2, [r3, #0]
 800ba00:	4b04      	ldr	r3, [pc, #16]	; (800ba14 <ISOUDS_RdDidData+0x154>)
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	4618      	mov	r0, r3
 800ba06:	371c      	adds	r7, #28
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd90      	pop	{r4, r7, pc}
 800ba0c:	24001761 	.word	0x24001761
 800ba10:	08010c6c 	.word	0x08010c6c
 800ba14:	24001762 	.word	0x24001762

0800ba18 <ISOUDS_RdLookUp>:
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	4603      	mov	r3, r0
 800ba20:	80fb      	strh	r3, [r7, #6]
 800ba22:	2300      	movs	r3, #0
 800ba24:	73fb      	strb	r3, [r7, #15]
 800ba26:	2300      	movs	r3, #0
 800ba28:	73bb      	strb	r3, [r7, #14]
 800ba2a:	e00f      	b.n	800ba4c <ISOUDS_RdLookUp+0x34>
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	4a0f      	ldr	r2, [pc, #60]	; (800ba6c <ISOUDS_RdLookUp+0x54>)
 800ba30:	011b      	lsls	r3, r3, #4
 800ba32:	4413      	add	r3, r2
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	88fa      	ldrh	r2, [r7, #6]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d104      	bne.n	800ba46 <ISOUDS_RdLookUp+0x2e>
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	73fb      	strb	r3, [r7, #15]
 800ba40:	4a0b      	ldr	r2, [pc, #44]	; (800ba70 <ISOUDS_RdLookUp+0x58>)
 800ba42:	7bbb      	ldrb	r3, [r7, #14]
 800ba44:	7013      	strb	r3, [r2, #0]
 800ba46:	7bbb      	ldrb	r3, [r7, #14]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	73bb      	strb	r3, [r7, #14]
 800ba4c:	f7f5 ffda 	bl	8001a04 <ISOUDS_Get_RDCONFTABSIZE>
 800ba50:	4603      	mov	r3, r0
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	7bba      	ldrb	r2, [r7, #14]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d202      	bcs.n	800ba60 <ISOUDS_RdLookUp+0x48>
 800ba5a:	7bfb      	ldrb	r3, [r7, #15]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d1e5      	bne.n	800ba2c <ISOUDS_RdLookUp+0x14>
 800ba60:	7bfb      	ldrb	r3, [r7, #15]
 800ba62:	4618      	mov	r0, r3
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	08010c6c 	.word	0x08010c6c
 800ba70:	24001761 	.word	0x24001761

0800ba74 <ISOUDS_DDDidData_DDDID>:
 800ba74:	b590      	push	{r4, r7, lr}
 800ba76:	b087      	sub	sp, #28
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
 800ba80:	81fb      	strh	r3, [r7, #14]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	881b      	ldrh	r3, [r3, #0]
 800ba86:	4619      	mov	r1, r3
 800ba88:	4b33      	ldr	r3, [pc, #204]	; (800bb58 <ISOUDS_DDDidData_DDDID+0xe4>)
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	4a33      	ldr	r2, [pc, #204]	; (800bb5c <ISOUDS_DDDidData_DDDID+0xe8>)
 800ba90:	236c      	movs	r3, #108	; 0x6c
 800ba92:	fb00 f303 	mul.w	r3, r0, r3
 800ba96:	4413      	add	r3, r2
 800ba98:	3302      	adds	r3, #2
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	440b      	add	r3, r1
 800ba9e:	1c9c      	adds	r4, r3, #2
 800baa0:	f7f5 fe4d 	bl	800173e <ISOUDS_GetServerBuffSize>
 800baa4:	4603      	mov	r3, r0
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	429c      	cmp	r4, r3
 800baaa:	da4c      	bge.n	800bb46 <ISOUDS_DDDidData_DDDID+0xd2>
 800baac:	89fb      	ldrh	r3, [r7, #14]
 800baae:	0a1b      	lsrs	r3, r3, #8
 800bab0:	b29a      	uxth	r2, r3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	881b      	ldrh	r3, [r3, #0]
 800bab6:	4619      	mov	r1, r3
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	440b      	add	r3, r1
 800babc:	b2d2      	uxtb	r2, r2
 800babe:	701a      	strb	r2, [r3, #0]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	881b      	ldrh	r3, [r3, #0]
 800bac4:	3301      	adds	r3, #1
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	801a      	strh	r2, [r3, #0]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	881b      	ldrh	r3, [r3, #0]
 800bad0:	461a      	mov	r2, r3
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	4413      	add	r3, r2
 800bad6:	89fa      	ldrh	r2, [r7, #14]
 800bad8:	b2d2      	uxtb	r2, r2
 800bada:	701a      	strb	r2, [r3, #0]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	881b      	ldrh	r3, [r3, #0]
 800bae0:	3301      	adds	r3, #1
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	801a      	strh	r2, [r3, #0]
 800bae8:	2300      	movs	r3, #0
 800baea:	75fb      	strb	r3, [r7, #23]
 800baec:	e01a      	b.n	800bb24 <ISOUDS_DDDidData_DDDID+0xb0>
 800baee:	4b1a      	ldr	r3, [pc, #104]	; (800bb58 <ISOUDS_DDDidData_DDDID+0xe4>)
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	461c      	mov	r4, r3
 800baf4:	7dfa      	ldrb	r2, [r7, #23]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	881b      	ldrh	r3, [r3, #0]
 800bafa:	4619      	mov	r1, r3
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	440b      	add	r3, r1
 800bb00:	4816      	ldr	r0, [pc, #88]	; (800bb5c <ISOUDS_DDDidData_DDDID+0xe8>)
 800bb02:	216c      	movs	r1, #108	; 0x6c
 800bb04:	fb04 f101 	mul.w	r1, r4, r1
 800bb08:	4401      	add	r1, r0
 800bb0a:	440a      	add	r2, r1
 800bb0c:	3203      	adds	r2, #3
 800bb0e:	7812      	ldrb	r2, [r2, #0]
 800bb10:	701a      	strb	r2, [r3, #0]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	881b      	ldrh	r3, [r3, #0]
 800bb16:	3301      	adds	r3, #1
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	801a      	strh	r2, [r3, #0]
 800bb1e:	7dfb      	ldrb	r3, [r7, #23]
 800bb20:	3301      	adds	r3, #1
 800bb22:	75fb      	strb	r3, [r7, #23]
 800bb24:	4b0c      	ldr	r3, [pc, #48]	; (800bb58 <ISOUDS_DDDidData_DDDID+0xe4>)
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	4619      	mov	r1, r3
 800bb2a:	4a0c      	ldr	r2, [pc, #48]	; (800bb5c <ISOUDS_DDDidData_DDDID+0xe8>)
 800bb2c:	236c      	movs	r3, #108	; 0x6c
 800bb2e:	fb01 f303 	mul.w	r3, r1, r3
 800bb32:	4413      	add	r3, r2
 800bb34:	3302      	adds	r3, #2
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	7dfa      	ldrb	r2, [r7, #23]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d3d7      	bcc.n	800baee <ISOUDS_DDDidData_DDDID+0x7a>
 800bb3e:	4b08      	ldr	r3, [pc, #32]	; (800bb60 <ISOUDS_DDDidData_DDDID+0xec>)
 800bb40:	2200      	movs	r2, #0
 800bb42:	701a      	strb	r2, [r3, #0]
 800bb44:	e002      	b.n	800bb4c <ISOUDS_DDDidData_DDDID+0xd8>
 800bb46:	4b06      	ldr	r3, [pc, #24]	; (800bb60 <ISOUDS_DDDidData_DDDID+0xec>)
 800bb48:	2231      	movs	r2, #49	; 0x31
 800bb4a:	701a      	strb	r2, [r3, #0]
 800bb4c:	4b04      	ldr	r3, [pc, #16]	; (800bb60 <ISOUDS_DDDidData_DDDID+0xec>)
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	4618      	mov	r0, r3
 800bb52:	371c      	adds	r7, #28
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd90      	pop	{r4, r7, pc}
 800bb58:	24001818 	.word	0x24001818
 800bb5c:	240000ac 	.word	0x240000ac
 800bb60:	24001763 	.word	0x24001763

0800bb64 <ISOUDS_ProcessReadDID>:
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
 800bb70:	81fb      	strh	r3, [r7, #14]
 800bb72:	2300      	movs	r3, #0
 800bb74:	74fb      	strb	r3, [r7, #19]
 800bb76:	4b3e      	ldr	r3, [pc, #248]	; (800bc70 <ISOUDS_ProcessReadDID+0x10c>)
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	4a3e      	ldr	r2, [pc, #248]	; (800bc74 <ISOUDS_ProcessReadDID+0x110>)
 800bb7c:	011b      	lsls	r3, r3, #4
 800bb7e:	4413      	add	r3, r2
 800bb80:	330c      	adds	r3, #12
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	461a      	mov	r2, r3
 800bb86:	4b3c      	ldr	r3, [pc, #240]	; (800bc78 <ISOUDS_ProcessReadDID+0x114>)
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	fa42 f303 	asr.w	r3, r2, r3
 800bb8e:	f003 0301 	and.w	r3, r3, #1
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d063      	beq.n	800bc5e <ISOUDS_ProcessReadDID+0xfa>
 800bb96:	2301      	movs	r3, #1
 800bb98:	75fb      	strb	r3, [r7, #23]
 800bb9a:	4b35      	ldr	r3, [pc, #212]	; (800bc70 <ISOUDS_ProcessReadDID+0x10c>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	4a35      	ldr	r2, [pc, #212]	; (800bc74 <ISOUDS_ProcessReadDID+0x110>)
 800bba0:	011b      	lsls	r3, r3, #4
 800bba2:	4413      	add	r3, r2
 800bba4:	330d      	adds	r3, #13
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d124      	bne.n	800bbf6 <ISOUDS_ProcessReadDID+0x92>
 800bbac:	2300      	movs	r3, #0
 800bbae:	75fb      	strb	r3, [r7, #23]
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	82bb      	strh	r3, [r7, #20]
 800bbb4:	e011      	b.n	800bbda <ISOUDS_ProcessReadDID+0x76>
 800bbb6:	4b2e      	ldr	r3, [pc, #184]	; (800bc70 <ISOUDS_ProcessReadDID+0x10c>)
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	8abb      	ldrh	r3, [r7, #20]
 800bbbe:	492d      	ldr	r1, [pc, #180]	; (800bc74 <ISOUDS_ProcessReadDID+0x110>)
 800bbc0:	0112      	lsls	r2, r2, #4
 800bbc2:	440a      	add	r2, r1
 800bbc4:	4413      	add	r3, r2
 800bbc6:	330f      	adds	r3, #15
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f001 fcb0 	bl	800d530 <ISOUDS_GetSAStLevel>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	75fb      	strb	r3, [r7, #23]
 800bbd4:	8abb      	ldrh	r3, [r7, #20]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	82bb      	strh	r3, [r7, #20]
 800bbda:	4b25      	ldr	r3, [pc, #148]	; (800bc70 <ISOUDS_ProcessReadDID+0x10c>)
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	4a25      	ldr	r2, [pc, #148]	; (800bc74 <ISOUDS_ProcessReadDID+0x110>)
 800bbe0:	011b      	lsls	r3, r3, #4
 800bbe2:	4413      	add	r3, r2
 800bbe4:	330e      	adds	r3, #14
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	8aba      	ldrh	r2, [r7, #20]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d202      	bcs.n	800bbf6 <ISOUDS_ProcessReadDID+0x92>
 800bbf0:	7dfb      	ldrb	r3, [r7, #23]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d0df      	beq.n	800bbb6 <ISOUDS_ProcessReadDID+0x52>
 800bbf6:	7dfb      	ldrb	r3, [r7, #23]
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d12c      	bne.n	800bc56 <ISOUDS_ProcessReadDID+0xf2>
 800bbfc:	f7f5 fd6f 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d11a      	bne.n	800bc3c <ISOUDS_ProcessReadDID+0xd8>
 800bc06:	f7f5 fd72 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d115      	bne.n	800bc3c <ISOUDS_ProcessReadDID+0xd8>
 800bc10:	f7f5 ff08 	bl	8001a24 <ISOUDS_CheckPreConditions>
 800bc14:	4603      	mov	r3, r0
 800bc16:	74fb      	strb	r3, [r7, #19]
 800bc18:	7cfb      	ldrb	r3, [r7, #19]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10a      	bne.n	800bc34 <ISOUDS_ProcessReadDID+0xd0>
 800bc1e:	89fb      	ldrh	r3, [r7, #14]
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	68b9      	ldr	r1, [r7, #8]
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7ff fe4b 	bl	800b8c0 <ISOUDS_RdDidData>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	4b13      	ldr	r3, [pc, #76]	; (800bc7c <ISOUDS_ProcessReadDID+0x118>)
 800bc30:	701a      	strb	r2, [r3, #0]
 800bc32:	e018      	b.n	800bc66 <ISOUDS_ProcessReadDID+0x102>
 800bc34:	4b11      	ldr	r3, [pc, #68]	; (800bc7c <ISOUDS_ProcessReadDID+0x118>)
 800bc36:	2222      	movs	r2, #34	; 0x22
 800bc38:	701a      	strb	r2, [r3, #0]
 800bc3a:	e014      	b.n	800bc66 <ISOUDS_ProcessReadDID+0x102>
 800bc3c:	f7f5 fd4f 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d103      	bne.n	800bc4e <ISOUDS_ProcessReadDID+0xea>
 800bc46:	4b0d      	ldr	r3, [pc, #52]	; (800bc7c <ISOUDS_ProcessReadDID+0x118>)
 800bc48:	2288      	movs	r2, #136	; 0x88
 800bc4a:	701a      	strb	r2, [r3, #0]
 800bc4c:	e00b      	b.n	800bc66 <ISOUDS_ProcessReadDID+0x102>
 800bc4e:	4b0b      	ldr	r3, [pc, #44]	; (800bc7c <ISOUDS_ProcessReadDID+0x118>)
 800bc50:	2283      	movs	r2, #131	; 0x83
 800bc52:	701a      	strb	r2, [r3, #0]
 800bc54:	e007      	b.n	800bc66 <ISOUDS_ProcessReadDID+0x102>
 800bc56:	4b09      	ldr	r3, [pc, #36]	; (800bc7c <ISOUDS_ProcessReadDID+0x118>)
 800bc58:	2233      	movs	r2, #51	; 0x33
 800bc5a:	701a      	strb	r2, [r3, #0]
 800bc5c:	e003      	b.n	800bc66 <ISOUDS_ProcessReadDID+0x102>
 800bc5e:	4b07      	ldr	r3, [pc, #28]	; (800bc7c <ISOUDS_ProcessReadDID+0x118>)
 800bc60:	2231      	movs	r2, #49	; 0x31
 800bc62:	701a      	strb	r2, [r3, #0]
 800bc64:	e7ff      	b.n	800bc66 <ISOUDS_ProcessReadDID+0x102>
 800bc66:	bf00      	nop
 800bc68:	3718      	adds	r7, #24
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	24001761 	.word	0x24001761
 800bc74:	08010c6c 	.word	0x08010c6c
 800bc78:	2400173c 	.word	0x2400173c
 800bc7c:	24001762 	.word	0x24001762

0800bc80 <ISOUDS_ProcessReadDyDID>:
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	4603      	mov	r3, r0
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
 800bc8c:	81fb      	strh	r3, [r7, #14]
 800bc8e:	2300      	movs	r3, #0
 800bc90:	74fb      	strb	r3, [r7, #19]
 800bc92:	4b4a      	ldr	r3, [pc, #296]	; (800bdbc <ISOUDS_ProcessReadDyDID+0x13c>)
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	4619      	mov	r1, r3
 800bc98:	4a49      	ldr	r2, [pc, #292]	; (800bdc0 <ISOUDS_ProcessReadDyDID+0x140>)
 800bc9a:	236c      	movs	r3, #108	; 0x6c
 800bc9c:	fb01 f303 	mul.w	r3, r1, r3
 800bca0:	4413      	add	r3, r2
 800bca2:	3367      	adds	r3, #103	; 0x67
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	461a      	mov	r2, r3
 800bca8:	4b46      	ldr	r3, [pc, #280]	; (800bdc4 <ISOUDS_ProcessReadDyDID+0x144>)
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	fa42 f303 	asr.w	r3, r2, r3
 800bcb0:	f003 0301 	and.w	r3, r3, #1
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d078      	beq.n	800bdaa <ISOUDS_ProcessReadDyDID+0x12a>
 800bcb8:	4b40      	ldr	r3, [pc, #256]	; (800bdbc <ISOUDS_ProcessReadDyDID+0x13c>)
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	4a40      	ldr	r2, [pc, #256]	; (800bdc0 <ISOUDS_ProcessReadDyDID+0x140>)
 800bcc0:	236c      	movs	r3, #108	; 0x6c
 800bcc2:	fb01 f303 	mul.w	r3, r1, r3
 800bcc6:	4413      	add	r3, r2
 800bcc8:	3302      	adds	r3, #2
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d06c      	beq.n	800bdaa <ISOUDS_ProcessReadDyDID+0x12a>
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	75fb      	strb	r3, [r7, #23]
 800bcd4:	4b39      	ldr	r3, [pc, #228]	; (800bdbc <ISOUDS_ProcessReadDyDID+0x13c>)
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	4619      	mov	r1, r3
 800bcda:	4a39      	ldr	r2, [pc, #228]	; (800bdc0 <ISOUDS_ProcessReadDyDID+0x140>)
 800bcdc:	236c      	movs	r3, #108	; 0x6c
 800bcde:	fb01 f303 	mul.w	r3, r1, r3
 800bce2:	4413      	add	r3, r2
 800bce4:	3368      	adds	r3, #104	; 0x68
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d129      	bne.n	800bd40 <ISOUDS_ProcessReadDyDID+0xc0>
 800bcec:	2300      	movs	r3, #0
 800bcee:	75fb      	strb	r3, [r7, #23]
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	82bb      	strh	r3, [r7, #20]
 800bcf4:	e013      	b.n	800bd1e <ISOUDS_ProcessReadDyDID+0x9e>
 800bcf6:	4b31      	ldr	r3, [pc, #196]	; (800bdbc <ISOUDS_ProcessReadDyDID+0x13c>)
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	8abb      	ldrh	r3, [r7, #20]
 800bcfe:	4930      	ldr	r1, [pc, #192]	; (800bdc0 <ISOUDS_ProcessReadDyDID+0x140>)
 800bd00:	226c      	movs	r2, #108	; 0x6c
 800bd02:	fb00 f202 	mul.w	r2, r0, r2
 800bd06:	440a      	add	r2, r1
 800bd08:	4413      	add	r3, r2
 800bd0a:	336a      	adds	r3, #106	; 0x6a
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f001 fc0e 	bl	800d530 <ISOUDS_GetSAStLevel>
 800bd14:	4603      	mov	r3, r0
 800bd16:	75fb      	strb	r3, [r7, #23]
 800bd18:	8abb      	ldrh	r3, [r7, #20]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	82bb      	strh	r3, [r7, #20]
 800bd1e:	4b27      	ldr	r3, [pc, #156]	; (800bdbc <ISOUDS_ProcessReadDyDID+0x13c>)
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	4619      	mov	r1, r3
 800bd24:	4a26      	ldr	r2, [pc, #152]	; (800bdc0 <ISOUDS_ProcessReadDyDID+0x140>)
 800bd26:	236c      	movs	r3, #108	; 0x6c
 800bd28:	fb01 f303 	mul.w	r3, r1, r3
 800bd2c:	4413      	add	r3, r2
 800bd2e:	3369      	adds	r3, #105	; 0x69
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	8aba      	ldrh	r2, [r7, #20]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d202      	bcs.n	800bd40 <ISOUDS_ProcessReadDyDID+0xc0>
 800bd3a:	7dfb      	ldrb	r3, [r7, #23]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d0da      	beq.n	800bcf6 <ISOUDS_ProcessReadDyDID+0x76>
 800bd40:	7dfb      	ldrb	r3, [r7, #23]
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d12c      	bne.n	800bda0 <ISOUDS_ProcessReadDyDID+0x120>
 800bd46:	f7f5 fcca 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d11a      	bne.n	800bd86 <ISOUDS_ProcessReadDyDID+0x106>
 800bd50:	f7f5 fccd 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d115      	bne.n	800bd86 <ISOUDS_ProcessReadDyDID+0x106>
 800bd5a:	f7f5 fe63 	bl	8001a24 <ISOUDS_CheckPreConditions>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	74fb      	strb	r3, [r7, #19]
 800bd62:	7cfb      	ldrb	r3, [r7, #19]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10a      	bne.n	800bd7e <ISOUDS_ProcessReadDyDID+0xfe>
 800bd68:	89fb      	ldrh	r3, [r7, #14]
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	68b9      	ldr	r1, [r7, #8]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7ff fe80 	bl	800ba74 <ISOUDS_DDDidData_DDDID>
 800bd74:	4603      	mov	r3, r0
 800bd76:	461a      	mov	r2, r3
 800bd78:	4b13      	ldr	r3, [pc, #76]	; (800bdc8 <ISOUDS_ProcessReadDyDID+0x148>)
 800bd7a:	701a      	strb	r2, [r3, #0]
 800bd7c:	e014      	b.n	800bda8 <ISOUDS_ProcessReadDyDID+0x128>
 800bd7e:	4b12      	ldr	r3, [pc, #72]	; (800bdc8 <ISOUDS_ProcessReadDyDID+0x148>)
 800bd80:	2222      	movs	r2, #34	; 0x22
 800bd82:	701a      	strb	r2, [r3, #0]
 800bd84:	e010      	b.n	800bda8 <ISOUDS_ProcessReadDyDID+0x128>
 800bd86:	f7f5 fcaa 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d003      	beq.n	800bd98 <ISOUDS_ProcessReadDyDID+0x118>
 800bd90:	4b0d      	ldr	r3, [pc, #52]	; (800bdc8 <ISOUDS_ProcessReadDyDID+0x148>)
 800bd92:	2288      	movs	r2, #136	; 0x88
 800bd94:	701a      	strb	r2, [r3, #0]
 800bd96:	e00c      	b.n	800bdb2 <ISOUDS_ProcessReadDyDID+0x132>
 800bd98:	4b0b      	ldr	r3, [pc, #44]	; (800bdc8 <ISOUDS_ProcessReadDyDID+0x148>)
 800bd9a:	2283      	movs	r2, #131	; 0x83
 800bd9c:	701a      	strb	r2, [r3, #0]
 800bd9e:	e008      	b.n	800bdb2 <ISOUDS_ProcessReadDyDID+0x132>
 800bda0:	4b09      	ldr	r3, [pc, #36]	; (800bdc8 <ISOUDS_ProcessReadDyDID+0x148>)
 800bda2:	2233      	movs	r2, #51	; 0x33
 800bda4:	701a      	strb	r2, [r3, #0]
 800bda6:	e004      	b.n	800bdb2 <ISOUDS_ProcessReadDyDID+0x132>
 800bda8:	e003      	b.n	800bdb2 <ISOUDS_ProcessReadDyDID+0x132>
 800bdaa:	4b07      	ldr	r3, [pc, #28]	; (800bdc8 <ISOUDS_ProcessReadDyDID+0x148>)
 800bdac:	2231      	movs	r2, #49	; 0x31
 800bdae:	701a      	strb	r2, [r3, #0]
 800bdb0:	bf00      	nop
 800bdb2:	bf00      	nop
 800bdb4:	3718      	adds	r7, #24
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	24001818 	.word	0x24001818
 800bdc0:	240000ac 	.word	0x240000ac
 800bdc4:	2400173c 	.word	0x2400173c
 800bdc8:	24001762 	.word	0x24001762

0800bdcc <ISOUDS_RdPdIDLookUp>:
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	603a      	str	r2, [r7, #0]
 800bdd6:	71fb      	strb	r3, [r7, #7]
 800bdd8:	460b      	mov	r3, r1
 800bdda:	71bb      	strb	r3, [r7, #6]
 800bddc:	2300      	movs	r3, #0
 800bdde:	73bb      	strb	r3, [r7, #14]
 800bde0:	2300      	movs	r3, #0
 800bde2:	73fb      	strb	r3, [r7, #15]
 800bde4:	e010      	b.n	800be08 <ISOUDS_RdPdIDLookUp+0x3c>
 800bde6:	79fb      	ldrb	r3, [r7, #7]
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
 800bdec:	490d      	ldr	r1, [pc, #52]	; (800be24 <ISOUDS_RdPdIDLookUp+0x58>)
 800bdee:	011b      	lsls	r3, r3, #4
 800bdf0:	440b      	add	r3, r1
 800bdf2:	881b      	ldrh	r3, [r3, #0]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d104      	bne.n	800be02 <ISOUDS_RdPdIDLookUp+0x36>
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	73bb      	strb	r3, [r7, #14]
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	7bfa      	ldrb	r2, [r7, #15]
 800be00:	701a      	strb	r2, [r3, #0]
 800be02:	7bfb      	ldrb	r3, [r7, #15]
 800be04:	3301      	adds	r3, #1
 800be06:	73fb      	strb	r3, [r7, #15]
 800be08:	7bfa      	ldrb	r2, [r7, #15]
 800be0a:	79bb      	ldrb	r3, [r7, #6]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d202      	bcs.n	800be16 <ISOUDS_RdPdIDLookUp+0x4a>
 800be10:	7bbb      	ldrb	r3, [r7, #14]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d0e7      	beq.n	800bde6 <ISOUDS_RdPdIDLookUp+0x1a>
 800be16:	7bbb      	ldrb	r3, [r7, #14]
 800be18:	4618      	mov	r0, r3
 800be1a:	3714      	adds	r7, #20
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr
 800be24:	08010d5c 	.word	0x08010d5c

0800be28 <ClearPeriodicIdTimeCntr>:
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	4603      	mov	r3, r0
 800be30:	6039      	str	r1, [r7, #0]
 800be32:	80fb      	strh	r3, [r7, #6]
 800be34:	2300      	movs	r3, #0
 800be36:	72fb      	strb	r3, [r7, #11]
 800be38:	2300      	movs	r3, #0
 800be3a:	81fb      	strh	r3, [r7, #14]
 800be3c:	e053      	b.n	800bee6 <ClearPeriodicIdTimeCntr+0xbe>
 800be3e:	89fb      	ldrh	r3, [r7, #14]
 800be40:	3301      	adds	r3, #1
 800be42:	461a      	mov	r2, r3
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	4413      	add	r3, r2
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	737b      	strb	r3, [r7, #13]
 800be4c:	f7f6 f9af 	bl	80021ae <ISOUDS_Get_RDPDDIDDACONFTABSIZE>
 800be50:	4603      	mov	r3, r0
 800be52:	b2d9      	uxtb	r1, r3
 800be54:	f107 020b 	add.w	r2, r7, #11
 800be58:	7b7b      	ldrb	r3, [r7, #13]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7ff ffb6 	bl	800bdcc <ISOUDS_RdPdIDLookUp>
 800be60:	4603      	mov	r3, r0
 800be62:	733b      	strb	r3, [r7, #12]
 800be64:	7b3b      	ldrb	r3, [r7, #12]
 800be66:	2b01      	cmp	r3, #1
 800be68:	d13a      	bne.n	800bee0 <ClearPeriodicIdTimeCntr+0xb8>
 800be6a:	7afb      	ldrb	r3, [r7, #11]
 800be6c:	4619      	mov	r1, r3
 800be6e:	4a24      	ldr	r2, [pc, #144]	; (800bf00 <ClearPeriodicIdTimeCntr+0xd8>)
 800be70:	460b      	mov	r3, r1
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	440b      	add	r3, r1
 800be76:	005b      	lsls	r3, r3, #1
 800be78:	4413      	add	r3, r2
 800be7a:	3305      	adds	r3, #5
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d12b      	bne.n	800beda <ClearPeriodicIdTimeCntr+0xb2>
 800be82:	7afb      	ldrb	r3, [r7, #11]
 800be84:	4619      	mov	r1, r3
 800be86:	4a1e      	ldr	r2, [pc, #120]	; (800bf00 <ClearPeriodicIdTimeCntr+0xd8>)
 800be88:	460b      	mov	r3, r1
 800be8a:	005b      	lsls	r3, r3, #1
 800be8c:	440b      	add	r3, r1
 800be8e:	005b      	lsls	r3, r3, #1
 800be90:	4413      	add	r3, r2
 800be92:	3305      	adds	r3, #5
 800be94:	2200      	movs	r2, #0
 800be96:	701a      	strb	r2, [r3, #0]
 800be98:	7afb      	ldrb	r3, [r7, #11]
 800be9a:	4619      	mov	r1, r3
 800be9c:	4a18      	ldr	r2, [pc, #96]	; (800bf00 <ClearPeriodicIdTimeCntr+0xd8>)
 800be9e:	460b      	mov	r3, r1
 800bea0:	005b      	lsls	r3, r3, #1
 800bea2:	440b      	add	r3, r1
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	4413      	add	r3, r2
 800bea8:	3302      	adds	r3, #2
 800beaa:	2200      	movs	r2, #0
 800beac:	801a      	strh	r2, [r3, #0]
 800beae:	7afb      	ldrb	r3, [r7, #11]
 800beb0:	4619      	mov	r1, r3
 800beb2:	4a13      	ldr	r2, [pc, #76]	; (800bf00 <ClearPeriodicIdTimeCntr+0xd8>)
 800beb4:	460b      	mov	r3, r1
 800beb6:	005b      	lsls	r3, r3, #1
 800beb8:	440b      	add	r3, r1
 800beba:	005b      	lsls	r3, r3, #1
 800bebc:	4413      	add	r3, r2
 800bebe:	2200      	movs	r2, #0
 800bec0:	801a      	strh	r2, [r3, #0]
 800bec2:	7afb      	ldrb	r3, [r7, #11]
 800bec4:	4619      	mov	r1, r3
 800bec6:	4a0e      	ldr	r2, [pc, #56]	; (800bf00 <ClearPeriodicIdTimeCntr+0xd8>)
 800bec8:	460b      	mov	r3, r1
 800beca:	005b      	lsls	r3, r3, #1
 800becc:	440b      	add	r3, r1
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	4413      	add	r3, r2
 800bed2:	3304      	adds	r3, #4
 800bed4:	2200      	movs	r2, #0
 800bed6:	701a      	strb	r2, [r3, #0]
 800bed8:	e002      	b.n	800bee0 <ClearPeriodicIdTimeCntr+0xb8>
 800beda:	4b0a      	ldr	r3, [pc, #40]	; (800bf04 <ClearPeriodicIdTimeCntr+0xdc>)
 800bedc:	2231      	movs	r2, #49	; 0x31
 800bede:	701a      	strb	r2, [r3, #0]
 800bee0:	89fb      	ldrh	r3, [r7, #14]
 800bee2:	3301      	adds	r3, #1
 800bee4:	81fb      	strh	r3, [r7, #14]
 800bee6:	89fa      	ldrh	r2, [r7, #14]
 800bee8:	88fb      	ldrh	r3, [r7, #6]
 800beea:	429a      	cmp	r2, r3
 800beec:	d203      	bcs.n	800bef6 <ClearPeriodicIdTimeCntr+0xce>
 800beee:	4b05      	ldr	r3, [pc, #20]	; (800bf04 <ClearPeriodicIdTimeCntr+0xdc>)
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	2b03      	cmp	r3, #3
 800bef4:	d0a3      	beq.n	800be3e <ClearPeriodicIdTimeCntr+0x16>
 800bef6:	bf00      	nop
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	24001768 	.word	0x24001768
 800bf04:	24001764 	.word	0x24001764

0800bf08 <ISOUDS_RdPdDaDidData>:
 800bf08:	b590      	push	{r4, r7, lr}
 800bf0a:	b087      	sub	sp, #28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
 800bf14:	73fb      	strb	r3, [r7, #15]
 800bf16:	2300      	movs	r3, #0
 800bf18:	75fb      	strb	r3, [r7, #23]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	881b      	ldrh	r3, [r3, #0]
 800bf1e:	4619      	mov	r1, r3
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
 800bf22:	4a31      	ldr	r2, [pc, #196]	; (800bfe8 <ISOUDS_RdPdDaDidData+0xe0>)
 800bf24:	011b      	lsls	r3, r3, #4
 800bf26:	4413      	add	r3, r2
 800bf28:	3302      	adds	r3, #2
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	440b      	add	r3, r1
 800bf2e:	1c9c      	adds	r4, r3, #2
 800bf30:	f7f5 fc05 	bl	800173e <ISOUDS_GetServerBuffSize>
 800bf34:	4603      	mov	r3, r0
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	429c      	cmp	r4, r3
 800bf3a:	d24d      	bcs.n	800bfd8 <ISOUDS_RdPdDaDidData+0xd0>
 800bf3c:	7bfa      	ldrb	r2, [r7, #15]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	881b      	ldrh	r3, [r3, #0]
 800bf42:	4619      	mov	r1, r3
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	4419      	add	r1, r3
 800bf48:	4828      	ldr	r0, [pc, #160]	; (800bfec <ISOUDS_RdPdDaDidData+0xe4>)
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	005b      	lsls	r3, r3, #1
 800bf4e:	4413      	add	r3, r2
 800bf50:	005b      	lsls	r3, r3, #1
 800bf52:	4403      	add	r3, r0
 800bf54:	3304      	adds	r3, #4
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	700b      	strb	r3, [r1, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	881b      	ldrh	r3, [r3, #0]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	801a      	strh	r2, [r3, #0]
 800bf66:	7bfb      	ldrb	r3, [r7, #15]
 800bf68:	4a1f      	ldr	r2, [pc, #124]	; (800bfe8 <ISOUDS_RdPdDaDidData+0xe0>)
 800bf6a:	011b      	lsls	r3, r3, #4
 800bf6c:	4413      	add	r3, r2
 800bf6e:	3308      	adds	r3, #8
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d02c      	beq.n	800bfd0 <ISOUDS_RdPdDaDidData+0xc8>
 800bf76:	7bfb      	ldrb	r3, [r7, #15]
 800bf78:	4a1b      	ldr	r2, [pc, #108]	; (800bfe8 <ISOUDS_RdPdDaDidData+0xe0>)
 800bf7a:	011b      	lsls	r3, r3, #4
 800bf7c:	4413      	add	r3, r2
 800bf7e:	3308      	adds	r3, #8
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	8812      	ldrh	r2, [r2, #0]
 800bf86:	4611      	mov	r1, r2
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	1850      	adds	r0, r2, r1
 800bf8c:	7bfa      	ldrb	r2, [r7, #15]
 800bf8e:	4916      	ldr	r1, [pc, #88]	; (800bfe8 <ISOUDS_RdPdDaDidData+0xe0>)
 800bf90:	0112      	lsls	r2, r2, #4
 800bf92:	440a      	add	r2, r1
 800bf94:	3202      	adds	r2, #2
 800bf96:	7812      	ldrb	r2, [r2, #0]
 800bf98:	b292      	uxth	r2, r2
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	4798      	blx	r3
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	75fb      	strb	r3, [r7, #23]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	881a      	ldrh	r2, [r3, #0]
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
 800bfa8:	490f      	ldr	r1, [pc, #60]	; (800bfe8 <ISOUDS_RdPdDaDidData+0xe0>)
 800bfaa:	011b      	lsls	r3, r3, #4
 800bfac:	440b      	add	r3, r1
 800bfae:	3302      	adds	r3, #2
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	4413      	add	r3, r2
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	801a      	strh	r2, [r3, #0]
 800bfbc:	7dfb      	ldrb	r3, [r7, #23]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d102      	bne.n	800bfc8 <ISOUDS_RdPdDaDidData+0xc0>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	75fb      	strb	r3, [r7, #23]
 800bfc6:	e00a      	b.n	800bfde <ISOUDS_RdPdDaDidData+0xd6>
 800bfc8:	4b09      	ldr	r3, [pc, #36]	; (800bff0 <ISOUDS_RdPdDaDidData+0xe8>)
 800bfca:	2222      	movs	r2, #34	; 0x22
 800bfcc:	701a      	strb	r2, [r3, #0]
 800bfce:	e006      	b.n	800bfde <ISOUDS_RdPdDaDidData+0xd6>
 800bfd0:	4b07      	ldr	r3, [pc, #28]	; (800bff0 <ISOUDS_RdPdDaDidData+0xe8>)
 800bfd2:	2231      	movs	r2, #49	; 0x31
 800bfd4:	701a      	strb	r2, [r3, #0]
 800bfd6:	e002      	b.n	800bfde <ISOUDS_RdPdDaDidData+0xd6>
 800bfd8:	4b05      	ldr	r3, [pc, #20]	; (800bff0 <ISOUDS_RdPdDaDidData+0xe8>)
 800bfda:	2231      	movs	r2, #49	; 0x31
 800bfdc:	701a      	strb	r2, [r3, #0]
 800bfde:	7dfb      	ldrb	r3, [r7, #23]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	371c      	adds	r7, #28
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd90      	pop	{r4, r7, pc}
 800bfe8:	08010d5c 	.word	0x08010d5c
 800bfec:	24001768 	.word	0x24001768
 800bff0:	24001764 	.word	0x24001764

0800bff4 <ISOUDS_RdDataPeriodicDIDMainFunction>:
 800bff4:	b590      	push	{r4, r7, lr}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	2300      	movs	r3, #0
 800bffc:	71bb      	strb	r3, [r7, #6]
 800bffe:	2300      	movs	r3, #0
 800c000:	807b      	strh	r3, [r7, #2]
 800c002:	2300      	movs	r3, #0
 800c004:	71fb      	strb	r3, [r7, #7]
 800c006:	e05d      	b.n	800c0c4 <ISOUDS_RdDataPeriodicDIDMainFunction+0xd0>
 800c008:	79fa      	ldrb	r2, [r7, #7]
 800c00a:	4936      	ldr	r1, [pc, #216]	; (800c0e4 <ISOUDS_RdDataPeriodicDIDMainFunction+0xf0>)
 800c00c:	4613      	mov	r3, r2
 800c00e:	005b      	lsls	r3, r3, #1
 800c010:	4413      	add	r3, r2
 800c012:	005b      	lsls	r3, r3, #1
 800c014:	440b      	add	r3, r1
 800c016:	3302      	adds	r3, #2
 800c018:	8819      	ldrh	r1, [r3, #0]
 800c01a:	79fa      	ldrb	r2, [r7, #7]
 800c01c:	4831      	ldr	r0, [pc, #196]	; (800c0e4 <ISOUDS_RdDataPeriodicDIDMainFunction+0xf0>)
 800c01e:	4613      	mov	r3, r2
 800c020:	005b      	lsls	r3, r3, #1
 800c022:	4413      	add	r3, r2
 800c024:	005b      	lsls	r3, r3, #1
 800c026:	4403      	add	r3, r0
 800c028:	881b      	ldrh	r3, [r3, #0]
 800c02a:	4299      	cmp	r1, r3
 800c02c:	d226      	bcs.n	800c07c <ISOUDS_RdDataPeriodicDIDMainFunction+0x88>
 800c02e:	f7ff fa8d 	bl	800b54c <ISOUDS_GetUDSStat>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d142      	bne.n	800c0be <ISOUDS_RdDataPeriodicDIDMainFunction+0xca>
 800c038:	1cba      	adds	r2, r7, #2
 800c03a:	79fb      	ldrb	r3, [r7, #7]
 800c03c:	492a      	ldr	r1, [pc, #168]	; (800c0e8 <ISOUDS_RdDataPeriodicDIDMainFunction+0xf4>)
 800c03e:	4618      	mov	r0, r3
 800c040:	f7ff ff62 	bl	800bf08 <ISOUDS_RdPdDaDidData>
 800c044:	4603      	mov	r3, r0
 800c046:	71bb      	strb	r3, [r7, #6]
 800c048:	79bb      	ldrb	r3, [r7, #6]
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d112      	bne.n	800c074 <ISOUDS_RdDataPeriodicDIDMainFunction+0x80>
 800c04e:	887b      	ldrh	r3, [r7, #2]
 800c050:	80bb      	strh	r3, [r7, #4]
 800c052:	f7f5 fb27 	bl	80016a4 <ISOUDS_SrvSetPrdDatByIDCANid>
 800c056:	88bb      	ldrh	r3, [r7, #4]
 800c058:	4923      	ldr	r1, [pc, #140]	; (800c0e8 <ISOUDS_RdDataPeriodicDIDMainFunction+0xf4>)
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7f5 fb29 	bl	80016b2 <ISOUDS_ServerTxRequest>
 800c060:	79fa      	ldrb	r2, [r7, #7]
 800c062:	4920      	ldr	r1, [pc, #128]	; (800c0e4 <ISOUDS_RdDataPeriodicDIDMainFunction+0xf0>)
 800c064:	4613      	mov	r3, r2
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	4413      	add	r3, r2
 800c06a:	005b      	lsls	r3, r3, #1
 800c06c:	440b      	add	r3, r1
 800c06e:	2200      	movs	r2, #0
 800c070:	801a      	strh	r2, [r3, #0]
 800c072:	e024      	b.n	800c0be <ISOUDS_RdDataPeriodicDIDMainFunction+0xca>
 800c074:	4b1d      	ldr	r3, [pc, #116]	; (800c0ec <ISOUDS_RdDataPeriodicDIDMainFunction+0xf8>)
 800c076:	2222      	movs	r2, #34	; 0x22
 800c078:	701a      	strb	r2, [r3, #0]
 800c07a:	e020      	b.n	800c0be <ISOUDS_RdDataPeriodicDIDMainFunction+0xca>
 800c07c:	79fa      	ldrb	r2, [r7, #7]
 800c07e:	4919      	ldr	r1, [pc, #100]	; (800c0e4 <ISOUDS_RdDataPeriodicDIDMainFunction+0xf0>)
 800c080:	4613      	mov	r3, r2
 800c082:	005b      	lsls	r3, r3, #1
 800c084:	4413      	add	r3, r2
 800c086:	005b      	lsls	r3, r3, #1
 800c088:	440b      	add	r3, r1
 800c08a:	3305      	adds	r3, #5
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d115      	bne.n	800c0be <ISOUDS_RdDataPeriodicDIDMainFunction+0xca>
 800c092:	f7f5 fb44 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800c096:	79fa      	ldrb	r2, [r7, #7]
 800c098:	4912      	ldr	r1, [pc, #72]	; (800c0e4 <ISOUDS_RdDataPeriodicDIDMainFunction+0xf0>)
 800c09a:	4613      	mov	r3, r2
 800c09c:	005b      	lsls	r3, r3, #1
 800c09e:	4413      	add	r3, r2
 800c0a0:	005b      	lsls	r3, r3, #1
 800c0a2:	440b      	add	r3, r1
 800c0a4:	8819      	ldrh	r1, [r3, #0]
 800c0a6:	b283      	uxth	r3, r0
 800c0a8:	79fa      	ldrb	r2, [r7, #7]
 800c0aa:	440b      	add	r3, r1
 800c0ac:	b298      	uxth	r0, r3
 800c0ae:	490d      	ldr	r1, [pc, #52]	; (800c0e4 <ISOUDS_RdDataPeriodicDIDMainFunction+0xf0>)
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	005b      	lsls	r3, r3, #1
 800c0b4:	4413      	add	r3, r2
 800c0b6:	005b      	lsls	r3, r3, #1
 800c0b8:	440b      	add	r3, r1
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	801a      	strh	r2, [r3, #0]
 800c0be:	79fb      	ldrb	r3, [r7, #7]
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	71fb      	strb	r3, [r7, #7]
 800c0c4:	79fb      	ldrb	r3, [r7, #7]
 800c0c6:	b29c      	uxth	r4, r3
 800c0c8:	f7f6 f871 	bl	80021ae <ISOUDS_Get_RDPDDIDDACONFTABSIZE>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	429c      	cmp	r4, r3
 800c0d0:	d203      	bcs.n	800c0da <ISOUDS_RdDataPeriodicDIDMainFunction+0xe6>
 800c0d2:	4b07      	ldr	r3, [pc, #28]	; (800c0f0 <ISOUDS_RdDataPeriodicDIDMainFunction+0xfc>)
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d096      	beq.n	800c008 <ISOUDS_RdDataPeriodicDIDMainFunction+0x14>
 800c0da:	bf00      	nop
 800c0dc:	370c      	adds	r7, #12
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd90      	pop	{r4, r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	24001768 	.word	0x24001768
 800c0e8:	24001788 	.word	0x24001788
 800c0ec:	24001764 	.word	0x24001764
 800c0f0:	24001744 	.word	0x24001744

0800c0f4 <ISOUDS_RdDaByPdID>:
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
 800c0fe:	4b97      	ldr	r3, [pc, #604]	; (800c35c <ISOUDS_RdDaByPdID+0x268>)
 800c100:	2203      	movs	r2, #3
 800c102:	701a      	strb	r2, [r3, #0]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	f000 8123 	beq.w	800c352 <ISOUDS_RdDaByPdID+0x25e>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	889b      	ldrh	r3, [r3, #4]
 800c110:	2b02      	cmp	r3, #2
 800c112:	f240 80e0 	bls.w	800c2d6 <ISOUDS_RdDaByPdID+0x1e2>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	889b      	ldrh	r3, [r3, #4]
 800c11a:	3b02      	subs	r3, #2
 800c11c:	81fb      	strh	r3, [r7, #14]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	2b04      	cmp	r3, #4
 800c124:	d81f      	bhi.n	800c166 <ISOUDS_RdDaByPdID+0x72>
 800c126:	a201      	add	r2, pc, #4	; (adr r2, 800c12c <ISOUDS_RdDaByPdID+0x38>)
 800c128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c12c:	0800c141 	.word	0x0800c141
 800c130:	0800c147 	.word	0x0800c147
 800c134:	0800c14f 	.word	0x0800c14f
 800c138:	0800c155 	.word	0x0800c155
 800c13c:	0800c15b 	.word	0x0800c15b
 800c140:	2300      	movs	r3, #0
 800c142:	82bb      	strh	r3, [r7, #20]
 800c144:	e013      	b.n	800c16e <ISOUDS_RdDaByPdID+0x7a>
 800c146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c14a:	82bb      	strh	r3, [r7, #20]
 800c14c:	e00f      	b.n	800c16e <ISOUDS_RdDaByPdID+0x7a>
 800c14e:	2364      	movs	r3, #100	; 0x64
 800c150:	82bb      	strh	r3, [r7, #20]
 800c152:	e00c      	b.n	800c16e <ISOUDS_RdDaByPdID+0x7a>
 800c154:	230a      	movs	r3, #10
 800c156:	82bb      	strh	r3, [r7, #20]
 800c158:	e009      	b.n	800c16e <ISOUDS_RdDaByPdID+0x7a>
 800c15a:	89fb      	ldrh	r3, [r7, #14]
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	4618      	mov	r0, r3
 800c160:	f7ff fe62 	bl	800be28 <ClearPeriodicIdTimeCntr>
 800c164:	e003      	b.n	800c16e <ISOUDS_RdDaByPdID+0x7a>
 800c166:	4b7d      	ldr	r3, [pc, #500]	; (800c35c <ISOUDS_RdDaByPdID+0x268>)
 800c168:	2231      	movs	r2, #49	; 0x31
 800c16a:	701a      	strb	r2, [r3, #0]
 800c16c:	bf00      	nop
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	2b04      	cmp	r3, #4
 800c174:	f000 80db 	beq.w	800c32e <ISOUDS_RdDaByPdID+0x23a>
 800c178:	4b78      	ldr	r3, [pc, #480]	; (800c35c <ISOUDS_RdDaByPdID+0x268>)
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	2b03      	cmp	r3, #3
 800c17e:	f040 80d6 	bne.w	800c32e <ISOUDS_RdDaByPdID+0x23a>
 800c182:	f7f6 f814 	bl	80021ae <ISOUDS_Get_RDPDDIDDACONFTABSIZE>
 800c186:	4603      	mov	r3, r0
 800c188:	461a      	mov	r2, r3
 800c18a:	89fb      	ldrh	r3, [r7, #14]
 800c18c:	4293      	cmp	r3, r2
 800c18e:	f200 809e 	bhi.w	800c2ce <ISOUDS_RdDaByPdID+0x1da>
 800c192:	2300      	movs	r3, #0
 800c194:	75fb      	strb	r3, [r7, #23]
 800c196:	e08f      	b.n	800c2b8 <ISOUDS_RdDaByPdID+0x1c4>
 800c198:	7dfb      	ldrb	r3, [r7, #23]
 800c19a:	3301      	adds	r3, #1
 800c19c:	461a      	mov	r2, r3
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	737b      	strb	r3, [r7, #13]
 800c1a6:	f7f6 f802 	bl	80021ae <ISOUDS_Get_RDPDDIDDACONFTABSIZE>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	b2d9      	uxtb	r1, r3
 800c1ae:	f107 020c 	add.w	r2, r7, #12
 800c1b2:	7b7b      	ldrb	r3, [r7, #13]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7ff fe09 	bl	800bdcc <ISOUDS_RdPdIDLookUp>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d175      	bne.n	800c2ac <ISOUDS_RdDaByPdID+0x1b8>
 800c1c0:	7b3b      	ldrb	r3, [r7, #12]
 800c1c2:	4a67      	ldr	r2, [pc, #412]	; (800c360 <ISOUDS_RdDaByPdID+0x26c>)
 800c1c4:	011b      	lsls	r3, r3, #4
 800c1c6:	4413      	add	r3, r2
 800c1c8:	330c      	adds	r3, #12
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	4b65      	ldr	r3, [pc, #404]	; (800c364 <ISOUDS_RdDaByPdID+0x270>)
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	fa42 f303 	asr.w	r3, r2, r3
 800c1d6:	f003 0301 	and.w	r3, r3, #1
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d062      	beq.n	800c2a4 <ISOUDS_RdDaByPdID+0x1b0>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	74bb      	strb	r3, [r7, #18]
 800c1e2:	7b3b      	ldrb	r3, [r7, #12]
 800c1e4:	4a5e      	ldr	r2, [pc, #376]	; (800c360 <ISOUDS_RdDaByPdID+0x26c>)
 800c1e6:	011b      	lsls	r3, r3, #4
 800c1e8:	4413      	add	r3, r2
 800c1ea:	330d      	adds	r3, #13
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d122      	bne.n	800c238 <ISOUDS_RdDaByPdID+0x144>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	74bb      	strb	r3, [r7, #18]
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	823b      	strh	r3, [r7, #16]
 800c1fa:	e010      	b.n	800c21e <ISOUDS_RdDaByPdID+0x12a>
 800c1fc:	7b3b      	ldrb	r3, [r7, #12]
 800c1fe:	461a      	mov	r2, r3
 800c200:	8a3b      	ldrh	r3, [r7, #16]
 800c202:	4957      	ldr	r1, [pc, #348]	; (800c360 <ISOUDS_RdDaByPdID+0x26c>)
 800c204:	0112      	lsls	r2, r2, #4
 800c206:	440a      	add	r2, r1
 800c208:	4413      	add	r3, r2
 800c20a:	330f      	adds	r3, #15
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	4618      	mov	r0, r3
 800c210:	f001 f98e 	bl	800d530 <ISOUDS_GetSAStLevel>
 800c214:	4603      	mov	r3, r0
 800c216:	74bb      	strb	r3, [r7, #18]
 800c218:	8a3b      	ldrh	r3, [r7, #16]
 800c21a:	3301      	adds	r3, #1
 800c21c:	823b      	strh	r3, [r7, #16]
 800c21e:	7b3b      	ldrb	r3, [r7, #12]
 800c220:	4a4f      	ldr	r2, [pc, #316]	; (800c360 <ISOUDS_RdDaByPdID+0x26c>)
 800c222:	011b      	lsls	r3, r3, #4
 800c224:	4413      	add	r3, r2
 800c226:	330e      	adds	r3, #14
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	8a3a      	ldrh	r2, [r7, #16]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d202      	bcs.n	800c238 <ISOUDS_RdDaByPdID+0x144>
 800c232:	7cbb      	ldrb	r3, [r7, #18]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d0e1      	beq.n	800c1fc <ISOUDS_RdDaByPdID+0x108>
 800c238:	7cbb      	ldrb	r3, [r7, #18]
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d12e      	bne.n	800c29c <ISOUDS_RdDaByPdID+0x1a8>
 800c23e:	7b3b      	ldrb	r3, [r7, #12]
 800c240:	4619      	mov	r1, r3
 800c242:	4a49      	ldr	r2, [pc, #292]	; (800c368 <ISOUDS_RdDaByPdID+0x274>)
 800c244:	460b      	mov	r3, r1
 800c246:	005b      	lsls	r3, r3, #1
 800c248:	440b      	add	r3, r1
 800c24a:	005b      	lsls	r3, r3, #1
 800c24c:	4413      	add	r3, r2
 800c24e:	3304      	adds	r3, #4
 800c250:	7b7a      	ldrb	r2, [r7, #13]
 800c252:	701a      	strb	r2, [r3, #0]
 800c254:	7b3b      	ldrb	r3, [r7, #12]
 800c256:	4619      	mov	r1, r3
 800c258:	4a43      	ldr	r2, [pc, #268]	; (800c368 <ISOUDS_RdDaByPdID+0x274>)
 800c25a:	460b      	mov	r3, r1
 800c25c:	005b      	lsls	r3, r3, #1
 800c25e:	440b      	add	r3, r1
 800c260:	005b      	lsls	r3, r3, #1
 800c262:	4413      	add	r3, r2
 800c264:	3302      	adds	r3, #2
 800c266:	881b      	ldrh	r3, [r3, #0]
 800c268:	8aba      	ldrh	r2, [r7, #20]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d021      	beq.n	800c2b2 <ISOUDS_RdDaByPdID+0x1be>
 800c26e:	7b3b      	ldrb	r3, [r7, #12]
 800c270:	4619      	mov	r1, r3
 800c272:	4a3d      	ldr	r2, [pc, #244]	; (800c368 <ISOUDS_RdDaByPdID+0x274>)
 800c274:	460b      	mov	r3, r1
 800c276:	005b      	lsls	r3, r3, #1
 800c278:	440b      	add	r3, r1
 800c27a:	005b      	lsls	r3, r3, #1
 800c27c:	4413      	add	r3, r2
 800c27e:	3302      	adds	r3, #2
 800c280:	8aba      	ldrh	r2, [r7, #20]
 800c282:	801a      	strh	r2, [r3, #0]
 800c284:	7b3b      	ldrb	r3, [r7, #12]
 800c286:	4619      	mov	r1, r3
 800c288:	4a37      	ldr	r2, [pc, #220]	; (800c368 <ISOUDS_RdDaByPdID+0x274>)
 800c28a:	460b      	mov	r3, r1
 800c28c:	005b      	lsls	r3, r3, #1
 800c28e:	440b      	add	r3, r1
 800c290:	005b      	lsls	r3, r3, #1
 800c292:	4413      	add	r3, r2
 800c294:	3305      	adds	r3, #5
 800c296:	2201      	movs	r2, #1
 800c298:	701a      	strb	r2, [r3, #0]
 800c29a:	e00a      	b.n	800c2b2 <ISOUDS_RdDaByPdID+0x1be>
 800c29c:	4b2f      	ldr	r3, [pc, #188]	; (800c35c <ISOUDS_RdDaByPdID+0x268>)
 800c29e:	2233      	movs	r2, #51	; 0x33
 800c2a0:	701a      	strb	r2, [r3, #0]
 800c2a2:	e006      	b.n	800c2b2 <ISOUDS_RdDaByPdID+0x1be>
 800c2a4:	4b2d      	ldr	r3, [pc, #180]	; (800c35c <ISOUDS_RdDaByPdID+0x268>)
 800c2a6:	227e      	movs	r2, #126	; 0x7e
 800c2a8:	701a      	strb	r2, [r3, #0]
 800c2aa:	e002      	b.n	800c2b2 <ISOUDS_RdDaByPdID+0x1be>
 800c2ac:	4b2b      	ldr	r3, [pc, #172]	; (800c35c <ISOUDS_RdDaByPdID+0x268>)
 800c2ae:	2231      	movs	r2, #49	; 0x31
 800c2b0:	701a      	strb	r2, [r3, #0]
 800c2b2:	7dfb      	ldrb	r3, [r7, #23]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	75fb      	strb	r3, [r7, #23]
 800c2b8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	89fa      	ldrh	r2, [r7, #14]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d935      	bls.n	800c32e <ISOUDS_RdDaByPdID+0x23a>
 800c2c2:	4b26      	ldr	r3, [pc, #152]	; (800c35c <ISOUDS_RdDaByPdID+0x268>)
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	2b03      	cmp	r3, #3
 800c2c8:	f43f af66 	beq.w	800c198 <ISOUDS_RdDaByPdID+0xa4>
 800c2cc:	e02f      	b.n	800c32e <ISOUDS_RdDaByPdID+0x23a>
 800c2ce:	4b23      	ldr	r3, [pc, #140]	; (800c35c <ISOUDS_RdDaByPdID+0x268>)
 800c2d0:	2231      	movs	r2, #49	; 0x31
 800c2d2:	701a      	strb	r2, [r3, #0]
 800c2d4:	e02b      	b.n	800c32e <ISOUDS_RdDaByPdID+0x23a>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	889b      	ldrh	r3, [r3, #4]
 800c2da:	2b02      	cmp	r3, #2
 800c2dc:	d124      	bne.n	800c328 <ISOUDS_RdDaByPdID+0x234>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	2b04      	cmp	r3, #4
 800c2e4:	d120      	bne.n	800c328 <ISOUDS_RdDaByPdID+0x234>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	74fb      	strb	r3, [r7, #19]
 800c2ea:	e016      	b.n	800c31a <ISOUDS_RdDaByPdID+0x226>
 800c2ec:	7cfa      	ldrb	r2, [r7, #19]
 800c2ee:	491e      	ldr	r1, [pc, #120]	; (800c368 <ISOUDS_RdDaByPdID+0x274>)
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	005b      	lsls	r3, r3, #1
 800c2f4:	4413      	add	r3, r2
 800c2f6:	005b      	lsls	r3, r3, #1
 800c2f8:	440b      	add	r3, r1
 800c2fa:	3302      	adds	r3, #2
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	801a      	strh	r2, [r3, #0]
 800c300:	7cfa      	ldrb	r2, [r7, #19]
 800c302:	4919      	ldr	r1, [pc, #100]	; (800c368 <ISOUDS_RdDaByPdID+0x274>)
 800c304:	4613      	mov	r3, r2
 800c306:	005b      	lsls	r3, r3, #1
 800c308:	4413      	add	r3, r2
 800c30a:	005b      	lsls	r3, r3, #1
 800c30c:	440b      	add	r3, r1
 800c30e:	3305      	adds	r3, #5
 800c310:	2200      	movs	r2, #0
 800c312:	701a      	strb	r2, [r3, #0]
 800c314:	7cfb      	ldrb	r3, [r7, #19]
 800c316:	3301      	adds	r3, #1
 800c318:	74fb      	strb	r3, [r7, #19]
 800c31a:	7cfb      	ldrb	r3, [r7, #19]
 800c31c:	2b04      	cmp	r3, #4
 800c31e:	d9e5      	bls.n	800c2ec <ISOUDS_RdDaByPdID+0x1f8>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	809a      	strh	r2, [r3, #4]
 800c326:	e002      	b.n	800c32e <ISOUDS_RdDaByPdID+0x23a>
 800c328:	4b0c      	ldr	r3, [pc, #48]	; (800c35c <ISOUDS_RdDaByPdID+0x268>)
 800c32a:	2213      	movs	r2, #19
 800c32c:	701a      	strb	r2, [r3, #0]
 800c32e:	4b0b      	ldr	r3, [pc, #44]	; (800c35c <ISOUDS_RdDaByPdID+0x268>)
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	2b03      	cmp	r3, #3
 800c334:	d106      	bne.n	800c344 <ISOUDS_RdDaByPdID+0x250>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2201      	movs	r2, #1
 800c33a:	809a      	strh	r2, [r3, #4]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2203      	movs	r2, #3
 800c340:	701a      	strb	r2, [r3, #0]
 800c342:	e006      	b.n	800c352 <ISOUDS_RdDaByPdID+0x25e>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2204      	movs	r2, #4
 800c348:	701a      	strb	r2, [r3, #0]
 800c34a:	4b04      	ldr	r3, [pc, #16]	; (800c35c <ISOUDS_RdDaByPdID+0x268>)
 800c34c:	781a      	ldrb	r2, [r3, #0]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	709a      	strb	r2, [r3, #2]
 800c352:	bf00      	nop
 800c354:	3718      	adds	r7, #24
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	24001764 	.word	0x24001764
 800c360:	08010d5c 	.word	0x08010d5c
 800c364:	2400173c 	.word	0x2400173c
 800c368:	24001768 	.word	0x24001768

0800c36c <ISOUDS_RdMemByAddr>:
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f000 80fc 	beq.w	800c576 <ISOUDS_RdMemByAddr+0x20a>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	2b02      	cmp	r3, #2
 800c384:	f040 80cf 	bne.w	800c526 <ISOUDS_RdMemByAddr+0x1ba>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	889b      	ldrh	r3, [r3, #4]
 800c38c:	2b03      	cmp	r3, #3
 800c38e:	f240 80c3 	bls.w	800c518 <ISOUDS_RdMemByAddr+0x1ac>
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	f003 030f 	and.w	r3, r3, #15
 800c39a:	72bb      	strb	r3, [r7, #10]
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	091b      	lsrs	r3, r3, #4
 800c3a2:	727b      	strb	r3, [r7, #9]
 800c3a4:	7abb      	ldrb	r3, [r7, #10]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	f000 80af 	beq.w	800c50a <ISOUDS_RdMemByAddr+0x19e>
 800c3ac:	7a7b      	ldrb	r3, [r7, #9]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f000 80ab 	beq.w	800c50a <ISOUDS_RdMemByAddr+0x19e>
 800c3b4:	7aba      	ldrb	r2, [r7, #10]
 800c3b6:	7a7b      	ldrb	r3, [r7, #9]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	f0c0 80a6 	bcc.w	800c50a <ISOUDS_RdMemByAddr+0x19e>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	889b      	ldrh	r3, [r3, #4]
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	7aba      	ldrb	r2, [r7, #10]
 800c3c6:	7a7b      	ldrb	r3, [r7, #9]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	3302      	adds	r3, #2
 800c3cc:	4299      	cmp	r1, r3
 800c3ce:	f040 8095 	bne.w	800c4fc <ISOUDS_RdMemByAddr+0x190>
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	1c5a      	adds	r2, r3, #1
 800c3d6:	7a79      	ldrb	r1, [r7, #9]
 800c3d8:	7abb      	ldrb	r3, [r7, #10]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f000 f8da 	bl	800c594 <ISOUDS_AddLenthLookUpTbl>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	723b      	strb	r3, [r7, #8]
 800c3e4:	7a3b      	ldrb	r3, [r7, #8]
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	f040 8081 	bne.w	800c4ee <ISOUDS_RdMemByAddr+0x182>
 800c3ec:	4b64      	ldr	r3, [pc, #400]	; (800c580 <ISOUDS_RdMemByAddr+0x214>)
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	4964      	ldr	r1, [pc, #400]	; (800c584 <ISOUDS_RdMemByAddr+0x218>)
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	4413      	add	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	440b      	add	r3, r1
 800c3fc:	330c      	adds	r3, #12
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	461a      	mov	r2, r3
 800c402:	4b61      	ldr	r3, [pc, #388]	; (800c588 <ISOUDS_RdMemByAddr+0x21c>)
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	fa42 f303 	asr.w	r3, r2, r3
 800c40a:	f003 0301 	and.w	r3, r3, #1
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d066      	beq.n	800c4e0 <ISOUDS_RdMemByAddr+0x174>
 800c412:	2301      	movs	r3, #1
 800c414:	73fb      	strb	r3, [r7, #15]
 800c416:	4b5a      	ldr	r3, [pc, #360]	; (800c580 <ISOUDS_RdMemByAddr+0x214>)
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	495a      	ldr	r1, [pc, #360]	; (800c584 <ISOUDS_RdMemByAddr+0x218>)
 800c41c:	4613      	mov	r3, r2
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	4413      	add	r3, r2
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	440b      	add	r3, r1
 800c426:	330d      	adds	r3, #13
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d129      	bne.n	800c482 <ISOUDS_RdMemByAddr+0x116>
 800c42e:	2300      	movs	r3, #0
 800c430:	73fb      	strb	r3, [r7, #15]
 800c432:	2300      	movs	r3, #0
 800c434:	81bb      	strh	r3, [r7, #12]
 800c436:	e013      	b.n	800c460 <ISOUDS_RdMemByAddr+0xf4>
 800c438:	4b51      	ldr	r3, [pc, #324]	; (800c580 <ISOUDS_RdMemByAddr+0x214>)
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	89b9      	ldrh	r1, [r7, #12]
 800c43e:	4851      	ldr	r0, [pc, #324]	; (800c584 <ISOUDS_RdMemByAddr+0x218>)
 800c440:	4613      	mov	r3, r2
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	4413      	add	r3, r2
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	4403      	add	r3, r0
 800c44a:	440b      	add	r3, r1
 800c44c:	330f      	adds	r3, #15
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	4618      	mov	r0, r3
 800c452:	f001 f86d 	bl	800d530 <ISOUDS_GetSAStLevel>
 800c456:	4603      	mov	r3, r0
 800c458:	73fb      	strb	r3, [r7, #15]
 800c45a:	89bb      	ldrh	r3, [r7, #12]
 800c45c:	3301      	adds	r3, #1
 800c45e:	81bb      	strh	r3, [r7, #12]
 800c460:	4b47      	ldr	r3, [pc, #284]	; (800c580 <ISOUDS_RdMemByAddr+0x214>)
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	4947      	ldr	r1, [pc, #284]	; (800c584 <ISOUDS_RdMemByAddr+0x218>)
 800c466:	4613      	mov	r3, r2
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	4413      	add	r3, r2
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	440b      	add	r3, r1
 800c470:	330e      	adds	r3, #14
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	b29b      	uxth	r3, r3
 800c476:	89ba      	ldrh	r2, [r7, #12]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d202      	bcs.n	800c482 <ISOUDS_RdMemByAddr+0x116>
 800c47c:	7bfb      	ldrb	r3, [r7, #15]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d0da      	beq.n	800c438 <ISOUDS_RdMemByAddr+0xcc>
 800c482:	7bfb      	ldrb	r3, [r7, #15]
 800c484:	2b01      	cmp	r3, #1
 800c486:	d124      	bne.n	800c4d2 <ISOUDS_RdMemByAddr+0x166>
 800c488:	4b3d      	ldr	r3, [pc, #244]	; (800c580 <ISOUDS_RdMemByAddr+0x214>)
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	493d      	ldr	r1, [pc, #244]	; (800c584 <ISOUDS_RdMemByAddr+0x218>)
 800c48e:	4613      	mov	r3, r2
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	4413      	add	r3, r2
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	440b      	add	r3, r1
 800c498:	3310      	adds	r3, #16
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a3b      	ldr	r2, [pc, #236]	; (800c58c <ISOUDS_RdMemByAddr+0x220>)
 800c49e:	6810      	ldr	r0, [r2, #0]
 800c4a0:	4a3b      	ldr	r2, [pc, #236]	; (800c590 <ISOUDS_RdMemByAddr+0x224>)
 800c4a2:	6811      	ldr	r1, [r2, #0]
 800c4a4:	683a      	ldr	r2, [r7, #0]
 800c4a6:	3201      	adds	r2, #1
 800c4a8:	4798      	blx	r3
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	72fb      	strb	r3, [r7, #11]
 800c4ae:	7afb      	ldrb	r3, [r7, #11]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d10a      	bne.n	800c4ca <ISOUDS_RdMemByAddr+0x15e>
 800c4b4:	4b36      	ldr	r3, [pc, #216]	; (800c590 <ISOUDS_RdMemByAddr+0x224>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	b29a      	uxth	r2, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	809a      	strh	r2, [r3, #4]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2203      	movs	r2, #3
 800c4c6:	701a      	strb	r2, [r3, #0]
 800c4c8:	e055      	b.n	800c576 <ISOUDS_RdMemByAddr+0x20a>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	7afa      	ldrb	r2, [r7, #11]
 800c4ce:	709a      	strb	r2, [r3, #2]
 800c4d0:	e051      	b.n	800c576 <ISOUDS_RdMemByAddr+0x20a>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2204      	movs	r2, #4
 800c4d6:	701a      	strb	r2, [r3, #0]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2233      	movs	r2, #51	; 0x33
 800c4dc:	709a      	strb	r2, [r3, #2]
 800c4de:	e04a      	b.n	800c576 <ISOUDS_RdMemByAddr+0x20a>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2204      	movs	r2, #4
 800c4e4:	701a      	strb	r2, [r3, #0]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2231      	movs	r2, #49	; 0x31
 800c4ea:	709a      	strb	r2, [r3, #2]
 800c4ec:	e043      	b.n	800c576 <ISOUDS_RdMemByAddr+0x20a>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2204      	movs	r2, #4
 800c4f2:	701a      	strb	r2, [r3, #0]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2231      	movs	r2, #49	; 0x31
 800c4f8:	709a      	strb	r2, [r3, #2]
 800c4fa:	e03c      	b.n	800c576 <ISOUDS_RdMemByAddr+0x20a>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2204      	movs	r2, #4
 800c500:	701a      	strb	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2213      	movs	r2, #19
 800c506:	709a      	strb	r2, [r3, #2]
 800c508:	e035      	b.n	800c576 <ISOUDS_RdMemByAddr+0x20a>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2204      	movs	r2, #4
 800c50e:	701a      	strb	r2, [r3, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2231      	movs	r2, #49	; 0x31
 800c514:	709a      	strb	r2, [r3, #2]
 800c516:	e02e      	b.n	800c576 <ISOUDS_RdMemByAddr+0x20a>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2204      	movs	r2, #4
 800c51c:	701a      	strb	r2, [r3, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2213      	movs	r2, #19
 800c522:	709a      	strb	r2, [r3, #2]
 800c524:	e027      	b.n	800c576 <ISOUDS_RdMemByAddr+0x20a>
 800c526:	4b16      	ldr	r3, [pc, #88]	; (800c580 <ISOUDS_RdMemByAddr+0x214>)
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	4916      	ldr	r1, [pc, #88]	; (800c584 <ISOUDS_RdMemByAddr+0x218>)
 800c52c:	4613      	mov	r3, r2
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	4413      	add	r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	440b      	add	r3, r1
 800c536:	3310      	adds	r3, #16
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a14      	ldr	r2, [pc, #80]	; (800c58c <ISOUDS_RdMemByAddr+0x220>)
 800c53c:	6810      	ldr	r0, [r2, #0]
 800c53e:	4a14      	ldr	r2, [pc, #80]	; (800c590 <ISOUDS_RdMemByAddr+0x224>)
 800c540:	6811      	ldr	r1, [r2, #0]
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	3201      	adds	r2, #1
 800c546:	4798      	blx	r3
 800c548:	4603      	mov	r3, r0
 800c54a:	72fb      	strb	r3, [r7, #11]
 800c54c:	7afb      	ldrb	r3, [r7, #11]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10a      	bne.n	800c568 <ISOUDS_RdMemByAddr+0x1fc>
 800c552:	4b0f      	ldr	r3, [pc, #60]	; (800c590 <ISOUDS_RdMemByAddr+0x224>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	b29b      	uxth	r3, r3
 800c558:	3301      	adds	r3, #1
 800c55a:	b29a      	uxth	r2, r3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	809a      	strh	r2, [r3, #4]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2203      	movs	r2, #3
 800c564:	701a      	strb	r2, [r3, #0]
 800c566:	e006      	b.n	800c576 <ISOUDS_RdMemByAddr+0x20a>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2204      	movs	r2, #4
 800c56c:	701a      	strb	r2, [r3, #0]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	7afa      	ldrb	r2, [r7, #11]
 800c572:	709a      	strb	r2, [r3, #2]
 800c574:	e7ff      	b.n	800c576 <ISOUDS_RdMemByAddr+0x20a>
 800c576:	bf00      	nop
 800c578:	3710      	adds	r7, #16
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	240017a4 	.word	0x240017a4
 800c584:	08010dac 	.word	0x08010dac
 800c588:	2400173c 	.word	0x2400173c
 800c58c:	2400179c 	.word	0x2400179c
 800c590:	240017a0 	.word	0x240017a0

0800c594 <ISOUDS_AddLenthLookUpTbl>:
 800c594:	b580      	push	{r7, lr}
 800c596:	b086      	sub	sp, #24
 800c598:	af00      	add	r7, sp, #0
 800c59a:	4603      	mov	r3, r0
 800c59c:	603a      	str	r2, [r7, #0]
 800c59e:	71fb      	strb	r3, [r7, #7]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	71bb      	strb	r3, [r7, #6]
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	757b      	strb	r3, [r7, #21]
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	82fb      	strh	r3, [r7, #22]
 800c5ac:	e087      	b.n	800c6be <ISOUDS_AddLenthLookUpTbl+0x12a>
 800c5ae:	8afa      	ldrh	r2, [r7, #22]
 800c5b0:	494b      	ldr	r1, [pc, #300]	; (800c6e0 <ISOUDS_AddLenthLookUpTbl+0x14c>)
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	009b      	lsls	r3, r3, #2
 800c5b6:	4413      	add	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	440b      	add	r3, r1
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	79fa      	ldrb	r2, [r7, #7]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d179      	bne.n	800c6b8 <ISOUDS_AddLenthLookUpTbl+0x124>
 800c5c4:	8afa      	ldrh	r2, [r7, #22]
 800c5c6:	4946      	ldr	r1, [pc, #280]	; (800c6e0 <ISOUDS_AddLenthLookUpTbl+0x14c>)
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	4413      	add	r3, r2
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	440b      	add	r3, r1
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	79ba      	ldrb	r2, [r7, #6]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d16d      	bne.n	800c6b8 <ISOUDS_AddLenthLookUpTbl+0x124>
 800c5dc:	2300      	movs	r3, #0
 800c5de:	613b      	str	r3, [r7, #16]
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	60fb      	str	r3, [r7, #12]
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	753b      	strb	r3, [r7, #20]
 800c5e8:	e014      	b.n	800c614 <ISOUDS_AddLenthLookUpTbl+0x80>
 800c5ea:	79fa      	ldrb	r2, [r7, #7]
 800c5ec:	7d3b      	ldrb	r3, [r7, #20]
 800c5ee:	1ad3      	subs	r3, r2, r3
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	3b01      	subs	r3, #1
 800c5f4:	72fb      	strb	r3, [r7, #11]
 800c5f6:	7d3b      	ldrb	r3, [r7, #20]
 800c5f8:	683a      	ldr	r2, [r7, #0]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	461a      	mov	r2, r3
 800c600:	7afb      	ldrb	r3, [r7, #11]
 800c602:	00db      	lsls	r3, r3, #3
 800c604:	fa02 f303 	lsl.w	r3, r2, r3
 800c608:	693a      	ldr	r2, [r7, #16]
 800c60a:	4313      	orrs	r3, r2
 800c60c:	613b      	str	r3, [r7, #16]
 800c60e:	7d3b      	ldrb	r3, [r7, #20]
 800c610:	3301      	adds	r3, #1
 800c612:	753b      	strb	r3, [r7, #20]
 800c614:	7d3a      	ldrb	r2, [r7, #20]
 800c616:	79fb      	ldrb	r3, [r7, #7]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d3e6      	bcc.n	800c5ea <ISOUDS_AddLenthLookUpTbl+0x56>
 800c61c:	2300      	movs	r3, #0
 800c61e:	753b      	strb	r3, [r7, #20]
 800c620:	e017      	b.n	800c652 <ISOUDS_AddLenthLookUpTbl+0xbe>
 800c622:	79ba      	ldrb	r2, [r7, #6]
 800c624:	7d3b      	ldrb	r3, [r7, #20]
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	3b01      	subs	r3, #1
 800c62c:	72fb      	strb	r3, [r7, #11]
 800c62e:	79fa      	ldrb	r2, [r7, #7]
 800c630:	7d3b      	ldrb	r3, [r7, #20]
 800c632:	4413      	add	r3, r2
 800c634:	461a      	mov	r2, r3
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	4413      	add	r3, r2
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	461a      	mov	r2, r3
 800c63e:	7afb      	ldrb	r3, [r7, #11]
 800c640:	00db      	lsls	r3, r3, #3
 800c642:	fa02 f303 	lsl.w	r3, r2, r3
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	4313      	orrs	r3, r2
 800c64a:	60fb      	str	r3, [r7, #12]
 800c64c:	7d3b      	ldrb	r3, [r7, #20]
 800c64e:	3301      	adds	r3, #1
 800c650:	753b      	strb	r3, [r7, #20]
 800c652:	7d3a      	ldrb	r2, [r7, #20]
 800c654:	79bb      	ldrb	r3, [r7, #6]
 800c656:	429a      	cmp	r2, r3
 800c658:	d3e3      	bcc.n	800c622 <ISOUDS_AddLenthLookUpTbl+0x8e>
 800c65a:	8afa      	ldrh	r2, [r7, #22]
 800c65c:	4920      	ldr	r1, [pc, #128]	; (800c6e0 <ISOUDS_AddLenthLookUpTbl+0x14c>)
 800c65e:	4613      	mov	r3, r2
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	4413      	add	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	440b      	add	r3, r1
 800c668:	3304      	adds	r3, #4
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	693a      	ldr	r2, [r7, #16]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d322      	bcc.n	800c6b8 <ISOUDS_AddLenthLookUpTbl+0x124>
 800c672:	8afa      	ldrh	r2, [r7, #22]
 800c674:	491a      	ldr	r1, [pc, #104]	; (800c6e0 <ISOUDS_AddLenthLookUpTbl+0x14c>)
 800c676:	4613      	mov	r3, r2
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	4413      	add	r3, r2
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	440b      	add	r3, r1
 800c680:	3304      	adds	r3, #4
 800c682:	6819      	ldr	r1, [r3, #0]
 800c684:	8afa      	ldrh	r2, [r7, #22]
 800c686:	4816      	ldr	r0, [pc, #88]	; (800c6e0 <ISOUDS_AddLenthLookUpTbl+0x14c>)
 800c688:	4613      	mov	r3, r2
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	4413      	add	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	4403      	add	r3, r0
 800c692:	3308      	adds	r3, #8
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	18ca      	adds	r2, r1, r3
 800c698:	6939      	ldr	r1, [r7, #16]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	440b      	add	r3, r1
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d30a      	bcc.n	800c6b8 <ISOUDS_AddLenthLookUpTbl+0x124>
 800c6a2:	4a10      	ldr	r2, [pc, #64]	; (800c6e4 <ISOUDS_AddLenthLookUpTbl+0x150>)
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	6013      	str	r3, [r2, #0]
 800c6a8:	4a0f      	ldr	r2, [pc, #60]	; (800c6e8 <ISOUDS_AddLenthLookUpTbl+0x154>)
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6013      	str	r3, [r2, #0]
 800c6ae:	8afb      	ldrh	r3, [r7, #22]
 800c6b0:	4a0e      	ldr	r2, [pc, #56]	; (800c6ec <ISOUDS_AddLenthLookUpTbl+0x158>)
 800c6b2:	6013      	str	r3, [r2, #0]
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	757b      	strb	r3, [r7, #21]
 800c6b8:	8afb      	ldrh	r3, [r7, #22]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	82fb      	strh	r3, [r7, #22]
 800c6be:	f7f5 fe2d 	bl	800231c <ISOUDS_Get_RdMemByAddMaxentries>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	8afb      	ldrh	r3, [r7, #22]
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d203      	bcs.n	800c6d4 <ISOUDS_AddLenthLookUpTbl+0x140>
 800c6cc:	7d7b      	ldrb	r3, [r7, #21]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f43f af6d 	beq.w	800c5ae <ISOUDS_AddLenthLookUpTbl+0x1a>
 800c6d4:	7d7b      	ldrb	r3, [r7, #21]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3718      	adds	r7, #24
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	08010dac 	.word	0x08010dac
 800c6e4:	2400179c 	.word	0x2400179c
 800c6e8:	240017a0 	.word	0x240017a0
 800c6ec:	240017a4 	.word	0x240017a4

0800c6f0 <ISOUDS_ReqDwnld>:
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b086      	sub	sp, #24
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	74fb      	strb	r3, [r7, #19]
 800c6fe:	2300      	movs	r3, #0
 800c700:	74bb      	strb	r3, [r7, #18]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2b00      	cmp	r3, #0
 800c706:	f000 80f4 	beq.w	800c8f2 <ISOUDS_ReqDwnld+0x202>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2204      	movs	r2, #4
 800c70e:	701a      	strb	r2, [r3, #0]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	889b      	ldrh	r3, [r3, #4]
 800c714:	2b03      	cmp	r3, #3
 800c716:	f240 80e9 	bls.w	800c8ec <ISOUDS_ReqDwnld+0x1fc>
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	3301      	adds	r3, #1
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	f003 030f 	and.w	r3, r3, #15
 800c724:	b2da      	uxtb	r2, r3
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	3301      	adds	r3, #1
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	091b      	lsrs	r3, r3, #4
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	4413      	add	r3, r2
 800c732:	747b      	strb	r3, [r7, #17]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	889a      	ldrh	r2, [r3, #4]
 800c738:	7c7b      	ldrb	r3, [r7, #17]
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	3303      	adds	r3, #3
 800c73e:	b29b      	uxth	r3, r3
 800c740:	429a      	cmp	r2, r3
 800c742:	f040 80cf 	bne.w	800c8e4 <ISOUDS_ReqDwnld+0x1f4>
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	3301      	adds	r3, #1
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	f003 030f 	and.w	r3, r3, #15
 800c750:	b2da      	uxtb	r2, r3
 800c752:	4b6a      	ldr	r3, [pc, #424]	; (800c8fc <ISOUDS_ReqDwnld+0x20c>)
 800c754:	701a      	strb	r2, [r3, #0]
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	3301      	adds	r3, #1
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	091b      	lsrs	r3, r3, #4
 800c75e:	b2da      	uxtb	r2, r3
 800c760:	4b67      	ldr	r3, [pc, #412]	; (800c900 <ISOUDS_ReqDwnld+0x210>)
 800c762:	701a      	strb	r2, [r3, #0]
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	743b      	strb	r3, [r7, #16]
 800c76a:	4b64      	ldr	r3, [pc, #400]	; (800c8fc <ISOUDS_ReqDwnld+0x20c>)
 800c76c:	7819      	ldrb	r1, [r3, #0]
 800c76e:	4b64      	ldr	r3, [pc, #400]	; (800c900 <ISOUDS_ReqDwnld+0x210>)
 800c770:	781a      	ldrb	r2, [r3, #0]
 800c772:	7c3b      	ldrb	r3, [r7, #16]
 800c774:	4618      	mov	r0, r3
 800c776:	f000 f941 	bl	800c9fc <ISOUDS_ReqDownldValidParams>
 800c77a:	4603      	mov	r3, r0
 800c77c:	73fb      	strb	r3, [r7, #15]
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	2b01      	cmp	r3, #1
 800c782:	f040 80ab 	bne.w	800c8dc <ISOUDS_ReqDwnld+0x1ec>
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	3302      	adds	r3, #2
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 f8c4 	bl	800c918 <ISOUDS_ReqDownloadValidateInfo>
 800c790:	4603      	mov	r3, r0
 800c792:	74fb      	strb	r3, [r7, #19]
 800c794:	7cfb      	ldrb	r3, [r7, #19]
 800c796:	2b01      	cmp	r3, #1
 800c798:	f040 809c 	bne.w	800c8d4 <ISOUDS_ReqDwnld+0x1e4>
 800c79c:	4b59      	ldr	r3, [pc, #356]	; (800c904 <ISOUDS_ReqDwnld+0x214>)
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	4a59      	ldr	r2, [pc, #356]	; (800c908 <ISOUDS_ReqDwnld+0x218>)
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	005b      	lsls	r3, r3, #1
 800c7a8:	440b      	add	r3, r1
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	3304      	adds	r3, #4
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	4b55      	ldr	r3, [pc, #340]	; (800c90c <ISOUDS_ReqDwnld+0x21c>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	fa42 f303 	asr.w	r3, r2, r3
 800c7bc:	f003 0301 	and.w	r3, r3, #1
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f000 8083 	beq.w	800c8cc <ISOUDS_ReqDwnld+0x1dc>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	75fb      	strb	r3, [r7, #23]
 800c7ca:	4b4e      	ldr	r3, [pc, #312]	; (800c904 <ISOUDS_ReqDwnld+0x214>)
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	4a4d      	ldr	r2, [pc, #308]	; (800c908 <ISOUDS_ReqDwnld+0x218>)
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	005b      	lsls	r3, r3, #1
 800c7d6:	440b      	add	r3, r1
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	4413      	add	r3, r2
 800c7dc:	3305      	adds	r3, #5
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d12b      	bne.n	800c83c <ISOUDS_ReqDwnld+0x14c>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	75fb      	strb	r3, [r7, #23]
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	82bb      	strh	r3, [r7, #20]
 800c7ec:	e014      	b.n	800c818 <ISOUDS_ReqDwnld+0x128>
 800c7ee:	4b45      	ldr	r3, [pc, #276]	; (800c904 <ISOUDS_ReqDwnld+0x214>)
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	8aba      	ldrh	r2, [r7, #20]
 800c7f6:	4944      	ldr	r1, [pc, #272]	; (800c908 <ISOUDS_ReqDwnld+0x218>)
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	4403      	add	r3, r0
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	440b      	add	r3, r1
 800c802:	4413      	add	r3, r2
 800c804:	3307      	adds	r3, #7
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	4618      	mov	r0, r3
 800c80a:	f000 fe91 	bl	800d530 <ISOUDS_GetSAStLevel>
 800c80e:	4603      	mov	r3, r0
 800c810:	75fb      	strb	r3, [r7, #23]
 800c812:	8abb      	ldrh	r3, [r7, #20]
 800c814:	3301      	adds	r3, #1
 800c816:	82bb      	strh	r3, [r7, #20]
 800c818:	4b3a      	ldr	r3, [pc, #232]	; (800c904 <ISOUDS_ReqDwnld+0x214>)
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	4619      	mov	r1, r3
 800c81e:	4a3a      	ldr	r2, [pc, #232]	; (800c908 <ISOUDS_ReqDwnld+0x218>)
 800c820:	460b      	mov	r3, r1
 800c822:	005b      	lsls	r3, r3, #1
 800c824:	440b      	add	r3, r1
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	4413      	add	r3, r2
 800c82a:	3306      	adds	r3, #6
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	b29b      	uxth	r3, r3
 800c830:	8aba      	ldrh	r2, [r7, #20]
 800c832:	429a      	cmp	r2, r3
 800c834:	d202      	bcs.n	800c83c <ISOUDS_ReqDwnld+0x14c>
 800c836:	7dfb      	ldrb	r3, [r7, #23]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d0d8      	beq.n	800c7ee <ISOUDS_ReqDwnld+0xfe>
 800c83c:	7dfb      	ldrb	r3, [r7, #23]
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d140      	bne.n	800c8c4 <ISOUDS_ReqDwnld+0x1d4>
 800c842:	f001 fccd 	bl	800e1e0 <ISOUDS_ChkTrnsfrExit>
 800c846:	4603      	mov	r3, r0
 800c848:	74bb      	strb	r3, [r7, #18]
 800c84a:	7cbb      	ldrb	r3, [r7, #18]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d135      	bne.n	800c8bc <ISOUDS_ReqDwnld+0x1cc>
 800c850:	4b2f      	ldr	r3, [pc, #188]	; (800c910 <ISOUDS_ReqDwnld+0x220>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a2f      	ldr	r2, [pc, #188]	; (800c914 <ISOUDS_ReqDwnld+0x224>)
 800c856:	6811      	ldr	r1, [r2, #0]
 800c858:	2201      	movs	r2, #1
 800c85a:	4618      	mov	r0, r3
 800c85c:	f001 fc68 	bl	800e130 <ISOUDS_ReqTrnsfrDa>
 800c860:	4603      	mov	r3, r0
 800c862:	73bb      	strb	r3, [r7, #14]
 800c864:	7bbb      	ldrb	r3, [r7, #14]
 800c866:	2b01      	cmp	r3, #1
 800c868:	d124      	bne.n	800c8b4 <ISOUDS_ReqDwnld+0x1c4>
 800c86a:	f7f4 ff38 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800c86e:	4603      	mov	r3, r0
 800c870:	2b01      	cmp	r3, #1
 800c872:	d11b      	bne.n	800c8ac <ISOUDS_ReqDwnld+0x1bc>
 800c874:	f7f4 ff3b 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d116      	bne.n	800c8ac <ISOUDS_ReqDwnld+0x1bc>
 800c87e:	f7f4 ff3e 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 800c882:	4603      	mov	r3, r0
 800c884:	2b01      	cmp	r3, #1
 800c886:	d111      	bne.n	800c8ac <ISOUDS_ReqDwnld+0x1bc>
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	2220      	movs	r2, #32
 800c88c:	701a      	strb	r2, [r3, #0]
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	3301      	adds	r3, #1
 800c892:	2201      	movs	r2, #1
 800c894:	701a      	strb	r2, [r3, #0]
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	3302      	adds	r3, #2
 800c89a:	2200      	movs	r2, #0
 800c89c:	701a      	strb	r2, [r3, #0]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2204      	movs	r2, #4
 800c8a2:	809a      	strh	r2, [r3, #4]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2203      	movs	r2, #3
 800c8a8:	701a      	strb	r2, [r3, #0]
 800c8aa:	e022      	b.n	800c8f2 <ISOUDS_ReqDwnld+0x202>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2222      	movs	r2, #34	; 0x22
 800c8b0:	709a      	strb	r2, [r3, #2]
 800c8b2:	e01e      	b.n	800c8f2 <ISOUDS_ReqDwnld+0x202>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2222      	movs	r2, #34	; 0x22
 800c8b8:	709a      	strb	r2, [r3, #2]
 800c8ba:	e01a      	b.n	800c8f2 <ISOUDS_ReqDwnld+0x202>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2270      	movs	r2, #112	; 0x70
 800c8c0:	709a      	strb	r2, [r3, #2]
 800c8c2:	e016      	b.n	800c8f2 <ISOUDS_ReqDwnld+0x202>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2233      	movs	r2, #51	; 0x33
 800c8c8:	709a      	strb	r2, [r3, #2]
 800c8ca:	e012      	b.n	800c8f2 <ISOUDS_ReqDwnld+0x202>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	227e      	movs	r2, #126	; 0x7e
 800c8d0:	709a      	strb	r2, [r3, #2]
 800c8d2:	e00e      	b.n	800c8f2 <ISOUDS_ReqDwnld+0x202>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2231      	movs	r2, #49	; 0x31
 800c8d8:	709a      	strb	r2, [r3, #2]
 800c8da:	e00a      	b.n	800c8f2 <ISOUDS_ReqDwnld+0x202>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2231      	movs	r2, #49	; 0x31
 800c8e0:	709a      	strb	r2, [r3, #2]
 800c8e2:	e006      	b.n	800c8f2 <ISOUDS_ReqDwnld+0x202>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2213      	movs	r2, #19
 800c8e8:	709a      	strb	r2, [r3, #2]
 800c8ea:	e002      	b.n	800c8f2 <ISOUDS_ReqDwnld+0x202>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2213      	movs	r2, #19
 800c8f0:	709a      	strb	r2, [r3, #2]
 800c8f2:	bf00      	nop
 800c8f4:	3718      	adds	r7, #24
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	240017b0 	.word	0x240017b0
 800c900:	240017b1 	.word	0x240017b1
 800c904:	240017b2 	.word	0x240017b2
 800c908:	08010dc0 	.word	0x08010dc0
 800c90c:	2400173c 	.word	0x2400173c
 800c910:	240017a8 	.word	0x240017a8
 800c914:	240017ac 	.word	0x240017ac

0800c918 <ISOUDS_ReqDownloadValidateInfo>:
 800c918:	b480      	push	{r7}
 800c91a:	b087      	sub	sp, #28
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	2300      	movs	r3, #0
 800c922:	73fb      	strb	r3, [r7, #15]
 800c924:	4b31      	ldr	r3, [pc, #196]	; (800c9ec <ISOUDS_ReqDownloadValidateInfo+0xd4>)
 800c926:	2200      	movs	r2, #0
 800c928:	601a      	str	r2, [r3, #0]
 800c92a:	4b31      	ldr	r3, [pc, #196]	; (800c9f0 <ISOUDS_ReqDownloadValidateInfo+0xd8>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	601a      	str	r2, [r3, #0]
 800c930:	2300      	movs	r3, #0
 800c932:	75fb      	strb	r3, [r7, #23]
 800c934:	e016      	b.n	800c964 <ISOUDS_ReqDownloadValidateInfo+0x4c>
 800c936:	4b2f      	ldr	r3, [pc, #188]	; (800c9f4 <ISOUDS_ReqDownloadValidateInfo+0xdc>)
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	461a      	mov	r2, r3
 800c93c:	7dfb      	ldrb	r3, [r7, #23]
 800c93e:	1ad3      	subs	r3, r2, r3
 800c940:	3b01      	subs	r3, #1
 800c942:	613b      	str	r3, [r7, #16]
 800c944:	7dfb      	ldrb	r3, [r7, #23]
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	4413      	add	r3, r2
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	461a      	mov	r2, r3
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	00db      	lsls	r3, r3, #3
 800c952:	409a      	lsls	r2, r3
 800c954:	4b25      	ldr	r3, [pc, #148]	; (800c9ec <ISOUDS_ReqDownloadValidateInfo+0xd4>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4313      	orrs	r3, r2
 800c95a:	4a24      	ldr	r2, [pc, #144]	; (800c9ec <ISOUDS_ReqDownloadValidateInfo+0xd4>)
 800c95c:	6013      	str	r3, [r2, #0]
 800c95e:	7dfb      	ldrb	r3, [r7, #23]
 800c960:	3301      	adds	r3, #1
 800c962:	75fb      	strb	r3, [r7, #23]
 800c964:	4b23      	ldr	r3, [pc, #140]	; (800c9f4 <ISOUDS_ReqDownloadValidateInfo+0xdc>)
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	7dfa      	ldrb	r2, [r7, #23]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d3e3      	bcc.n	800c936 <ISOUDS_ReqDownloadValidateInfo+0x1e>
 800c96e:	4b20      	ldr	r3, [pc, #128]	; (800c9f0 <ISOUDS_ReqDownloadValidateInfo+0xd8>)
 800c970:	2200      	movs	r2, #0
 800c972:	601a      	str	r2, [r3, #0]
 800c974:	2300      	movs	r3, #0
 800c976:	75fb      	strb	r3, [r7, #23]
 800c978:	e01b      	b.n	800c9b2 <ISOUDS_ReqDownloadValidateInfo+0x9a>
 800c97a:	4b1f      	ldr	r3, [pc, #124]	; (800c9f8 <ISOUDS_ReqDownloadValidateInfo+0xe0>)
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	461a      	mov	r2, r3
 800c980:	7dfb      	ldrb	r3, [r7, #23]
 800c982:	1ad3      	subs	r3, r2, r3
 800c984:	3b01      	subs	r3, #1
 800c986:	613b      	str	r3, [r7, #16]
 800c988:	4b1a      	ldr	r3, [pc, #104]	; (800c9f4 <ISOUDS_ReqDownloadValidateInfo+0xdc>)
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	461a      	mov	r2, r3
 800c98e:	7dfb      	ldrb	r3, [r7, #23]
 800c990:	4413      	add	r3, r2
 800c992:	461a      	mov	r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	4413      	add	r3, r2
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	461a      	mov	r2, r3
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	00db      	lsls	r3, r3, #3
 800c9a0:	409a      	lsls	r2, r3
 800c9a2:	4b13      	ldr	r3, [pc, #76]	; (800c9f0 <ISOUDS_ReqDownloadValidateInfo+0xd8>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	4a11      	ldr	r2, [pc, #68]	; (800c9f0 <ISOUDS_ReqDownloadValidateInfo+0xd8>)
 800c9aa:	6013      	str	r3, [r2, #0]
 800c9ac:	7dfb      	ldrb	r3, [r7, #23]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	75fb      	strb	r3, [r7, #23]
 800c9b2:	4b11      	ldr	r3, [pc, #68]	; (800c9f8 <ISOUDS_ReqDownloadValidateInfo+0xe0>)
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	7dfa      	ldrb	r2, [r7, #23]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d3de      	bcc.n	800c97a <ISOUDS_ReqDownloadValidateInfo+0x62>
 800c9bc:	4b0b      	ldr	r3, [pc, #44]	; (800c9ec <ISOUDS_ReqDownloadValidateInfo+0xd4>)
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	4b0b      	ldr	r3, [pc, #44]	; (800c9f0 <ISOUDS_ReqDownloadValidateInfo+0xd8>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800c9cc:	d206      	bcs.n	800c9dc <ISOUDS_ReqDownloadValidateInfo+0xc4>
 800c9ce:	4b07      	ldr	r3, [pc, #28]	; (800c9ec <ISOUDS_ReqDownloadValidateInfo+0xd4>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c9d6:	d301      	bcc.n	800c9dc <ISOUDS_ReqDownloadValidateInfo+0xc4>
 800c9d8:	2301      	movs	r3, #1
 800c9da:	73fb      	strb	r3, [r7, #15]
 800c9dc:	7bfb      	ldrb	r3, [r7, #15]
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	371c      	adds	r7, #28
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr
 800c9ec:	240017a8 	.word	0x240017a8
 800c9f0:	240017ac 	.word	0x240017ac
 800c9f4:	240017b0 	.word	0x240017b0
 800c9f8:	240017b1 	.word	0x240017b1

0800c9fc <ISOUDS_ReqDownldValidParams>:
 800c9fc:	b480      	push	{r7}
 800c9fe:	b085      	sub	sp, #20
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	4603      	mov	r3, r0
 800ca04:	71fb      	strb	r3, [r7, #7]
 800ca06:	460b      	mov	r3, r1
 800ca08:	71bb      	strb	r3, [r7, #6]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	717b      	strb	r3, [r7, #5]
 800ca0e:	2300      	movs	r3, #0
 800ca10:	73bb      	strb	r3, [r7, #14]
 800ca12:	2300      	movs	r3, #0
 800ca14:	73fb      	strb	r3, [r7, #15]
 800ca16:	e03a      	b.n	800ca8e <ISOUDS_ReqDownldValidParams+0x92>
 800ca18:	7bfa      	ldrb	r2, [r7, #15]
 800ca1a:	4923      	ldr	r1, [pc, #140]	; (800caa8 <ISOUDS_ReqDownldValidParams+0xac>)
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	005b      	lsls	r3, r3, #1
 800ca20:	4413      	add	r3, r2
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	440b      	add	r3, r1
 800ca26:	3303      	adds	r3, #3
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	79fb      	ldrb	r3, [r7, #7]
 800ca2e:	f003 030f 	and.w	r3, r3, #15
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d128      	bne.n	800ca88 <ISOUDS_ReqDownldValidParams+0x8c>
 800ca36:	7bfa      	ldrb	r2, [r7, #15]
 800ca38:	491b      	ldr	r1, [pc, #108]	; (800caa8 <ISOUDS_ReqDownldValidParams+0xac>)
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	005b      	lsls	r3, r3, #1
 800ca3e:	4413      	add	r3, r2
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	440b      	add	r3, r1
 800ca44:	3302      	adds	r3, #2
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d11d      	bne.n	800ca88 <ISOUDS_ReqDownldValidParams+0x8c>
 800ca4c:	7bfa      	ldrb	r2, [r7, #15]
 800ca4e:	4916      	ldr	r1, [pc, #88]	; (800caa8 <ISOUDS_ReqDownldValidParams+0xac>)
 800ca50:	4613      	mov	r3, r2
 800ca52:	005b      	lsls	r3, r3, #1
 800ca54:	4413      	add	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	440b      	add	r3, r1
 800ca5a:	781a      	ldrb	r2, [r3, #0]
 800ca5c:	4b13      	ldr	r3, [pc, #76]	; (800caac <ISOUDS_ReqDownldValidParams+0xb0>)
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d111      	bne.n	800ca88 <ISOUDS_ReqDownldValidParams+0x8c>
 800ca64:	7bfa      	ldrb	r2, [r7, #15]
 800ca66:	4910      	ldr	r1, [pc, #64]	; (800caa8 <ISOUDS_ReqDownldValidParams+0xac>)
 800ca68:	4613      	mov	r3, r2
 800ca6a:	005b      	lsls	r3, r3, #1
 800ca6c:	4413      	add	r3, r2
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	440b      	add	r3, r1
 800ca72:	3301      	adds	r3, #1
 800ca74:	781a      	ldrb	r2, [r3, #0]
 800ca76:	4b0e      	ldr	r3, [pc, #56]	; (800cab0 <ISOUDS_ReqDownldValidParams+0xb4>)
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d104      	bne.n	800ca88 <ISOUDS_ReqDownldValidParams+0x8c>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	73bb      	strb	r3, [r7, #14]
 800ca82:	4a0c      	ldr	r2, [pc, #48]	; (800cab4 <ISOUDS_ReqDownldValidParams+0xb8>)
 800ca84:	7bfb      	ldrb	r3, [r7, #15]
 800ca86:	7013      	strb	r3, [r2, #0]
 800ca88:	7bfb      	ldrb	r3, [r7, #15]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	73fb      	strb	r3, [r7, #15]
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
 800ca90:	2b10      	cmp	r3, #16
 800ca92:	d802      	bhi.n	800ca9a <ISOUDS_ReqDownldValidParams+0x9e>
 800ca94:	7bbb      	ldrb	r3, [r7, #14]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d0be      	beq.n	800ca18 <ISOUDS_ReqDownldValidParams+0x1c>
 800ca9a:	7bbb      	ldrb	r3, [r7, #14]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3714      	adds	r7, #20
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr
 800caa8:	08010dc0 	.word	0x08010dc0
 800caac:	240017b0 	.word	0x240017b0
 800cab0:	240017b1 	.word	0x240017b1
 800cab4:	240017b2 	.word	0x240017b2

0800cab8 <ISOUDS_ReqUpld>:
 800cab8:	b580      	push	{r7, lr}
 800caba:	b086      	sub	sp, #24
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f000 80df 	beq.w	800cc88 <ISOUDS_ReqUpld+0x1d0>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2204      	movs	r2, #4
 800cace:	701a      	strb	r2, [r3, #0]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	889b      	ldrh	r3, [r3, #4]
 800cad4:	2b03      	cmp	r3, #3
 800cad6:	f240 80d4 	bls.w	800cc82 <ISOUDS_ReqUpld+0x1ca>
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	3301      	adds	r3, #1
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	f003 030f 	and.w	r3, r3, #15
 800cae4:	b2da      	uxtb	r2, r3
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	3301      	adds	r3, #1
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	091b      	lsrs	r3, r3, #4
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	4413      	add	r3, r2
 800caf2:	74fb      	strb	r3, [r7, #19]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	889b      	ldrh	r3, [r3, #4]
 800caf8:	461a      	mov	r2, r3
 800cafa:	7cfb      	ldrb	r3, [r7, #19]
 800cafc:	3303      	adds	r3, #3
 800cafe:	429a      	cmp	r2, r3
 800cb00:	f040 80bb 	bne.w	800cc7a <ISOUDS_ReqUpld+0x1c2>
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	3301      	adds	r3, #1
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	f003 030f 	and.w	r3, r3, #15
 800cb0e:	b2da      	uxtb	r2, r3
 800cb10:	4b5f      	ldr	r3, [pc, #380]	; (800cc90 <ISOUDS_ReqUpld+0x1d8>)
 800cb12:	701a      	strb	r2, [r3, #0]
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	3301      	adds	r3, #1
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	091b      	lsrs	r3, r3, #4
 800cb1c:	b2da      	uxtb	r2, r3
 800cb1e:	4b5d      	ldr	r3, [pc, #372]	; (800cc94 <ISOUDS_ReqUpld+0x1dc>)
 800cb20:	701a      	strb	r2, [r3, #0]
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	74bb      	strb	r3, [r7, #18]
 800cb28:	4b59      	ldr	r3, [pc, #356]	; (800cc90 <ISOUDS_ReqUpld+0x1d8>)
 800cb2a:	7819      	ldrb	r1, [r3, #0]
 800cb2c:	4b59      	ldr	r3, [pc, #356]	; (800cc94 <ISOUDS_ReqUpld+0x1dc>)
 800cb2e:	781a      	ldrb	r2, [r3, #0]
 800cb30:	7cbb      	ldrb	r3, [r7, #18]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f000 f92a 	bl	800cd8c <ISOUDS_ReqUploadValidParams>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	747b      	strb	r3, [r7, #17]
 800cb3c:	7c7b      	ldrb	r3, [r7, #17]
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	f040 8097 	bne.w	800cc72 <ISOUDS_ReqUpld+0x1ba>
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	3302      	adds	r3, #2
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f000 f8af 	bl	800ccac <ISOUDS_ReqUploadValidateInfo>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	743b      	strb	r3, [r7, #16]
 800cb52:	7c3b      	ldrb	r3, [r7, #16]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	f040 8088 	bne.w	800cc6a <ISOUDS_ReqUpld+0x1b2>
 800cb5a:	4b4f      	ldr	r3, [pc, #316]	; (800cc98 <ISOUDS_ReqUpld+0x1e0>)
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	4619      	mov	r1, r3
 800cb60:	4a4e      	ldr	r2, [pc, #312]	; (800cc9c <ISOUDS_ReqUpld+0x1e4>)
 800cb62:	460b      	mov	r3, r1
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	440b      	add	r3, r1
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4413      	add	r3, r2
 800cb6c:	3304      	adds	r3, #4
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	461a      	mov	r2, r3
 800cb72:	4b4b      	ldr	r3, [pc, #300]	; (800cca0 <ISOUDS_ReqUpld+0x1e8>)
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	fa42 f303 	asr.w	r3, r2, r3
 800cb7a:	f003 0301 	and.w	r3, r3, #1
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d06f      	beq.n	800cc62 <ISOUDS_ReqUpld+0x1aa>
 800cb82:	2301      	movs	r3, #1
 800cb84:	75fb      	strb	r3, [r7, #23]
 800cb86:	4b44      	ldr	r3, [pc, #272]	; (800cc98 <ISOUDS_ReqUpld+0x1e0>)
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	4a43      	ldr	r2, [pc, #268]	; (800cc9c <ISOUDS_ReqUpld+0x1e4>)
 800cb8e:	460b      	mov	r3, r1
 800cb90:	005b      	lsls	r3, r3, #1
 800cb92:	440b      	add	r3, r1
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	4413      	add	r3, r2
 800cb98:	3305      	adds	r3, #5
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d12b      	bne.n	800cbf8 <ISOUDS_ReqUpld+0x140>
 800cba0:	2300      	movs	r3, #0
 800cba2:	75fb      	strb	r3, [r7, #23]
 800cba4:	2300      	movs	r3, #0
 800cba6:	82bb      	strh	r3, [r7, #20]
 800cba8:	e014      	b.n	800cbd4 <ISOUDS_ReqUpld+0x11c>
 800cbaa:	4b3b      	ldr	r3, [pc, #236]	; (800cc98 <ISOUDS_ReqUpld+0x1e0>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	8aba      	ldrh	r2, [r7, #20]
 800cbb2:	493a      	ldr	r1, [pc, #232]	; (800cc9c <ISOUDS_ReqUpld+0x1e4>)
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	005b      	lsls	r3, r3, #1
 800cbb8:	4403      	add	r3, r0
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	440b      	add	r3, r1
 800cbbe:	4413      	add	r3, r2
 800cbc0:	3307      	adds	r3, #7
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 fcb3 	bl	800d530 <ISOUDS_GetSAStLevel>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	75fb      	strb	r3, [r7, #23]
 800cbce:	8abb      	ldrh	r3, [r7, #20]
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	82bb      	strh	r3, [r7, #20]
 800cbd4:	4b30      	ldr	r3, [pc, #192]	; (800cc98 <ISOUDS_ReqUpld+0x1e0>)
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	4619      	mov	r1, r3
 800cbda:	4a30      	ldr	r2, [pc, #192]	; (800cc9c <ISOUDS_ReqUpld+0x1e4>)
 800cbdc:	460b      	mov	r3, r1
 800cbde:	005b      	lsls	r3, r3, #1
 800cbe0:	440b      	add	r3, r1
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	3306      	adds	r3, #6
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	8aba      	ldrh	r2, [r7, #20]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d202      	bcs.n	800cbf8 <ISOUDS_ReqUpld+0x140>
 800cbf2:	7dfb      	ldrb	r3, [r7, #23]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d0d8      	beq.n	800cbaa <ISOUDS_ReqUpld+0xf2>
 800cbf8:	7dfb      	ldrb	r3, [r7, #23]
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d12d      	bne.n	800cc5a <ISOUDS_ReqUpld+0x1a2>
 800cbfe:	f001 faef 	bl	800e1e0 <ISOUDS_ChkTrnsfrExit>
 800cc02:	4603      	mov	r3, r0
 800cc04:	73fb      	strb	r3, [r7, #15]
 800cc06:	7bfb      	ldrb	r3, [r7, #15]
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d122      	bne.n	800cc52 <ISOUDS_ReqUpld+0x19a>
 800cc0c:	4b25      	ldr	r3, [pc, #148]	; (800cca4 <ISOUDS_ReqUpld+0x1ec>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a25      	ldr	r2, [pc, #148]	; (800cca8 <ISOUDS_ReqUpld+0x1f0>)
 800cc12:	6811      	ldr	r1, [r2, #0]
 800cc14:	2204      	movs	r2, #4
 800cc16:	4618      	mov	r0, r3
 800cc18:	f001 fa8a 	bl	800e130 <ISOUDS_ReqTrnsfrDa>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73bb      	strb	r3, [r7, #14]
 800cc20:	7bbb      	ldrb	r3, [r7, #14]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d111      	bne.n	800cc4a <ISOUDS_ReqUpld+0x192>
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	2220      	movs	r2, #32
 800cc2a:	701a      	strb	r2, [r3, #0]
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	2200      	movs	r2, #0
 800cc32:	701a      	strb	r2, [r3, #0]
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	3302      	adds	r3, #2
 800cc38:	2200      	movs	r2, #0
 800cc3a:	701a      	strb	r2, [r3, #0]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2204      	movs	r2, #4
 800cc40:	809a      	strh	r2, [r3, #4]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2203      	movs	r2, #3
 800cc46:	701a      	strb	r2, [r3, #0]
 800cc48:	e01e      	b.n	800cc88 <ISOUDS_ReqUpld+0x1d0>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2222      	movs	r2, #34	; 0x22
 800cc4e:	709a      	strb	r2, [r3, #2]
 800cc50:	e01a      	b.n	800cc88 <ISOUDS_ReqUpld+0x1d0>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2270      	movs	r2, #112	; 0x70
 800cc56:	709a      	strb	r2, [r3, #2]
 800cc58:	e016      	b.n	800cc88 <ISOUDS_ReqUpld+0x1d0>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2233      	movs	r2, #51	; 0x33
 800cc5e:	709a      	strb	r2, [r3, #2]
 800cc60:	e012      	b.n	800cc88 <ISOUDS_ReqUpld+0x1d0>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	227e      	movs	r2, #126	; 0x7e
 800cc66:	709a      	strb	r2, [r3, #2]
 800cc68:	e00e      	b.n	800cc88 <ISOUDS_ReqUpld+0x1d0>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2231      	movs	r2, #49	; 0x31
 800cc6e:	709a      	strb	r2, [r3, #2]
 800cc70:	e00a      	b.n	800cc88 <ISOUDS_ReqUpld+0x1d0>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2231      	movs	r2, #49	; 0x31
 800cc76:	709a      	strb	r2, [r3, #2]
 800cc78:	e006      	b.n	800cc88 <ISOUDS_ReqUpld+0x1d0>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2213      	movs	r2, #19
 800cc7e:	709a      	strb	r2, [r3, #2]
 800cc80:	e002      	b.n	800cc88 <ISOUDS_ReqUpld+0x1d0>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2213      	movs	r2, #19
 800cc86:	709a      	strb	r2, [r3, #2]
 800cc88:	bf00      	nop
 800cc8a:	3718      	adds	r7, #24
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	240017bc 	.word	0x240017bc
 800cc94:	240017bd 	.word	0x240017bd
 800cc98:	240017be 	.word	0x240017be
 800cc9c:	08010e8c 	.word	0x08010e8c
 800cca0:	2400173c 	.word	0x2400173c
 800cca4:	240017b4 	.word	0x240017b4
 800cca8:	240017b8 	.word	0x240017b8

0800ccac <ISOUDS_ReqUploadValidateInfo>:
 800ccac:	b480      	push	{r7}
 800ccae:	b087      	sub	sp, #28
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	73fb      	strb	r3, [r7, #15]
 800ccb8:	4b30      	ldr	r3, [pc, #192]	; (800cd7c <ISOUDS_ReqUploadValidateInfo+0xd0>)
 800ccba:	2200      	movs	r2, #0
 800ccbc:	601a      	str	r2, [r3, #0]
 800ccbe:	4b30      	ldr	r3, [pc, #192]	; (800cd80 <ISOUDS_ReqUploadValidateInfo+0xd4>)
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	601a      	str	r2, [r3, #0]
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	75fb      	strb	r3, [r7, #23]
 800ccc8:	e016      	b.n	800ccf8 <ISOUDS_ReqUploadValidateInfo+0x4c>
 800ccca:	4b2e      	ldr	r3, [pc, #184]	; (800cd84 <ISOUDS_ReqUploadValidateInfo+0xd8>)
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	7dfb      	ldrb	r3, [r7, #23]
 800ccd2:	1ad3      	subs	r3, r2, r3
 800ccd4:	3b01      	subs	r3, #1
 800ccd6:	613b      	str	r3, [r7, #16]
 800ccd8:	7dfb      	ldrb	r3, [r7, #23]
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	4413      	add	r3, r2
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	461a      	mov	r2, r3
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	00db      	lsls	r3, r3, #3
 800cce6:	409a      	lsls	r2, r3
 800cce8:	4b24      	ldr	r3, [pc, #144]	; (800cd7c <ISOUDS_ReqUploadValidateInfo+0xd0>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4313      	orrs	r3, r2
 800ccee:	4a23      	ldr	r2, [pc, #140]	; (800cd7c <ISOUDS_ReqUploadValidateInfo+0xd0>)
 800ccf0:	6013      	str	r3, [r2, #0]
 800ccf2:	7dfb      	ldrb	r3, [r7, #23]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	75fb      	strb	r3, [r7, #23]
 800ccf8:	4b22      	ldr	r3, [pc, #136]	; (800cd84 <ISOUDS_ReqUploadValidateInfo+0xd8>)
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	7dfa      	ldrb	r2, [r7, #23]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d3e3      	bcc.n	800ccca <ISOUDS_ReqUploadValidateInfo+0x1e>
 800cd02:	2300      	movs	r3, #0
 800cd04:	75fb      	strb	r3, [r7, #23]
 800cd06:	e01b      	b.n	800cd40 <ISOUDS_ReqUploadValidateInfo+0x94>
 800cd08:	4b1f      	ldr	r3, [pc, #124]	; (800cd88 <ISOUDS_ReqUploadValidateInfo+0xdc>)
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	7dfb      	ldrb	r3, [r7, #23]
 800cd10:	1ad3      	subs	r3, r2, r3
 800cd12:	3b01      	subs	r3, #1
 800cd14:	613b      	str	r3, [r7, #16]
 800cd16:	4b1b      	ldr	r3, [pc, #108]	; (800cd84 <ISOUDS_ReqUploadValidateInfo+0xd8>)
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	7dfb      	ldrb	r3, [r7, #23]
 800cd1e:	4413      	add	r3, r2
 800cd20:	461a      	mov	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4413      	add	r3, r2
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	461a      	mov	r2, r3
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	00db      	lsls	r3, r3, #3
 800cd2e:	409a      	lsls	r2, r3
 800cd30:	4b13      	ldr	r3, [pc, #76]	; (800cd80 <ISOUDS_ReqUploadValidateInfo+0xd4>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	4a12      	ldr	r2, [pc, #72]	; (800cd80 <ISOUDS_ReqUploadValidateInfo+0xd4>)
 800cd38:	6013      	str	r3, [r2, #0]
 800cd3a:	7dfb      	ldrb	r3, [r7, #23]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	75fb      	strb	r3, [r7, #23]
 800cd40:	4b11      	ldr	r3, [pc, #68]	; (800cd88 <ISOUDS_ReqUploadValidateInfo+0xdc>)
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	7dfa      	ldrb	r2, [r7, #23]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d3de      	bcc.n	800cd08 <ISOUDS_ReqUploadValidateInfo+0x5c>
 800cd4a:	4b0c      	ldr	r3, [pc, #48]	; (800cd7c <ISOUDS_ReqUploadValidateInfo+0xd0>)
 800cd4c:	681a      	ldr	r2, [r3, #0]
 800cd4e:	4b0c      	ldr	r3, [pc, #48]	; (800cd80 <ISOUDS_ReqUploadValidateInfo+0xd4>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4413      	add	r3, r2
 800cd54:	3b01      	subs	r3, #1
 800cd56:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800cd5a:	d206      	bcs.n	800cd6a <ISOUDS_ReqUploadValidateInfo+0xbe>
 800cd5c:	4b07      	ldr	r3, [pc, #28]	; (800cd7c <ISOUDS_ReqUploadValidateInfo+0xd0>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cd64:	d301      	bcc.n	800cd6a <ISOUDS_ReqUploadValidateInfo+0xbe>
 800cd66:	2301      	movs	r3, #1
 800cd68:	73fb      	strb	r3, [r7, #15]
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	4618      	mov	r0, r3
 800cd70:	371c      	adds	r7, #28
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	240017b4 	.word	0x240017b4
 800cd80:	240017b8 	.word	0x240017b8
 800cd84:	240017bc 	.word	0x240017bc
 800cd88:	240017bd 	.word	0x240017bd

0800cd8c <ISOUDS_ReqUploadValidParams>:
 800cd8c:	b480      	push	{r7}
 800cd8e:	b085      	sub	sp, #20
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	4603      	mov	r3, r0
 800cd94:	71fb      	strb	r3, [r7, #7]
 800cd96:	460b      	mov	r3, r1
 800cd98:	71bb      	strb	r3, [r7, #6]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	717b      	strb	r3, [r7, #5]
 800cd9e:	2300      	movs	r3, #0
 800cda0:	73bb      	strb	r3, [r7, #14]
 800cda2:	2300      	movs	r3, #0
 800cda4:	73fb      	strb	r3, [r7, #15]
 800cda6:	e03a      	b.n	800ce1e <ISOUDS_ReqUploadValidParams+0x92>
 800cda8:	7bfa      	ldrb	r2, [r7, #15]
 800cdaa:	4923      	ldr	r1, [pc, #140]	; (800ce38 <ISOUDS_ReqUploadValidParams+0xac>)
 800cdac:	4613      	mov	r3, r2
 800cdae:	005b      	lsls	r3, r3, #1
 800cdb0:	4413      	add	r3, r2
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	440b      	add	r3, r1
 800cdb6:	3303      	adds	r3, #3
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	79fb      	ldrb	r3, [r7, #7]
 800cdbe:	f003 030f 	and.w	r3, r3, #15
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d128      	bne.n	800ce18 <ISOUDS_ReqUploadValidParams+0x8c>
 800cdc6:	7bfa      	ldrb	r2, [r7, #15]
 800cdc8:	491b      	ldr	r1, [pc, #108]	; (800ce38 <ISOUDS_ReqUploadValidParams+0xac>)
 800cdca:	4613      	mov	r3, r2
 800cdcc:	005b      	lsls	r3, r3, #1
 800cdce:	4413      	add	r3, r2
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	440b      	add	r3, r1
 800cdd4:	3302      	adds	r3, #2
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d11d      	bne.n	800ce18 <ISOUDS_ReqUploadValidParams+0x8c>
 800cddc:	7bfa      	ldrb	r2, [r7, #15]
 800cdde:	4916      	ldr	r1, [pc, #88]	; (800ce38 <ISOUDS_ReqUploadValidParams+0xac>)
 800cde0:	4613      	mov	r3, r2
 800cde2:	005b      	lsls	r3, r3, #1
 800cde4:	4413      	add	r3, r2
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	440b      	add	r3, r1
 800cdea:	781a      	ldrb	r2, [r3, #0]
 800cdec:	4b13      	ldr	r3, [pc, #76]	; (800ce3c <ISOUDS_ReqUploadValidParams+0xb0>)
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d111      	bne.n	800ce18 <ISOUDS_ReqUploadValidParams+0x8c>
 800cdf4:	7bfa      	ldrb	r2, [r7, #15]
 800cdf6:	4910      	ldr	r1, [pc, #64]	; (800ce38 <ISOUDS_ReqUploadValidParams+0xac>)
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	005b      	lsls	r3, r3, #1
 800cdfc:	4413      	add	r3, r2
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	440b      	add	r3, r1
 800ce02:	3301      	adds	r3, #1
 800ce04:	781a      	ldrb	r2, [r3, #0]
 800ce06:	4b0e      	ldr	r3, [pc, #56]	; (800ce40 <ISOUDS_ReqUploadValidParams+0xb4>)
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d104      	bne.n	800ce18 <ISOUDS_ReqUploadValidParams+0x8c>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	73bb      	strb	r3, [r7, #14]
 800ce12:	4a0c      	ldr	r2, [pc, #48]	; (800ce44 <ISOUDS_ReqUploadValidParams+0xb8>)
 800ce14:	7bfb      	ldrb	r3, [r7, #15]
 800ce16:	7013      	strb	r3, [r2, #0]
 800ce18:	7bfb      	ldrb	r3, [r7, #15]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	73fb      	strb	r3, [r7, #15]
 800ce1e:	7bfb      	ldrb	r3, [r7, #15]
 800ce20:	2b10      	cmp	r3, #16
 800ce22:	d802      	bhi.n	800ce2a <ISOUDS_ReqUploadValidParams+0x9e>
 800ce24:	7bbb      	ldrb	r3, [r7, #14]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d0be      	beq.n	800cda8 <ISOUDS_ReqUploadValidParams+0x1c>
 800ce2a:	7bbb      	ldrb	r3, [r7, #14]
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3714      	adds	r7, #20
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr
 800ce38:	08010e8c 	.word	0x08010e8c
 800ce3c:	240017bc 	.word	0x240017bc
 800ce40:	240017bd 	.word	0x240017bd
 800ce44:	240017be 	.word	0x240017be

0800ce48 <ISOUDS_RtnCntrl>:
 800ce48:	b590      	push	{r4, r7, lr}
 800ce4a:	b089      	sub	sp, #36	; 0x24
 800ce4c:	af02      	add	r7, sp, #8
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f000 8131 	beq.w	800d0bc <ISOUDS_RtnCntrl+0x274>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	889b      	ldrh	r3, [r3, #4]
 800ce5e:	2b03      	cmp	r3, #3
 800ce60:	f240 8126 	bls.w	800d0b0 <ISOUDS_RtnCntrl+0x268>
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	3301      	adds	r3, #1
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	021b      	lsls	r3, r3, #8
 800ce6e:	b29a      	uxth	r2, r3
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	3302      	adds	r3, #2
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	823b      	strh	r3, [r7, #16]
 800ce7c:	8a3b      	ldrh	r3, [r7, #16]
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f000 f928 	bl	800d0d4 <ISOUDS_ValidatRtnCntrlID>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	f040 810b 	bne.w	800d0a2 <ISOUDS_RtnCntrl+0x25a>
 800ce8c:	4b8d      	ldr	r3, [pc, #564]	; (800d0c4 <ISOUDS_RtnCntrl+0x27c>)
 800ce8e:	881b      	ldrh	r3, [r3, #0]
 800ce90:	4a8d      	ldr	r2, [pc, #564]	; (800d0c8 <ISOUDS_RtnCntrl+0x280>)
 800ce92:	011b      	lsls	r3, r3, #4
 800ce94:	4413      	add	r3, r2
 800ce96:	3302      	adds	r3, #2
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	4b8b      	ldr	r3, [pc, #556]	; (800d0cc <ISOUDS_RtnCntrl+0x284>)
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	fa42 f303 	asr.w	r3, r2, r3
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f000 80f3 	beq.w	800d094 <ISOUDS_RtnCntrl+0x24c>
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	73fb      	strb	r3, [r7, #15]
 800ceb4:	4b83      	ldr	r3, [pc, #524]	; (800d0c4 <ISOUDS_RtnCntrl+0x27c>)
 800ceb6:	881a      	ldrh	r2, [r3, #0]
 800ceb8:	7bfb      	ldrb	r3, [r7, #15]
 800ceba:	4611      	mov	r1, r2
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7f5 fd6b 	bl	8002998 <ISOUDS_RtnControlTypeSuppChk>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	f040 80de 	bne.w	800d086 <ISOUDS_RtnCntrl+0x23e>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	889a      	ldrh	r2, [r3, #4]
 800cece:	4b7d      	ldr	r3, [pc, #500]	; (800d0c4 <ISOUDS_RtnCntrl+0x27c>)
 800ced0:	881b      	ldrh	r3, [r3, #0]
 800ced2:	497d      	ldr	r1, [pc, #500]	; (800d0c8 <ISOUDS_RtnCntrl+0x280>)
 800ced4:	011b      	lsls	r3, r3, #4
 800ced6:	440b      	add	r3, r1
 800ced8:	3306      	adds	r3, #6
 800ceda:	881b      	ldrh	r3, [r3, #0]
 800cedc:	429a      	cmp	r2, r3
 800cede:	f0c0 80cb 	bcc.w	800d078 <ISOUDS_RtnCntrl+0x230>
 800cee2:	2301      	movs	r3, #1
 800cee4:	75fb      	strb	r3, [r7, #23]
 800cee6:	4b77      	ldr	r3, [pc, #476]	; (800d0c4 <ISOUDS_RtnCntrl+0x27c>)
 800cee8:	881b      	ldrh	r3, [r3, #0]
 800ceea:	4a77      	ldr	r2, [pc, #476]	; (800d0c8 <ISOUDS_RtnCntrl+0x280>)
 800ceec:	011b      	lsls	r3, r3, #4
 800ceee:	4413      	add	r3, r2
 800cef0:	3308      	adds	r3, #8
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d124      	bne.n	800cf42 <ISOUDS_RtnCntrl+0xfa>
 800cef8:	2300      	movs	r3, #0
 800cefa:	75fb      	strb	r3, [r7, #23]
 800cefc:	2300      	movs	r3, #0
 800cefe:	82bb      	strh	r3, [r7, #20]
 800cf00:	e011      	b.n	800cf26 <ISOUDS_RtnCntrl+0xde>
 800cf02:	4b70      	ldr	r3, [pc, #448]	; (800d0c4 <ISOUDS_RtnCntrl+0x27c>)
 800cf04:	881b      	ldrh	r3, [r3, #0]
 800cf06:	461a      	mov	r2, r3
 800cf08:	8abb      	ldrh	r3, [r7, #20]
 800cf0a:	496f      	ldr	r1, [pc, #444]	; (800d0c8 <ISOUDS_RtnCntrl+0x280>)
 800cf0c:	0112      	lsls	r2, r2, #4
 800cf0e:	440a      	add	r2, r1
 800cf10:	4413      	add	r3, r2
 800cf12:	330a      	adds	r3, #10
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	4618      	mov	r0, r3
 800cf18:	f000 fb0a 	bl	800d530 <ISOUDS_GetSAStLevel>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	75fb      	strb	r3, [r7, #23]
 800cf20:	8abb      	ldrh	r3, [r7, #20]
 800cf22:	3301      	adds	r3, #1
 800cf24:	82bb      	strh	r3, [r7, #20]
 800cf26:	4b67      	ldr	r3, [pc, #412]	; (800d0c4 <ISOUDS_RtnCntrl+0x27c>)
 800cf28:	881b      	ldrh	r3, [r3, #0]
 800cf2a:	4a67      	ldr	r2, [pc, #412]	; (800d0c8 <ISOUDS_RtnCntrl+0x280>)
 800cf2c:	011b      	lsls	r3, r3, #4
 800cf2e:	4413      	add	r3, r2
 800cf30:	3309      	adds	r3, #9
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	8aba      	ldrh	r2, [r7, #20]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d202      	bcs.n	800cf42 <ISOUDS_RtnCntrl+0xfa>
 800cf3c:	7dfb      	ldrb	r3, [r7, #23]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d0df      	beq.n	800cf02 <ISOUDS_RtnCntrl+0xba>
 800cf42:	7dfb      	ldrb	r3, [r7, #23]
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	f040 8090 	bne.w	800d06a <ISOUDS_RtnCntrl+0x222>
 800cf4a:	f7f5 fd57 	bl	80029fc <ISOUDS_RtnCntrlPreCondCheck>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	f040 8083 	bne.w	800d05c <ISOUDS_RtnCntrl+0x214>
 800cf56:	2300      	movs	r3, #0
 800cf58:	81bb      	strh	r3, [r7, #12]
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d113      	bne.n	800cf88 <ISOUDS_RtnCntrl+0x140>
 800cf60:	4b58      	ldr	r3, [pc, #352]	; (800d0c4 <ISOUDS_RtnCntrl+0x27c>)
 800cf62:	881b      	ldrh	r3, [r3, #0]
 800cf64:	4a58      	ldr	r2, [pc, #352]	; (800d0c8 <ISOUDS_RtnCntrl+0x280>)
 800cf66:	011b      	lsls	r3, r3, #4
 800cf68:	4413      	add	r3, r2
 800cf6a:	330c      	adds	r3, #12
 800cf6c:	681c      	ldr	r4, [r3, #0]
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	1cd8      	adds	r0, r3, #3
 800cf72:	7bfa      	ldrb	r2, [r7, #15]
 800cf74:	8a39      	ldrh	r1, [r7, #16]
 800cf76:	f107 030c 	add.w	r3, r7, #12
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	47a0      	blx	r4
 800cf82:	4603      	mov	r3, r0
 800cf84:	74fb      	strb	r3, [r7, #19]
 800cf86:	e04a      	b.n	800d01e <ISOUDS_RtnCntrl+0x1d6>
 800cf88:	7bfb      	ldrb	r3, [r7, #15]
 800cf8a:	2b02      	cmp	r3, #2
 800cf8c:	d11d      	bne.n	800cfca <ISOUDS_RtnCntrl+0x182>
 800cf8e:	4b4d      	ldr	r3, [pc, #308]	; (800d0c4 <ISOUDS_RtnCntrl+0x27c>)
 800cf90:	881b      	ldrh	r3, [r3, #0]
 800cf92:	461a      	mov	r2, r3
 800cf94:	4b4e      	ldr	r3, [pc, #312]	; (800d0d0 <ISOUDS_RtnCntrl+0x288>)
 800cf96:	5c9b      	ldrb	r3, [r3, r2]
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	d113      	bne.n	800cfc4 <ISOUDS_RtnCntrl+0x17c>
 800cf9c:	4b49      	ldr	r3, [pc, #292]	; (800d0c4 <ISOUDS_RtnCntrl+0x27c>)
 800cf9e:	881b      	ldrh	r3, [r3, #0]
 800cfa0:	4a49      	ldr	r2, [pc, #292]	; (800d0c8 <ISOUDS_RtnCntrl+0x280>)
 800cfa2:	011b      	lsls	r3, r3, #4
 800cfa4:	4413      	add	r3, r2
 800cfa6:	330c      	adds	r3, #12
 800cfa8:	681c      	ldr	r4, [r3, #0]
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	1cd8      	adds	r0, r3, #3
 800cfae:	7bfa      	ldrb	r2, [r7, #15]
 800cfb0:	8a39      	ldrh	r1, [r7, #16]
 800cfb2:	f107 030c 	add.w	r3, r7, #12
 800cfb6:	9300      	str	r3, [sp, #0]
 800cfb8:	4603      	mov	r3, r0
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	47a0      	blx	r4
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	74fb      	strb	r3, [r7, #19]
 800cfc2:	e02c      	b.n	800d01e <ISOUDS_RtnCntrl+0x1d6>
 800cfc4:	2324      	movs	r3, #36	; 0x24
 800cfc6:	74fb      	strb	r3, [r7, #19]
 800cfc8:	e029      	b.n	800d01e <ISOUDS_RtnCntrl+0x1d6>
 800cfca:	7bfb      	ldrb	r3, [r7, #15]
 800cfcc:	2b03      	cmp	r3, #3
 800cfce:	d124      	bne.n	800d01a <ISOUDS_RtnCntrl+0x1d2>
 800cfd0:	4b3c      	ldr	r3, [pc, #240]	; (800d0c4 <ISOUDS_RtnCntrl+0x27c>)
 800cfd2:	881b      	ldrh	r3, [r3, #0]
 800cfd4:	461a      	mov	r2, r3
 800cfd6:	4b3e      	ldr	r3, [pc, #248]	; (800d0d0 <ISOUDS_RtnCntrl+0x288>)
 800cfd8:	5c9b      	ldrb	r3, [r3, r2]
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d006      	beq.n	800cfec <ISOUDS_RtnCntrl+0x1a4>
 800cfde:	4b39      	ldr	r3, [pc, #228]	; (800d0c4 <ISOUDS_RtnCntrl+0x27c>)
 800cfe0:	881b      	ldrh	r3, [r3, #0]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	4b3a      	ldr	r3, [pc, #232]	; (800d0d0 <ISOUDS_RtnCntrl+0x288>)
 800cfe6:	5c9b      	ldrb	r3, [r3, r2]
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	d113      	bne.n	800d014 <ISOUDS_RtnCntrl+0x1cc>
 800cfec:	4b35      	ldr	r3, [pc, #212]	; (800d0c4 <ISOUDS_RtnCntrl+0x27c>)
 800cfee:	881b      	ldrh	r3, [r3, #0]
 800cff0:	4a35      	ldr	r2, [pc, #212]	; (800d0c8 <ISOUDS_RtnCntrl+0x280>)
 800cff2:	011b      	lsls	r3, r3, #4
 800cff4:	4413      	add	r3, r2
 800cff6:	330c      	adds	r3, #12
 800cff8:	681c      	ldr	r4, [r3, #0]
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	1cd8      	adds	r0, r3, #3
 800cffe:	7bfa      	ldrb	r2, [r7, #15]
 800d000:	8a39      	ldrh	r1, [r7, #16]
 800d002:	f107 030c 	add.w	r3, r7, #12
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	4603      	mov	r3, r0
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	47a0      	blx	r4
 800d00e:	4603      	mov	r3, r0
 800d010:	74fb      	strb	r3, [r7, #19]
 800d012:	e004      	b.n	800d01e <ISOUDS_RtnCntrl+0x1d6>
 800d014:	2324      	movs	r3, #36	; 0x24
 800d016:	74fb      	strb	r3, [r7, #19]
 800d018:	e001      	b.n	800d01e <ISOUDS_RtnCntrl+0x1d6>
 800d01a:	2312      	movs	r3, #18
 800d01c:	74fb      	strb	r3, [r7, #19]
 800d01e:	7cfb      	ldrb	r3, [r7, #19]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d114      	bne.n	800d04e <ISOUDS_RtnCntrl+0x206>
 800d024:	7bfb      	ldrb	r3, [r7, #15]
 800d026:	2b01      	cmp	r3, #1
 800d028:	d002      	beq.n	800d030 <ISOUDS_RtnCntrl+0x1e8>
 800d02a:	7bfb      	ldrb	r3, [r7, #15]
 800d02c:	2b02      	cmp	r3, #2
 800d02e:	d105      	bne.n	800d03c <ISOUDS_RtnCntrl+0x1f4>
 800d030:	4b24      	ldr	r3, [pc, #144]	; (800d0c4 <ISOUDS_RtnCntrl+0x27c>)
 800d032:	881b      	ldrh	r3, [r3, #0]
 800d034:	4619      	mov	r1, r3
 800d036:	4a26      	ldr	r2, [pc, #152]	; (800d0d0 <ISOUDS_RtnCntrl+0x288>)
 800d038:	7bfb      	ldrb	r3, [r7, #15]
 800d03a:	5453      	strb	r3, [r2, r1]
 800d03c:	89bb      	ldrh	r3, [r7, #12]
 800d03e:	3304      	adds	r3, #4
 800d040:	b29a      	uxth	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	809a      	strh	r2, [r3, #4]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2203      	movs	r2, #3
 800d04a:	701a      	strb	r2, [r3, #0]
 800d04c:	e036      	b.n	800d0bc <ISOUDS_RtnCntrl+0x274>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2204      	movs	r2, #4
 800d052:	701a      	strb	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	7cfa      	ldrb	r2, [r7, #19]
 800d058:	709a      	strb	r2, [r3, #2]
 800d05a:	e02f      	b.n	800d0bc <ISOUDS_RtnCntrl+0x274>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2204      	movs	r2, #4
 800d060:	701a      	strb	r2, [r3, #0]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2222      	movs	r2, #34	; 0x22
 800d066:	709a      	strb	r2, [r3, #2]
 800d068:	e028      	b.n	800d0bc <ISOUDS_RtnCntrl+0x274>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2204      	movs	r2, #4
 800d06e:	701a      	strb	r2, [r3, #0]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2233      	movs	r2, #51	; 0x33
 800d074:	709a      	strb	r2, [r3, #2]
 800d076:	e021      	b.n	800d0bc <ISOUDS_RtnCntrl+0x274>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2204      	movs	r2, #4
 800d07c:	701a      	strb	r2, [r3, #0]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2213      	movs	r2, #19
 800d082:	709a      	strb	r2, [r3, #2]
 800d084:	e01a      	b.n	800d0bc <ISOUDS_RtnCntrl+0x274>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2204      	movs	r2, #4
 800d08a:	701a      	strb	r2, [r3, #0]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2212      	movs	r2, #18
 800d090:	709a      	strb	r2, [r3, #2]
 800d092:	e013      	b.n	800d0bc <ISOUDS_RtnCntrl+0x274>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2204      	movs	r2, #4
 800d098:	701a      	strb	r2, [r3, #0]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2231      	movs	r2, #49	; 0x31
 800d09e:	709a      	strb	r2, [r3, #2]
 800d0a0:	e00c      	b.n	800d0bc <ISOUDS_RtnCntrl+0x274>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2204      	movs	r2, #4
 800d0a6:	701a      	strb	r2, [r3, #0]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2231      	movs	r2, #49	; 0x31
 800d0ac:	709a      	strb	r2, [r3, #2]
 800d0ae:	e005      	b.n	800d0bc <ISOUDS_RtnCntrl+0x274>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2204      	movs	r2, #4
 800d0b4:	701a      	strb	r2, [r3, #0]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2213      	movs	r2, #19
 800d0ba:	709a      	strb	r2, [r3, #2]
 800d0bc:	bf00      	nop
 800d0be:	371c      	adds	r7, #28
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd90      	pop	{r4, r7, pc}
 800d0c4:	240017c0 	.word	0x240017c0
 800d0c8:	2400021c 	.word	0x2400021c
 800d0cc:	2400173c 	.word	0x2400173c
 800d0d0:	240017c4 	.word	0x240017c4

0800d0d4 <ISOUDS_ValidatRtnCntrlID>:
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	4603      	mov	r3, r0
 800d0dc:	80fb      	strh	r3, [r7, #6]
 800d0de:	2300      	movs	r3, #0
 800d0e0:	737b      	strb	r3, [r7, #13]
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	81fb      	strh	r3, [r7, #14]
 800d0e6:	e00f      	b.n	800d108 <ISOUDS_ValidatRtnCntrlID+0x34>
 800d0e8:	89fb      	ldrh	r3, [r7, #14]
 800d0ea:	4a0f      	ldr	r2, [pc, #60]	; (800d128 <ISOUDS_ValidatRtnCntrlID+0x54>)
 800d0ec:	011b      	lsls	r3, r3, #4
 800d0ee:	4413      	add	r3, r2
 800d0f0:	881b      	ldrh	r3, [r3, #0]
 800d0f2:	88fa      	ldrh	r2, [r7, #6]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d104      	bne.n	800d102 <ISOUDS_ValidatRtnCntrlID+0x2e>
 800d0f8:	4a0c      	ldr	r2, [pc, #48]	; (800d12c <ISOUDS_ValidatRtnCntrlID+0x58>)
 800d0fa:	89fb      	ldrh	r3, [r7, #14]
 800d0fc:	8013      	strh	r3, [r2, #0]
 800d0fe:	2301      	movs	r3, #1
 800d100:	737b      	strb	r3, [r7, #13]
 800d102:	89fb      	ldrh	r3, [r7, #14]
 800d104:	3301      	adds	r3, #1
 800d106:	81fb      	strh	r3, [r7, #14]
 800d108:	f7f5 fc3e 	bl	8002988 <ISOUDS_Get_RtnContrlMaxSubFun>
 800d10c:	4603      	mov	r3, r0
 800d10e:	461a      	mov	r2, r3
 800d110:	89fb      	ldrh	r3, [r7, #14]
 800d112:	4293      	cmp	r3, r2
 800d114:	d202      	bcs.n	800d11c <ISOUDS_ValidatRtnCntrlID+0x48>
 800d116:	7b7b      	ldrb	r3, [r7, #13]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d0e5      	beq.n	800d0e8 <ISOUDS_ValidatRtnCntrlID+0x14>
 800d11c:	7b7b      	ldrb	r3, [r7, #13]
 800d11e:	4618      	mov	r0, r3
 800d120:	3710      	adds	r7, #16
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	2400021c 	.word	0x2400021c
 800d12c:	240017c0 	.word	0x240017c0

0800d130 <ISOUDS_SAInit>:
 800d130:	b580      	push	{r7, lr}
 800d132:	af00      	add	r7, sp, #0
 800d134:	4b17      	ldr	r3, [pc, #92]	; (800d194 <ISOUDS_SAInit+0x64>)
 800d136:	2200      	movs	r2, #0
 800d138:	701a      	strb	r2, [r3, #0]
 800d13a:	4b17      	ldr	r3, [pc, #92]	; (800d198 <ISOUDS_SAInit+0x68>)
 800d13c:	2201      	movs	r2, #1
 800d13e:	701a      	strb	r2, [r3, #0]
 800d140:	4b16      	ldr	r3, [pc, #88]	; (800d19c <ISOUDS_SAInit+0x6c>)
 800d142:	2201      	movs	r2, #1
 800d144:	601a      	str	r2, [r3, #0]
 800d146:	4b16      	ldr	r3, [pc, #88]	; (800d1a0 <ISOUDS_SAInit+0x70>)
 800d148:	2200      	movs	r2, #0
 800d14a:	701a      	strb	r2, [r3, #0]
 800d14c:	f7f5 ffde 	bl	800310c <ISOUDS_GetSAAttempCount>
 800d150:	4603      	mov	r3, r0
 800d152:	461a      	mov	r2, r3
 800d154:	4b13      	ldr	r3, [pc, #76]	; (800d1a4 <ISOUDS_SAInit+0x74>)
 800d156:	701a      	strb	r2, [r3, #0]
 800d158:	4b13      	ldr	r3, [pc, #76]	; (800d1a8 <ISOUDS_SAInit+0x78>)
 800d15a:	2200      	movs	r2, #0
 800d15c:	601a      	str	r2, [r3, #0]
 800d15e:	4b13      	ldr	r3, [pc, #76]	; (800d1ac <ISOUDS_SAInit+0x7c>)
 800d160:	2200      	movs	r2, #0
 800d162:	601a      	str	r2, [r3, #0]
 800d164:	4b12      	ldr	r3, [pc, #72]	; (800d1b0 <ISOUDS_SAInit+0x80>)
 800d166:	2200      	movs	r2, #0
 800d168:	601a      	str	r2, [r3, #0]
 800d16a:	4b12      	ldr	r3, [pc, #72]	; (800d1b4 <ISOUDS_SAInit+0x84>)
 800d16c:	2200      	movs	r2, #0
 800d16e:	701a      	strb	r2, [r3, #0]
 800d170:	4b11      	ldr	r3, [pc, #68]	; (800d1b8 <ISOUDS_SAInit+0x88>)
 800d172:	2200      	movs	r2, #0
 800d174:	601a      	str	r2, [r3, #0]
 800d176:	4b11      	ldr	r3, [pc, #68]	; (800d1bc <ISOUDS_SAInit+0x8c>)
 800d178:	2200      	movs	r2, #0
 800d17a:	601a      	str	r2, [r3, #0]
 800d17c:	4b10      	ldr	r3, [pc, #64]	; (800d1c0 <ISOUDS_SAInit+0x90>)
 800d17e:	2200      	movs	r2, #0
 800d180:	601a      	str	r2, [r3, #0]
 800d182:	4b10      	ldr	r3, [pc, #64]	; (800d1c4 <ISOUDS_SAInit+0x94>)
 800d184:	2201      	movs	r2, #1
 800d186:	701a      	strb	r2, [r3, #0]
 800d188:	4b0f      	ldr	r3, [pc, #60]	; (800d1c8 <ISOUDS_SAInit+0x98>)
 800d18a:	2201      	movs	r2, #1
 800d18c:	701a      	strb	r2, [r3, #0]
 800d18e:	bf00      	nop
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	240017f3 	.word	0x240017f3
 800d198:	240017f0 	.word	0x240017f0
 800d19c:	240017ec 	.word	0x240017ec
 800d1a0:	240017c7 	.word	0x240017c7
 800d1a4:	240017c8 	.word	0x240017c8
 800d1a8:	240017cc 	.word	0x240017cc
 800d1ac:	240017d0 	.word	0x240017d0
 800d1b0:	240017d4 	.word	0x240017d4
 800d1b4:	240017d8 	.word	0x240017d8
 800d1b8:	240017dc 	.word	0x240017dc
 800d1bc:	240017e0 	.word	0x240017e0
 800d1c0:	240017e4 	.word	0x240017e4
 800d1c4:	240017f2 	.word	0x240017f2
 800d1c8:	240017f1 	.word	0x240017f1

0800d1cc <ISOUDS_SA>:
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	73fb      	strb	r3, [r7, #15]
 800d1dc:	7bfb      	ldrb	r3, [r7, #15]
 800d1de:	f003 0301 	and.w	r3, r3, #1
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d008      	beq.n	800d1fa <ISOUDS_SA+0x2e>
 800d1e8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d005      	beq.n	800d1fa <ISOUDS_SA+0x2e>
 800d1ee:	7bfb      	ldrb	r3, [r7, #15]
 800d1f0:	2b7d      	cmp	r3, #125	; 0x7d
 800d1f2:	d802      	bhi.n	800d1fa <ISOUDS_SA+0x2e>
 800d1f4:	4b3a      	ldr	r3, [pc, #232]	; (800d2e0 <ISOUDS_SA+0x114>)
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	701a      	strb	r2, [r3, #0]
 800d1fa:	4b3a      	ldr	r3, [pc, #232]	; (800d2e4 <ISOUDS_SA+0x118>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d003      	beq.n	800d20a <ISOUDS_SA+0x3e>
 800d202:	4b39      	ldr	r3, [pc, #228]	; (800d2e8 <ISOUDS_SA+0x11c>)
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	2b01      	cmp	r3, #1
 800d208:	d112      	bne.n	800d230 <ISOUDS_SA+0x64>
 800d20a:	7bfb      	ldrb	r3, [r7, #15]
 800d20c:	f003 0301 	and.w	r3, r3, #1
 800d210:	b2db      	uxtb	r3, r3
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00c      	beq.n	800d230 <ISOUDS_SA+0x64>
 800d216:	7bfb      	ldrb	r3, [r7, #15]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d009      	beq.n	800d230 <ISOUDS_SA+0x64>
 800d21c:	7bfb      	ldrb	r3, [r7, #15]
 800d21e:	2b7d      	cmp	r3, #125	; 0x7d
 800d220:	d806      	bhi.n	800d230 <ISOUDS_SA+0x64>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2204      	movs	r2, #4
 800d226:	701a      	strb	r2, [r3, #0]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2237      	movs	r2, #55	; 0x37
 800d22c:	709a      	strb	r2, [r3, #2]
 800d22e:	e053      	b.n	800d2d8 <ISOUDS_SA+0x10c>
 800d230:	4b2b      	ldr	r3, [pc, #172]	; (800d2e0 <ISOUDS_SA+0x114>)
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	3b01      	subs	r3, #1
 800d236:	2b03      	cmp	r3, #3
 800d238:	d847      	bhi.n	800d2ca <ISOUDS_SA+0xfe>
 800d23a:	a201      	add	r2, pc, #4	; (adr r2, 800d240 <ISOUDS_SA+0x74>)
 800d23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d240:	0800d251 	.word	0x0800d251
 800d244:	0800d271 	.word	0x0800d271
 800d248:	0800d251 	.word	0x0800d251
 800d24c:	0800d271 	.word	0x0800d271
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	2b02      	cmp	r3, #2
 800d256:	d104      	bne.n	800d262 <ISOUDS_SA+0x96>
 800d258:	6839      	ldr	r1, [r7, #0]
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 fa84 	bl	800d768 <ISOUDS_ACState_Handler>
 800d260:	e03a      	b.n	800d2d8 <ISOUDS_SA+0x10c>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2204      	movs	r2, #4
 800d266:	701a      	strb	r2, [r3, #0]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2213      	movs	r2, #19
 800d26c:	709a      	strb	r2, [r3, #2]
 800d26e:	e033      	b.n	800d2d8 <ISOUDS_SA+0x10c>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	2b02      	cmp	r3, #2
 800d276:	d120      	bne.n	800d2ba <ISOUDS_SA+0xee>
 800d278:	4b19      	ldr	r3, [pc, #100]	; (800d2e0 <ISOUDS_SA+0x114>)
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d11c      	bne.n	800d2ba <ISOUDS_SA+0xee>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	889b      	ldrh	r3, [r3, #4]
 800d284:	4618      	mov	r0, r3
 800d286:	4b19      	ldr	r3, [pc, #100]	; (800d2ec <ISOUDS_SA+0x120>)
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	4619      	mov	r1, r3
 800d28c:	4a18      	ldr	r2, [pc, #96]	; (800d2f0 <ISOUDS_SA+0x124>)
 800d28e:	460b      	mov	r3, r1
 800d290:	005b      	lsls	r3, r3, #1
 800d292:	440b      	add	r3, r1
 800d294:	009b      	lsls	r3, r3, #2
 800d296:	4413      	add	r3, r2
 800d298:	3303      	adds	r3, #3
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	3302      	adds	r3, #2
 800d29e:	4298      	cmp	r0, r3
 800d2a0:	d104      	bne.n	800d2ac <ISOUDS_SA+0xe0>
 800d2a2:	6839      	ldr	r1, [r7, #0]
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 fb59 	bl	800d95c <ISOUDS_BDState_Handler>
 800d2aa:	e00d      	b.n	800d2c8 <ISOUDS_SA+0xfc>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2204      	movs	r2, #4
 800d2b0:	701a      	strb	r2, [r3, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2213      	movs	r2, #19
 800d2b6:	709a      	strb	r2, [r3, #2]
 800d2b8:	e006      	b.n	800d2c8 <ISOUDS_SA+0xfc>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2204      	movs	r2, #4
 800d2be:	701a      	strb	r2, [r3, #0]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2224      	movs	r2, #36	; 0x24
 800d2c4:	709a      	strb	r2, [r3, #2]
 800d2c6:	e007      	b.n	800d2d8 <ISOUDS_SA+0x10c>
 800d2c8:	e006      	b.n	800d2d8 <ISOUDS_SA+0x10c>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2204      	movs	r2, #4
 800d2ce:	701a      	strb	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2213      	movs	r2, #19
 800d2d4:	709a      	strb	r2, [r3, #2]
 800d2d6:	bf00      	nop
 800d2d8:	bf00      	nop
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	240017f2 	.word	0x240017f2
 800d2e4:	240017e4 	.word	0x240017e4
 800d2e8:	240017f0 	.word	0x240017f0
 800d2ec:	240017f4 	.word	0x240017f4
 800d2f0:	08010f58 	.word	0x08010f58

0800d2f4 <ISOUDS_GetSASt>:
 800d2f4:	b480      	push	{r7}
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	4b03      	ldr	r3, [pc, #12]	; (800d308 <ISOUDS_GetSASt+0x14>)
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop
 800d308:	240017f3 	.word	0x240017f3

0800d30c <ISOUDS_SAChkTimer>:
 800d30c:	b580      	push	{r7, lr}
 800d30e:	af00      	add	r7, sp, #0
 800d310:	4b66      	ldr	r3, [pc, #408]	; (800d4ac <ISOUDS_SAChkTimer+0x1a0>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d015      	beq.n	800d344 <ISOUDS_SAChkTimer+0x38>
 800d318:	4b64      	ldr	r3, [pc, #400]	; (800d4ac <ISOUDS_SAChkTimer+0x1a0>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a64      	ldr	r2, [pc, #400]	; (800d4b0 <ISOUDS_SAChkTimer+0x1a4>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d308      	bcc.n	800d334 <ISOUDS_SAChkTimer+0x28>
 800d322:	f000 f8df 	bl	800d4e4 <ISOUDS_SAReset>
 800d326:	4b63      	ldr	r3, [pc, #396]	; (800d4b4 <ISOUDS_SAChkTimer+0x1a8>)
 800d328:	2200      	movs	r2, #0
 800d32a:	601a      	str	r2, [r3, #0]
 800d32c:	4b5f      	ldr	r3, [pc, #380]	; (800d4ac <ISOUDS_SAChkTimer+0x1a0>)
 800d32e:	2200      	movs	r2, #0
 800d330:	601a      	str	r2, [r3, #0]
 800d332:	e007      	b.n	800d344 <ISOUDS_SAChkTimer+0x38>
 800d334:	f7f4 f9f3 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800d338:	4602      	mov	r2, r0
 800d33a:	4b5c      	ldr	r3, [pc, #368]	; (800d4ac <ISOUDS_SAChkTimer+0x1a0>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4413      	add	r3, r2
 800d340:	4a5a      	ldr	r2, [pc, #360]	; (800d4ac <ISOUDS_SAChkTimer+0x1a0>)
 800d342:	6013      	str	r3, [r2, #0]
 800d344:	4b5c      	ldr	r3, [pc, #368]	; (800d4b8 <ISOUDS_SAChkTimer+0x1ac>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d021      	beq.n	800d390 <ISOUDS_SAChkTimer+0x84>
 800d34c:	4b5a      	ldr	r3, [pc, #360]	; (800d4b8 <ISOUDS_SAChkTimer+0x1ac>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f241 3287 	movw	r2, #4999	; 0x1387
 800d354:	4293      	cmp	r3, r2
 800d356:	d913      	bls.n	800d380 <ISOUDS_SAChkTimer+0x74>
 800d358:	f000 f8c4 	bl	800d4e4 <ISOUDS_SAReset>
 800d35c:	4b57      	ldr	r3, [pc, #348]	; (800d4bc <ISOUDS_SAChkTimer+0x1b0>)
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	3301      	adds	r3, #1
 800d362:	b2da      	uxtb	r2, r3
 800d364:	4b55      	ldr	r3, [pc, #340]	; (800d4bc <ISOUDS_SAChkTimer+0x1b0>)
 800d366:	701a      	strb	r2, [r3, #0]
 800d368:	4b54      	ldr	r3, [pc, #336]	; (800d4bc <ISOUDS_SAChkTimer+0x1b0>)
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7f5 fed9 	bl	8003124 <ISOUDS_SetSAAttempCount>
 800d372:	4b53      	ldr	r3, [pc, #332]	; (800d4c0 <ISOUDS_SAChkTimer+0x1b4>)
 800d374:	2200      	movs	r2, #0
 800d376:	601a      	str	r2, [r3, #0]
 800d378:	4b4f      	ldr	r3, [pc, #316]	; (800d4b8 <ISOUDS_SAChkTimer+0x1ac>)
 800d37a:	2200      	movs	r2, #0
 800d37c:	601a      	str	r2, [r3, #0]
 800d37e:	e007      	b.n	800d390 <ISOUDS_SAChkTimer+0x84>
 800d380:	f7f4 f9cd 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800d384:	4602      	mov	r2, r0
 800d386:	4b4c      	ldr	r3, [pc, #304]	; (800d4b8 <ISOUDS_SAChkTimer+0x1ac>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4413      	add	r3, r2
 800d38c:	4a4a      	ldr	r2, [pc, #296]	; (800d4b8 <ISOUDS_SAChkTimer+0x1ac>)
 800d38e:	6013      	str	r3, [r2, #0]
 800d390:	4b4c      	ldr	r3, [pc, #304]	; (800d4c4 <ISOUDS_SAChkTimer+0x1b8>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d03a      	beq.n	800d40e <ISOUDS_SAChkTimer+0x102>
 800d398:	4b4a      	ldr	r3, [pc, #296]	; (800d4c4 <ISOUDS_SAChkTimer+0x1b8>)
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	4b4a      	ldr	r3, [pc, #296]	; (800d4c8 <ISOUDS_SAChkTimer+0x1bc>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d32c      	bcc.n	800d3fe <ISOUDS_SAChkTimer+0xf2>
 800d3a4:	f7f5 feb2 	bl	800310c <ISOUDS_GetSAAttempCount>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	4b43      	ldr	r3, [pc, #268]	; (800d4bc <ISOUDS_SAChkTimer+0x1b0>)
 800d3ae:	701a      	strb	r2, [r3, #0]
 800d3b0:	4b42      	ldr	r3, [pc, #264]	; (800d4bc <ISOUDS_SAChkTimer+0x1b0>)
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	2b02      	cmp	r3, #2
 800d3b6:	d910      	bls.n	800d3da <ISOUDS_SAChkTimer+0xce>
 800d3b8:	4b40      	ldr	r3, [pc, #256]	; (800d4bc <ISOUDS_SAChkTimer+0x1b0>)
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	701a      	strb	r2, [r3, #0]
 800d3be:	4b3f      	ldr	r3, [pc, #252]	; (800d4bc <ISOUDS_SAChkTimer+0x1b0>)
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7f5 feae 	bl	8003124 <ISOUDS_SetSAAttempCount>
 800d3c8:	4b40      	ldr	r3, [pc, #256]	; (800d4cc <ISOUDS_SAChkTimer+0x1c0>)
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	601a      	str	r2, [r3, #0]
 800d3ce:	4b37      	ldr	r3, [pc, #220]	; (800d4ac <ISOUDS_SAChkTimer+0x1a0>)
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	601a      	str	r2, [r3, #0]
 800d3d4:	4b38      	ldr	r3, [pc, #224]	; (800d4b8 <ISOUDS_SAChkTimer+0x1ac>)
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	601a      	str	r2, [r3, #0]
 800d3da:	f000 f883 	bl	800d4e4 <ISOUDS_SAReset>
 800d3de:	4b3c      	ldr	r3, [pc, #240]	; (800d4d0 <ISOUDS_SAChkTimer+0x1c4>)
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	601a      	str	r2, [r3, #0]
 800d3e4:	4b37      	ldr	r3, [pc, #220]	; (800d4c4 <ISOUDS_SAChkTimer+0x1b8>)
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	601a      	str	r2, [r3, #0]
 800d3ea:	4b38      	ldr	r3, [pc, #224]	; (800d4cc <ISOUDS_SAChkTimer+0x1c0>)
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	601a      	str	r2, [r3, #0]
 800d3f0:	4b2e      	ldr	r3, [pc, #184]	; (800d4ac <ISOUDS_SAChkTimer+0x1a0>)
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	601a      	str	r2, [r3, #0]
 800d3f6:	4b30      	ldr	r3, [pc, #192]	; (800d4b8 <ISOUDS_SAChkTimer+0x1ac>)
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	601a      	str	r2, [r3, #0]
 800d3fc:	e007      	b.n	800d40e <ISOUDS_SAChkTimer+0x102>
 800d3fe:	f7f4 f98e 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800d402:	4602      	mov	r2, r0
 800d404:	4b2f      	ldr	r3, [pc, #188]	; (800d4c4 <ISOUDS_SAChkTimer+0x1b8>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4413      	add	r3, r2
 800d40a:	4a2e      	ldr	r2, [pc, #184]	; (800d4c4 <ISOUDS_SAChkTimer+0x1b8>)
 800d40c:	6013      	str	r3, [r2, #0]
 800d40e:	4b2f      	ldr	r3, [pc, #188]	; (800d4cc <ISOUDS_SAChkTimer+0x1c0>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d021      	beq.n	800d45a <ISOUDS_SAChkTimer+0x14e>
 800d416:	4b2d      	ldr	r3, [pc, #180]	; (800d4cc <ISOUDS_SAChkTimer+0x1c0>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800d41e:	4293      	cmp	r3, r2
 800d420:	d913      	bls.n	800d44a <ISOUDS_SAChkTimer+0x13e>
 800d422:	f000 f85f 	bl	800d4e4 <ISOUDS_SAReset>
 800d426:	4b25      	ldr	r3, [pc, #148]	; (800d4bc <ISOUDS_SAChkTimer+0x1b0>)
 800d428:	2200      	movs	r2, #0
 800d42a:	701a      	strb	r2, [r3, #0]
 800d42c:	4b23      	ldr	r3, [pc, #140]	; (800d4bc <ISOUDS_SAChkTimer+0x1b0>)
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	4618      	mov	r0, r3
 800d432:	f7f5 fe77 	bl	8003124 <ISOUDS_SetSAAttempCount>
 800d436:	4b26      	ldr	r3, [pc, #152]	; (800d4d0 <ISOUDS_SAChkTimer+0x1c4>)
 800d438:	2200      	movs	r2, #0
 800d43a:	601a      	str	r2, [r3, #0]
 800d43c:	4b21      	ldr	r3, [pc, #132]	; (800d4c4 <ISOUDS_SAChkTimer+0x1b8>)
 800d43e:	2200      	movs	r2, #0
 800d440:	601a      	str	r2, [r3, #0]
 800d442:	4b22      	ldr	r3, [pc, #136]	; (800d4cc <ISOUDS_SAChkTimer+0x1c0>)
 800d444:	2200      	movs	r2, #0
 800d446:	601a      	str	r2, [r3, #0]
 800d448:	e007      	b.n	800d45a <ISOUDS_SAChkTimer+0x14e>
 800d44a:	f7f4 f968 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800d44e:	4602      	mov	r2, r0
 800d450:	4b1e      	ldr	r3, [pc, #120]	; (800d4cc <ISOUDS_SAChkTimer+0x1c0>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4413      	add	r3, r2
 800d456:	4a1d      	ldr	r2, [pc, #116]	; (800d4cc <ISOUDS_SAChkTimer+0x1c0>)
 800d458:	6013      	str	r3, [r2, #0]
 800d45a:	4b1e      	ldr	r3, [pc, #120]	; (800d4d4 <ISOUDS_SAChkTimer+0x1c8>)
 800d45c:	781a      	ldrb	r2, [r3, #0]
 800d45e:	4b1e      	ldr	r3, [pc, #120]	; (800d4d8 <ISOUDS_SAChkTimer+0x1cc>)
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	429a      	cmp	r2, r3
 800d464:	d001      	beq.n	800d46a <ISOUDS_SAChkTimer+0x15e>
 800d466:	f000 f83d 	bl	800d4e4 <ISOUDS_SAReset>
 800d46a:	4b1c      	ldr	r3, [pc, #112]	; (800d4dc <ISOUDS_SAChkTimer+0x1d0>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d015      	beq.n	800d49e <ISOUDS_SAChkTimer+0x192>
 800d472:	4b1b      	ldr	r3, [pc, #108]	; (800d4e0 <ISOUDS_SAChkTimer+0x1d4>)
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	2b01      	cmp	r3, #1
 800d478:	d111      	bne.n	800d49e <ISOUDS_SAChkTimer+0x192>
 800d47a:	4b18      	ldr	r3, [pc, #96]	; (800d4dc <ISOUDS_SAChkTimer+0x1d0>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f242 7210 	movw	r2, #10000	; 0x2710
 800d482:	4293      	cmp	r3, r2
 800d484:	d903      	bls.n	800d48e <ISOUDS_SAChkTimer+0x182>
 800d486:	4b16      	ldr	r3, [pc, #88]	; (800d4e0 <ISOUDS_SAChkTimer+0x1d4>)
 800d488:	2200      	movs	r2, #0
 800d48a:	701a      	strb	r2, [r3, #0]
 800d48c:	e007      	b.n	800d49e <ISOUDS_SAChkTimer+0x192>
 800d48e:	f7f4 f946 	bl	800171e <ISOUDS_GetServerPeriodSched>
 800d492:	4602      	mov	r2, r0
 800d494:	4b11      	ldr	r3, [pc, #68]	; (800d4dc <ISOUDS_SAChkTimer+0x1d0>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4413      	add	r3, r2
 800d49a:	4a10      	ldr	r2, [pc, #64]	; (800d4dc <ISOUDS_SAChkTimer+0x1d0>)
 800d49c:	6013      	str	r3, [r2, #0]
 800d49e:	4b0e      	ldr	r3, [pc, #56]	; (800d4d8 <ISOUDS_SAChkTimer+0x1cc>)
 800d4a0:	781a      	ldrb	r2, [r3, #0]
 800d4a2:	4b0c      	ldr	r3, [pc, #48]	; (800d4d4 <ISOUDS_SAChkTimer+0x1c8>)
 800d4a4:	701a      	strb	r2, [r3, #0]
 800d4a6:	bf00      	nop
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	240017cc 	.word	0x240017cc
 800d4b0:	0036ee80 	.word	0x0036ee80
 800d4b4:	240017dc 	.word	0x240017dc
 800d4b8:	240017d0 	.word	0x240017d0
 800d4bc:	240017c8 	.word	0x240017c8
 800d4c0:	240017e0 	.word	0x240017e0
 800d4c4:	240017d4 	.word	0x240017d4
 800d4c8:	240017f8 	.word	0x240017f8
 800d4cc:	240017e8 	.word	0x240017e8
 800d4d0:	240017e4 	.word	0x240017e4
 800d4d4:	240017f1 	.word	0x240017f1
 800d4d8:	2400173c 	.word	0x2400173c
 800d4dc:	240017ec 	.word	0x240017ec
 800d4e0:	240017f0 	.word	0x240017f0

0800d4e4 <ISOUDS_SAReset>:
 800d4e4:	b480      	push	{r7}
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	4b0b      	ldr	r3, [pc, #44]	; (800d518 <ISOUDS_SAReset+0x34>)
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	601a      	str	r2, [r3, #0]
 800d4ee:	4b0b      	ldr	r3, [pc, #44]	; (800d51c <ISOUDS_SAReset+0x38>)
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	601a      	str	r2, [r3, #0]
 800d4f4:	4b0a      	ldr	r3, [pc, #40]	; (800d520 <ISOUDS_SAReset+0x3c>)
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	601a      	str	r2, [r3, #0]
 800d4fa:	4b0a      	ldr	r3, [pc, #40]	; (800d524 <ISOUDS_SAReset+0x40>)
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	601a      	str	r2, [r3, #0]
 800d500:	4b09      	ldr	r3, [pc, #36]	; (800d528 <ISOUDS_SAReset+0x44>)
 800d502:	2201      	movs	r2, #1
 800d504:	701a      	strb	r2, [r3, #0]
 800d506:	4b09      	ldr	r3, [pc, #36]	; (800d52c <ISOUDS_SAReset+0x48>)
 800d508:	2200      	movs	r2, #0
 800d50a:	701a      	strb	r2, [r3, #0]
 800d50c:	bf00      	nop
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop
 800d518:	240017dc 	.word	0x240017dc
 800d51c:	240017e0 	.word	0x240017e0
 800d520:	240017cc 	.word	0x240017cc
 800d524:	240017d0 	.word	0x240017d0
 800d528:	240017f2 	.word	0x240017f2
 800d52c:	240017f3 	.word	0x240017f3

0800d530 <ISOUDS_GetSAStLevel>:
 800d530:	b480      	push	{r7}
 800d532:	b085      	sub	sp, #20
 800d534:	af00      	add	r7, sp, #0
 800d536:	4603      	mov	r3, r0
 800d538:	71fb      	strb	r3, [r7, #7]
 800d53a:	2300      	movs	r3, #0
 800d53c:	73fb      	strb	r3, [r7, #15]
 800d53e:	4b0a      	ldr	r3, [pc, #40]	; (800d568 <ISOUDS_GetSAStLevel+0x38>)
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	79fa      	ldrb	r2, [r7, #7]
 800d544:	429a      	cmp	r2, r3
 800d546:	d106      	bne.n	800d556 <ISOUDS_GetSAStLevel+0x26>
 800d548:	4b08      	ldr	r3, [pc, #32]	; (800d56c <ISOUDS_GetSAStLevel+0x3c>)
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d102      	bne.n	800d556 <ISOUDS_GetSAStLevel+0x26>
 800d550:	2301      	movs	r3, #1
 800d552:	73fb      	strb	r3, [r7, #15]
 800d554:	e001      	b.n	800d55a <ISOUDS_GetSAStLevel+0x2a>
 800d556:	2300      	movs	r3, #0
 800d558:	73fb      	strb	r3, [r7, #15]
 800d55a:	7bfb      	ldrb	r3, [r7, #15]
 800d55c:	4618      	mov	r0, r3
 800d55e:	3714      	adds	r7, #20
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr
 800d568:	240017c7 	.word	0x240017c7
 800d56c:	240017f3 	.word	0x240017f3

0800d570 <ISOUDS_SA_GetSeedLenth>:
 800d570:	b480      	push	{r7}
 800d572:	b085      	sub	sp, #20
 800d574:	af00      	add	r7, sp, #0
 800d576:	4603      	mov	r3, r0
 800d578:	6039      	str	r1, [r7, #0]
 800d57a:	71fb      	strb	r3, [r7, #7]
 800d57c:	2300      	movs	r3, #0
 800d57e:	73bb      	strb	r3, [r7, #14]
 800d580:	2300      	movs	r3, #0
 800d582:	73fb      	strb	r3, [r7, #15]
 800d584:	e01a      	b.n	800d5bc <ISOUDS_SA_GetSeedLenth+0x4c>
 800d586:	7bfa      	ldrb	r2, [r7, #15]
 800d588:	4912      	ldr	r1, [pc, #72]	; (800d5d4 <ISOUDS_SA_GetSeedLenth+0x64>)
 800d58a:	4613      	mov	r3, r2
 800d58c:	005b      	lsls	r3, r3, #1
 800d58e:	4413      	add	r3, r2
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	440b      	add	r3, r1
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	79fa      	ldrb	r2, [r7, #7]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d10c      	bne.n	800d5b6 <ISOUDS_SA_GetSeedLenth+0x46>
 800d59c:	7bfa      	ldrb	r2, [r7, #15]
 800d59e:	490d      	ldr	r1, [pc, #52]	; (800d5d4 <ISOUDS_SA_GetSeedLenth+0x64>)
 800d5a0:	4613      	mov	r3, r2
 800d5a2:	005b      	lsls	r3, r3, #1
 800d5a4:	4413      	add	r3, r2
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	440b      	add	r3, r1
 800d5aa:	3302      	adds	r3, #2
 800d5ac:	781a      	ldrb	r2, [r3, #0]
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	701a      	strb	r2, [r3, #0]
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	73bb      	strb	r3, [r7, #14]
 800d5b6:	7bfb      	ldrb	r3, [r7, #15]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	73fb      	strb	r3, [r7, #15]
 800d5bc:	7bfb      	ldrb	r3, [r7, #15]
 800d5be:	2b03      	cmp	r3, #3
 800d5c0:	d802      	bhi.n	800d5c8 <ISOUDS_SA_GetSeedLenth+0x58>
 800d5c2:	7bbb      	ldrb	r3, [r7, #14]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d0de      	beq.n	800d586 <ISOUDS_SA_GetSeedLenth+0x16>
 800d5c8:	bf00      	nop
 800d5ca:	3714      	adds	r7, #20
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr
 800d5d4:	08010f58 	.word	0x08010f58

0800d5d8 <ISOUDS_SA_CheckLevelSupp>:
 800d5d8:	b480      	push	{r7}
 800d5da:	b085      	sub	sp, #20
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	4603      	mov	r3, r0
 800d5e0:	71fb      	strb	r3, [r7, #7]
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	73bb      	strb	r3, [r7, #14]
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	73fb      	strb	r3, [r7, #15]
 800d5ea:	e012      	b.n	800d612 <ISOUDS_SA_CheckLevelSupp+0x3a>
 800d5ec:	7bfa      	ldrb	r2, [r7, #15]
 800d5ee:	490e      	ldr	r1, [pc, #56]	; (800d628 <ISOUDS_SA_CheckLevelSupp+0x50>)
 800d5f0:	4613      	mov	r3, r2
 800d5f2:	005b      	lsls	r3, r3, #1
 800d5f4:	4413      	add	r3, r2
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	440b      	add	r3, r1
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	79fa      	ldrb	r2, [r7, #7]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d104      	bne.n	800d60c <ISOUDS_SA_CheckLevelSupp+0x34>
 800d602:	2301      	movs	r3, #1
 800d604:	73bb      	strb	r3, [r7, #14]
 800d606:	4a09      	ldr	r2, [pc, #36]	; (800d62c <ISOUDS_SA_CheckLevelSupp+0x54>)
 800d608:	7bfb      	ldrb	r3, [r7, #15]
 800d60a:	7013      	strb	r3, [r2, #0]
 800d60c:	7bfb      	ldrb	r3, [r7, #15]
 800d60e:	3301      	adds	r3, #1
 800d610:	73fb      	strb	r3, [r7, #15]
 800d612:	7bfb      	ldrb	r3, [r7, #15]
 800d614:	2b03      	cmp	r3, #3
 800d616:	d9e9      	bls.n	800d5ec <ISOUDS_SA_CheckLevelSupp+0x14>
 800d618:	7bbb      	ldrb	r3, [r7, #14]
 800d61a:	4618      	mov	r0, r3
 800d61c:	3714      	adds	r7, #20
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop
 800d628:	08010f58 	.word	0x08010f58
 800d62c:	240017f4 	.word	0x240017f4

0800d630 <ISOUDS_GetSeed>:
 800d630:	b580      	push	{r7, lr}
 800d632:	b086      	sub	sp, #24
 800d634:	af00      	add	r7, sp, #0
 800d636:	4603      	mov	r3, r0
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	607a      	str	r2, [r7, #4]
 800d63c:	73fb      	strb	r3, [r7, #15]
 800d63e:	2300      	movs	r3, #0
 800d640:	75fb      	strb	r3, [r7, #23]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	701a      	strb	r2, [r3, #0]
 800d648:	4b25      	ldr	r3, [pc, #148]	; (800d6e0 <ISOUDS_GetSeed+0xb0>)
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	4619      	mov	r1, r3
 800d64e:	4a25      	ldr	r2, [pc, #148]	; (800d6e4 <ISOUDS_GetSeed+0xb4>)
 800d650:	460b      	mov	r3, r1
 800d652:	005b      	lsls	r3, r3, #1
 800d654:	440b      	add	r3, r1
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	4413      	add	r3, r2
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	7bfa      	ldrb	r2, [r7, #15]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d137      	bne.n	800d6d2 <ISOUDS_GetSeed+0xa2>
 800d662:	4b1f      	ldr	r3, [pc, #124]	; (800d6e0 <ISOUDS_GetSeed+0xb0>)
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	4619      	mov	r1, r3
 800d668:	4a1e      	ldr	r2, [pc, #120]	; (800d6e4 <ISOUDS_GetSeed+0xb4>)
 800d66a:	460b      	mov	r3, r1
 800d66c:	005b      	lsls	r3, r3, #1
 800d66e:	440b      	add	r3, r1
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4413      	add	r3, r2
 800d674:	3302      	adds	r3, #2
 800d676:	781a      	ldrb	r2, [r3, #0]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	701a      	strb	r2, [r3, #0]
 800d67c:	4b18      	ldr	r3, [pc, #96]	; (800d6e0 <ISOUDS_GetSeed+0xb0>)
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	4619      	mov	r1, r3
 800d682:	4a18      	ldr	r2, [pc, #96]	; (800d6e4 <ISOUDS_GetSeed+0xb4>)
 800d684:	460b      	mov	r3, r1
 800d686:	005b      	lsls	r3, r3, #1
 800d688:	440b      	add	r3, r1
 800d68a:	009b      	lsls	r3, r3, #2
 800d68c:	4413      	add	r3, r2
 800d68e:	3304      	adds	r3, #4
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4815      	ldr	r0, [pc, #84]	; (800d6e8 <ISOUDS_GetSeed+0xb8>)
 800d694:	4798      	blx	r3
 800d696:	4603      	mov	r3, r0
 800d698:	75fb      	strb	r3, [r7, #23]
 800d69a:	2300      	movs	r3, #0
 800d69c:	75bb      	strb	r3, [r7, #22]
 800d69e:	e009      	b.n	800d6b4 <ISOUDS_GetSeed+0x84>
 800d6a0:	7dba      	ldrb	r2, [r7, #22]
 800d6a2:	7dbb      	ldrb	r3, [r7, #22]
 800d6a4:	68b9      	ldr	r1, [r7, #8]
 800d6a6:	440b      	add	r3, r1
 800d6a8:	490f      	ldr	r1, [pc, #60]	; (800d6e8 <ISOUDS_GetSeed+0xb8>)
 800d6aa:	5c8a      	ldrb	r2, [r1, r2]
 800d6ac:	701a      	strb	r2, [r3, #0]
 800d6ae:	7dbb      	ldrb	r3, [r7, #22]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	75bb      	strb	r3, [r7, #22]
 800d6b4:	4b0a      	ldr	r3, [pc, #40]	; (800d6e0 <ISOUDS_GetSeed+0xb0>)
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	4a0a      	ldr	r2, [pc, #40]	; (800d6e4 <ISOUDS_GetSeed+0xb4>)
 800d6bc:	460b      	mov	r3, r1
 800d6be:	005b      	lsls	r3, r3, #1
 800d6c0:	440b      	add	r3, r1
 800d6c2:	009b      	lsls	r3, r3, #2
 800d6c4:	4413      	add	r3, r2
 800d6c6:	3302      	adds	r3, #2
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	7dba      	ldrb	r2, [r7, #22]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d3e7      	bcc.n	800d6a0 <ISOUDS_GetSeed+0x70>
 800d6d0:	e001      	b.n	800d6d6 <ISOUDS_GetSeed+0xa6>
 800d6d2:	2312      	movs	r3, #18
 800d6d4:	75fb      	strb	r3, [r7, #23]
 800d6d6:	7dfb      	ldrb	r3, [r7, #23]
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3718      	adds	r7, #24
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	240017f4 	.word	0x240017f4
 800d6e4:	08010f58 	.word	0x08010f58
 800d6e8:	24001498 	.word	0x24001498

0800d6ec <ISOUDS_ValidateKey>:
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	70fb      	strb	r3, [r7, #3]
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	73fb      	strb	r3, [r7, #15]
 800d6fc:	4b18      	ldr	r3, [pc, #96]	; (800d760 <ISOUDS_ValidateKey+0x74>)
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	4619      	mov	r1, r3
 800d702:	4a18      	ldr	r2, [pc, #96]	; (800d764 <ISOUDS_ValidateKey+0x78>)
 800d704:	460b      	mov	r3, r1
 800d706:	005b      	lsls	r3, r3, #1
 800d708:	440b      	add	r3, r1
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	4413      	add	r3, r2
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	78fa      	ldrb	r2, [r7, #3]
 800d712:	429a      	cmp	r2, r3
 800d714:	d11c      	bne.n	800d750 <ISOUDS_ValidateKey+0x64>
 800d716:	4b12      	ldr	r3, [pc, #72]	; (800d760 <ISOUDS_ValidateKey+0x74>)
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	4619      	mov	r1, r3
 800d71c:	4a11      	ldr	r2, [pc, #68]	; (800d764 <ISOUDS_ValidateKey+0x78>)
 800d71e:	460b      	mov	r3, r1
 800d720:	005b      	lsls	r3, r3, #1
 800d722:	440b      	add	r3, r1
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	4413      	add	r3, r2
 800d728:	3308      	adds	r3, #8
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	4b0c      	ldr	r3, [pc, #48]	; (800d760 <ISOUDS_ValidateKey+0x74>)
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	4618      	mov	r0, r3
 800d732:	490c      	ldr	r1, [pc, #48]	; (800d764 <ISOUDS_ValidateKey+0x78>)
 800d734:	4603      	mov	r3, r0
 800d736:	005b      	lsls	r3, r3, #1
 800d738:	4403      	add	r3, r0
 800d73a:	009b      	lsls	r3, r3, #2
 800d73c:	440b      	add	r3, r1
 800d73e:	3303      	adds	r3, #3
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	b29b      	uxth	r3, r3
 800d744:	4619      	mov	r1, r3
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	4790      	blx	r2
 800d74a:	4603      	mov	r3, r0
 800d74c:	73fb      	strb	r3, [r7, #15]
 800d74e:	e001      	b.n	800d754 <ISOUDS_ValidateKey+0x68>
 800d750:	2312      	movs	r3, #18
 800d752:	73fb      	strb	r3, [r7, #15]
 800d754:	7bfb      	ldrb	r3, [r7, #15]
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	240017f4 	.word	0x240017f4
 800d764:	08010f58 	.word	0x08010f58

0800d768 <ISOUDS_ACState_Handler>:
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
 800d772:	2300      	movs	r3, #0
 800d774:	73fb      	strb	r3, [r7, #15]
 800d776:	2300      	movs	r3, #0
 800d778:	73bb      	strb	r3, [r7, #14]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f000 80d4 	beq.w	800d92a <ISOUDS_ACState_Handler+0x1c2>
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	f000 80d0 	beq.w	800d92a <ISOUDS_ACState_Handler+0x1c2>
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	781a      	ldrb	r2, [r3, #0]
 800d78e:	4b69      	ldr	r3, [pc, #420]	; (800d934 <ISOUDS_ACState_Handler+0x1cc>)
 800d790:	701a      	strb	r2, [r3, #0]
 800d792:	4b68      	ldr	r3, [pc, #416]	; (800d934 <ISOUDS_ACState_Handler+0x1cc>)
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	f003 0301 	and.w	r3, r3, #1
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f000 80ac 	beq.w	800d8fa <ISOUDS_ACState_Handler+0x192>
 800d7a2:	4b64      	ldr	r3, [pc, #400]	; (800d934 <ISOUDS_ACState_Handler+0x1cc>)
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	f000 80a7 	beq.w	800d8fa <ISOUDS_ACState_Handler+0x192>
 800d7ac:	4b61      	ldr	r3, [pc, #388]	; (800d934 <ISOUDS_ACState_Handler+0x1cc>)
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	2b7d      	cmp	r3, #125	; 0x7d
 800d7b2:	f200 80a2 	bhi.w	800d8fa <ISOUDS_ACState_Handler+0x192>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	889b      	ldrh	r3, [r3, #4]
 800d7ba:	2b02      	cmp	r3, #2
 800d7bc:	f040 8096 	bne.w	800d8ec <ISOUDS_ACState_Handler+0x184>
 800d7c0:	4b5d      	ldr	r3, [pc, #372]	; (800d938 <ISOUDS_ACState_Handler+0x1d0>)
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d12d      	bne.n	800d824 <ISOUDS_ACState_Handler+0xbc>
 800d7c8:	4b5a      	ldr	r3, [pc, #360]	; (800d934 <ISOUDS_ACState_Handler+0x1cc>)
 800d7ca:	781a      	ldrb	r2, [r3, #0]
 800d7cc:	4b5b      	ldr	r3, [pc, #364]	; (800d93c <ISOUDS_ACState_Handler+0x1d4>)
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d127      	bne.n	800d824 <ISOUDS_ACState_Handler+0xbc>
 800d7d4:	4b57      	ldr	r3, [pc, #348]	; (800d934 <ISOUDS_ACState_Handler+0x1cc>)
 800d7d6:	781a      	ldrb	r2, [r3, #0]
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	701a      	strb	r2, [r3, #0]
 800d7dc:	4b55      	ldr	r3, [pc, #340]	; (800d934 <ISOUDS_ACState_Handler+0x1cc>)
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	4957      	ldr	r1, [pc, #348]	; (800d940 <ISOUDS_ACState_Handler+0x1d8>)
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f7ff fec4 	bl	800d570 <ISOUDS_SA_GetSeedLenth>
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	73fb      	strb	r3, [r7, #15]
 800d7ec:	e007      	b.n	800d7fe <ISOUDS_ACState_Handler+0x96>
 800d7ee:	7bfb      	ldrb	r3, [r7, #15]
 800d7f0:	683a      	ldr	r2, [r7, #0]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	701a      	strb	r2, [r3, #0]
 800d7f8:	7bfb      	ldrb	r3, [r7, #15]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	73fb      	strb	r3, [r7, #15]
 800d7fe:	4b50      	ldr	r3, [pc, #320]	; (800d940 <ISOUDS_ACState_Handler+0x1d8>)
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	7bfa      	ldrb	r2, [r7, #15]
 800d804:	429a      	cmp	r2, r3
 800d806:	d9f2      	bls.n	800d7ee <ISOUDS_ACState_Handler+0x86>
 800d808:	4b4d      	ldr	r3, [pc, #308]	; (800d940 <ISOUDS_ACState_Handler+0x1d8>)
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	3302      	adds	r3, #2
 800d810:	b29a      	uxth	r2, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	809a      	strh	r2, [r3, #4]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2203      	movs	r2, #3
 800d81a:	701a      	strb	r2, [r3, #0]
 800d81c:	4b49      	ldr	r3, [pc, #292]	; (800d944 <ISOUDS_ACState_Handler+0x1dc>)
 800d81e:	2204      	movs	r2, #4
 800d820:	701a      	strb	r2, [r3, #0]
 800d822:	e082      	b.n	800d92a <ISOUDS_ACState_Handler+0x1c2>
 800d824:	4b43      	ldr	r3, [pc, #268]	; (800d934 <ISOUDS_ACState_Handler+0x1cc>)
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	4618      	mov	r0, r3
 800d82a:	f7ff fed5 	bl	800d5d8 <ISOUDS_SA_CheckLevelSupp>
 800d82e:	4603      	mov	r3, r0
 800d830:	73bb      	strb	r3, [r7, #14]
 800d832:	7bbb      	ldrb	r3, [r7, #14]
 800d834:	2b01      	cmp	r3, #1
 800d836:	d152      	bne.n	800d8de <ISOUDS_ACState_Handler+0x176>
 800d838:	4b43      	ldr	r3, [pc, #268]	; (800d948 <ISOUDS_ACState_Handler+0x1e0>)
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	4619      	mov	r1, r3
 800d83e:	4a43      	ldr	r2, [pc, #268]	; (800d94c <ISOUDS_ACState_Handler+0x1e4>)
 800d840:	460b      	mov	r3, r1
 800d842:	005b      	lsls	r3, r3, #1
 800d844:	440b      	add	r3, r1
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	4413      	add	r3, r2
 800d84a:	3301      	adds	r3, #1
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	461a      	mov	r2, r3
 800d850:	4b3f      	ldr	r3, [pc, #252]	; (800d950 <ISOUDS_ACState_Handler+0x1e8>)
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	fa42 f303 	asr.w	r3, r2, r3
 800d858:	f003 0301 	and.w	r3, r3, #1
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d037      	beq.n	800d8d0 <ISOUDS_ACState_Handler+0x168>
 800d860:	4b34      	ldr	r3, [pc, #208]	; (800d934 <ISOUDS_ACState_Handler+0x1cc>)
 800d862:	7818      	ldrb	r0, [r3, #0]
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	3301      	adds	r3, #1
 800d868:	4a35      	ldr	r2, [pc, #212]	; (800d940 <ISOUDS_ACState_Handler+0x1d8>)
 800d86a:	4619      	mov	r1, r3
 800d86c:	f7ff fee0 	bl	800d630 <ISOUDS_GetSeed>
 800d870:	4603      	mov	r3, r0
 800d872:	737b      	strb	r3, [r7, #13]
 800d874:	7b7b      	ldrb	r3, [r7, #13]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d123      	bne.n	800d8c2 <ISOUDS_ACState_Handler+0x15a>
 800d87a:	4b2f      	ldr	r3, [pc, #188]	; (800d938 <ISOUDS_ACState_Handler+0x1d0>)
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d103      	bne.n	800d88a <ISOUDS_ACState_Handler+0x122>
 800d882:	4b30      	ldr	r3, [pc, #192]	; (800d944 <ISOUDS_ACState_Handler+0x1dc>)
 800d884:	2204      	movs	r2, #4
 800d886:	701a      	strb	r2, [r3, #0]
 800d888:	e002      	b.n	800d890 <ISOUDS_ACState_Handler+0x128>
 800d88a:	4b2e      	ldr	r3, [pc, #184]	; (800d944 <ISOUDS_ACState_Handler+0x1dc>)
 800d88c:	2202      	movs	r2, #2
 800d88e:	701a      	strb	r2, [r3, #0]
 800d890:	4b30      	ldr	r3, [pc, #192]	; (800d954 <ISOUDS_ACState_Handler+0x1ec>)
 800d892:	2201      	movs	r2, #1
 800d894:	601a      	str	r2, [r3, #0]
 800d896:	4b27      	ldr	r3, [pc, #156]	; (800d934 <ISOUDS_ACState_Handler+0x1cc>)
 800d898:	781a      	ldrb	r2, [r3, #0]
 800d89a:	4b28      	ldr	r3, [pc, #160]	; (800d93c <ISOUDS_ACState_Handler+0x1d4>)
 800d89c:	701a      	strb	r2, [r3, #0]
 800d89e:	4b25      	ldr	r3, [pc, #148]	; (800d934 <ISOUDS_ACState_Handler+0x1cc>)
 800d8a0:	781a      	ldrb	r2, [r3, #0]
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	701a      	strb	r2, [r3, #0]
 800d8a6:	4b2c      	ldr	r3, [pc, #176]	; (800d958 <ISOUDS_ACState_Handler+0x1f0>)
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	601a      	str	r2, [r3, #0]
 800d8ac:	4b24      	ldr	r3, [pc, #144]	; (800d940 <ISOUDS_ACState_Handler+0x1d8>)
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	3302      	adds	r3, #2
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	809a      	strh	r2, [r3, #4]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2203      	movs	r2, #3
 800d8be:	701a      	strb	r2, [r3, #0]
 800d8c0:	e033      	b.n	800d92a <ISOUDS_ACState_Handler+0x1c2>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2204      	movs	r2, #4
 800d8c6:	701a      	strb	r2, [r3, #0]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	7b7a      	ldrb	r2, [r7, #13]
 800d8cc:	709a      	strb	r2, [r3, #2]
 800d8ce:	e02c      	b.n	800d92a <ISOUDS_ACState_Handler+0x1c2>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2204      	movs	r2, #4
 800d8d4:	701a      	strb	r2, [r3, #0]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2212      	movs	r2, #18
 800d8da:	709a      	strb	r2, [r3, #2]
 800d8dc:	e025      	b.n	800d92a <ISOUDS_ACState_Handler+0x1c2>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2204      	movs	r2, #4
 800d8e2:	701a      	strb	r2, [r3, #0]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2212      	movs	r2, #18
 800d8e8:	709a      	strb	r2, [r3, #2]
 800d8ea:	e01e      	b.n	800d92a <ISOUDS_ACState_Handler+0x1c2>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2204      	movs	r2, #4
 800d8f0:	701a      	strb	r2, [r3, #0]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2213      	movs	r2, #19
 800d8f6:	709a      	strb	r2, [r3, #2]
 800d8f8:	e017      	b.n	800d92a <ISOUDS_ACState_Handler+0x1c2>
 800d8fa:	4b0e      	ldr	r3, [pc, #56]	; (800d934 <ISOUDS_ACState_Handler+0x1cc>)
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	3b01      	subs	r3, #1
 800d900:	b2db      	uxtb	r3, r3
 800d902:	4618      	mov	r0, r3
 800d904:	f7ff fe68 	bl	800d5d8 <ISOUDS_SA_CheckLevelSupp>
 800d908:	4603      	mov	r3, r0
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d106      	bne.n	800d91c <ISOUDS_ACState_Handler+0x1b4>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2204      	movs	r2, #4
 800d912:	701a      	strb	r2, [r3, #0]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2224      	movs	r2, #36	; 0x24
 800d918:	709a      	strb	r2, [r3, #2]
 800d91a:	e006      	b.n	800d92a <ISOUDS_ACState_Handler+0x1c2>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2204      	movs	r2, #4
 800d920:	701a      	strb	r2, [r3, #0]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2212      	movs	r2, #18
 800d926:	709a      	strb	r2, [r3, #2]
 800d928:	e7ff      	b.n	800d92a <ISOUDS_ACState_Handler+0x1c2>
 800d92a:	bf00      	nop
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	240017d8 	.word	0x240017d8
 800d938:	240017f3 	.word	0x240017f3
 800d93c:	240017c7 	.word	0x240017c7
 800d940:	240017fc 	.word	0x240017fc
 800d944:	240017f2 	.word	0x240017f2
 800d948:	240017f4 	.word	0x240017f4
 800d94c:	08010f58 	.word	0x08010f58
 800d950:	2400173c 	.word	0x2400173c
 800d954:	240017d0 	.word	0x240017d0
 800d958:	240017e0 	.word	0x240017e0

0800d95c <ISOUDS_BDState_Handler>:
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
 800d966:	2300      	movs	r3, #0
 800d968:	73fb      	strb	r3, [r7, #15]
 800d96a:	2300      	movs	r3, #0
 800d96c:	73bb      	strb	r3, [r7, #14]
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	737b      	strb	r3, [r7, #13]
 800d974:	7b7b      	ldrb	r3, [r7, #13]
 800d976:	3b01      	subs	r3, #1
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7ff fe2c 	bl	800d5d8 <ISOUDS_SA_CheckLevelSupp>
 800d980:	4603      	mov	r3, r0
 800d982:	73bb      	strb	r3, [r7, #14]
 800d984:	7bbb      	ldrb	r3, [r7, #14]
 800d986:	2b01      	cmp	r3, #1
 800d988:	f040 8094 	bne.w	800dab4 <ISOUDS_BDState_Handler+0x158>
 800d98c:	4b4e      	ldr	r3, [pc, #312]	; (800dac8 <ISOUDS_BDState_Handler+0x16c>)
 800d98e:	781b      	ldrb	r3, [r3, #0]
 800d990:	4619      	mov	r1, r3
 800d992:	4a4e      	ldr	r2, [pc, #312]	; (800dacc <ISOUDS_BDState_Handler+0x170>)
 800d994:	460b      	mov	r3, r1
 800d996:	005b      	lsls	r3, r3, #1
 800d998:	440b      	add	r3, r1
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	4413      	add	r3, r2
 800d99e:	3301      	adds	r3, #1
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	4b4a      	ldr	r3, [pc, #296]	; (800dad0 <ISOUDS_BDState_Handler+0x174>)
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	fa42 f303 	asr.w	r3, r2, r3
 800d9ac:	f003 0301 	and.w	r3, r3, #1
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d078      	beq.n	800daa6 <ISOUDS_BDState_Handler+0x14a>
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	4a46      	ldr	r2, [pc, #280]	; (800dad4 <ISOUDS_BDState_Handler+0x178>)
 800d9ba:	7812      	ldrb	r2, [r2, #0]
 800d9bc:	4611      	mov	r1, r2
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7ff fe94 	bl	800d6ec <ISOUDS_ValidateKey>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	73fb      	strb	r3, [r7, #15]
 800d9c8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d12a      	bne.n	800da24 <ISOUDS_BDState_Handler+0xc8>
 800d9ce:	4b42      	ldr	r3, [pc, #264]	; (800dad8 <ISOUDS_BDState_Handler+0x17c>)
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	701a      	strb	r2, [r3, #0]
 800d9d4:	4b3f      	ldr	r3, [pc, #252]	; (800dad4 <ISOUDS_BDState_Handler+0x178>)
 800d9d6:	781a      	ldrb	r2, [r3, #0]
 800d9d8:	4b40      	ldr	r3, [pc, #256]	; (800dadc <ISOUDS_BDState_Handler+0x180>)
 800d9da:	701a      	strb	r2, [r3, #0]
 800d9dc:	4b3f      	ldr	r3, [pc, #252]	; (800dadc <ISOUDS_BDState_Handler+0x180>)
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	b2da      	uxtb	r2, r3
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	701a      	strb	r2, [r3, #0]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2202      	movs	r2, #2
 800d9ec:	809a      	strh	r2, [r3, #4]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2203      	movs	r2, #3
 800d9f2:	701a      	strb	r2, [r3, #0]
 800d9f4:	4b3a      	ldr	r3, [pc, #232]	; (800dae0 <ISOUDS_BDState_Handler+0x184>)
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	601a      	str	r2, [r3, #0]
 800d9fa:	4b3a      	ldr	r3, [pc, #232]	; (800dae4 <ISOUDS_BDState_Handler+0x188>)
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	601a      	str	r2, [r3, #0]
 800da00:	4b39      	ldr	r3, [pc, #228]	; (800dae8 <ISOUDS_BDState_Handler+0x18c>)
 800da02:	2200      	movs	r2, #0
 800da04:	701a      	strb	r2, [r3, #0]
 800da06:	4b38      	ldr	r3, [pc, #224]	; (800dae8 <ISOUDS_BDState_Handler+0x18c>)
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7f5 fb8a 	bl	8003124 <ISOUDS_SetSAAttempCount>
 800da10:	4b36      	ldr	r3, [pc, #216]	; (800daec <ISOUDS_BDState_Handler+0x190>)
 800da12:	2203      	movs	r2, #3
 800da14:	701a      	strb	r2, [r3, #0]
 800da16:	4b36      	ldr	r3, [pc, #216]	; (800daf0 <ISOUDS_BDState_Handler+0x194>)
 800da18:	2200      	movs	r2, #0
 800da1a:	601a      	str	r2, [r3, #0]
 800da1c:	4b35      	ldr	r3, [pc, #212]	; (800daf4 <ISOUDS_BDState_Handler+0x198>)
 800da1e:	2200      	movs	r2, #0
 800da20:	601a      	str	r2, [r3, #0]
 800da22:	e04d      	b.n	800dac0 <ISOUDS_BDState_Handler+0x164>
 800da24:	7bfb      	ldrb	r3, [r7, #15]
 800da26:	2b35      	cmp	r3, #53	; 0x35
 800da28:	d136      	bne.n	800da98 <ISOUDS_BDState_Handler+0x13c>
 800da2a:	4b2f      	ldr	r3, [pc, #188]	; (800dae8 <ISOUDS_BDState_Handler+0x18c>)
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	3301      	adds	r3, #1
 800da30:	b2da      	uxtb	r2, r3
 800da32:	4b2d      	ldr	r3, [pc, #180]	; (800dae8 <ISOUDS_BDState_Handler+0x18c>)
 800da34:	701a      	strb	r2, [r3, #0]
 800da36:	4b2c      	ldr	r3, [pc, #176]	; (800dae8 <ISOUDS_BDState_Handler+0x18c>)
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7f5 fb72 	bl	8003124 <ISOUDS_SetSAAttempCount>
 800da40:	f7f5 fb64 	bl	800310c <ISOUDS_GetSAAttempCount>
 800da44:	4603      	mov	r3, r0
 800da46:	461a      	mov	r2, r3
 800da48:	4b27      	ldr	r3, [pc, #156]	; (800dae8 <ISOUDS_BDState_Handler+0x18c>)
 800da4a:	701a      	strb	r2, [r3, #0]
 800da4c:	4b26      	ldr	r3, [pc, #152]	; (800dae8 <ISOUDS_BDState_Handler+0x18c>)
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	2b02      	cmp	r3, #2
 800da52:	d914      	bls.n	800da7e <ISOUDS_BDState_Handler+0x122>
 800da54:	4b28      	ldr	r3, [pc, #160]	; (800daf8 <ISOUDS_BDState_Handler+0x19c>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d109      	bne.n	800da70 <ISOUDS_BDState_Handler+0x114>
 800da5c:	4b26      	ldr	r3, [pc, #152]	; (800daf8 <ISOUDS_BDState_Handler+0x19c>)
 800da5e:	2201      	movs	r2, #1
 800da60:	601a      	str	r2, [r3, #0]
 800da62:	4b26      	ldr	r3, [pc, #152]	; (800dafc <ISOUDS_BDState_Handler+0x1a0>)
 800da64:	2201      	movs	r2, #1
 800da66:	601a      	str	r2, [r3, #0]
 800da68:	4b25      	ldr	r3, [pc, #148]	; (800db00 <ISOUDS_BDState_Handler+0x1a4>)
 800da6a:	f242 7210 	movw	r2, #10000	; 0x2710
 800da6e:	601a      	str	r2, [r3, #0]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2204      	movs	r2, #4
 800da74:	701a      	strb	r2, [r3, #0]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2236      	movs	r2, #54	; 0x36
 800da7a:	709a      	strb	r2, [r3, #2]
 800da7c:	e020      	b.n	800dac0 <ISOUDS_BDState_Handler+0x164>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2204      	movs	r2, #4
 800da82:	701a      	strb	r2, [r3, #0]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2235      	movs	r2, #53	; 0x35
 800da88:	709a      	strb	r2, [r3, #2]
 800da8a:	4b19      	ldr	r3, [pc, #100]	; (800daf0 <ISOUDS_BDState_Handler+0x194>)
 800da8c:	2200      	movs	r2, #0
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	4b18      	ldr	r3, [pc, #96]	; (800daf4 <ISOUDS_BDState_Handler+0x198>)
 800da92:	2200      	movs	r2, #0
 800da94:	601a      	str	r2, [r3, #0]
 800da96:	e013      	b.n	800dac0 <ISOUDS_BDState_Handler+0x164>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2204      	movs	r2, #4
 800da9c:	701a      	strb	r2, [r3, #0]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	7bfa      	ldrb	r2, [r7, #15]
 800daa2:	709a      	strb	r2, [r3, #2]
 800daa4:	e00c      	b.n	800dac0 <ISOUDS_BDState_Handler+0x164>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2204      	movs	r2, #4
 800daaa:	701a      	strb	r2, [r3, #0]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	227e      	movs	r2, #126	; 0x7e
 800dab0:	709a      	strb	r2, [r3, #2]
 800dab2:	e005      	b.n	800dac0 <ISOUDS_BDState_Handler+0x164>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2204      	movs	r2, #4
 800dab8:	701a      	strb	r2, [r3, #0]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2212      	movs	r2, #18
 800dabe:	709a      	strb	r2, [r3, #2]
 800dac0:	bf00      	nop
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	240017f4 	.word	0x240017f4
 800dacc:	08010f58 	.word	0x08010f58
 800dad0:	2400173c 	.word	0x2400173c
 800dad4:	240017d8 	.word	0x240017d8
 800dad8:	240017f3 	.word	0x240017f3
 800dadc:	240017c7 	.word	0x240017c7
 800dae0:	240017dc 	.word	0x240017dc
 800dae4:	240017cc 	.word	0x240017cc
 800dae8:	240017c8 	.word	0x240017c8
 800daec:	240017f2 	.word	0x240017f2
 800daf0:	240017e0 	.word	0x240017e0
 800daf4:	240017d0 	.word	0x240017d0
 800daf8:	240017d4 	.word	0x240017d4
 800dafc:	240017e4 	.word	0x240017e4
 800db00:	240017f8 	.word	0x240017f8

0800db04 <ISOUDS_StrtDiagSess>:
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
 800db0e:	2300      	movs	r3, #0
 800db10:	73bb      	strb	r3, [r7, #14]
 800db12:	2300      	movs	r3, #0
 800db14:	737b      	strb	r3, [r7, #13]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d045      	beq.n	800dba8 <ISOUDS_StrtDiagSess+0xa4>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	889b      	ldrh	r3, [r3, #4]
 800db20:	2b02      	cmp	r3, #2
 800db22:	d111      	bne.n	800db48 <ISOUDS_StrtDiagSess+0x44>
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db2c:	73fb      	strb	r3, [r7, #15]
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800db36:	73bb      	strb	r3, [r7, #14]
 800db38:	7bfb      	ldrb	r3, [r7, #15]
 800db3a:	6879      	ldr	r1, [r7, #4]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f000 f837 	bl	800dbb0 <ISOUDS_SwtSess>
 800db42:	4603      	mov	r3, r0
 800db44:	737b      	strb	r3, [r7, #13]
 800db46:	e005      	b.n	800db54 <ISOUDS_StrtDiagSess+0x50>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2204      	movs	r2, #4
 800db4c:	701a      	strb	r2, [r3, #0]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2213      	movs	r2, #19
 800db52:	709a      	strb	r2, [r3, #2]
 800db54:	7b7b      	ldrb	r3, [r7, #13]
 800db56:	2b01      	cmp	r3, #1
 800db58:	d126      	bne.n	800dba8 <ISOUDS_StrtDiagSess+0xa4>
 800db5a:	7bbb      	ldrb	r3, [r7, #14]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d121      	bne.n	800dba4 <ISOUDS_StrtDiagSess+0xa0>
 800db60:	f7fd fd00 	bl	800b564 <ISUDS_SessionChangeInd>
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	7bfa      	ldrb	r2, [r7, #15]
 800db68:	701a      	strb	r2, [r3, #0]
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	3301      	adds	r3, #1
 800db6e:	2200      	movs	r2, #0
 800db70:	701a      	strb	r2, [r3, #0]
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	3302      	adds	r3, #2
 800db76:	2232      	movs	r2, #50	; 0x32
 800db78:	701a      	strb	r2, [r3, #0]
 800db7a:	23c8      	movs	r3, #200	; 0xc8
 800db7c:	817b      	strh	r3, [r7, #10]
 800db7e:	897b      	ldrh	r3, [r7, #10]
 800db80:	0a1b      	lsrs	r3, r3, #8
 800db82:	b29a      	uxth	r2, r3
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	3303      	adds	r3, #3
 800db88:	b2d2      	uxtb	r2, r2
 800db8a:	701a      	strb	r2, [r3, #0]
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	3304      	adds	r3, #4
 800db90:	897a      	ldrh	r2, [r7, #10]
 800db92:	b2d2      	uxtb	r2, r2
 800db94:	701a      	strb	r2, [r3, #0]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2206      	movs	r2, #6
 800db9a:	809a      	strh	r2, [r3, #4]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2203      	movs	r2, #3
 800dba0:	701a      	strb	r2, [r3, #0]
 800dba2:	e001      	b.n	800dba8 <ISOUDS_StrtDiagSess+0xa4>
 800dba4:	f7fd fbc8 	bl	800b338 <ISOUDS_ServerRst>
 800dba8:	bf00      	nop
 800dbaa:	3710      	adds	r7, #16
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <ISOUDS_SwtSess>:
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	6039      	str	r1, [r7, #0]
 800dbba:	71fb      	strb	r3, [r7, #7]
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	737b      	strb	r3, [r7, #13]
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	75fb      	strb	r3, [r7, #23]
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	74fb      	strb	r3, [r7, #19]
 800dbc8:	2300      	movs	r3, #0
 800dbca:	74bb      	strb	r3, [r7, #18]
 800dbcc:	2300      	movs	r3, #0
 800dbce:	74fb      	strb	r3, [r7, #19]
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	75bb      	strb	r3, [r7, #22]
 800dbd4:	e011      	b.n	800dbfa <ISOUDS_SwtSess+0x4a>
 800dbd6:	7dba      	ldrb	r2, [r7, #22]
 800dbd8:	4963      	ldr	r1, [pc, #396]	; (800dd68 <ISOUDS_SwtSess+0x1b8>)
 800dbda:	4613      	mov	r3, r2
 800dbdc:	005b      	lsls	r3, r3, #1
 800dbde:	4413      	add	r3, r2
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	440b      	add	r3, r1
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	79fa      	ldrb	r2, [r7, #7]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d103      	bne.n	800dbf4 <ISOUDS_SwtSess+0x44>
 800dbec:	2301      	movs	r3, #1
 800dbee:	74fb      	strb	r3, [r7, #19]
 800dbf0:	7dbb      	ldrb	r3, [r7, #22]
 800dbf2:	757b      	strb	r3, [r7, #21]
 800dbf4:	7dbb      	ldrb	r3, [r7, #22]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	75bb      	strb	r3, [r7, #22]
 800dbfa:	f7f5 fa9e 	bl	800313a <ISOUDS_Get_StrtDiagSessCfgMaxSub>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	461a      	mov	r2, r3
 800dc02:	7dbb      	ldrb	r3, [r7, #22]
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d202      	bcs.n	800dc0e <ISOUDS_SwtSess+0x5e>
 800dc08:	7cfb      	ldrb	r3, [r7, #19]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d0e3      	beq.n	800dbd6 <ISOUDS_SwtSess+0x26>
 800dc0e:	7cfb      	ldrb	r3, [r7, #19]
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	f040 809e 	bne.w	800dd52 <ISOUDS_SwtSess+0x1a2>
 800dc16:	2300      	movs	r3, #0
 800dc18:	74bb      	strb	r3, [r7, #18]
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	75bb      	strb	r3, [r7, #22]
 800dc1e:	e00f      	b.n	800dc40 <ISOUDS_SwtSess+0x90>
 800dc20:	7dbb      	ldrb	r3, [r7, #22]
 800dc22:	4a52      	ldr	r2, [pc, #328]	; (800dd6c <ISOUDS_SwtSess+0x1bc>)
 800dc24:	005b      	lsls	r3, r3, #1
 800dc26:	4413      	add	r3, r2
 800dc28:	785a      	ldrb	r2, [r3, #1]
 800dc2a:	4b51      	ldr	r3, [pc, #324]	; (800dd70 <ISOUDS_SwtSess+0x1c0>)
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d103      	bne.n	800dc3a <ISOUDS_SwtSess+0x8a>
 800dc32:	2301      	movs	r3, #1
 800dc34:	74bb      	strb	r3, [r7, #18]
 800dc36:	7dbb      	ldrb	r3, [r7, #22]
 800dc38:	753b      	strb	r3, [r7, #20]
 800dc3a:	7dbb      	ldrb	r3, [r7, #22]
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	75bb      	strb	r3, [r7, #22]
 800dc40:	f7f5 fa7b 	bl	800313a <ISOUDS_Get_StrtDiagSessCfgMaxSub>
 800dc44:	4603      	mov	r3, r0
 800dc46:	461a      	mov	r2, r3
 800dc48:	7dbb      	ldrb	r3, [r7, #22]
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d202      	bcs.n	800dc54 <ISOUDS_SwtSess+0xa4>
 800dc4e:	7cbb      	ldrb	r3, [r7, #18]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d0e5      	beq.n	800dc20 <ISOUDS_SwtSess+0x70>
 800dc54:	7cbb      	ldrb	r3, [r7, #18]
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d174      	bne.n	800dd44 <ISOUDS_SwtSess+0x194>
 800dc5a:	7d3a      	ldrb	r2, [r7, #20]
 800dc5c:	4942      	ldr	r1, [pc, #264]	; (800dd68 <ISOUDS_SwtSess+0x1b8>)
 800dc5e:	4613      	mov	r3, r2
 800dc60:	005b      	lsls	r3, r3, #1
 800dc62:	4413      	add	r3, r2
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	440b      	add	r3, r1
 800dc68:	3301      	adds	r3, #1
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	7d7b      	ldrb	r3, [r7, #21]
 800dc70:	4a3e      	ldr	r2, [pc, #248]	; (800dd6c <ISOUDS_SwtSess+0x1bc>)
 800dc72:	005b      	lsls	r3, r3, #1
 800dc74:	4413      	add	r3, r2
 800dc76:	785b      	ldrb	r3, [r3, #1]
 800dc78:	fa41 f303 	asr.w	r3, r1, r3
 800dc7c:	f003 0301 	and.w	r3, r3, #1
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d05f      	beq.n	800dd44 <ISOUDS_SwtSess+0x194>
 800dc84:	2301      	movs	r3, #1
 800dc86:	747b      	strb	r3, [r7, #17]
 800dc88:	7d7a      	ldrb	r2, [r7, #21]
 800dc8a:	4937      	ldr	r1, [pc, #220]	; (800dd68 <ISOUDS_SwtSess+0x1b8>)
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	005b      	lsls	r3, r3, #1
 800dc90:	4413      	add	r3, r2
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	440b      	add	r3, r1
 800dc96:	3302      	adds	r3, #2
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d127      	bne.n	800dcee <ISOUDS_SwtSess+0x13e>
 800dc9e:	2300      	movs	r3, #0
 800dca0:	747b      	strb	r3, [r7, #17]
 800dca2:	2300      	movs	r3, #0
 800dca4:	81fb      	strh	r3, [r7, #14]
 800dca6:	e012      	b.n	800dcce <ISOUDS_SwtSess+0x11e>
 800dca8:	7d7a      	ldrb	r2, [r7, #21]
 800dcaa:	89f9      	ldrh	r1, [r7, #14]
 800dcac:	482e      	ldr	r0, [pc, #184]	; (800dd68 <ISOUDS_SwtSess+0x1b8>)
 800dcae:	4613      	mov	r3, r2
 800dcb0:	005b      	lsls	r3, r3, #1
 800dcb2:	4413      	add	r3, r2
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	4403      	add	r3, r0
 800dcb8:	440b      	add	r3, r1
 800dcba:	3304      	adds	r3, #4
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7ff fc36 	bl	800d530 <ISOUDS_GetSAStLevel>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	747b      	strb	r3, [r7, #17]
 800dcc8:	89fb      	ldrh	r3, [r7, #14]
 800dcca:	3301      	adds	r3, #1
 800dccc:	81fb      	strh	r3, [r7, #14]
 800dcce:	7d3a      	ldrb	r2, [r7, #20]
 800dcd0:	4925      	ldr	r1, [pc, #148]	; (800dd68 <ISOUDS_SwtSess+0x1b8>)
 800dcd2:	4613      	mov	r3, r2
 800dcd4:	005b      	lsls	r3, r3, #1
 800dcd6:	4413      	add	r3, r2
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	440b      	add	r3, r1
 800dcdc:	3303      	adds	r3, #3
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	89fa      	ldrh	r2, [r7, #14]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d202      	bcs.n	800dcee <ISOUDS_SwtSess+0x13e>
 800dce8:	7c7b      	ldrb	r3, [r7, #17]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d0dc      	beq.n	800dca8 <ISOUDS_SwtSess+0xf8>
 800dcee:	7c7b      	ldrb	r3, [r7, #17]
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	d120      	bne.n	800dd36 <ISOUDS_SwtSess+0x186>
 800dcf4:	7d7a      	ldrb	r2, [r7, #21]
 800dcf6:	491c      	ldr	r1, [pc, #112]	; (800dd68 <ISOUDS_SwtSess+0x1b8>)
 800dcf8:	4613      	mov	r3, r2
 800dcfa:	005b      	lsls	r3, r3, #1
 800dcfc:	4413      	add	r3, r2
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	440b      	add	r3, r1
 800dd02:	3308      	adds	r3, #8
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	6838      	ldr	r0, [r7, #0]
 800dd08:	4798      	blx	r3
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	737b      	strb	r3, [r7, #13]
 800dd0e:	7b7b      	ldrb	r3, [r7, #13]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d109      	bne.n	800dd28 <ISOUDS_SwtSess+0x178>
 800dd14:	7d7b      	ldrb	r3, [r7, #21]
 800dd16:	4a15      	ldr	r2, [pc, #84]	; (800dd6c <ISOUDS_SwtSess+0x1bc>)
 800dd18:	005b      	lsls	r3, r3, #1
 800dd1a:	4413      	add	r3, r2
 800dd1c:	785a      	ldrb	r2, [r3, #1]
 800dd1e:	4b14      	ldr	r3, [pc, #80]	; (800dd70 <ISOUDS_SwtSess+0x1c0>)
 800dd20:	701a      	strb	r2, [r3, #0]
 800dd22:	2301      	movs	r3, #1
 800dd24:	75fb      	strb	r3, [r7, #23]
 800dd26:	e01a      	b.n	800dd5e <ISOUDS_SwtSess+0x1ae>
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	2204      	movs	r2, #4
 800dd2c:	701a      	strb	r2, [r3, #0]
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	7b7a      	ldrb	r2, [r7, #13]
 800dd32:	709a      	strb	r2, [r3, #2]
 800dd34:	e013      	b.n	800dd5e <ISOUDS_SwtSess+0x1ae>
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	2204      	movs	r2, #4
 800dd3a:	701a      	strb	r2, [r3, #0]
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	2233      	movs	r2, #51	; 0x33
 800dd40:	709a      	strb	r2, [r3, #2]
 800dd42:	e00c      	b.n	800dd5e <ISOUDS_SwtSess+0x1ae>
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	2204      	movs	r2, #4
 800dd48:	701a      	strb	r2, [r3, #0]
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	227e      	movs	r2, #126	; 0x7e
 800dd4e:	709a      	strb	r2, [r3, #2]
 800dd50:	e005      	b.n	800dd5e <ISOUDS_SwtSess+0x1ae>
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	2204      	movs	r2, #4
 800dd56:	701a      	strb	r2, [r3, #0]
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	2212      	movs	r2, #18
 800dd5c:	709a      	strb	r2, [r3, #2]
 800dd5e:	7dfb      	ldrb	r3, [r7, #23]
 800dd60:	4618      	mov	r0, r3
 800dd62:	3718      	adds	r7, #24
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	2400024c 	.word	0x2400024c
 800dd6c:	08010f88 	.word	0x08010f88
 800dd70:	2400173c 	.word	0x2400173c

0800dd74 <ISOUDS_TrnsfrDa>:
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]
 800dd7e:	2300      	movs	r3, #0
 800dd80:	737b      	strb	r3, [r7, #13]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	f000 819f 	beq.w	800e0c8 <ISOUDS_TrnsfrDa+0x354>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	889b      	ldrh	r3, [r3, #4]
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	f240 8193 	bls.w	800e0ba <ISOUDS_TrnsfrDa+0x346>
 800dd94:	4b85      	ldr	r3, [pc, #532]	; (800dfac <ISOUDS_TrnsfrDa+0x238>)
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d106      	bne.n	800ddaa <ISOUDS_TrnsfrDa+0x36>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2224      	movs	r2, #36	; 0x24
 800dda0:	709a      	strb	r2, [r3, #2]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2204      	movs	r2, #4
 800dda6:	701a      	strb	r2, [r3, #0]
 800dda8:	e18e      	b.n	800e0c8 <ISOUDS_TrnsfrDa+0x354>
 800ddaa:	4b80      	ldr	r3, [pc, #512]	; (800dfac <ISOUDS_TrnsfrDa+0x238>)
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	2b03      	cmp	r3, #3
 800ddb0:	dc02      	bgt.n	800ddb8 <ISOUDS_TrnsfrDa+0x44>
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	dc05      	bgt.n	800ddc2 <ISOUDS_TrnsfrDa+0x4e>
 800ddb6:	e17c      	b.n	800e0b2 <ISOUDS_TrnsfrDa+0x33e>
 800ddb8:	3b04      	subs	r3, #4
 800ddba:	2b02      	cmp	r3, #2
 800ddbc:	f200 8179 	bhi.w	800e0b2 <ISOUDS_TrnsfrDa+0x33e>
 800ddc0:	e0d6      	b.n	800df70 <ISOUDS_TrnsfrDa+0x1fc>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	889b      	ldrh	r3, [r3, #4]
 800ddc6:	3b02      	subs	r3, #2
 800ddc8:	81fb      	strh	r3, [r7, #14]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	2b05      	cmp	r3, #5
 800ddd0:	d131      	bne.n	800de36 <ISOUDS_TrnsfrDa+0xc2>
 800ddd2:	f7f5 fa66 	bl	80032a2 <ISOUDS_GetTrnsfrReqstDwnldStat>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	737b      	strb	r3, [r7, #13]
 800ddda:	7b7b      	ldrb	r3, [r7, #13]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d123      	bne.n	800de28 <ISOUDS_TrnsfrDa+0xb4>
 800dde0:	89fa      	ldrh	r2, [r7, #14]
 800dde2:	4b73      	ldr	r3, [pc, #460]	; (800dfb0 <ISOUDS_TrnsfrDa+0x23c>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4413      	add	r3, r2
 800dde8:	4a71      	ldr	r2, [pc, #452]	; (800dfb0 <ISOUDS_TrnsfrDa+0x23c>)
 800ddea:	6013      	str	r3, [r2, #0]
 800ddec:	4b71      	ldr	r3, [pc, #452]	; (800dfb4 <ISOUDS_TrnsfrDa+0x240>)
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	89fb      	ldrh	r3, [r7, #14]
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	4a6f      	ldr	r2, [pc, #444]	; (800dfb4 <ISOUDS_TrnsfrDa+0x240>)
 800ddf6:	6013      	str	r3, [r2, #0]
 800ddf8:	4b6f      	ldr	r3, [pc, #444]	; (800dfb8 <ISOUDS_TrnsfrDa+0x244>)
 800ddfa:	781a      	ldrb	r2, [r3, #0]
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	701a      	strb	r2, [r3, #0]
 800de00:	4b6d      	ldr	r3, [pc, #436]	; (800dfb8 <ISOUDS_TrnsfrDa+0x244>)
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	3301      	adds	r3, #1
 800de06:	b2da      	uxtb	r2, r3
 800de08:	4b6b      	ldr	r3, [pc, #428]	; (800dfb8 <ISOUDS_TrnsfrDa+0x244>)
 800de0a:	701a      	strb	r2, [r3, #0]
 800de0c:	4b69      	ldr	r3, [pc, #420]	; (800dfb4 <ISOUDS_TrnsfrDa+0x240>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d102      	bne.n	800de1a <ISOUDS_TrnsfrDa+0xa6>
 800de14:	4b65      	ldr	r3, [pc, #404]	; (800dfac <ISOUDS_TrnsfrDa+0x238>)
 800de16:	2203      	movs	r2, #3
 800de18:	701a      	strb	r2, [r3, #0]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2202      	movs	r2, #2
 800de1e:	809a      	strh	r2, [r3, #4]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2203      	movs	r2, #3
 800de24:	701a      	strb	r2, [r3, #0]
 800de26:	e14f      	b.n	800e0c8 <ISOUDS_TrnsfrDa+0x354>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	7b7a      	ldrb	r2, [r7, #13]
 800de2c:	709a      	strb	r2, [r3, #2]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2205      	movs	r2, #5
 800de32:	701a      	strb	r2, [r3, #0]
 800de34:	e148      	b.n	800e0c8 <ISOUDS_TrnsfrDa+0x354>
 800de36:	4b5d      	ldr	r3, [pc, #372]	; (800dfac <ISOUDS_TrnsfrDa+0x238>)
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	2b03      	cmp	r3, #3
 800de3c:	d06d      	beq.n	800df1a <ISOUDS_TrnsfrDa+0x1a6>
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	781a      	ldrb	r2, [r3, #0]
 800de42:	4b5d      	ldr	r3, [pc, #372]	; (800dfb8 <ISOUDS_TrnsfrDa+0x244>)
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	429a      	cmp	r2, r3
 800de48:	d167      	bne.n	800df1a <ISOUDS_TrnsfrDa+0x1a6>
 800de4a:	89fa      	ldrh	r2, [r7, #14]
 800de4c:	4b59      	ldr	r3, [pc, #356]	; (800dfb4 <ISOUDS_TrnsfrDa+0x240>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	429a      	cmp	r2, r3
 800de52:	d85a      	bhi.n	800df0a <ISOUDS_TrnsfrDa+0x196>
 800de54:	f7f3 fc43 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800de58:	4603      	mov	r3, r0
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d151      	bne.n	800df02 <ISOUDS_TrnsfrDa+0x18e>
 800de5e:	f7f3 fc46 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 800de62:	4603      	mov	r3, r0
 800de64:	2b01      	cmp	r3, #1
 800de66:	d14c      	bne.n	800df02 <ISOUDS_TrnsfrDa+0x18e>
 800de68:	f7f3 fc49 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d147      	bne.n	800df02 <ISOUDS_TrnsfrDa+0x18e>
 800de72:	4b4f      	ldr	r3, [pc, #316]	; (800dfb0 <ISOUDS_TrnsfrDa+0x23c>)
 800de74:	6818      	ldr	r0, [r3, #0]
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	1c5a      	adds	r2, r3, #1
 800de7a:	89fb      	ldrh	r3, [r7, #14]
 800de7c:	4619      	mov	r1, r3
 800de7e:	f7f5 fa00 	bl	8003282 <ISOUDS_TransferDataDownloadReq>
 800de82:	4603      	mov	r3, r0
 800de84:	737b      	strb	r3, [r7, #13]
 800de86:	7b7b      	ldrb	r3, [r7, #13]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d126      	bne.n	800deda <ISOUDS_TrnsfrDa+0x166>
 800de8c:	89fa      	ldrh	r2, [r7, #14]
 800de8e:	4b48      	ldr	r3, [pc, #288]	; (800dfb0 <ISOUDS_TrnsfrDa+0x23c>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4413      	add	r3, r2
 800de94:	4a46      	ldr	r2, [pc, #280]	; (800dfb0 <ISOUDS_TrnsfrDa+0x23c>)
 800de96:	6013      	str	r3, [r2, #0]
 800de98:	4b46      	ldr	r3, [pc, #280]	; (800dfb4 <ISOUDS_TrnsfrDa+0x240>)
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	89fb      	ldrh	r3, [r7, #14]
 800de9e:	1ad3      	subs	r3, r2, r3
 800dea0:	4a44      	ldr	r2, [pc, #272]	; (800dfb4 <ISOUDS_TrnsfrDa+0x240>)
 800dea2:	6013      	str	r3, [r2, #0]
 800dea4:	4b44      	ldr	r3, [pc, #272]	; (800dfb8 <ISOUDS_TrnsfrDa+0x244>)
 800dea6:	781a      	ldrb	r2, [r3, #0]
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	701a      	strb	r2, [r3, #0]
 800deac:	4b42      	ldr	r3, [pc, #264]	; (800dfb8 <ISOUDS_TrnsfrDa+0x244>)
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	3301      	adds	r3, #1
 800deb2:	b2da      	uxtb	r2, r3
 800deb4:	4b40      	ldr	r3, [pc, #256]	; (800dfb8 <ISOUDS_TrnsfrDa+0x244>)
 800deb6:	701a      	strb	r2, [r3, #0]
 800deb8:	4b3e      	ldr	r3, [pc, #248]	; (800dfb4 <ISOUDS_TrnsfrDa+0x240>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d102      	bne.n	800dec6 <ISOUDS_TrnsfrDa+0x152>
 800dec0:	4b3a      	ldr	r3, [pc, #232]	; (800dfac <ISOUDS_TrnsfrDa+0x238>)
 800dec2:	2203      	movs	r2, #3
 800dec4:	701a      	strb	r2, [r3, #0]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2202      	movs	r2, #2
 800deca:	809a      	strh	r2, [r3, #4]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2203      	movs	r2, #3
 800ded0:	701a      	strb	r2, [r3, #0]
 800ded2:	4b36      	ldr	r3, [pc, #216]	; (800dfac <ISOUDS_TrnsfrDa+0x238>)
 800ded4:	2202      	movs	r2, #2
 800ded6:	701a      	strb	r2, [r3, #0]
 800ded8:	e01e      	b.n	800df18 <ISOUDS_TrnsfrDa+0x1a4>
 800deda:	7b7b      	ldrb	r3, [r7, #13]
 800dedc:	2b78      	cmp	r3, #120	; 0x78
 800dede:	d109      	bne.n	800def4 <ISOUDS_TrnsfrDa+0x180>
 800dee0:	4b32      	ldr	r3, [pc, #200]	; (800dfac <ISOUDS_TrnsfrDa+0x238>)
 800dee2:	2202      	movs	r2, #2
 800dee4:	701a      	strb	r2, [r3, #0]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2278      	movs	r2, #120	; 0x78
 800deea:	709a      	strb	r2, [r3, #2]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2204      	movs	r2, #4
 800def0:	701a      	strb	r2, [r3, #0]
 800def2:	e011      	b.n	800df18 <ISOUDS_TrnsfrDa+0x1a4>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	7b7a      	ldrb	r2, [r7, #13]
 800def8:	709a      	strb	r2, [r3, #2]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2204      	movs	r2, #4
 800defe:	701a      	strb	r2, [r3, #0]
 800df00:	e00a      	b.n	800df18 <ISOUDS_TrnsfrDa+0x1a4>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2222      	movs	r2, #34	; 0x22
 800df06:	709a      	strb	r2, [r3, #2]
 800df08:	e031      	b.n	800df6e <ISOUDS_TrnsfrDa+0x1fa>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2271      	movs	r2, #113	; 0x71
 800df0e:	709a      	strb	r2, [r3, #2]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2204      	movs	r2, #4
 800df14:	701a      	strb	r2, [r3, #0]
 800df16:	e02a      	b.n	800df6e <ISOUDS_TrnsfrDa+0x1fa>
 800df18:	e029      	b.n	800df6e <ISOUDS_TrnsfrDa+0x1fa>
 800df1a:	4b24      	ldr	r3, [pc, #144]	; (800dfac <ISOUDS_TrnsfrDa+0x238>)
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d013      	beq.n	800df4a <ISOUDS_TrnsfrDa+0x1d6>
 800df22:	4b25      	ldr	r3, [pc, #148]	; (800dfb8 <ISOUDS_TrnsfrDa+0x244>)
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	3b01      	subs	r3, #1
 800df28:	683a      	ldr	r2, [r7, #0]
 800df2a:	7812      	ldrb	r2, [r2, #0]
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d10c      	bne.n	800df4a <ISOUDS_TrnsfrDa+0x1d6>
 800df30:	4b21      	ldr	r3, [pc, #132]	; (800dfb8 <ISOUDS_TrnsfrDa+0x244>)
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	3b01      	subs	r3, #1
 800df36:	b2da      	uxtb	r2, r3
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	701a      	strb	r2, [r3, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2202      	movs	r2, #2
 800df40:	809a      	strh	r2, [r3, #4]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2203      	movs	r2, #3
 800df46:	701a      	strb	r2, [r3, #0]
 800df48:	e011      	b.n	800df6e <ISOUDS_TrnsfrDa+0x1fa>
 800df4a:	4b18      	ldr	r3, [pc, #96]	; (800dfac <ISOUDS_TrnsfrDa+0x238>)
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	2b03      	cmp	r3, #3
 800df50:	d106      	bne.n	800df60 <ISOUDS_TrnsfrDa+0x1ec>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2224      	movs	r2, #36	; 0x24
 800df56:	709a      	strb	r2, [r3, #2]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2204      	movs	r2, #4
 800df5c:	701a      	strb	r2, [r3, #0]
 800df5e:	e0b3      	b.n	800e0c8 <ISOUDS_TrnsfrDa+0x354>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2273      	movs	r2, #115	; 0x73
 800df64:	709a      	strb	r2, [r3, #2]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2204      	movs	r2, #4
 800df6a:	701a      	strb	r2, [r3, #0]
 800df6c:	e0ac      	b.n	800e0c8 <ISOUDS_TrnsfrDa+0x354>
 800df6e:	e0ab      	b.n	800e0c8 <ISOUDS_TrnsfrDa+0x354>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	889b      	ldrh	r3, [r3, #4]
 800df74:	2b02      	cmp	r3, #2
 800df76:	f040 8094 	bne.w	800e0a2 <ISOUDS_TrnsfrDa+0x32e>
 800df7a:	4b0c      	ldr	r3, [pc, #48]	; (800dfac <ISOUDS_TrnsfrDa+0x238>)
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	2b06      	cmp	r3, #6
 800df80:	d062      	beq.n	800e048 <ISOUDS_TrnsfrDa+0x2d4>
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	781a      	ldrb	r2, [r3, #0]
 800df86:	4b0d      	ldr	r3, [pc, #52]	; (800dfbc <ISOUDS_TrnsfrDa+0x248>)
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d15c      	bne.n	800e048 <ISOUDS_TrnsfrDa+0x2d4>
 800df8e:	f7f3 fbd6 	bl	800173e <ISOUDS_GetServerBuffSize>
 800df92:	4603      	mov	r3, r0
 800df94:	1e9a      	subs	r2, r3, #2
 800df96:	4b07      	ldr	r3, [pc, #28]	; (800dfb4 <ISOUDS_TrnsfrDa+0x240>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d210      	bcs.n	800dfc0 <ISOUDS_TrnsfrDa+0x24c>
 800df9e:	f7f3 fbce 	bl	800173e <ISOUDS_GetServerBuffSize>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	3b02      	subs	r3, #2
 800dfa8:	81fb      	strh	r3, [r7, #14]
 800dfaa:	e00c      	b.n	800dfc6 <ISOUDS_TrnsfrDa+0x252>
 800dfac:	240017ff 	.word	0x240017ff
 800dfb0:	24001804 	.word	0x24001804
 800dfb4:	24001800 	.word	0x24001800
 800dfb8:	240017fd 	.word	0x240017fd
 800dfbc:	240017fe 	.word	0x240017fe
 800dfc0:	4b43      	ldr	r3, [pc, #268]	; (800e0d0 <ISOUDS_TrnsfrDa+0x35c>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	81fb      	strh	r3, [r7, #14]
 800dfc6:	4b43      	ldr	r3, [pc, #268]	; (800e0d4 <ISOUDS_TrnsfrDa+0x360>)
 800dfc8:	6818      	ldr	r0, [r3, #0]
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	1c5a      	adds	r2, r3, #1
 800dfce:	89fb      	ldrh	r3, [r7, #14]
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	f7f5 f972 	bl	80032ba <ISOUDS_TranferDataUploadRequest>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	737b      	strb	r3, [r7, #13]
 800dfda:	7b7b      	ldrb	r3, [r7, #13]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d12c      	bne.n	800e03a <ISOUDS_TrnsfrDa+0x2c6>
 800dfe0:	4b3b      	ldr	r3, [pc, #236]	; (800e0d0 <ISOUDS_TrnsfrDa+0x35c>)
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	89fb      	ldrh	r3, [r7, #14]
 800dfe6:	1ad3      	subs	r3, r2, r3
 800dfe8:	4a39      	ldr	r2, [pc, #228]	; (800e0d0 <ISOUDS_TrnsfrDa+0x35c>)
 800dfea:	6013      	str	r3, [r2, #0]
 800dfec:	89fa      	ldrh	r2, [r7, #14]
 800dfee:	4b39      	ldr	r3, [pc, #228]	; (800e0d4 <ISOUDS_TrnsfrDa+0x360>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4413      	add	r3, r2
 800dff4:	4a37      	ldr	r2, [pc, #220]	; (800e0d4 <ISOUDS_TrnsfrDa+0x360>)
 800dff6:	6013      	str	r3, [r2, #0]
 800dff8:	4a37      	ldr	r2, [pc, #220]	; (800e0d8 <ISOUDS_TrnsfrDa+0x364>)
 800dffa:	89fb      	ldrh	r3, [r7, #14]
 800dffc:	8013      	strh	r3, [r2, #0]
 800dffe:	4b37      	ldr	r3, [pc, #220]	; (800e0dc <ISOUDS_TrnsfrDa+0x368>)
 800e000:	781a      	ldrb	r2, [r3, #0]
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	701a      	strb	r2, [r3, #0]
 800e006:	4b35      	ldr	r3, [pc, #212]	; (800e0dc <ISOUDS_TrnsfrDa+0x368>)
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	3301      	adds	r3, #1
 800e00c:	b2da      	uxtb	r2, r3
 800e00e:	4b33      	ldr	r3, [pc, #204]	; (800e0dc <ISOUDS_TrnsfrDa+0x368>)
 800e010:	701a      	strb	r2, [r3, #0]
 800e012:	4b2f      	ldr	r3, [pc, #188]	; (800e0d0 <ISOUDS_TrnsfrDa+0x35c>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d103      	bne.n	800e022 <ISOUDS_TrnsfrDa+0x2ae>
 800e01a:	4b31      	ldr	r3, [pc, #196]	; (800e0e0 <ISOUDS_TrnsfrDa+0x36c>)
 800e01c:	2206      	movs	r2, #6
 800e01e:	701a      	strb	r2, [r3, #0]
 800e020:	e002      	b.n	800e028 <ISOUDS_TrnsfrDa+0x2b4>
 800e022:	4b2f      	ldr	r3, [pc, #188]	; (800e0e0 <ISOUDS_TrnsfrDa+0x36c>)
 800e024:	2205      	movs	r2, #5
 800e026:	701a      	strb	r2, [r3, #0]
 800e028:	89fb      	ldrh	r3, [r7, #14]
 800e02a:	3302      	adds	r3, #2
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	809a      	strh	r2, [r3, #4]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2203      	movs	r2, #3
 800e036:	701a      	strb	r2, [r3, #0]
 800e038:	e03a      	b.n	800e0b0 <ISOUDS_TrnsfrDa+0x33c>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	7b7a      	ldrb	r2, [r7, #13]
 800e03e:	709a      	strb	r2, [r3, #2]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2205      	movs	r2, #5
 800e044:	701a      	strb	r2, [r3, #0]
 800e046:	e033      	b.n	800e0b0 <ISOUDS_TrnsfrDa+0x33c>
 800e048:	4b25      	ldr	r3, [pc, #148]	; (800e0e0 <ISOUDS_TrnsfrDa+0x36c>)
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	2b04      	cmp	r3, #4
 800e04e:	d016      	beq.n	800e07e <ISOUDS_TrnsfrDa+0x30a>
 800e050:	4b22      	ldr	r3, [pc, #136]	; (800e0dc <ISOUDS_TrnsfrDa+0x368>)
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	3b01      	subs	r3, #1
 800e056:	683a      	ldr	r2, [r7, #0]
 800e058:	7812      	ldrb	r2, [r2, #0]
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d10f      	bne.n	800e07e <ISOUDS_TrnsfrDa+0x30a>
 800e05e:	4b1f      	ldr	r3, [pc, #124]	; (800e0dc <ISOUDS_TrnsfrDa+0x368>)
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	3b01      	subs	r3, #1
 800e064:	b2da      	uxtb	r2, r3
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	701a      	strb	r2, [r3, #0]
 800e06a:	4b1b      	ldr	r3, [pc, #108]	; (800e0d8 <ISOUDS_TrnsfrDa+0x364>)
 800e06c:	881b      	ldrh	r3, [r3, #0]
 800e06e:	3302      	adds	r3, #2
 800e070:	b29a      	uxth	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	809a      	strh	r2, [r3, #4]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2203      	movs	r2, #3
 800e07a:	701a      	strb	r2, [r3, #0]
 800e07c:	e018      	b.n	800e0b0 <ISOUDS_TrnsfrDa+0x33c>
 800e07e:	4b18      	ldr	r3, [pc, #96]	; (800e0e0 <ISOUDS_TrnsfrDa+0x36c>)
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	2b06      	cmp	r3, #6
 800e084:	d106      	bne.n	800e094 <ISOUDS_TrnsfrDa+0x320>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2224      	movs	r2, #36	; 0x24
 800e08a:	709a      	strb	r2, [r3, #2]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2204      	movs	r2, #4
 800e090:	701a      	strb	r2, [r3, #0]
 800e092:	e019      	b.n	800e0c8 <ISOUDS_TrnsfrDa+0x354>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2273      	movs	r2, #115	; 0x73
 800e098:	709a      	strb	r2, [r3, #2]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2204      	movs	r2, #4
 800e09e:	701a      	strb	r2, [r3, #0]
 800e0a0:	e012      	b.n	800e0c8 <ISOUDS_TrnsfrDa+0x354>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2213      	movs	r2, #19
 800e0a6:	709a      	strb	r2, [r3, #2]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2204      	movs	r2, #4
 800e0ac:	701a      	strb	r2, [r3, #0]
 800e0ae:	e00b      	b.n	800e0c8 <ISOUDS_TrnsfrDa+0x354>
 800e0b0:	e00a      	b.n	800e0c8 <ISOUDS_TrnsfrDa+0x354>
 800e0b2:	4b0b      	ldr	r3, [pc, #44]	; (800e0e0 <ISOUDS_TrnsfrDa+0x36c>)
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	701a      	strb	r2, [r3, #0]
 800e0b8:	e006      	b.n	800e0c8 <ISOUDS_TrnsfrDa+0x354>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2213      	movs	r2, #19
 800e0be:	709a      	strb	r2, [r3, #2]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2204      	movs	r2, #4
 800e0c4:	701a      	strb	r2, [r3, #0]
 800e0c6:	e7ff      	b.n	800e0c8 <ISOUDS_TrnsfrDa+0x354>
 800e0c8:	bf00      	nop
 800e0ca:	3710      	adds	r7, #16
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	24001800 	.word	0x24001800
 800e0d4:	24001804 	.word	0x24001804
 800e0d8:	24001808 	.word	0x24001808
 800e0dc:	240017fe 	.word	0x240017fe
 800e0e0:	240017ff 	.word	0x240017ff

0800e0e4 <ISOUDS_TrnsfrDaExit>:
 800e0e4:	b480      	push	{r7}
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	4b0b      	ldr	r3, [pc, #44]	; (800e118 <ISOUDS_TrnsfrDaExit+0x34>)
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	701a      	strb	r2, [r3, #0]
 800e0ee:	4b0b      	ldr	r3, [pc, #44]	; (800e11c <ISOUDS_TrnsfrDaExit+0x38>)
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	601a      	str	r2, [r3, #0]
 800e0f4:	4b0a      	ldr	r3, [pc, #40]	; (800e120 <ISOUDS_TrnsfrDaExit+0x3c>)
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	601a      	str	r2, [r3, #0]
 800e0fa:	4b0a      	ldr	r3, [pc, #40]	; (800e124 <ISOUDS_TrnsfrDaExit+0x40>)
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	701a      	strb	r2, [r3, #0]
 800e100:	4b09      	ldr	r3, [pc, #36]	; (800e128 <ISOUDS_TrnsfrDaExit+0x44>)
 800e102:	2200      	movs	r2, #0
 800e104:	701a      	strb	r2, [r3, #0]
 800e106:	4b09      	ldr	r3, [pc, #36]	; (800e12c <ISOUDS_TrnsfrDaExit+0x48>)
 800e108:	2200      	movs	r2, #0
 800e10a:	801a      	strh	r2, [r3, #0]
 800e10c:	bf00      	nop
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr
 800e116:	bf00      	nop
 800e118:	240017ff 	.word	0x240017ff
 800e11c:	24001804 	.word	0x24001804
 800e120:	24001800 	.word	0x24001800
 800e124:	240017fd 	.word	0x240017fd
 800e128:	240017fe 	.word	0x240017fe
 800e12c:	24001808 	.word	0x24001808

0800e130 <ISOUDS_ReqTrnsfrDa>:
 800e130:	b480      	push	{r7}
 800e132:	b087      	sub	sp, #28
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	4613      	mov	r3, r2
 800e13c:	71fb      	strb	r3, [r7, #7]
 800e13e:	2300      	movs	r3, #0
 800e140:	75fb      	strb	r3, [r7, #23]
 800e142:	4b21      	ldr	r3, [pc, #132]	; (800e1c8 <ISOUDS_ReqTrnsfrDa+0x98>)
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	2b02      	cmp	r3, #2
 800e148:	d00b      	beq.n	800e162 <ISOUDS_ReqTrnsfrDa+0x32>
 800e14a:	4b1f      	ldr	r3, [pc, #124]	; (800e1c8 <ISOUDS_ReqTrnsfrDa+0x98>)
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	2b03      	cmp	r3, #3
 800e150:	d007      	beq.n	800e162 <ISOUDS_ReqTrnsfrDa+0x32>
 800e152:	4b1d      	ldr	r3, [pc, #116]	; (800e1c8 <ISOUDS_ReqTrnsfrDa+0x98>)
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	2b05      	cmp	r3, #5
 800e158:	d003      	beq.n	800e162 <ISOUDS_ReqTrnsfrDa+0x32>
 800e15a:	4b1b      	ldr	r3, [pc, #108]	; (800e1c8 <ISOUDS_ReqTrnsfrDa+0x98>)
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	2b06      	cmp	r3, #6
 800e160:	d102      	bne.n	800e168 <ISOUDS_ReqTrnsfrDa+0x38>
 800e162:	2300      	movs	r3, #0
 800e164:	75fb      	strb	r3, [r7, #23]
 800e166:	e027      	b.n	800e1b8 <ISOUDS_ReqTrnsfrDa+0x88>
 800e168:	79fb      	ldrb	r3, [r7, #7]
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	d109      	bne.n	800e182 <ISOUDS_ReqTrnsfrDa+0x52>
 800e16e:	4b16      	ldr	r3, [pc, #88]	; (800e1c8 <ISOUDS_ReqTrnsfrDa+0x98>)
 800e170:	2201      	movs	r2, #1
 800e172:	701a      	strb	r2, [r3, #0]
 800e174:	4b15      	ldr	r3, [pc, #84]	; (800e1cc <ISOUDS_ReqTrnsfrDa+0x9c>)
 800e176:	2201      	movs	r2, #1
 800e178:	701a      	strb	r2, [r3, #0]
 800e17a:	4b15      	ldr	r3, [pc, #84]	; (800e1d0 <ISOUDS_ReqTrnsfrDa+0xa0>)
 800e17c:	2200      	movs	r2, #0
 800e17e:	701a      	strb	r2, [r3, #0]
 800e180:	e00f      	b.n	800e1a2 <ISOUDS_ReqTrnsfrDa+0x72>
 800e182:	79fb      	ldrb	r3, [r7, #7]
 800e184:	2b04      	cmp	r3, #4
 800e186:	d109      	bne.n	800e19c <ISOUDS_ReqTrnsfrDa+0x6c>
 800e188:	4b0f      	ldr	r3, [pc, #60]	; (800e1c8 <ISOUDS_ReqTrnsfrDa+0x98>)
 800e18a:	2204      	movs	r2, #4
 800e18c:	701a      	strb	r2, [r3, #0]
 800e18e:	4b10      	ldr	r3, [pc, #64]	; (800e1d0 <ISOUDS_ReqTrnsfrDa+0xa0>)
 800e190:	2201      	movs	r2, #1
 800e192:	701a      	strb	r2, [r3, #0]
 800e194:	4b0d      	ldr	r3, [pc, #52]	; (800e1cc <ISOUDS_ReqTrnsfrDa+0x9c>)
 800e196:	2200      	movs	r2, #0
 800e198:	701a      	strb	r2, [r3, #0]
 800e19a:	e002      	b.n	800e1a2 <ISOUDS_ReqTrnsfrDa+0x72>
 800e19c:	4b0a      	ldr	r3, [pc, #40]	; (800e1c8 <ISOUDS_ReqTrnsfrDa+0x98>)
 800e19e:	2200      	movs	r2, #0
 800e1a0:	701a      	strb	r2, [r3, #0]
 800e1a2:	4a0c      	ldr	r2, [pc, #48]	; (800e1d4 <ISOUDS_ReqTrnsfrDa+0xa4>)
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6013      	str	r3, [r2, #0]
 800e1a8:	4a0b      	ldr	r2, [pc, #44]	; (800e1d8 <ISOUDS_ReqTrnsfrDa+0xa8>)
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	6013      	str	r3, [r2, #0]
 800e1ae:	4b0b      	ldr	r3, [pc, #44]	; (800e1dc <ISOUDS_ReqTrnsfrDa+0xac>)
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	801a      	strh	r2, [r3, #0]
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	75fb      	strb	r3, [r7, #23]
 800e1b8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	371c      	adds	r7, #28
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop
 800e1c8:	240017ff 	.word	0x240017ff
 800e1cc:	240017fd 	.word	0x240017fd
 800e1d0:	240017fe 	.word	0x240017fe
 800e1d4:	24001804 	.word	0x24001804
 800e1d8:	24001800 	.word	0x24001800
 800e1dc:	24001808 	.word	0x24001808

0800e1e0 <ISOUDS_ChkTrnsfrExit>:
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	4b0c      	ldr	r3, [pc, #48]	; (800e218 <ISOUDS_ChkTrnsfrExit+0x38>)
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d10a      	bne.n	800e204 <ISOUDS_ChkTrnsfrExit+0x24>
 800e1ee:	4b0b      	ldr	r3, [pc, #44]	; (800e21c <ISOUDS_ChkTrnsfrExit+0x3c>)
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d106      	bne.n	800e204 <ISOUDS_ChkTrnsfrExit+0x24>
 800e1f6:	4b0a      	ldr	r3, [pc, #40]	; (800e220 <ISOUDS_ChkTrnsfrExit+0x40>)
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d102      	bne.n	800e204 <ISOUDS_ChkTrnsfrExit+0x24>
 800e1fe:	2301      	movs	r3, #1
 800e200:	71fb      	strb	r3, [r7, #7]
 800e202:	e001      	b.n	800e208 <ISOUDS_ChkTrnsfrExit+0x28>
 800e204:	2300      	movs	r3, #0
 800e206:	71fb      	strb	r3, [r7, #7]
 800e208:	79fb      	ldrb	r3, [r7, #7]
 800e20a:	4618      	mov	r0, r3
 800e20c:	370c      	adds	r7, #12
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop
 800e218:	240017ff 	.word	0x240017ff
 800e21c:	240017fd 	.word	0x240017fd
 800e220:	240017fe 	.word	0x240017fe

0800e224 <ISOUDS_TrnsfrExit>:
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d02a      	beq.n	800e28a <ISOUDS_TrnsfrExit+0x66>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	889b      	ldrh	r3, [r3, #4]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d020      	beq.n	800e27e <ISOUDS_TrnsfrExit+0x5a>
 800e23c:	f7ff ffd0 	bl	800e1e0 <ISOUDS_ChkTrnsfrExit>
 800e240:	4603      	mov	r3, r0
 800e242:	2b00      	cmp	r3, #0
 800e244:	d114      	bne.n	800e270 <ISOUDS_TrnsfrExit+0x4c>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	889b      	ldrh	r3, [r3, #4]
 800e24a:	3b01      	subs	r3, #1
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	4619      	mov	r1, r3
 800e250:	6838      	ldr	r0, [r7, #0]
 800e252:	f7f5 f842 	bl	80032da <ISOUDS_TrnsfrExitInd>
 800e256:	4603      	mov	r3, r0
 800e258:	81fb      	strh	r3, [r7, #14]
 800e25a:	f7ff ff43 	bl	800e0e4 <ISOUDS_TrnsfrDaExit>
 800e25e:	89fb      	ldrh	r3, [r7, #14]
 800e260:	3301      	adds	r3, #1
 800e262:	b29a      	uxth	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	809a      	strh	r2, [r3, #4]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2203      	movs	r2, #3
 800e26c:	701a      	strb	r2, [r3, #0]
 800e26e:	e00c      	b.n	800e28a <ISOUDS_TrnsfrExit+0x66>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2224      	movs	r2, #36	; 0x24
 800e274:	709a      	strb	r2, [r3, #2]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2204      	movs	r2, #4
 800e27a:	701a      	strb	r2, [r3, #0]
 800e27c:	e005      	b.n	800e28a <ISOUDS_TrnsfrExit+0x66>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2213      	movs	r2, #19
 800e282:	709a      	strb	r2, [r3, #2]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2204      	movs	r2, #4
 800e288:	701a      	strb	r2, [r3, #0]
 800e28a:	bf00      	nop
 800e28c:	3710      	adds	r7, #16
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <ISOUDS_TstrPrsnt>:
 800e292:	b580      	push	{r7, lr}
 800e294:	b084      	sub	sp, #16
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
 800e29a:	6039      	str	r1, [r7, #0]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d02f      	beq.n	800e302 <ISOUDS_TstrPrsnt+0x70>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	889b      	ldrh	r3, [r3, #4]
 800e2a6:	2b02      	cmp	r3, #2
 800e2a8:	d125      	bne.n	800e2f6 <ISOUDS_TstrPrsnt+0x64>
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2b2:	73fb      	strb	r3, [r7, #15]
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e2bc:	73bb      	strb	r3, [r7, #14]
 800e2be:	7bfb      	ldrb	r3, [r7, #15]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d111      	bne.n	800e2e8 <ISOUDS_TstrPrsnt+0x56>
 800e2c4:	f7fd f930 	bl	800b528 <ISOUDS_ResetiS3Timer>
 800e2c8:	7bbb      	ldrb	r3, [r7, #14]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d109      	bne.n	800e2e2 <ISOUDS_TstrPrsnt+0x50>
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	7bfa      	ldrb	r2, [r7, #15]
 800e2d2:	701a      	strb	r2, [r3, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2202      	movs	r2, #2
 800e2d8:	809a      	strh	r2, [r3, #4]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2203      	movs	r2, #3
 800e2de:	701a      	strb	r2, [r3, #0]
 800e2e0:	e00f      	b.n	800e302 <ISOUDS_TstrPrsnt+0x70>
 800e2e2:	f7fd f829 	bl	800b338 <ISOUDS_ServerRst>
 800e2e6:	e00c      	b.n	800e302 <ISOUDS_TstrPrsnt+0x70>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2204      	movs	r2, #4
 800e2ec:	701a      	strb	r2, [r3, #0]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2212      	movs	r2, #18
 800e2f2:	709a      	strb	r2, [r3, #2]
 800e2f4:	e005      	b.n	800e302 <ISOUDS_TstrPrsnt+0x70>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2204      	movs	r2, #4
 800e2fa:	701a      	strb	r2, [r3, #0]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2213      	movs	r2, #19
 800e300:	709a      	strb	r2, [r3, #2]
 800e302:	bf00      	nop
 800e304:	3710      	adds	r7, #16
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
	...

0800e30c <ISOUDS_WrDaByID>:
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6039      	str	r1, [r7, #0]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	f000 80e3 	beq.w	800e4e4 <ISOUDS_WrDaByID+0x1d8>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	889b      	ldrh	r3, [r3, #4]
 800e322:	2b03      	cmp	r3, #3
 800e324:	f240 80d7 	bls.w	800e4d6 <ISOUDS_WrDaByID+0x1ca>
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	021b      	lsls	r3, r3, #8
 800e330:	b29a      	uxth	r2, r3
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	3301      	adds	r3, #1
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	b29b      	uxth	r3, r3
 800e33a:	4413      	add	r3, r2
 800e33c:	817b      	strh	r3, [r7, #10]
 800e33e:	897b      	ldrh	r3, [r7, #10]
 800e340:	4618      	mov	r0, r3
 800e342:	f000 f8d9 	bl	800e4f8 <ISOUDS_WrLookUp>
 800e346:	4603      	mov	r3, r0
 800e348:	2b01      	cmp	r3, #1
 800e34a:	f040 80bd 	bne.w	800e4c8 <ISOUDS_WrDaByID+0x1bc>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	889b      	ldrh	r3, [r3, #4]
 800e352:	4619      	mov	r1, r3
 800e354:	4b65      	ldr	r3, [pc, #404]	; (800e4ec <ISOUDS_WrDaByID+0x1e0>)
 800e356:	881b      	ldrh	r3, [r3, #0]
 800e358:	4a65      	ldr	r2, [pc, #404]	; (800e4f0 <ISOUDS_WrDaByID+0x1e4>)
 800e35a:	011b      	lsls	r3, r3, #4
 800e35c:	4413      	add	r3, r2
 800e35e:	3302      	adds	r3, #2
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	3303      	adds	r3, #3
 800e364:	4299      	cmp	r1, r3
 800e366:	f040 80a8 	bne.w	800e4ba <ISOUDS_WrDaByID+0x1ae>
 800e36a:	4b60      	ldr	r3, [pc, #384]	; (800e4ec <ISOUDS_WrDaByID+0x1e0>)
 800e36c:	881b      	ldrh	r3, [r3, #0]
 800e36e:	4a60      	ldr	r2, [pc, #384]	; (800e4f0 <ISOUDS_WrDaByID+0x1e4>)
 800e370:	011b      	lsls	r3, r3, #4
 800e372:	4413      	add	r3, r2
 800e374:	3308      	adds	r3, #8
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	461a      	mov	r2, r3
 800e37a:	4b5e      	ldr	r3, [pc, #376]	; (800e4f4 <ISOUDS_WrDaByID+0x1e8>)
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	fa42 f303 	asr.w	r3, r2, r3
 800e382:	f003 0301 	and.w	r3, r3, #1
 800e386:	2b00      	cmp	r3, #0
 800e388:	f000 8090 	beq.w	800e4ac <ISOUDS_WrDaByID+0x1a0>
 800e38c:	2301      	movs	r3, #1
 800e38e:	73fb      	strb	r3, [r7, #15]
 800e390:	4b56      	ldr	r3, [pc, #344]	; (800e4ec <ISOUDS_WrDaByID+0x1e0>)
 800e392:	881b      	ldrh	r3, [r3, #0]
 800e394:	4a56      	ldr	r2, [pc, #344]	; (800e4f0 <ISOUDS_WrDaByID+0x1e4>)
 800e396:	011b      	lsls	r3, r3, #4
 800e398:	4413      	add	r3, r2
 800e39a:	3309      	adds	r3, #9
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d124      	bne.n	800e3ec <ISOUDS_WrDaByID+0xe0>
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	73fb      	strb	r3, [r7, #15]
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	81bb      	strh	r3, [r7, #12]
 800e3aa:	e011      	b.n	800e3d0 <ISOUDS_WrDaByID+0xc4>
 800e3ac:	4b4f      	ldr	r3, [pc, #316]	; (800e4ec <ISOUDS_WrDaByID+0x1e0>)
 800e3ae:	881b      	ldrh	r3, [r3, #0]
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	89bb      	ldrh	r3, [r7, #12]
 800e3b4:	494e      	ldr	r1, [pc, #312]	; (800e4f0 <ISOUDS_WrDaByID+0x1e4>)
 800e3b6:	0112      	lsls	r2, r2, #4
 800e3b8:	440a      	add	r2, r1
 800e3ba:	4413      	add	r3, r2
 800e3bc:	330b      	adds	r3, #11
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7ff f8b5 	bl	800d530 <ISOUDS_GetSAStLevel>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	73fb      	strb	r3, [r7, #15]
 800e3ca:	89bb      	ldrh	r3, [r7, #12]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	81bb      	strh	r3, [r7, #12]
 800e3d0:	4b46      	ldr	r3, [pc, #280]	; (800e4ec <ISOUDS_WrDaByID+0x1e0>)
 800e3d2:	881b      	ldrh	r3, [r3, #0]
 800e3d4:	4a46      	ldr	r2, [pc, #280]	; (800e4f0 <ISOUDS_WrDaByID+0x1e4>)
 800e3d6:	011b      	lsls	r3, r3, #4
 800e3d8:	4413      	add	r3, r2
 800e3da:	330a      	adds	r3, #10
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	b29b      	uxth	r3, r3
 800e3e0:	89ba      	ldrh	r2, [r7, #12]
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d202      	bcs.n	800e3ec <ISOUDS_WrDaByID+0xe0>
 800e3e6:	7bfb      	ldrb	r3, [r7, #15]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d0df      	beq.n	800e3ac <ISOUDS_WrDaByID+0xa0>
 800e3ec:	7bfb      	ldrb	r3, [r7, #15]
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d155      	bne.n	800e49e <ISOUDS_WrDaByID+0x192>
 800e3f2:	f7f3 f974 	bl	80016de <ISOUDS_Get_VehicleSpeed_Check>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d149      	bne.n	800e490 <ISOUDS_WrDaByID+0x184>
 800e3fc:	f7f3 f977 	bl	80016ee <ISOUDS_Get_EngineSpeed_Check>
 800e400:	4603      	mov	r3, r0
 800e402:	2b01      	cmp	r3, #1
 800e404:	d144      	bne.n	800e490 <ISOUDS_WrDaByID+0x184>
 800e406:	f7f3 f97a 	bl	80016fe <ISOUDS_Get_Gear_Status_Check>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d13f      	bne.n	800e490 <ISOUDS_WrDaByID+0x184>
 800e410:	4b36      	ldr	r3, [pc, #216]	; (800e4ec <ISOUDS_WrDaByID+0x1e0>)
 800e412:	881b      	ldrh	r3, [r3, #0]
 800e414:	4a36      	ldr	r2, [pc, #216]	; (800e4f0 <ISOUDS_WrDaByID+0x1e4>)
 800e416:	011b      	lsls	r3, r3, #4
 800e418:	4413      	add	r3, r2
 800e41a:	3304      	adds	r3, #4
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d02f      	beq.n	800e482 <ISOUDS_WrDaByID+0x176>
 800e422:	4b32      	ldr	r3, [pc, #200]	; (800e4ec <ISOUDS_WrDaByID+0x1e0>)
 800e424:	881b      	ldrh	r3, [r3, #0]
 800e426:	4a32      	ldr	r2, [pc, #200]	; (800e4f0 <ISOUDS_WrDaByID+0x1e4>)
 800e428:	011b      	lsls	r3, r3, #4
 800e42a:	4413      	add	r3, r2
 800e42c:	3304      	adds	r3, #4
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	683a      	ldr	r2, [r7, #0]
 800e432:	1c90      	adds	r0, r2, #2
 800e434:	4a2d      	ldr	r2, [pc, #180]	; (800e4ec <ISOUDS_WrDaByID+0x1e0>)
 800e436:	8812      	ldrh	r2, [r2, #0]
 800e438:	492d      	ldr	r1, [pc, #180]	; (800e4f0 <ISOUDS_WrDaByID+0x1e4>)
 800e43a:	0112      	lsls	r2, r2, #4
 800e43c:	440a      	add	r2, r1
 800e43e:	3202      	adds	r2, #2
 800e440:	7812      	ldrb	r2, [r2, #0]
 800e442:	4611      	mov	r1, r2
 800e444:	4798      	blx	r3
 800e446:	4603      	mov	r3, r0
 800e448:	727b      	strb	r3, [r7, #9]
 800e44a:	7a7b      	ldrb	r3, [r7, #9]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d111      	bne.n	800e474 <ISOUDS_WrDaByID+0x168>
 800e450:	897b      	ldrh	r3, [r7, #10]
 800e452:	0a1b      	lsrs	r3, r3, #8
 800e454:	b29b      	uxth	r3, r3
 800e456:	b2da      	uxtb	r2, r3
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	701a      	strb	r2, [r3, #0]
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	3301      	adds	r3, #1
 800e460:	897a      	ldrh	r2, [r7, #10]
 800e462:	b2d2      	uxtb	r2, r2
 800e464:	701a      	strb	r2, [r3, #0]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2203      	movs	r2, #3
 800e46a:	809a      	strh	r2, [r3, #4]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2203      	movs	r2, #3
 800e470:	701a      	strb	r2, [r3, #0]
 800e472:	e037      	b.n	800e4e4 <ISOUDS_WrDaByID+0x1d8>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2204      	movs	r2, #4
 800e478:	701a      	strb	r2, [r3, #0]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	7a7a      	ldrb	r2, [r7, #9]
 800e47e:	709a      	strb	r2, [r3, #2]
 800e480:	e030      	b.n	800e4e4 <ISOUDS_WrDaByID+0x1d8>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2204      	movs	r2, #4
 800e486:	701a      	strb	r2, [r3, #0]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2231      	movs	r2, #49	; 0x31
 800e48c:	709a      	strb	r2, [r3, #2]
 800e48e:	e029      	b.n	800e4e4 <ISOUDS_WrDaByID+0x1d8>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2204      	movs	r2, #4
 800e494:	701a      	strb	r2, [r3, #0]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2222      	movs	r2, #34	; 0x22
 800e49a:	709a      	strb	r2, [r3, #2]
 800e49c:	e022      	b.n	800e4e4 <ISOUDS_WrDaByID+0x1d8>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2204      	movs	r2, #4
 800e4a2:	701a      	strb	r2, [r3, #0]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2233      	movs	r2, #51	; 0x33
 800e4a8:	709a      	strb	r2, [r3, #2]
 800e4aa:	e01b      	b.n	800e4e4 <ISOUDS_WrDaByID+0x1d8>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2204      	movs	r2, #4
 800e4b0:	701a      	strb	r2, [r3, #0]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2231      	movs	r2, #49	; 0x31
 800e4b6:	709a      	strb	r2, [r3, #2]
 800e4b8:	e014      	b.n	800e4e4 <ISOUDS_WrDaByID+0x1d8>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2204      	movs	r2, #4
 800e4be:	701a      	strb	r2, [r3, #0]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2213      	movs	r2, #19
 800e4c4:	709a      	strb	r2, [r3, #2]
 800e4c6:	e00d      	b.n	800e4e4 <ISOUDS_WrDaByID+0x1d8>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2204      	movs	r2, #4
 800e4cc:	701a      	strb	r2, [r3, #0]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2231      	movs	r2, #49	; 0x31
 800e4d2:	709a      	strb	r2, [r3, #2]
 800e4d4:	e006      	b.n	800e4e4 <ISOUDS_WrDaByID+0x1d8>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2204      	movs	r2, #4
 800e4da:	701a      	strb	r2, [r3, #0]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2213      	movs	r2, #19
 800e4e0:	709a      	strb	r2, [r3, #2]
 800e4e2:	e7ff      	b.n	800e4e4 <ISOUDS_WrDaByID+0x1d8>
 800e4e4:	bf00      	nop
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	2400180a 	.word	0x2400180a
 800e4f0:	08010f90 	.word	0x08010f90
 800e4f4:	2400173c 	.word	0x2400173c

0800e4f8 <ISOUDS_WrLookUp>:
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b084      	sub	sp, #16
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	4603      	mov	r3, r0
 800e500:	80fb      	strh	r3, [r7, #6]
 800e502:	2300      	movs	r3, #0
 800e504:	73fb      	strb	r3, [r7, #15]
 800e506:	2300      	movs	r3, #0
 800e508:	81bb      	strh	r3, [r7, #12]
 800e50a:	e00f      	b.n	800e52c <ISOUDS_WrLookUp+0x34>
 800e50c:	89bb      	ldrh	r3, [r7, #12]
 800e50e:	4a0f      	ldr	r2, [pc, #60]	; (800e54c <ISOUDS_WrLookUp+0x54>)
 800e510:	011b      	lsls	r3, r3, #4
 800e512:	4413      	add	r3, r2
 800e514:	881b      	ldrh	r3, [r3, #0]
 800e516:	88fa      	ldrh	r2, [r7, #6]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d104      	bne.n	800e526 <ISOUDS_WrLookUp+0x2e>
 800e51c:	2301      	movs	r3, #1
 800e51e:	73fb      	strb	r3, [r7, #15]
 800e520:	4a0b      	ldr	r2, [pc, #44]	; (800e550 <ISOUDS_WrLookUp+0x58>)
 800e522:	89bb      	ldrh	r3, [r7, #12]
 800e524:	8013      	strh	r3, [r2, #0]
 800e526:	89bb      	ldrh	r3, [r7, #12]
 800e528:	3301      	adds	r3, #1
 800e52a:	81bb      	strh	r3, [r7, #12]
 800e52c:	f7f4 fee4 	bl	80032f8 <ISOUDS_Get_WRCONFTABSIZE>
 800e530:	4603      	mov	r3, r0
 800e532:	461a      	mov	r2, r3
 800e534:	89bb      	ldrh	r3, [r7, #12]
 800e536:	4293      	cmp	r3, r2
 800e538:	d202      	bcs.n	800e540 <ISOUDS_WrLookUp+0x48>
 800e53a:	7bfb      	ldrb	r3, [r7, #15]
 800e53c:	2b01      	cmp	r3, #1
 800e53e:	d1e5      	bne.n	800e50c <ISOUDS_WrLookUp+0x14>
 800e540:	7bfb      	ldrb	r3, [r7, #15]
 800e542:	4618      	mov	r0, r3
 800e544:	3710      	adds	r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	08010f90 	.word	0x08010f90
 800e550:	2400180a 	.word	0x2400180a

0800e554 <ISOUDS_AUTHENInit>:
 800e554:	b480      	push	{r7}
 800e556:	af00      	add	r7, sp, #0
 800e558:	4b09      	ldr	r3, [pc, #36]	; (800e580 <ISOUDS_AUTHENInit+0x2c>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	701a      	strb	r2, [r3, #0]
 800e55e:	4b09      	ldr	r3, [pc, #36]	; (800e584 <ISOUDS_AUTHENInit+0x30>)
 800e560:	2200      	movs	r2, #0
 800e562:	701a      	strb	r2, [r3, #0]
 800e564:	4b08      	ldr	r3, [pc, #32]	; (800e588 <ISOUDS_AUTHENInit+0x34>)
 800e566:	2200      	movs	r2, #0
 800e568:	701a      	strb	r2, [r3, #0]
 800e56a:	4b08      	ldr	r3, [pc, #32]	; (800e58c <ISOUDS_AUTHENInit+0x38>)
 800e56c:	2200      	movs	r2, #0
 800e56e:	601a      	str	r2, [r3, #0]
 800e570:	4b07      	ldr	r3, [pc, #28]	; (800e590 <ISOUDS_AUTHENInit+0x3c>)
 800e572:	2200      	movs	r2, #0
 800e574:	701a      	strb	r2, [r3, #0]
 800e576:	bf00      	nop
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr
 800e580:	2400180d 	.word	0x2400180d
 800e584:	24000295 	.word	0x24000295
 800e588:	2400180c 	.word	0x2400180c
 800e58c:	24001810 	.word	0x24001810
 800e590:	2400180e 	.word	0x2400180e

0800e594 <ISOUDS_AUTHENChkTimer>:
 800e594:	b580      	push	{r7, lr}
 800e596:	af00      	add	r7, sp, #0
 800e598:	4b11      	ldr	r3, [pc, #68]	; (800e5e0 <ISOUDS_AUTHENChkTimer+0x4c>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d007      	beq.n	800e5b0 <ISOUDS_AUTHENChkTimer+0x1c>
 800e5a0:	f000 f826 	bl	800e5f0 <ISOUDS_AUTHENReset>
 800e5a4:	4b0f      	ldr	r3, [pc, #60]	; (800e5e4 <ISOUDS_AUTHENChkTimer+0x50>)
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	701a      	strb	r2, [r3, #0]
 800e5aa:	4b0d      	ldr	r3, [pc, #52]	; (800e5e0 <ISOUDS_AUTHENChkTimer+0x4c>)
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	601a      	str	r2, [r3, #0]
 800e5b0:	4b0d      	ldr	r3, [pc, #52]	; (800e5e8 <ISOUDS_AUTHENChkTimer+0x54>)
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d110      	bne.n	800e5da <ISOUDS_AUTHENChkTimer+0x46>
 800e5b8:	4b0c      	ldr	r3, [pc, #48]	; (800e5ec <ISOUDS_AUTHENChkTimer+0x58>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d905      	bls.n	800e5d0 <ISOUDS_AUTHENChkTimer+0x3c>
 800e5c4:	f000 f814 	bl	800e5f0 <ISOUDS_AUTHENReset>
 800e5c8:	4b08      	ldr	r3, [pc, #32]	; (800e5ec <ISOUDS_AUTHENChkTimer+0x58>)
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	601a      	str	r2, [r3, #0]
 800e5ce:	e004      	b.n	800e5da <ISOUDS_AUTHENChkTimer+0x46>
 800e5d0:	4b06      	ldr	r3, [pc, #24]	; (800e5ec <ISOUDS_AUTHENChkTimer+0x58>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	330a      	adds	r3, #10
 800e5d6:	4a05      	ldr	r2, [pc, #20]	; (800e5ec <ISOUDS_AUTHENChkTimer+0x58>)
 800e5d8:	6013      	str	r3, [r2, #0]
 800e5da:	bf00      	nop
 800e5dc:	bd80      	pop	{r7, pc}
 800e5de:	bf00      	nop
 800e5e0:	24001810 	.word	0x24001810
 800e5e4:	2400180e 	.word	0x2400180e
 800e5e8:	2400180d 	.word	0x2400180d
 800e5ec:	24001814 	.word	0x24001814

0800e5f0 <ISOUDS_AUTHENReset>:
 800e5f0:	b480      	push	{r7}
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	4b06      	ldr	r3, [pc, #24]	; (800e610 <ISOUDS_AUTHENReset+0x20>)
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	701a      	strb	r2, [r3, #0]
 800e5fa:	4b06      	ldr	r3, [pc, #24]	; (800e614 <ISOUDS_AUTHENReset+0x24>)
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	701a      	strb	r2, [r3, #0]
 800e600:	4b05      	ldr	r3, [pc, #20]	; (800e618 <ISOUDS_AUTHENReset+0x28>)
 800e602:	2200      	movs	r2, #0
 800e604:	701a      	strb	r2, [r3, #0]
 800e606:	bf00      	nop
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr
 800e610:	2400180d 	.word	0x2400180d
 800e614:	24000295 	.word	0x24000295
 800e618:	2400180c 	.word	0x2400180c

0800e61c <ISOUDS_GetAAUTHENTICATEStatus>:
 800e61c:	b480      	push	{r7}
 800e61e:	af00      	add	r7, sp, #0
 800e620:	4b03      	ldr	r3, [pc, #12]	; (800e630 <ISOUDS_GetAAUTHENTICATEStatus+0x14>)
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	4618      	mov	r0, r3
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	2400180d 	.word	0x2400180d

0800e634 <ISOUDS_DyLookUp>:
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	4603      	mov	r3, r0
 800e63c:	80fb      	strh	r3, [r7, #6]
 800e63e:	2300      	movs	r3, #0
 800e640:	73fb      	strb	r3, [r7, #15]
 800e642:	2300      	movs	r3, #0
 800e644:	73bb      	strb	r3, [r7, #14]
 800e646:	e011      	b.n	800e66c <ISOUDS_DyLookUp+0x38>
 800e648:	7bbb      	ldrb	r3, [r7, #14]
 800e64a:	4a10      	ldr	r2, [pc, #64]	; (800e68c <ISOUDS_DyLookUp+0x58>)
 800e64c:	216c      	movs	r1, #108	; 0x6c
 800e64e:	fb01 f303 	mul.w	r3, r1, r3
 800e652:	4413      	add	r3, r2
 800e654:	881b      	ldrh	r3, [r3, #0]
 800e656:	88fa      	ldrh	r2, [r7, #6]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d104      	bne.n	800e666 <ISOUDS_DyLookUp+0x32>
 800e65c:	2301      	movs	r3, #1
 800e65e:	73fb      	strb	r3, [r7, #15]
 800e660:	4a0b      	ldr	r2, [pc, #44]	; (800e690 <ISOUDS_DyLookUp+0x5c>)
 800e662:	7bbb      	ldrb	r3, [r7, #14]
 800e664:	7013      	strb	r3, [r2, #0]
 800e666:	7bbb      	ldrb	r3, [r7, #14]
 800e668:	3301      	adds	r3, #1
 800e66a:	73bb      	strb	r3, [r7, #14]
 800e66c:	f7f2 fddf 	bl	800122e <ISOUDS_Get_DYDDCONFTABSIZE>
 800e670:	4603      	mov	r3, r0
 800e672:	b2db      	uxtb	r3, r3
 800e674:	7bba      	ldrb	r2, [r7, #14]
 800e676:	429a      	cmp	r2, r3
 800e678:	d202      	bcs.n	800e680 <ISOUDS_DyLookUp+0x4c>
 800e67a:	7bfb      	ldrb	r3, [r7, #15]
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	d1e3      	bne.n	800e648 <ISOUDS_DyLookUp+0x14>
 800e680:	7bfb      	ldrb	r3, [r7, #15]
 800e682:	4618      	mov	r0, r3
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	240000ac 	.word	0x240000ac
 800e690:	24001818 	.word	0x24001818

0800e694 <ISOTP_Init>:
 800e694:	b480      	push	{r7}
 800e696:	af00      	add	r7, sp, #0
 800e698:	4b0e      	ldr	r3, [pc, #56]	; (800e6d4 <ISOTP_Init+0x40>)
 800e69a:	2200      	movs	r2, #0
 800e69c:	701a      	strb	r2, [r3, #0]
 800e69e:	4b0e      	ldr	r3, [pc, #56]	; (800e6d8 <ISOTP_Init+0x44>)
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	701a      	strb	r2, [r3, #0]
 800e6a4:	4b0d      	ldr	r3, [pc, #52]	; (800e6dc <ISOTP_Init+0x48>)
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	601a      	str	r2, [r3, #0]
 800e6aa:	4b0d      	ldr	r3, [pc, #52]	; (800e6e0 <ISOTP_Init+0x4c>)
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	601a      	str	r2, [r3, #0]
 800e6b0:	4b0c      	ldr	r3, [pc, #48]	; (800e6e4 <ISOTP_Init+0x50>)
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	601a      	str	r2, [r3, #0]
 800e6b6:	4b0c      	ldr	r3, [pc, #48]	; (800e6e8 <ISOTP_Init+0x54>)
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	701a      	strb	r2, [r3, #0]
 800e6bc:	4b0b      	ldr	r3, [pc, #44]	; (800e6ec <ISOTP_Init+0x58>)
 800e6be:	2200      	movs	r2, #0
 800e6c0:	801a      	strh	r2, [r3, #0]
 800e6c2:	4b0b      	ldr	r3, [pc, #44]	; (800e6f0 <ISOTP_Init+0x5c>)
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	801a      	strh	r2, [r3, #0]
 800e6c8:	bf00      	nop
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr
 800e6d2:	bf00      	nop
 800e6d4:	24001850 	.word	0x24001850
 800e6d8:	2400183c 	.word	0x2400183c
 800e6dc:	24001824 	.word	0x24001824
 800e6e0:	24001828 	.word	0x24001828
 800e6e4:	2400182c 	.word	0x2400182c
 800e6e8:	24001819 	.word	0x24001819
 800e6ec:	2400181e 	.word	0x2400181e
 800e6f0:	24001852 	.word	0x24001852

0800e6f4 <ISOTP_RxMsgCbk>:
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b086      	sub	sp, #24
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	607b      	str	r3, [r7, #4]
 800e6fe:	460b      	mov	r3, r1
 800e700:	72fb      	strb	r3, [r7, #11]
 800e702:	4613      	mov	r3, r2
 800e704:	72bb      	strb	r3, [r7, #10]
 800e706:	7afb      	ldrb	r3, [r7, #11]
 800e708:	4619      	mov	r1, r3
 800e70a:	68f8      	ldr	r0, [r7, #12]
 800e70c:	f7f2 fa80 	bl	8000c10 <ISOTP_CheckReqType>
 800e710:	4603      	mov	r3, r0
 800e712:	75fb      	strb	r3, [r7, #23]
 800e714:	f7f2 fb17 	bl	8000d46 <ISOTP_STPadding>
 800e718:	4603      	mov	r3, r0
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d102      	bne.n	800e724 <ISOTP_RxMsgCbk+0x30>
 800e71e:	7abb      	ldrb	r3, [r7, #10]
 800e720:	2b08      	cmp	r3, #8
 800e722:	d002      	beq.n	800e72a <ISOTP_RxMsgCbk+0x36>
 800e724:	7abb      	ldrb	r3, [r7, #10]
 800e726:	2b01      	cmp	r3, #1
 800e728:	d92f      	bls.n	800e78a <ISOTP_RxMsgCbk+0x96>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	f023 030f 	bic.w	r3, r3, #15
 800e732:	75bb      	strb	r3, [r7, #22]
 800e734:	7dbb      	ldrb	r3, [r7, #22]
 800e736:	2b30      	cmp	r3, #48	; 0x30
 800e738:	d01f      	beq.n	800e77a <ISOTP_RxMsgCbk+0x86>
 800e73a:	2b30      	cmp	r3, #48	; 0x30
 800e73c:	dc24      	bgt.n	800e788 <ISOTP_RxMsgCbk+0x94>
 800e73e:	2b20      	cmp	r3, #32
 800e740:	d014      	beq.n	800e76c <ISOTP_RxMsgCbk+0x78>
 800e742:	2b20      	cmp	r3, #32
 800e744:	dc20      	bgt.n	800e788 <ISOTP_RxMsgCbk+0x94>
 800e746:	2b00      	cmp	r3, #0
 800e748:	d002      	beq.n	800e750 <ISOTP_RxMsgCbk+0x5c>
 800e74a:	2b10      	cmp	r3, #16
 800e74c:	d007      	beq.n	800e75e <ISOTP_RxMsgCbk+0x6a>
 800e74e:	e01b      	b.n	800e788 <ISOTP_RxMsgCbk+0x94>
 800e750:	7dfa      	ldrb	r2, [r7, #23]
 800e752:	7abb      	ldrb	r3, [r7, #10]
 800e754:	6879      	ldr	r1, [r7, #4]
 800e756:	4618      	mov	r0, r3
 800e758:	f000 fa92 	bl	800ec80 <ISOTP_RxMsgCbk_SF>
 800e75c:	e015      	b.n	800e78a <ISOTP_RxMsgCbk+0x96>
 800e75e:	7dfa      	ldrb	r2, [r7, #23]
 800e760:	7abb      	ldrb	r3, [r7, #10]
 800e762:	6879      	ldr	r1, [r7, #4]
 800e764:	4618      	mov	r0, r3
 800e766:	f000 faf9 	bl	800ed5c <ISOTP_RxMsgCbk_FF>
 800e76a:	e00e      	b.n	800e78a <ISOTP_RxMsgCbk+0x96>
 800e76c:	7dfa      	ldrb	r2, [r7, #23]
 800e76e:	7abb      	ldrb	r3, [r7, #10]
 800e770:	6879      	ldr	r1, [r7, #4]
 800e772:	4618      	mov	r0, r3
 800e774:	f000 fba6 	bl	800eec4 <ISOTP_RxMsgCbk_CF>
 800e778:	e007      	b.n	800e78a <ISOTP_RxMsgCbk+0x96>
 800e77a:	7dfa      	ldrb	r2, [r7, #23]
 800e77c:	7abb      	ldrb	r3, [r7, #10]
 800e77e:	6879      	ldr	r1, [r7, #4]
 800e780:	4618      	mov	r0, r3
 800e782:	f000 fc75 	bl	800f070 <ISOTP_RxMsgCbk_FC>
 800e786:	e000      	b.n	800e78a <ISOTP_RxMsgCbk+0x96>
 800e788:	bf00      	nop
 800e78a:	bf00      	nop
 800e78c:	3718      	adds	r7, #24
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
	...

0800e794 <ISOTP_TxRequest>:
 800e794:	b580      	push	{r7, lr}
 800e796:	b084      	sub	sp, #16
 800e798:	af00      	add	r7, sp, #0
 800e79a:	4603      	mov	r3, r0
 800e79c:	6039      	str	r1, [r7, #0]
 800e79e:	80fb      	strh	r3, [r7, #6]
 800e7a0:	4b64      	ldr	r3, [pc, #400]	; (800e934 <ISOTP_TxRequest+0x1a0>)
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f040 80bd 	bne.w	800e924 <ISOTP_TxRequest+0x190>
 800e7aa:	f7f2 fac3 	bl	8000d34 <ISOTP_GetBUFFSIZE>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	88fa      	ldrh	r2, [r7, #6]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	f200 80b5 	bhi.w	800e924 <ISOTP_TxRequest+0x190>
 800e7ba:	88fb      	ldrh	r3, [r7, #6]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	f000 80b1 	beq.w	800e924 <ISOTP_TxRequest+0x190>
 800e7c2:	4b5d      	ldr	r3, [pc, #372]	; (800e938 <ISOTP_TxRequest+0x1a4>)
 800e7c4:	2203      	movs	r2, #3
 800e7c6:	701a      	strb	r2, [r3, #0]
 800e7c8:	4b5c      	ldr	r3, [pc, #368]	; (800e93c <ISOTP_TxRequest+0x1a8>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4a5c      	ldr	r2, [pc, #368]	; (800e940 <ISOTP_TxRequest+0x1ac>)
 800e7ce:	6013      	str	r3, [r2, #0]
 800e7d0:	4b5c      	ldr	r3, [pc, #368]	; (800e944 <ISOTP_TxRequest+0x1b0>)
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	601a      	str	r2, [r3, #0]
 800e7d6:	88fb      	ldrh	r3, [r7, #6]
 800e7d8:	2b07      	cmp	r3, #7
 800e7da:	d846      	bhi.n	800e86a <ISOTP_TxRequest+0xd6>
 800e7dc:	4b55      	ldr	r3, [pc, #340]	; (800e934 <ISOTP_TxRequest+0x1a0>)
 800e7de:	2202      	movs	r2, #2
 800e7e0:	701a      	strb	r2, [r3, #0]
 800e7e2:	4a59      	ldr	r2, [pc, #356]	; (800e948 <ISOTP_TxRequest+0x1b4>)
 800e7e4:	88fb      	ldrh	r3, [r7, #6]
 800e7e6:	8053      	strh	r3, [r2, #2]
 800e7e8:	88fb      	ldrh	r3, [r7, #6]
 800e7ea:	b2da      	uxtb	r2, r3
 800e7ec:	4b57      	ldr	r3, [pc, #348]	; (800e94c <ISOTP_TxRequest+0x1b8>)
 800e7ee:	715a      	strb	r2, [r3, #5]
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	81bb      	strh	r3, [r7, #12]
 800e7f4:	e015      	b.n	800e822 <ISOTP_TxRequest+0x8e>
 800e7f6:	89bb      	ldrh	r3, [r7, #12]
 800e7f8:	683a      	ldr	r2, [r7, #0]
 800e7fa:	441a      	add	r2, r3
 800e7fc:	89bb      	ldrh	r3, [r7, #12]
 800e7fe:	7811      	ldrb	r1, [r2, #0]
 800e800:	4a51      	ldr	r2, [pc, #324]	; (800e948 <ISOTP_TxRequest+0x1b4>)
 800e802:	4413      	add	r3, r2
 800e804:	460a      	mov	r2, r1
 800e806:	711a      	strb	r2, [r3, #4]
 800e808:	89bb      	ldrh	r3, [r7, #12]
 800e80a:	89ba      	ldrh	r2, [r7, #12]
 800e80c:	3201      	adds	r2, #1
 800e80e:	4611      	mov	r1, r2
 800e810:	4a4d      	ldr	r2, [pc, #308]	; (800e948 <ISOTP_TxRequest+0x1b4>)
 800e812:	4413      	add	r3, r2
 800e814:	791a      	ldrb	r2, [r3, #4]
 800e816:	4b4d      	ldr	r3, [pc, #308]	; (800e94c <ISOTP_TxRequest+0x1b8>)
 800e818:	440b      	add	r3, r1
 800e81a:	715a      	strb	r2, [r3, #5]
 800e81c:	89bb      	ldrh	r3, [r7, #12]
 800e81e:	3301      	adds	r3, #1
 800e820:	81bb      	strh	r3, [r7, #12]
 800e822:	89ba      	ldrh	r2, [r7, #12]
 800e824:	88fb      	ldrh	r3, [r7, #6]
 800e826:	429a      	cmp	r2, r3
 800e828:	d3e5      	bcc.n	800e7f6 <ISOTP_TxRequest+0x62>
 800e82a:	f7f2 fa8c 	bl	8000d46 <ISOTP_STPadding>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d10a      	bne.n	800e84a <ISOTP_TxRequest+0xb6>
 800e834:	88fb      	ldrh	r3, [r7, #6]
 800e836:	2b06      	cmp	r3, #6
 800e838:	d803      	bhi.n	800e842 <ISOTP_TxRequest+0xae>
 800e83a:	88fb      	ldrh	r3, [r7, #6]
 800e83c:	4618      	mov	r0, r3
 800e83e:	f000 fa01 	bl	800ec44 <ISOTP_PrfrmPad>
 800e842:	4b42      	ldr	r3, [pc, #264]	; (800e94c <ISOTP_TxRequest+0x1b8>)
 800e844:	2208      	movs	r2, #8
 800e846:	711a      	strb	r2, [r3, #4]
 800e848:	e005      	b.n	800e856 <ISOTP_TxRequest+0xc2>
 800e84a:	88fb      	ldrh	r3, [r7, #6]
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	3301      	adds	r3, #1
 800e850:	b2da      	uxtb	r2, r3
 800e852:	4b3e      	ldr	r3, [pc, #248]	; (800e94c <ISOTP_TxRequest+0x1b8>)
 800e854:	711a      	strb	r2, [r3, #4]
 800e856:	4b3e      	ldr	r3, [pc, #248]	; (800e950 <ISOTP_TxRequest+0x1bc>)
 800e858:	6818      	ldr	r0, [r3, #0]
 800e85a:	4b3e      	ldr	r3, [pc, #248]	; (800e954 <ISOTP_TxRequest+0x1c0>)
 800e85c:	7819      	ldrb	r1, [r3, #0]
 800e85e:	4b3b      	ldr	r3, [pc, #236]	; (800e94c <ISOTP_TxRequest+0x1b8>)
 800e860:	791a      	ldrb	r2, [r3, #4]
 800e862:	4b3d      	ldr	r3, [pc, #244]	; (800e958 <ISOTP_TxRequest+0x1c4>)
 800e864:	f7f2 fac4 	bl	8000df0 <ISOTP_HAL_CANMesgTxnReq_Stub>
 800e868:	e059      	b.n	800e91e <ISOTP_TxRequest+0x18a>
 800e86a:	4b32      	ldr	r3, [pc, #200]	; (800e934 <ISOTP_TxRequest+0x1a0>)
 800e86c:	2208      	movs	r2, #8
 800e86e:	701a      	strb	r2, [r3, #0]
 800e870:	4a35      	ldr	r2, [pc, #212]	; (800e948 <ISOTP_TxRequest+0x1b4>)
 800e872:	88fb      	ldrh	r3, [r7, #6]
 800e874:	8053      	strh	r3, [r2, #2]
 800e876:	4b34      	ldr	r3, [pc, #208]	; (800e948 <ISOTP_TxRequest+0x1b4>)
 800e878:	885b      	ldrh	r3, [r3, #2]
 800e87a:	0a1b      	lsrs	r3, r3, #8
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	b25b      	sxtb	r3, r3
 800e880:	f003 030f 	and.w	r3, r3, #15
 800e884:	b25b      	sxtb	r3, r3
 800e886:	f043 0310 	orr.w	r3, r3, #16
 800e88a:	b25b      	sxtb	r3, r3
 800e88c:	b2da      	uxtb	r2, r3
 800e88e:	4b2e      	ldr	r3, [pc, #184]	; (800e948 <ISOTP_TxRequest+0x1b4>)
 800e890:	701a      	strb	r2, [r3, #0]
 800e892:	4b2d      	ldr	r3, [pc, #180]	; (800e948 <ISOTP_TxRequest+0x1b4>)
 800e894:	2200      	movs	r2, #0
 800e896:	705a      	strb	r2, [r3, #1]
 800e898:	2300      	movs	r3, #0
 800e89a:	81bb      	strh	r3, [r7, #12]
 800e89c:	e00b      	b.n	800e8b6 <ISOTP_TxRequest+0x122>
 800e89e:	89bb      	ldrh	r3, [r7, #12]
 800e8a0:	683a      	ldr	r2, [r7, #0]
 800e8a2:	441a      	add	r2, r3
 800e8a4:	89bb      	ldrh	r3, [r7, #12]
 800e8a6:	7811      	ldrb	r1, [r2, #0]
 800e8a8:	4a27      	ldr	r2, [pc, #156]	; (800e948 <ISOTP_TxRequest+0x1b4>)
 800e8aa:	4413      	add	r3, r2
 800e8ac:	460a      	mov	r2, r1
 800e8ae:	711a      	strb	r2, [r3, #4]
 800e8b0:	89bb      	ldrh	r3, [r7, #12]
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	81bb      	strh	r3, [r7, #12]
 800e8b6:	89ba      	ldrh	r2, [r7, #12]
 800e8b8:	88fb      	ldrh	r3, [r7, #6]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d3ef      	bcc.n	800e89e <ISOTP_TxRequest+0x10a>
 800e8be:	4b1f      	ldr	r3, [pc, #124]	; (800e93c <ISOTP_TxRequest+0x1a8>)
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	4a26      	ldr	r2, [pc, #152]	; (800e95c <ISOTP_TxRequest+0x1c8>)
 800e8c4:	6013      	str	r3, [r2, #0]
 800e8c6:	4b1d      	ldr	r3, [pc, #116]	; (800e93c <ISOTP_TxRequest+0x1a8>)
 800e8c8:	689b      	ldr	r3, [r3, #8]
 800e8ca:	4a25      	ldr	r2, [pc, #148]	; (800e960 <ISOTP_TxRequest+0x1cc>)
 800e8cc:	6013      	str	r3, [r2, #0]
 800e8ce:	4b1e      	ldr	r3, [pc, #120]	; (800e948 <ISOTP_TxRequest+0x1b4>)
 800e8d0:	781a      	ldrb	r2, [r3, #0]
 800e8d2:	4b1e      	ldr	r3, [pc, #120]	; (800e94c <ISOTP_TxRequest+0x1b8>)
 800e8d4:	715a      	strb	r2, [r3, #5]
 800e8d6:	4b1c      	ldr	r3, [pc, #112]	; (800e948 <ISOTP_TxRequest+0x1b4>)
 800e8d8:	885b      	ldrh	r3, [r3, #2]
 800e8da:	b2da      	uxtb	r2, r3
 800e8dc:	4b1b      	ldr	r3, [pc, #108]	; (800e94c <ISOTP_TxRequest+0x1b8>)
 800e8de:	719a      	strb	r2, [r3, #6]
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	81bb      	strh	r3, [r7, #12]
 800e8e4:	e00c      	b.n	800e900 <ISOTP_TxRequest+0x16c>
 800e8e6:	89bb      	ldrh	r3, [r7, #12]
 800e8e8:	89ba      	ldrh	r2, [r7, #12]
 800e8ea:	3202      	adds	r2, #2
 800e8ec:	4611      	mov	r1, r2
 800e8ee:	4a16      	ldr	r2, [pc, #88]	; (800e948 <ISOTP_TxRequest+0x1b4>)
 800e8f0:	4413      	add	r3, r2
 800e8f2:	791a      	ldrb	r2, [r3, #4]
 800e8f4:	4b15      	ldr	r3, [pc, #84]	; (800e94c <ISOTP_TxRequest+0x1b8>)
 800e8f6:	440b      	add	r3, r1
 800e8f8:	715a      	strb	r2, [r3, #5]
 800e8fa:	89bb      	ldrh	r3, [r7, #12]
 800e8fc:	3301      	adds	r3, #1
 800e8fe:	81bb      	strh	r3, [r7, #12]
 800e900:	89bb      	ldrh	r3, [r7, #12]
 800e902:	2b05      	cmp	r3, #5
 800e904:	d9ef      	bls.n	800e8e6 <ISOTP_TxRequest+0x152>
 800e906:	4b11      	ldr	r3, [pc, #68]	; (800e94c <ISOTP_TxRequest+0x1b8>)
 800e908:	2208      	movs	r2, #8
 800e90a:	711a      	strb	r2, [r3, #4]
 800e90c:	4b10      	ldr	r3, [pc, #64]	; (800e950 <ISOTP_TxRequest+0x1bc>)
 800e90e:	6818      	ldr	r0, [r3, #0]
 800e910:	4b10      	ldr	r3, [pc, #64]	; (800e954 <ISOTP_TxRequest+0x1c0>)
 800e912:	7819      	ldrb	r1, [r3, #0]
 800e914:	4b0d      	ldr	r3, [pc, #52]	; (800e94c <ISOTP_TxRequest+0x1b8>)
 800e916:	791a      	ldrb	r2, [r3, #4]
 800e918:	4b0f      	ldr	r3, [pc, #60]	; (800e958 <ISOTP_TxRequest+0x1c4>)
 800e91a:	f7f2 fa69 	bl	8000df0 <ISOTP_HAL_CANMesgTxnReq_Stub>
 800e91e:	2301      	movs	r3, #1
 800e920:	73fb      	strb	r3, [r7, #15]
 800e922:	e001      	b.n	800e928 <ISOTP_TxRequest+0x194>
 800e924:	2300      	movs	r3, #0
 800e926:	73fb      	strb	r3, [r7, #15]
 800e928:	7bfb      	ldrb	r3, [r7, #15]
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	24001850 	.word	0x24001850
 800e938:	2400183c 	.word	0x2400183c
 800e93c:	08010b10 	.word	0x08010b10
 800e940:	24001830 	.word	0x24001830
 800e944:	24001824 	.word	0x24001824
 800e948:	24001854 	.word	0x24001854
 800e94c:	24001840 	.word	0x24001840
 800e950:	24000340 	.word	0x24000340
 800e954:	24000344 	.word	0x24000344
 800e958:	24001845 	.word	0x24001845
 800e95c:	24001834 	.word	0x24001834
 800e960:	24001838 	.word	0x24001838

0800e964 <ISOTP_Main>:
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	4b5a      	ldr	r3, [pc, #360]	; (800ead4 <ISOTP_Main+0x170>)
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	2b0b      	cmp	r3, #11
 800e970:	d16b      	bne.n	800ea4a <ISOTP_Main+0xe6>
 800e972:	4b59      	ldr	r3, [pc, #356]	; (800ead8 <ISOTP_Main+0x174>)
 800e974:	881b      	ldrh	r3, [r3, #0]
 800e976:	461a      	mov	r2, r3
 800e978:	4b58      	ldr	r3, [pc, #352]	; (800eadc <ISOTP_Main+0x178>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	f200 80a3 	bhi.w	800eac8 <ISOTP_Main+0x164>
 800e982:	4b57      	ldr	r3, [pc, #348]	; (800eae0 <ISOTP_Main+0x17c>)
 800e984:	781a      	ldrb	r2, [r3, #0]
 800e986:	4b57      	ldr	r3, [pc, #348]	; (800eae4 <ISOTP_Main+0x180>)
 800e988:	715a      	strb	r2, [r3, #5]
 800e98a:	4b55      	ldr	r3, [pc, #340]	; (800eae0 <ISOTP_Main+0x17c>)
 800e98c:	885b      	ldrh	r3, [r3, #2]
 800e98e:	2b06      	cmp	r3, #6
 800e990:	d82e      	bhi.n	800e9f0 <ISOTP_Main+0x8c>
 800e992:	2300      	movs	r3, #0
 800e994:	80fb      	strh	r3, [r7, #6]
 800e996:	e010      	b.n	800e9ba <ISOTP_Main+0x56>
 800e998:	4b53      	ldr	r3, [pc, #332]	; (800eae8 <ISOTP_Main+0x184>)
 800e99a:	881b      	ldrh	r3, [r3, #0]
 800e99c:	461a      	mov	r2, r3
 800e99e:	88fb      	ldrh	r3, [r7, #6]
 800e9a0:	4413      	add	r3, r2
 800e9a2:	88fa      	ldrh	r2, [r7, #6]
 800e9a4:	3201      	adds	r2, #1
 800e9a6:	4611      	mov	r1, r2
 800e9a8:	4a4d      	ldr	r2, [pc, #308]	; (800eae0 <ISOTP_Main+0x17c>)
 800e9aa:	4413      	add	r3, r2
 800e9ac:	791a      	ldrb	r2, [r3, #4]
 800e9ae:	4b4d      	ldr	r3, [pc, #308]	; (800eae4 <ISOTP_Main+0x180>)
 800e9b0:	440b      	add	r3, r1
 800e9b2:	715a      	strb	r2, [r3, #5]
 800e9b4:	88fb      	ldrh	r3, [r7, #6]
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	80fb      	strh	r3, [r7, #6]
 800e9ba:	4b49      	ldr	r3, [pc, #292]	; (800eae0 <ISOTP_Main+0x17c>)
 800e9bc:	885b      	ldrh	r3, [r3, #2]
 800e9be:	88fa      	ldrh	r2, [r7, #6]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d3e9      	bcc.n	800e998 <ISOTP_Main+0x34>
 800e9c4:	f7f2 f9bf 	bl	8000d46 <ISOTP_STPadding>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d108      	bne.n	800e9e0 <ISOTP_Main+0x7c>
 800e9ce:	4b44      	ldr	r3, [pc, #272]	; (800eae0 <ISOTP_Main+0x17c>)
 800e9d0:	885b      	ldrh	r3, [r3, #2]
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f000 f936 	bl	800ec44 <ISOTP_PrfrmPad>
 800e9d8:	4b42      	ldr	r3, [pc, #264]	; (800eae4 <ISOTP_Main+0x180>)
 800e9da:	2208      	movs	r2, #8
 800e9dc:	711a      	strb	r2, [r3, #4]
 800e9de:	e021      	b.n	800ea24 <ISOTP_Main+0xc0>
 800e9e0:	4b3f      	ldr	r3, [pc, #252]	; (800eae0 <ISOTP_Main+0x17c>)
 800e9e2:	885b      	ldrh	r3, [r3, #2]
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	b2da      	uxtb	r2, r3
 800e9ea:	4b3e      	ldr	r3, [pc, #248]	; (800eae4 <ISOTP_Main+0x180>)
 800e9ec:	711a      	strb	r2, [r3, #4]
 800e9ee:	e019      	b.n	800ea24 <ISOTP_Main+0xc0>
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	80fb      	strh	r3, [r7, #6]
 800e9f4:	e010      	b.n	800ea18 <ISOTP_Main+0xb4>
 800e9f6:	4b3c      	ldr	r3, [pc, #240]	; (800eae8 <ISOTP_Main+0x184>)
 800e9f8:	881b      	ldrh	r3, [r3, #0]
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	88fb      	ldrh	r3, [r7, #6]
 800e9fe:	441a      	add	r2, r3
 800ea00:	88fb      	ldrh	r3, [r7, #6]
 800ea02:	3301      	adds	r3, #1
 800ea04:	4936      	ldr	r1, [pc, #216]	; (800eae0 <ISOTP_Main+0x17c>)
 800ea06:	440a      	add	r2, r1
 800ea08:	7911      	ldrb	r1, [r2, #4]
 800ea0a:	4a36      	ldr	r2, [pc, #216]	; (800eae4 <ISOTP_Main+0x180>)
 800ea0c:	4413      	add	r3, r2
 800ea0e:	460a      	mov	r2, r1
 800ea10:	715a      	strb	r2, [r3, #5]
 800ea12:	88fb      	ldrh	r3, [r7, #6]
 800ea14:	3301      	adds	r3, #1
 800ea16:	80fb      	strh	r3, [r7, #6]
 800ea18:	88fb      	ldrh	r3, [r7, #6]
 800ea1a:	2b06      	cmp	r3, #6
 800ea1c:	d9eb      	bls.n	800e9f6 <ISOTP_Main+0x92>
 800ea1e:	4b31      	ldr	r3, [pc, #196]	; (800eae4 <ISOTP_Main+0x180>)
 800ea20:	2208      	movs	r2, #8
 800ea22:	711a      	strb	r2, [r3, #4]
 800ea24:	4b2d      	ldr	r3, [pc, #180]	; (800eadc <ISOTP_Main+0x178>)
 800ea26:	2200      	movs	r2, #0
 800ea28:	601a      	str	r2, [r3, #0]
 800ea2a:	4b30      	ldr	r3, [pc, #192]	; (800eaec <ISOTP_Main+0x188>)
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	601a      	str	r2, [r3, #0]
 800ea30:	4b28      	ldr	r3, [pc, #160]	; (800ead4 <ISOTP_Main+0x170>)
 800ea32:	220a      	movs	r2, #10
 800ea34:	701a      	strb	r2, [r3, #0]
 800ea36:	4b2e      	ldr	r3, [pc, #184]	; (800eaf0 <ISOTP_Main+0x18c>)
 800ea38:	6818      	ldr	r0, [r3, #0]
 800ea3a:	4b2e      	ldr	r3, [pc, #184]	; (800eaf4 <ISOTP_Main+0x190>)
 800ea3c:	7819      	ldrb	r1, [r3, #0]
 800ea3e:	4b29      	ldr	r3, [pc, #164]	; (800eae4 <ISOTP_Main+0x180>)
 800ea40:	791a      	ldrb	r2, [r3, #4]
 800ea42:	4b2d      	ldr	r3, [pc, #180]	; (800eaf8 <ISOTP_Main+0x194>)
 800ea44:	f7f2 f9d4 	bl	8000df0 <ISOTP_HAL_CANMesgTxnReq_Stub>
 800ea48:	e03e      	b.n	800eac8 <ISOTP_Main+0x164>
 800ea4a:	4b22      	ldr	r3, [pc, #136]	; (800ead4 <ISOTP_Main+0x170>)
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	2b05      	cmp	r3, #5
 800ea50:	d13a      	bne.n	800eac8 <ISOTP_Main+0x164>
 800ea52:	4b23      	ldr	r3, [pc, #140]	; (800eae0 <ISOTP_Main+0x17c>)
 800ea54:	781a      	ldrb	r2, [r3, #0]
 800ea56:	4b23      	ldr	r3, [pc, #140]	; (800eae4 <ISOTP_Main+0x180>)
 800ea58:	715a      	strb	r2, [r3, #5]
 800ea5a:	f7f2 f963 	bl	8000d24 <ISOTP_GetFCBS>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	461a      	mov	r2, r3
 800ea62:	4b20      	ldr	r3, [pc, #128]	; (800eae4 <ISOTP_Main+0x180>)
 800ea64:	719a      	strb	r2, [r3, #6]
 800ea66:	f7f2 f95d 	bl	8000d24 <ISOTP_GetFCBS>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	461a      	mov	r2, r3
 800ea70:	00d2      	lsls	r2, r2, #3
 800ea72:	1ad3      	subs	r3, r2, r3
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	4b21      	ldr	r3, [pc, #132]	; (800eafc <ISOTP_Main+0x198>)
 800ea78:	801a      	strh	r2, [r3, #0]
 800ea7a:	f7f2 f943 	bl	8000d04 <ISOTP_GetFCSTMIN>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	b2da      	uxtb	r2, r3
 800ea82:	4b18      	ldr	r3, [pc, #96]	; (800eae4 <ISOTP_Main+0x180>)
 800ea84:	71da      	strb	r2, [r3, #7]
 800ea86:	f7f2 f95e 	bl	8000d46 <ISOTP_STPadding>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d106      	bne.n	800ea9e <ISOTP_Main+0x13a>
 800ea90:	2002      	movs	r0, #2
 800ea92:	f000 f8d7 	bl	800ec44 <ISOTP_PrfrmPad>
 800ea96:	4b13      	ldr	r3, [pc, #76]	; (800eae4 <ISOTP_Main+0x180>)
 800ea98:	2208      	movs	r2, #8
 800ea9a:	711a      	strb	r2, [r3, #4]
 800ea9c:	e002      	b.n	800eaa4 <ISOTP_Main+0x140>
 800ea9e:	4b11      	ldr	r3, [pc, #68]	; (800eae4 <ISOTP_Main+0x180>)
 800eaa0:	2203      	movs	r2, #3
 800eaa2:	711a      	strb	r2, [r3, #4]
 800eaa4:	4b16      	ldr	r3, [pc, #88]	; (800eb00 <ISOTP_Main+0x19c>)
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	601a      	str	r2, [r3, #0]
 800eaaa:	4b10      	ldr	r3, [pc, #64]	; (800eaec <ISOTP_Main+0x188>)
 800eaac:	2201      	movs	r2, #1
 800eaae:	601a      	str	r2, [r3, #0]
 800eab0:	4b08      	ldr	r3, [pc, #32]	; (800ead4 <ISOTP_Main+0x170>)
 800eab2:	2204      	movs	r2, #4
 800eab4:	701a      	strb	r2, [r3, #0]
 800eab6:	4b0e      	ldr	r3, [pc, #56]	; (800eaf0 <ISOTP_Main+0x18c>)
 800eab8:	6818      	ldr	r0, [r3, #0]
 800eaba:	4b0e      	ldr	r3, [pc, #56]	; (800eaf4 <ISOTP_Main+0x190>)
 800eabc:	7819      	ldrb	r1, [r3, #0]
 800eabe:	4b09      	ldr	r3, [pc, #36]	; (800eae4 <ISOTP_Main+0x180>)
 800eac0:	791a      	ldrb	r2, [r3, #4]
 800eac2:	4b0d      	ldr	r3, [pc, #52]	; (800eaf8 <ISOTP_Main+0x194>)
 800eac4:	f7f2 f994 	bl	8000df0 <ISOTP_HAL_CANMesgTxnReq_Stub>
 800eac8:	f000 f852 	bl	800eb70 <ISOTP_iTmrMon>
 800eacc:	bf00      	nop
 800eace:	3708      	adds	r7, #8
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	24001850 	.word	0x24001850
 800ead8:	2400181c 	.word	0x2400181c
 800eadc:	2400182c 	.word	0x2400182c
 800eae0:	24001854 	.word	0x24001854
 800eae4:	24001840 	.word	0x24001840
 800eae8:	2400181e 	.word	0x2400181e
 800eaec:	24001824 	.word	0x24001824
 800eaf0:	24000340 	.word	0x24000340
 800eaf4:	24000344 	.word	0x24000344
 800eaf8:	24001845 	.word	0x24001845
 800eafc:	24001820 	.word	0x24001820
 800eb00:	24001828 	.word	0x24001828

0800eb04 <ISOTP_GetStatus>:
 800eb04:	b480      	push	{r7}
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	4b03      	ldr	r3, [pc, #12]	; (800eb18 <ISOTP_GetStatus+0x14>)
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop
 800eb18:	24001850 	.word	0x24001850

0800eb1c <ISOTP_Rst>:
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	4b0d      	ldr	r3, [pc, #52]	; (800eb58 <ISOTP_Rst+0x3c>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	801a      	strh	r2, [r3, #0]
 800eb26:	4b0d      	ldr	r3, [pc, #52]	; (800eb5c <ISOTP_Rst+0x40>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	701a      	strb	r2, [r3, #0]
 800eb2c:	4b0c      	ldr	r3, [pc, #48]	; (800eb60 <ISOTP_Rst+0x44>)
 800eb2e:	2200      	movs	r2, #0
 800eb30:	801a      	strh	r2, [r3, #0]
 800eb32:	4b0c      	ldr	r3, [pc, #48]	; (800eb64 <ISOTP_Rst+0x48>)
 800eb34:	2200      	movs	r2, #0
 800eb36:	701a      	strb	r2, [r3, #0]
 800eb38:	4b0a      	ldr	r3, [pc, #40]	; (800eb64 <ISOTP_Rst+0x48>)
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	705a      	strb	r2, [r3, #1]
 800eb3e:	4b09      	ldr	r3, [pc, #36]	; (800eb64 <ISOTP_Rst+0x48>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	805a      	strh	r2, [r3, #2]
 800eb44:	4b08      	ldr	r3, [pc, #32]	; (800eb68 <ISOTP_Rst+0x4c>)
 800eb46:	2200      	movs	r2, #0
 800eb48:	801a      	strh	r2, [r3, #0]
 800eb4a:	4b08      	ldr	r3, [pc, #32]	; (800eb6c <ISOTP_Rst+0x50>)
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	701a      	strb	r2, [r3, #0]
 800eb50:	f7f2 f940 	bl	8000dd4 <ISOTP_HAL_Reset>
 800eb54:	bf00      	nop
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	24001820 	.word	0x24001820
 800eb5c:	24001819 	.word	0x24001819
 800eb60:	2400181e 	.word	0x2400181e
 800eb64:	24001854 	.word	0x24001854
 800eb68:	24001852 	.word	0x24001852
 800eb6c:	24001850 	.word	0x24001850

0800eb70 <ISOTP_iTmrMon>:
 800eb70:	b580      	push	{r7, lr}
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	4b2c      	ldr	r3, [pc, #176]	; (800ec28 <ISOTP_iTmrMon+0xb8>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d018      	beq.n	800ebae <ISOTP_iTmrMon+0x3e>
 800eb7c:	4b2a      	ldr	r3, [pc, #168]	; (800ec28 <ISOTP_iTmrMon+0xb8>)
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	4b2a      	ldr	r3, [pc, #168]	; (800ec2c <ISOTP_iTmrMon+0xbc>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d30a      	bcc.n	800eb9e <ISOTP_iTmrMon+0x2e>
 800eb88:	f7ff ffc8 	bl	800eb1c <ISOTP_Rst>
 800eb8c:	f7f2 f929 	bl	8000de2 <ISOTP_HAL_TimeoutInd>
 800eb90:	4b25      	ldr	r3, [pc, #148]	; (800ec28 <ISOTP_iTmrMon+0xb8>)
 800eb92:	2200      	movs	r2, #0
 800eb94:	601a      	str	r2, [r3, #0]
 800eb96:	4b26      	ldr	r3, [pc, #152]	; (800ec30 <ISOTP_iTmrMon+0xc0>)
 800eb98:	2200      	movs	r2, #0
 800eb9a:	701a      	strb	r2, [r3, #0]
 800eb9c:	e007      	b.n	800ebae <ISOTP_iTmrMon+0x3e>
 800eb9e:	f7f2 f8a9 	bl	8000cf4 <ISOTP_GetSchedPeriod>
 800eba2:	4602      	mov	r2, r0
 800eba4:	4b20      	ldr	r3, [pc, #128]	; (800ec28 <ISOTP_iTmrMon+0xb8>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4413      	add	r3, r2
 800ebaa:	4a1f      	ldr	r2, [pc, #124]	; (800ec28 <ISOTP_iTmrMon+0xb8>)
 800ebac:	6013      	str	r3, [r2, #0]
 800ebae:	4b21      	ldr	r3, [pc, #132]	; (800ec34 <ISOTP_iTmrMon+0xc4>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d018      	beq.n	800ebe8 <ISOTP_iTmrMon+0x78>
 800ebb6:	4b1f      	ldr	r3, [pc, #124]	; (800ec34 <ISOTP_iTmrMon+0xc4>)
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	4b1f      	ldr	r3, [pc, #124]	; (800ec38 <ISOTP_iTmrMon+0xc8>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d30a      	bcc.n	800ebd8 <ISOTP_iTmrMon+0x68>
 800ebc2:	f7ff ffab 	bl	800eb1c <ISOTP_Rst>
 800ebc6:	f7f2 f90c 	bl	8000de2 <ISOTP_HAL_TimeoutInd>
 800ebca:	4b1a      	ldr	r3, [pc, #104]	; (800ec34 <ISOTP_iTmrMon+0xc4>)
 800ebcc:	2200      	movs	r2, #0
 800ebce:	601a      	str	r2, [r3, #0]
 800ebd0:	4b17      	ldr	r3, [pc, #92]	; (800ec30 <ISOTP_iTmrMon+0xc0>)
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	701a      	strb	r2, [r3, #0]
 800ebd6:	e007      	b.n	800ebe8 <ISOTP_iTmrMon+0x78>
 800ebd8:	f7f2 f88c 	bl	8000cf4 <ISOTP_GetSchedPeriod>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	4b15      	ldr	r3, [pc, #84]	; (800ec34 <ISOTP_iTmrMon+0xc4>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	4413      	add	r3, r2
 800ebe4:	4a13      	ldr	r2, [pc, #76]	; (800ec34 <ISOTP_iTmrMon+0xc4>)
 800ebe6:	6013      	str	r3, [r2, #0]
 800ebe8:	4b14      	ldr	r3, [pc, #80]	; (800ec3c <ISOTP_iTmrMon+0xcc>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d018      	beq.n	800ec22 <ISOTP_iTmrMon+0xb2>
 800ebf0:	4b12      	ldr	r3, [pc, #72]	; (800ec3c <ISOTP_iTmrMon+0xcc>)
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	4b12      	ldr	r3, [pc, #72]	; (800ec40 <ISOTP_iTmrMon+0xd0>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d30a      	bcc.n	800ec12 <ISOTP_iTmrMon+0xa2>
 800ebfc:	f7ff ff8e 	bl	800eb1c <ISOTP_Rst>
 800ec00:	f7f2 f8ef 	bl	8000de2 <ISOTP_HAL_TimeoutInd>
 800ec04:	4b0d      	ldr	r3, [pc, #52]	; (800ec3c <ISOTP_iTmrMon+0xcc>)
 800ec06:	2200      	movs	r2, #0
 800ec08:	601a      	str	r2, [r3, #0]
 800ec0a:	4b09      	ldr	r3, [pc, #36]	; (800ec30 <ISOTP_iTmrMon+0xc0>)
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	701a      	strb	r2, [r3, #0]
 800ec10:	e007      	b.n	800ec22 <ISOTP_iTmrMon+0xb2>
 800ec12:	f7f2 f86f 	bl	8000cf4 <ISOTP_GetSchedPeriod>
 800ec16:	4602      	mov	r2, r0
 800ec18:	4b08      	ldr	r3, [pc, #32]	; (800ec3c <ISOTP_iTmrMon+0xcc>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	4a07      	ldr	r2, [pc, #28]	; (800ec3c <ISOTP_iTmrMon+0xcc>)
 800ec20:	6013      	str	r3, [r2, #0]
 800ec22:	bf00      	nop
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	24001824 	.word	0x24001824
 800ec2c:	24001830 	.word	0x24001830
 800ec30:	2400183c 	.word	0x2400183c
 800ec34:	24001828 	.word	0x24001828
 800ec38:	24001834 	.word	0x24001834
 800ec3c:	2400182c 	.word	0x2400182c
 800ec40:	24001838 	.word	0x24001838

0800ec44 <ISOTP_PrfrmPad>:
 800ec44:	b590      	push	{r4, r7, lr}
 800ec46:	b085      	sub	sp, #20
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	80fb      	strh	r3, [r7, #6]
 800ec4e:	88fb      	ldrh	r3, [r7, #6]
 800ec50:	73fb      	strb	r3, [r7, #15]
 800ec52:	e00b      	b.n	800ec6c <ISOTP_PrfrmPad+0x28>
 800ec54:	7bfb      	ldrb	r3, [r7, #15]
 800ec56:	1c5c      	adds	r4, r3, #1
 800ec58:	f7f2 f85c 	bl	8000d14 <ISOTP_GetPADVal>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	461a      	mov	r2, r3
 800ec60:	4b06      	ldr	r3, [pc, #24]	; (800ec7c <ISOTP_PrfrmPad+0x38>)
 800ec62:	4423      	add	r3, r4
 800ec64:	715a      	strb	r2, [r3, #5]
 800ec66:	7bfb      	ldrb	r3, [r7, #15]
 800ec68:	3301      	adds	r3, #1
 800ec6a:	73fb      	strb	r3, [r7, #15]
 800ec6c:	7bfb      	ldrb	r3, [r7, #15]
 800ec6e:	2b06      	cmp	r3, #6
 800ec70:	d9f0      	bls.n	800ec54 <ISOTP_PrfrmPad+0x10>
 800ec72:	bf00      	nop
 800ec74:	bf00      	nop
 800ec76:	3714      	adds	r7, #20
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd90      	pop	{r4, r7, pc}
 800ec7c:	24001840 	.word	0x24001840

0800ec80 <ISOTP_RxMsgCbk_SF>:
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	4603      	mov	r3, r0
 800ec88:	6039      	str	r1, [r7, #0]
 800ec8a:	71fb      	strb	r3, [r7, #7]
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	71bb      	strb	r3, [r7, #6]
 800ec90:	4b2c      	ldr	r3, [pc, #176]	; (800ed44 <ISOTP_RxMsgCbk_SF+0xc4>)
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	2b03      	cmp	r3, #3
 800ec96:	d050      	beq.n	800ed3a <ISOTP_RxMsgCbk_SF+0xba>
 800ec98:	4b2a      	ldr	r3, [pc, #168]	; (800ed44 <ISOTP_RxMsgCbk_SF+0xc4>)
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	2b02      	cmp	r3, #2
 800ec9e:	d04c      	beq.n	800ed3a <ISOTP_RxMsgCbk_SF+0xba>
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	781b      	ldrb	r3, [r3, #0]
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	f003 030f 	and.w	r3, r3, #15
 800ecaa:	81bb      	strh	r3, [r7, #12]
 800ecac:	89bb      	ldrh	r3, [r7, #12]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d043      	beq.n	800ed3a <ISOTP_RxMsgCbk_SF+0xba>
 800ecb2:	89bb      	ldrh	r3, [r7, #12]
 800ecb4:	2b07      	cmp	r3, #7
 800ecb6:	d840      	bhi.n	800ed3a <ISOTP_RxMsgCbk_SF+0xba>
 800ecb8:	f7f2 f845 	bl	8000d46 <ISOTP_STPadding>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d004      	beq.n	800eccc <ISOTP_RxMsgCbk_SF+0x4c>
 800ecc2:	79fa      	ldrb	r2, [r7, #7]
 800ecc4:	89bb      	ldrh	r3, [r7, #12]
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d202      	bcs.n	800ecd2 <ISOTP_RxMsgCbk_SF+0x52>
 800eccc:	79fb      	ldrb	r3, [r7, #7]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d033      	beq.n	800ed3a <ISOTP_RxMsgCbk_SF+0xba>
 800ecd2:	4b1d      	ldr	r3, [pc, #116]	; (800ed48 <ISOTP_RxMsgCbk_SF+0xc8>)
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d00a      	beq.n	800ecf0 <ISOTP_RxMsgCbk_SF+0x70>
 800ecda:	4b1c      	ldr	r3, [pc, #112]	; (800ed4c <ISOTP_RxMsgCbk_SF+0xcc>)
 800ecdc:	2200      	movs	r2, #0
 800ecde:	601a      	str	r2, [r3, #0]
 800ece0:	4b1b      	ldr	r3, [pc, #108]	; (800ed50 <ISOTP_RxMsgCbk_SF+0xd0>)
 800ece2:	2200      	movs	r2, #0
 800ece4:	601a      	str	r2, [r3, #0]
 800ece6:	4b1b      	ldr	r3, [pc, #108]	; (800ed54 <ISOTP_RxMsgCbk_SF+0xd4>)
 800ece8:	2200      	movs	r2, #0
 800ecea:	601a      	str	r2, [r3, #0]
 800ecec:	f7ff ff16 	bl	800eb1c <ISOTP_Rst>
 800ecf0:	4b15      	ldr	r3, [pc, #84]	; (800ed48 <ISOTP_RxMsgCbk_SF+0xc8>)
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	701a      	strb	r2, [r3, #0]
 800ecf6:	4a18      	ldr	r2, [pc, #96]	; (800ed58 <ISOTP_RxMsgCbk_SF+0xd8>)
 800ecf8:	89bb      	ldrh	r3, [r7, #12]
 800ecfa:	8053      	strh	r3, [r2, #2]
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	81fb      	strh	r3, [r7, #14]
 800ed00:	e00c      	b.n	800ed1c <ISOTP_RxMsgCbk_SF+0x9c>
 800ed02:	89fb      	ldrh	r3, [r7, #14]
 800ed04:	3301      	adds	r3, #1
 800ed06:	683a      	ldr	r2, [r7, #0]
 800ed08:	441a      	add	r2, r3
 800ed0a:	89fb      	ldrh	r3, [r7, #14]
 800ed0c:	7811      	ldrb	r1, [r2, #0]
 800ed0e:	4a12      	ldr	r2, [pc, #72]	; (800ed58 <ISOTP_RxMsgCbk_SF+0xd8>)
 800ed10:	4413      	add	r3, r2
 800ed12:	460a      	mov	r2, r1
 800ed14:	711a      	strb	r2, [r3, #4]
 800ed16:	89fb      	ldrh	r3, [r7, #14]
 800ed18:	3301      	adds	r3, #1
 800ed1a:	81fb      	strh	r3, [r7, #14]
 800ed1c:	89fa      	ldrh	r2, [r7, #14]
 800ed1e:	89bb      	ldrh	r3, [r7, #12]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d3ee      	bcc.n	800ed02 <ISOTP_RxMsgCbk_SF+0x82>
 800ed24:	4b0c      	ldr	r3, [pc, #48]	; (800ed58 <ISOTP_RxMsgCbk_SF+0xd8>)
 800ed26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	79bb      	ldrb	r3, [r7, #6]
 800ed2e:	70d3      	strb	r3, [r2, #3]
 800ed30:	4809      	ldr	r0, [pc, #36]	; (800ed58 <ISOTP_RxMsgCbk_SF+0xd8>)
 800ed32:	f7f2 f811 	bl	8000d58 <ISOTP_HAL_MsgIndi>
 800ed36:	f7ff fef1 	bl	800eb1c <ISOTP_Rst>
 800ed3a:	bf00      	nop
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	2400183c 	.word	0x2400183c
 800ed48:	24001850 	.word	0x24001850
 800ed4c:	24001824 	.word	0x24001824
 800ed50:	24001828 	.word	0x24001828
 800ed54:	2400182c 	.word	0x2400182c
 800ed58:	24001854 	.word	0x24001854

0800ed5c <ISOTP_RxMsgCbk_FF>:
 800ed5c:	b590      	push	{r4, r7, lr}
 800ed5e:	b085      	sub	sp, #20
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	4603      	mov	r3, r0
 800ed64:	6039      	str	r1, [r7, #0]
 800ed66:	71fb      	strb	r3, [r7, #7]
 800ed68:	4613      	mov	r3, r2
 800ed6a:	71bb      	strb	r3, [r7, #6]
 800ed6c:	4b48      	ldr	r3, [pc, #288]	; (800ee90 <ISOTP_RxMsgCbk_FF+0x134>)
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	2b03      	cmp	r3, #3
 800ed72:	f000 8088 	beq.w	800ee86 <ISOTP_RxMsgCbk_FF+0x12a>
 800ed76:	4b46      	ldr	r3, [pc, #280]	; (800ee90 <ISOTP_RxMsgCbk_FF+0x134>)
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	2b02      	cmp	r3, #2
 800ed7c:	f000 8083 	beq.w	800ee86 <ISOTP_RxMsgCbk_FF+0x12a>
 800ed80:	f7f1 ffe1 	bl	8000d46 <ISOTP_STPadding>
 800ed84:	4603      	mov	r3, r0
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d002      	beq.n	800ed90 <ISOTP_RxMsgCbk_FF+0x34>
 800ed8a:	79fb      	ldrb	r3, [r7, #7]
 800ed8c:	2b08      	cmp	r3, #8
 800ed8e:	d002      	beq.n	800ed96 <ISOTP_RxMsgCbk_FF+0x3a>
 800ed90:	79fb      	ldrb	r3, [r7, #7]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d077      	beq.n	800ee86 <ISOTP_RxMsgCbk_FF+0x12a>
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	021b      	lsls	r3, r3, #8
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800eda4:	b29a      	uxth	r2, r3
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	3301      	adds	r3, #1
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	b29b      	uxth	r3, r3
 800edae:	4413      	add	r3, r2
 800edb0:	81bb      	strh	r3, [r7, #12]
 800edb2:	89bc      	ldrh	r4, [r7, #12]
 800edb4:	f7f1 ffbe 	bl	8000d34 <ISOTP_GetBUFFSIZE>
 800edb8:	4603      	mov	r3, r0
 800edba:	429c      	cmp	r4, r3
 800edbc:	d861      	bhi.n	800ee82 <ISOTP_RxMsgCbk_FF+0x126>
 800edbe:	89bb      	ldrh	r3, [r7, #12]
 800edc0:	2b07      	cmp	r3, #7
 800edc2:	d95b      	bls.n	800ee7c <ISOTP_RxMsgCbk_FF+0x120>
 800edc4:	4b33      	ldr	r3, [pc, #204]	; (800ee94 <ISOTP_RxMsgCbk_FF+0x138>)
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00a      	beq.n	800ede2 <ISOTP_RxMsgCbk_FF+0x86>
 800edcc:	4b32      	ldr	r3, [pc, #200]	; (800ee98 <ISOTP_RxMsgCbk_FF+0x13c>)
 800edce:	2200      	movs	r2, #0
 800edd0:	601a      	str	r2, [r3, #0]
 800edd2:	4b32      	ldr	r3, [pc, #200]	; (800ee9c <ISOTP_RxMsgCbk_FF+0x140>)
 800edd4:	2200      	movs	r2, #0
 800edd6:	601a      	str	r2, [r3, #0]
 800edd8:	4b31      	ldr	r3, [pc, #196]	; (800eea0 <ISOTP_RxMsgCbk_FF+0x144>)
 800edda:	2200      	movs	r2, #0
 800eddc:	601a      	str	r2, [r3, #0]
 800edde:	f7ff fe9d 	bl	800eb1c <ISOTP_Rst>
 800ede2:	4a30      	ldr	r2, [pc, #192]	; (800eea4 <ISOTP_RxMsgCbk_FF+0x148>)
 800ede4:	89bb      	ldrh	r3, [r7, #12]
 800ede6:	8053      	strh	r3, [r2, #2]
 800ede8:	4a2f      	ldr	r2, [pc, #188]	; (800eea8 <ISOTP_RxMsgCbk_FF+0x14c>)
 800edea:	89bb      	ldrh	r3, [r7, #12]
 800edec:	8013      	strh	r3, [r2, #0]
 800edee:	4b2d      	ldr	r3, [pc, #180]	; (800eea4 <ISOTP_RxMsgCbk_FF+0x148>)
 800edf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800edf4:	461a      	mov	r2, r3
 800edf6:	79bb      	ldrb	r3, [r7, #6]
 800edf8:	70d3      	strb	r3, [r2, #3]
 800edfa:	482a      	ldr	r0, [pc, #168]	; (800eea4 <ISOTP_RxMsgCbk_FF+0x148>)
 800edfc:	f7f1 ffe0 	bl	8000dc0 <ISOTP_HAL_FFIndi>
 800ee00:	4b23      	ldr	r3, [pc, #140]	; (800ee90 <ISOTP_RxMsgCbk_FF+0x134>)
 800ee02:	2201      	movs	r2, #1
 800ee04:	701a      	strb	r2, [r3, #0]
 800ee06:	2300      	movs	r3, #0
 800ee08:	81fb      	strh	r3, [r7, #14]
 800ee0a:	e00c      	b.n	800ee26 <ISOTP_RxMsgCbk_FF+0xca>
 800ee0c:	89fb      	ldrh	r3, [r7, #14]
 800ee0e:	3302      	adds	r3, #2
 800ee10:	683a      	ldr	r2, [r7, #0]
 800ee12:	441a      	add	r2, r3
 800ee14:	89fb      	ldrh	r3, [r7, #14]
 800ee16:	7811      	ldrb	r1, [r2, #0]
 800ee18:	4a22      	ldr	r2, [pc, #136]	; (800eea4 <ISOTP_RxMsgCbk_FF+0x148>)
 800ee1a:	4413      	add	r3, r2
 800ee1c:	460a      	mov	r2, r1
 800ee1e:	711a      	strb	r2, [r3, #4]
 800ee20:	89fb      	ldrh	r3, [r7, #14]
 800ee22:	3301      	adds	r3, #1
 800ee24:	81fb      	strh	r3, [r7, #14]
 800ee26:	89fb      	ldrh	r3, [r7, #14]
 800ee28:	2b05      	cmp	r3, #5
 800ee2a:	d9ef      	bls.n	800ee0c <ISOTP_RxMsgCbk_FF+0xb0>
 800ee2c:	4a1f      	ldr	r2, [pc, #124]	; (800eeac <ISOTP_RxMsgCbk_FF+0x150>)
 800ee2e:	89fb      	ldrh	r3, [r7, #14]
 800ee30:	8013      	strh	r3, [r2, #0]
 800ee32:	4b1c      	ldr	r3, [pc, #112]	; (800eea4 <ISOTP_RxMsgCbk_FF+0x148>)
 800ee34:	885b      	ldrh	r3, [r3, #2]
 800ee36:	3b06      	subs	r3, #6
 800ee38:	b29a      	uxth	r2, r3
 800ee3a:	4b1a      	ldr	r3, [pc, #104]	; (800eea4 <ISOTP_RxMsgCbk_FF+0x148>)
 800ee3c:	805a      	strh	r2, [r3, #2]
 800ee3e:	4b19      	ldr	r3, [pc, #100]	; (800eea4 <ISOTP_RxMsgCbk_FF+0x148>)
 800ee40:	2200      	movs	r2, #0
 800ee42:	705a      	strb	r2, [r3, #1]
 800ee44:	4b17      	ldr	r3, [pc, #92]	; (800eea4 <ISOTP_RxMsgCbk_FF+0x148>)
 800ee46:	2230      	movs	r2, #48	; 0x30
 800ee48:	701a      	strb	r2, [r3, #0]
 800ee4a:	4b19      	ldr	r3, [pc, #100]	; (800eeb0 <ISOTP_RxMsgCbk_FF+0x154>)
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	4a19      	ldr	r2, [pc, #100]	; (800eeb4 <ISOTP_RxMsgCbk_FF+0x158>)
 800ee50:	6013      	str	r3, [r2, #0]
 800ee52:	4b17      	ldr	r3, [pc, #92]	; (800eeb0 <ISOTP_RxMsgCbk_FF+0x154>)
 800ee54:	691b      	ldr	r3, [r3, #16]
 800ee56:	4a18      	ldr	r2, [pc, #96]	; (800eeb8 <ISOTP_RxMsgCbk_FF+0x15c>)
 800ee58:	6013      	str	r3, [r2, #0]
 800ee5a:	4b15      	ldr	r3, [pc, #84]	; (800eeb0 <ISOTP_RxMsgCbk_FF+0x154>)
 800ee5c:	695b      	ldr	r3, [r3, #20]
 800ee5e:	4a17      	ldr	r2, [pc, #92]	; (800eebc <ISOTP_RxMsgCbk_FF+0x160>)
 800ee60:	6013      	str	r3, [r2, #0]
 800ee62:	4b0e      	ldr	r3, [pc, #56]	; (800ee9c <ISOTP_RxMsgCbk_FF+0x140>)
 800ee64:	2201      	movs	r2, #1
 800ee66:	601a      	str	r2, [r3, #0]
 800ee68:	4b0a      	ldr	r3, [pc, #40]	; (800ee94 <ISOTP_RxMsgCbk_FF+0x138>)
 800ee6a:	2205      	movs	r2, #5
 800ee6c:	701a      	strb	r2, [r3, #0]
 800ee6e:	2303      	movs	r3, #3
 800ee70:	4a13      	ldr	r2, [pc, #76]	; (800eec0 <ISOTP_RxMsgCbk_FF+0x164>)
 800ee72:	4611      	mov	r1, r2
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7ff fc8d 	bl	800e794 <ISOTP_TxRequest>
 800ee7a:	e004      	b.n	800ee86 <ISOTP_RxMsgCbk_FF+0x12a>
 800ee7c:	f7ff fe4e 	bl	800eb1c <ISOTP_Rst>
 800ee80:	e001      	b.n	800ee86 <ISOTP_RxMsgCbk_FF+0x12a>
 800ee82:	f7ff fe4b 	bl	800eb1c <ISOTP_Rst>
 800ee86:	bf00      	nop
 800ee88:	3714      	adds	r7, #20
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd90      	pop	{r4, r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	2400183c 	.word	0x2400183c
 800ee94:	24001850 	.word	0x24001850
 800ee98:	24001824 	.word	0x24001824
 800ee9c:	24001828 	.word	0x24001828
 800eea0:	2400182c 	.word	0x2400182c
 800eea4:	24001854 	.word	0x24001854
 800eea8:	24001852 	.word	0x24001852
 800eeac:	2400181e 	.word	0x2400181e
 800eeb0:	08010b10 	.word	0x08010b10
 800eeb4:	24001830 	.word	0x24001830
 800eeb8:	24001834 	.word	0x24001834
 800eebc:	24001838 	.word	0x24001838
 800eec0:	24000298 	.word	0x24000298

0800eec4 <ISOTP_RxMsgCbk_CF>:
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b084      	sub	sp, #16
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	4603      	mov	r3, r0
 800eecc:	6039      	str	r1, [r7, #0]
 800eece:	71fb      	strb	r3, [r7, #7]
 800eed0:	4613      	mov	r3, r2
 800eed2:	71bb      	strb	r3, [r7, #6]
 800eed4:	2300      	movs	r3, #0
 800eed6:	737b      	strb	r3, [r7, #13]
 800eed8:	4b5d      	ldr	r3, [pc, #372]	; (800f050 <ISOTP_RxMsgCbk_CF+0x18c>)
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	2b01      	cmp	r3, #1
 800eede:	f040 80b2 	bne.w	800f046 <ISOTP_RxMsgCbk_CF+0x182>
 800eee2:	4b5c      	ldr	r3, [pc, #368]	; (800f054 <ISOTP_RxMsgCbk_CF+0x190>)
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	2b06      	cmp	r3, #6
 800eee8:	f040 80ad 	bne.w	800f046 <ISOTP_RxMsgCbk_CF+0x182>
 800eeec:	f7f1 ff2b 	bl	8000d46 <ISOTP_STPadding>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d014      	beq.n	800ef20 <ISOTP_RxMsgCbk_CF+0x5c>
 800eef6:	2300      	movs	r3, #0
 800eef8:	737b      	strb	r3, [r7, #13]
 800eefa:	4b57      	ldr	r3, [pc, #348]	; (800f058 <ISOTP_RxMsgCbk_CF+0x194>)
 800eefc:	885b      	ldrh	r3, [r3, #2]
 800eefe:	2b07      	cmp	r3, #7
 800ef00:	d809      	bhi.n	800ef16 <ISOTP_RxMsgCbk_CF+0x52>
 800ef02:	79fa      	ldrb	r2, [r7, #7]
 800ef04:	4b54      	ldr	r3, [pc, #336]	; (800f058 <ISOTP_RxMsgCbk_CF+0x194>)
 800ef06:	885b      	ldrh	r3, [r3, #2]
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d307      	bcc.n	800ef20 <ISOTP_RxMsgCbk_CF+0x5c>
 800ef10:	2301      	movs	r3, #1
 800ef12:	737b      	strb	r3, [r7, #13]
 800ef14:	e004      	b.n	800ef20 <ISOTP_RxMsgCbk_CF+0x5c>
 800ef16:	79fb      	ldrb	r3, [r7, #7]
 800ef18:	2b08      	cmp	r3, #8
 800ef1a:	d101      	bne.n	800ef20 <ISOTP_RxMsgCbk_CF+0x5c>
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	737b      	strb	r3, [r7, #13]
 800ef20:	7b7b      	ldrb	r3, [r7, #13]
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d003      	beq.n	800ef2e <ISOTP_RxMsgCbk_CF+0x6a>
 800ef26:	79fb      	ldrb	r3, [r7, #7]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	f000 808c 	beq.w	800f046 <ISOTP_RxMsgCbk_CF+0x182>
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	f003 030f 	and.w	r3, r3, #15
 800ef36:	733b      	strb	r3, [r7, #12]
 800ef38:	4b48      	ldr	r3, [pc, #288]	; (800f05c <ISOTP_RxMsgCbk_CF+0x198>)
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	601a      	str	r2, [r3, #0]
 800ef3e:	7b3a      	ldrb	r2, [r7, #12]
 800ef40:	4b45      	ldr	r3, [pc, #276]	; (800f058 <ISOTP_RxMsgCbk_CF+0x194>)
 800ef42:	785b      	ldrb	r3, [r3, #1]
 800ef44:	3301      	adds	r3, #1
 800ef46:	f003 030f 	and.w	r3, r3, #15
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d176      	bne.n	800f03c <ISOTP_RxMsgCbk_CF+0x178>
 800ef4e:	4a42      	ldr	r2, [pc, #264]	; (800f058 <ISOTP_RxMsgCbk_CF+0x194>)
 800ef50:	7b3b      	ldrb	r3, [r7, #12]
 800ef52:	7053      	strb	r3, [r2, #1]
 800ef54:	4b3f      	ldr	r3, [pc, #252]	; (800f054 <ISOTP_RxMsgCbk_CF+0x190>)
 800ef56:	2207      	movs	r2, #7
 800ef58:	701a      	strb	r2, [r3, #0]
 800ef5a:	4b3f      	ldr	r3, [pc, #252]	; (800f058 <ISOTP_RxMsgCbk_CF+0x194>)
 800ef5c:	885b      	ldrh	r3, [r3, #2]
 800ef5e:	2b06      	cmp	r3, #6
 800ef60:	d924      	bls.n	800efac <ISOTP_RxMsgCbk_CF+0xe8>
 800ef62:	4b3d      	ldr	r3, [pc, #244]	; (800f058 <ISOTP_RxMsgCbk_CF+0x194>)
 800ef64:	885b      	ldrh	r3, [r3, #2]
 800ef66:	3b07      	subs	r3, #7
 800ef68:	b29a      	uxth	r2, r3
 800ef6a:	4b3b      	ldr	r3, [pc, #236]	; (800f058 <ISOTP_RxMsgCbk_CF+0x194>)
 800ef6c:	805a      	strh	r2, [r3, #2]
 800ef6e:	2300      	movs	r3, #0
 800ef70:	81fb      	strh	r3, [r7, #14]
 800ef72:	e010      	b.n	800ef96 <ISOTP_RxMsgCbk_CF+0xd2>
 800ef74:	89fb      	ldrh	r3, [r7, #14]
 800ef76:	3301      	adds	r3, #1
 800ef78:	683a      	ldr	r2, [r7, #0]
 800ef7a:	441a      	add	r2, r3
 800ef7c:	4b38      	ldr	r3, [pc, #224]	; (800f060 <ISOTP_RxMsgCbk_CF+0x19c>)
 800ef7e:	881b      	ldrh	r3, [r3, #0]
 800ef80:	4619      	mov	r1, r3
 800ef82:	89fb      	ldrh	r3, [r7, #14]
 800ef84:	440b      	add	r3, r1
 800ef86:	7811      	ldrb	r1, [r2, #0]
 800ef88:	4a33      	ldr	r2, [pc, #204]	; (800f058 <ISOTP_RxMsgCbk_CF+0x194>)
 800ef8a:	4413      	add	r3, r2
 800ef8c:	460a      	mov	r2, r1
 800ef8e:	711a      	strb	r2, [r3, #4]
 800ef90:	89fb      	ldrh	r3, [r7, #14]
 800ef92:	3301      	adds	r3, #1
 800ef94:	81fb      	strh	r3, [r7, #14]
 800ef96:	89fb      	ldrh	r3, [r7, #14]
 800ef98:	2b06      	cmp	r3, #6
 800ef9a:	d9eb      	bls.n	800ef74 <ISOTP_RxMsgCbk_CF+0xb0>
 800ef9c:	4b30      	ldr	r3, [pc, #192]	; (800f060 <ISOTP_RxMsgCbk_CF+0x19c>)
 800ef9e:	881a      	ldrh	r2, [r3, #0]
 800efa0:	89fb      	ldrh	r3, [r7, #14]
 800efa2:	4413      	add	r3, r2
 800efa4:	b29a      	uxth	r2, r3
 800efa6:	4b2e      	ldr	r3, [pc, #184]	; (800f060 <ISOTP_RxMsgCbk_CF+0x19c>)
 800efa8:	801a      	strh	r2, [r3, #0]
 800efaa:	e01b      	b.n	800efe4 <ISOTP_RxMsgCbk_CF+0x120>
 800efac:	2300      	movs	r3, #0
 800efae:	81fb      	strh	r3, [r7, #14]
 800efb0:	e010      	b.n	800efd4 <ISOTP_RxMsgCbk_CF+0x110>
 800efb2:	89fb      	ldrh	r3, [r7, #14]
 800efb4:	3301      	adds	r3, #1
 800efb6:	683a      	ldr	r2, [r7, #0]
 800efb8:	441a      	add	r2, r3
 800efba:	4b29      	ldr	r3, [pc, #164]	; (800f060 <ISOTP_RxMsgCbk_CF+0x19c>)
 800efbc:	881b      	ldrh	r3, [r3, #0]
 800efbe:	4619      	mov	r1, r3
 800efc0:	89fb      	ldrh	r3, [r7, #14]
 800efc2:	440b      	add	r3, r1
 800efc4:	7811      	ldrb	r1, [r2, #0]
 800efc6:	4a24      	ldr	r2, [pc, #144]	; (800f058 <ISOTP_RxMsgCbk_CF+0x194>)
 800efc8:	4413      	add	r3, r2
 800efca:	460a      	mov	r2, r1
 800efcc:	711a      	strb	r2, [r3, #4]
 800efce:	89fb      	ldrh	r3, [r7, #14]
 800efd0:	3301      	adds	r3, #1
 800efd2:	81fb      	strh	r3, [r7, #14]
 800efd4:	4b20      	ldr	r3, [pc, #128]	; (800f058 <ISOTP_RxMsgCbk_CF+0x194>)
 800efd6:	885b      	ldrh	r3, [r3, #2]
 800efd8:	89fa      	ldrh	r2, [r7, #14]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d3e9      	bcc.n	800efb2 <ISOTP_RxMsgCbk_CF+0xee>
 800efde:	4b1e      	ldr	r3, [pc, #120]	; (800f058 <ISOTP_RxMsgCbk_CF+0x194>)
 800efe0:	2200      	movs	r2, #0
 800efe2:	805a      	strh	r2, [r3, #2]
 800efe4:	4b1f      	ldr	r3, [pc, #124]	; (800f064 <ISOTP_RxMsgCbk_CF+0x1a0>)
 800efe6:	881b      	ldrh	r3, [r3, #0]
 800efe8:	3b07      	subs	r3, #7
 800efea:	b29a      	uxth	r2, r3
 800efec:	4b1d      	ldr	r3, [pc, #116]	; (800f064 <ISOTP_RxMsgCbk_CF+0x1a0>)
 800efee:	801a      	strh	r2, [r3, #0]
 800eff0:	4b19      	ldr	r3, [pc, #100]	; (800f058 <ISOTP_RxMsgCbk_CF+0x194>)
 800eff2:	885b      	ldrh	r3, [r3, #2]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d10f      	bne.n	800f018 <ISOTP_RxMsgCbk_CF+0x154>
 800eff8:	4b1b      	ldr	r3, [pc, #108]	; (800f068 <ISOTP_RxMsgCbk_CF+0x1a4>)
 800effa:	881a      	ldrh	r2, [r3, #0]
 800effc:	4b16      	ldr	r3, [pc, #88]	; (800f058 <ISOTP_RxMsgCbk_CF+0x194>)
 800effe:	805a      	strh	r2, [r3, #2]
 800f000:	4b15      	ldr	r3, [pc, #84]	; (800f058 <ISOTP_RxMsgCbk_CF+0x194>)
 800f002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f006:	461a      	mov	r2, r3
 800f008:	79bb      	ldrb	r3, [r7, #6]
 800f00a:	70d3      	strb	r3, [r2, #3]
 800f00c:	4812      	ldr	r0, [pc, #72]	; (800f058 <ISOTP_RxMsgCbk_CF+0x194>)
 800f00e:	f7f1 fea3 	bl	8000d58 <ISOTP_HAL_MsgIndi>
 800f012:	f7ff fd83 	bl	800eb1c <ISOTP_Rst>
 800f016:	e016      	b.n	800f046 <ISOTP_RxMsgCbk_CF+0x182>
 800f018:	4b12      	ldr	r3, [pc, #72]	; (800f064 <ISOTP_RxMsgCbk_CF+0x1a0>)
 800f01a:	881b      	ldrh	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d006      	beq.n	800f02e <ISOTP_RxMsgCbk_CF+0x16a>
 800f020:	4b0e      	ldr	r3, [pc, #56]	; (800f05c <ISOTP_RxMsgCbk_CF+0x198>)
 800f022:	2201      	movs	r2, #1
 800f024:	601a      	str	r2, [r3, #0]
 800f026:	4b0b      	ldr	r3, [pc, #44]	; (800f054 <ISOTP_RxMsgCbk_CF+0x190>)
 800f028:	2206      	movs	r2, #6
 800f02a:	701a      	strb	r2, [r3, #0]
 800f02c:	e00b      	b.n	800f046 <ISOTP_RxMsgCbk_CF+0x182>
 800f02e:	4b0f      	ldr	r3, [pc, #60]	; (800f06c <ISOTP_RxMsgCbk_CF+0x1a8>)
 800f030:	2201      	movs	r2, #1
 800f032:	601a      	str	r2, [r3, #0]
 800f034:	4b07      	ldr	r3, [pc, #28]	; (800f054 <ISOTP_RxMsgCbk_CF+0x190>)
 800f036:	2205      	movs	r2, #5
 800f038:	701a      	strb	r2, [r3, #0]
 800f03a:	e004      	b.n	800f046 <ISOTP_RxMsgCbk_CF+0x182>
 800f03c:	f7ff fd6e 	bl	800eb1c <ISOTP_Rst>
 800f040:	4b03      	ldr	r3, [pc, #12]	; (800f050 <ISOTP_RxMsgCbk_CF+0x18c>)
 800f042:	2200      	movs	r2, #0
 800f044:	701a      	strb	r2, [r3, #0]
 800f046:	bf00      	nop
 800f048:	3710      	adds	r7, #16
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	2400183c 	.word	0x2400183c
 800f054:	24001850 	.word	0x24001850
 800f058:	24001854 	.word	0x24001854
 800f05c:	2400182c 	.word	0x2400182c
 800f060:	2400181e 	.word	0x2400181e
 800f064:	24001820 	.word	0x24001820
 800f068:	24001852 	.word	0x24001852
 800f06c:	24001828 	.word	0x24001828

0800f070 <ISOTP_RxMsgCbk_FC>:
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	4603      	mov	r3, r0
 800f078:	6039      	str	r1, [r7, #0]
 800f07a:	71fb      	strb	r3, [r7, #7]
 800f07c:	4613      	mov	r3, r2
 800f07e:	71bb      	strb	r3, [r7, #6]
 800f080:	4b6e      	ldr	r3, [pc, #440]	; (800f23c <ISOTP_RxMsgCbk_FC+0x1cc>)
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	2b03      	cmp	r3, #3
 800f086:	f040 80d4 	bne.w	800f232 <ISOTP_RxMsgCbk_FC+0x1c2>
 800f08a:	4b6d      	ldr	r3, [pc, #436]	; (800f240 <ISOTP_RxMsgCbk_FC+0x1d0>)
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	2b09      	cmp	r3, #9
 800f090:	f040 80cf 	bne.w	800f232 <ISOTP_RxMsgCbk_FC+0x1c2>
 800f094:	f7f1 fe57 	bl	8000d46 <ISOTP_STPadding>
 800f098:	4603      	mov	r3, r0
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d002      	beq.n	800f0a4 <ISOTP_RxMsgCbk_FC+0x34>
 800f09e:	79fb      	ldrb	r3, [r7, #7]
 800f0a0:	2b02      	cmp	r3, #2
 800f0a2:	d803      	bhi.n	800f0ac <ISOTP_RxMsgCbk_FC+0x3c>
 800f0a4:	79fb      	ldrb	r3, [r7, #7]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	f000 80c3 	beq.w	800f232 <ISOTP_RxMsgCbk_FC+0x1c2>
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	f003 030f 	and.w	r3, r3, #15
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f040 80aa 	bne.w	800f20e <ISOTP_RxMsgCbk_FC+0x19e>
 800f0ba:	4b62      	ldr	r3, [pc, #392]	; (800f244 <ISOTP_RxMsgCbk_FC+0x1d4>)
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d12a      	bne.n	800f118 <ISOTP_RxMsgCbk_FC+0xa8>
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	781a      	ldrb	r2, [r3, #0]
 800f0c8:	4b5f      	ldr	r3, [pc, #380]	; (800f248 <ISOTP_RxMsgCbk_FC+0x1d8>)
 800f0ca:	701a      	strb	r2, [r3, #0]
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	3302      	adds	r3, #2
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	2bf0      	cmp	r3, #240	; 0xf0
 800f0d4:	d90d      	bls.n	800f0f2 <ISOTP_RxMsgCbk_FC+0x82>
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	3302      	adds	r3, #2
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	2bf9      	cmp	r3, #249	; 0xf9
 800f0de:	d808      	bhi.n	800f0f2 <ISOTP_RxMsgCbk_FC+0x82>
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	3302      	adds	r3, #2
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	3bf0      	subs	r3, #240	; 0xf0
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	4b57      	ldr	r3, [pc, #348]	; (800f24c <ISOTP_RxMsgCbk_FC+0x1dc>)
 800f0ee:	801a      	strh	r2, [r3, #0]
 800f0f0:	e00f      	b.n	800f112 <ISOTP_RxMsgCbk_FC+0xa2>
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	3302      	adds	r3, #2
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	b25b      	sxtb	r3, r3
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	da03      	bge.n	800f106 <ISOTP_RxMsgCbk_FC+0x96>
 800f0fe:	4b53      	ldr	r3, [pc, #332]	; (800f24c <ISOTP_RxMsgCbk_FC+0x1dc>)
 800f100:	227f      	movs	r2, #127	; 0x7f
 800f102:	801a      	strh	r2, [r3, #0]
 800f104:	e005      	b.n	800f112 <ISOTP_RxMsgCbk_FC+0xa2>
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	3302      	adds	r3, #2
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	b29a      	uxth	r2, r3
 800f10e:	4b4f      	ldr	r3, [pc, #316]	; (800f24c <ISOTP_RxMsgCbk_FC+0x1dc>)
 800f110:	801a      	strh	r2, [r3, #0]
 800f112:	4b4c      	ldr	r3, [pc, #304]	; (800f244 <ISOTP_RxMsgCbk_FC+0x1d4>)
 800f114:	2201      	movs	r2, #1
 800f116:	701a      	strb	r2, [r3, #0]
 800f118:	4b4b      	ldr	r3, [pc, #300]	; (800f248 <ISOTP_RxMsgCbk_FC+0x1d8>)
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d104      	bne.n	800f12a <ISOTP_RxMsgCbk_FC+0xba>
 800f120:	4b4b      	ldr	r3, [pc, #300]	; (800f250 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800f122:	885a      	ldrh	r2, [r3, #2]
 800f124:	4b4b      	ldr	r3, [pc, #300]	; (800f254 <ISOTP_RxMsgCbk_FC+0x1e4>)
 800f126:	801a      	strh	r2, [r3, #0]
 800f128:	e008      	b.n	800f13c <ISOTP_RxMsgCbk_FC+0xcc>
 800f12a:	4b47      	ldr	r3, [pc, #284]	; (800f248 <ISOTP_RxMsgCbk_FC+0x1d8>)
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	b29b      	uxth	r3, r3
 800f130:	461a      	mov	r2, r3
 800f132:	00d2      	lsls	r2, r2, #3
 800f134:	1ad3      	subs	r3, r2, r3
 800f136:	b29a      	uxth	r2, r3
 800f138:	4b46      	ldr	r3, [pc, #280]	; (800f254 <ISOTP_RxMsgCbk_FC+0x1e4>)
 800f13a:	801a      	strh	r2, [r3, #0]
 800f13c:	4b43      	ldr	r3, [pc, #268]	; (800f24c <ISOTP_RxMsgCbk_FC+0x1dc>)
 800f13e:	881b      	ldrh	r3, [r3, #0]
 800f140:	461a      	mov	r2, r3
 800f142:	4b45      	ldr	r3, [pc, #276]	; (800f258 <ISOTP_RxMsgCbk_FC+0x1e8>)
 800f144:	601a      	str	r2, [r3, #0]
 800f146:	4b45      	ldr	r3, [pc, #276]	; (800f25c <ISOTP_RxMsgCbk_FC+0x1ec>)
 800f148:	2200      	movs	r2, #0
 800f14a:	601a      	str	r2, [r3, #0]
 800f14c:	4b3c      	ldr	r3, [pc, #240]	; (800f240 <ISOTP_RxMsgCbk_FC+0x1d0>)
 800f14e:	220a      	movs	r2, #10
 800f150:	701a      	strb	r2, [r3, #0]
 800f152:	4b3f      	ldr	r3, [pc, #252]	; (800f250 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800f154:	781a      	ldrb	r2, [r3, #0]
 800f156:	4b42      	ldr	r3, [pc, #264]	; (800f260 <ISOTP_RxMsgCbk_FC+0x1f0>)
 800f158:	715a      	strb	r2, [r3, #5]
 800f15a:	4b3d      	ldr	r3, [pc, #244]	; (800f250 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800f15c:	885b      	ldrh	r3, [r3, #2]
 800f15e:	2b06      	cmp	r3, #6
 800f160:	d82e      	bhi.n	800f1c0 <ISOTP_RxMsgCbk_FC+0x150>
 800f162:	2300      	movs	r3, #0
 800f164:	81fb      	strh	r3, [r7, #14]
 800f166:	e010      	b.n	800f18a <ISOTP_RxMsgCbk_FC+0x11a>
 800f168:	4b3e      	ldr	r3, [pc, #248]	; (800f264 <ISOTP_RxMsgCbk_FC+0x1f4>)
 800f16a:	881b      	ldrh	r3, [r3, #0]
 800f16c:	461a      	mov	r2, r3
 800f16e:	89fb      	ldrh	r3, [r7, #14]
 800f170:	4413      	add	r3, r2
 800f172:	89fa      	ldrh	r2, [r7, #14]
 800f174:	3201      	adds	r2, #1
 800f176:	4611      	mov	r1, r2
 800f178:	4a35      	ldr	r2, [pc, #212]	; (800f250 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800f17a:	4413      	add	r3, r2
 800f17c:	791a      	ldrb	r2, [r3, #4]
 800f17e:	4b38      	ldr	r3, [pc, #224]	; (800f260 <ISOTP_RxMsgCbk_FC+0x1f0>)
 800f180:	440b      	add	r3, r1
 800f182:	715a      	strb	r2, [r3, #5]
 800f184:	89fb      	ldrh	r3, [r7, #14]
 800f186:	3301      	adds	r3, #1
 800f188:	81fb      	strh	r3, [r7, #14]
 800f18a:	4b31      	ldr	r3, [pc, #196]	; (800f250 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800f18c:	885b      	ldrh	r3, [r3, #2]
 800f18e:	89fa      	ldrh	r2, [r7, #14]
 800f190:	429a      	cmp	r2, r3
 800f192:	d3e9      	bcc.n	800f168 <ISOTP_RxMsgCbk_FC+0xf8>
 800f194:	f7f1 fdd7 	bl	8000d46 <ISOTP_STPadding>
 800f198:	4603      	mov	r3, r0
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d108      	bne.n	800f1b0 <ISOTP_RxMsgCbk_FC+0x140>
 800f19e:	4b2c      	ldr	r3, [pc, #176]	; (800f250 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800f1a0:	885b      	ldrh	r3, [r3, #2]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7ff fd4e 	bl	800ec44 <ISOTP_PrfrmPad>
 800f1a8:	4b2d      	ldr	r3, [pc, #180]	; (800f260 <ISOTP_RxMsgCbk_FC+0x1f0>)
 800f1aa:	2208      	movs	r2, #8
 800f1ac:	711a      	strb	r2, [r3, #4]
 800f1ae:	e021      	b.n	800f1f4 <ISOTP_RxMsgCbk_FC+0x184>
 800f1b0:	4b27      	ldr	r3, [pc, #156]	; (800f250 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800f1b2:	885b      	ldrh	r3, [r3, #2]
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	b2da      	uxtb	r2, r3
 800f1ba:	4b29      	ldr	r3, [pc, #164]	; (800f260 <ISOTP_RxMsgCbk_FC+0x1f0>)
 800f1bc:	711a      	strb	r2, [r3, #4]
 800f1be:	e019      	b.n	800f1f4 <ISOTP_RxMsgCbk_FC+0x184>
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	81fb      	strh	r3, [r7, #14]
 800f1c4:	e010      	b.n	800f1e8 <ISOTP_RxMsgCbk_FC+0x178>
 800f1c6:	4b27      	ldr	r3, [pc, #156]	; (800f264 <ISOTP_RxMsgCbk_FC+0x1f4>)
 800f1c8:	881b      	ldrh	r3, [r3, #0]
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	89fb      	ldrh	r3, [r7, #14]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	89fa      	ldrh	r2, [r7, #14]
 800f1d2:	3201      	adds	r2, #1
 800f1d4:	4611      	mov	r1, r2
 800f1d6:	4a1e      	ldr	r2, [pc, #120]	; (800f250 <ISOTP_RxMsgCbk_FC+0x1e0>)
 800f1d8:	4413      	add	r3, r2
 800f1da:	791a      	ldrb	r2, [r3, #4]
 800f1dc:	4b20      	ldr	r3, [pc, #128]	; (800f260 <ISOTP_RxMsgCbk_FC+0x1f0>)
 800f1de:	440b      	add	r3, r1
 800f1e0:	715a      	strb	r2, [r3, #5]
 800f1e2:	89fb      	ldrh	r3, [r7, #14]
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	81fb      	strh	r3, [r7, #14]
 800f1e8:	89fb      	ldrh	r3, [r7, #14]
 800f1ea:	2b06      	cmp	r3, #6
 800f1ec:	d9eb      	bls.n	800f1c6 <ISOTP_RxMsgCbk_FC+0x156>
 800f1ee:	4b1c      	ldr	r3, [pc, #112]	; (800f260 <ISOTP_RxMsgCbk_FC+0x1f0>)
 800f1f0:	2208      	movs	r2, #8
 800f1f2:	711a      	strb	r2, [r3, #4]
 800f1f4:	4b1c      	ldr	r3, [pc, #112]	; (800f268 <ISOTP_RxMsgCbk_FC+0x1f8>)
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	601a      	str	r2, [r3, #0]
 800f1fa:	4b1c      	ldr	r3, [pc, #112]	; (800f26c <ISOTP_RxMsgCbk_FC+0x1fc>)
 800f1fc:	6818      	ldr	r0, [r3, #0]
 800f1fe:	4b1c      	ldr	r3, [pc, #112]	; (800f270 <ISOTP_RxMsgCbk_FC+0x200>)
 800f200:	7819      	ldrb	r1, [r3, #0]
 800f202:	4b17      	ldr	r3, [pc, #92]	; (800f260 <ISOTP_RxMsgCbk_FC+0x1f0>)
 800f204:	791a      	ldrb	r2, [r3, #4]
 800f206:	4b1b      	ldr	r3, [pc, #108]	; (800f274 <ISOTP_RxMsgCbk_FC+0x204>)
 800f208:	f7f1 fdf2 	bl	8000df0 <ISOTP_HAL_CANMesgTxnReq_Stub>
 800f20c:	e011      	b.n	800f232 <ISOTP_RxMsgCbk_FC+0x1c2>
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	f003 030f 	and.w	r3, r3, #15
 800f216:	2b01      	cmp	r3, #1
 800f218:	d103      	bne.n	800f222 <ISOTP_RxMsgCbk_FC+0x1b2>
 800f21a:	4b10      	ldr	r3, [pc, #64]	; (800f25c <ISOTP_RxMsgCbk_FC+0x1ec>)
 800f21c:	2201      	movs	r2, #1
 800f21e:	601a      	str	r2, [r3, #0]
 800f220:	e007      	b.n	800f232 <ISOTP_RxMsgCbk_FC+0x1c2>
 800f222:	4b0e      	ldr	r3, [pc, #56]	; (800f25c <ISOTP_RxMsgCbk_FC+0x1ec>)
 800f224:	2200      	movs	r2, #0
 800f226:	601a      	str	r2, [r3, #0]
 800f228:	f7ff fc78 	bl	800eb1c <ISOTP_Rst>
 800f22c:	4b03      	ldr	r3, [pc, #12]	; (800f23c <ISOTP_RxMsgCbk_FC+0x1cc>)
 800f22e:	2200      	movs	r2, #0
 800f230:	701a      	strb	r2, [r3, #0]
 800f232:	bf00      	nop
 800f234:	3710      	adds	r7, #16
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop
 800f23c:	2400183c 	.word	0x2400183c
 800f240:	24001850 	.word	0x24001850
 800f244:	24001819 	.word	0x24001819
 800f248:	2400181a 	.word	0x2400181a
 800f24c:	2400181c 	.word	0x2400181c
 800f250:	24001854 	.word	0x24001854
 800f254:	24001820 	.word	0x24001820
 800f258:	24001838 	.word	0x24001838
 800f25c:	24001828 	.word	0x24001828
 800f260:	24001840 	.word	0x24001840
 800f264:	2400181e 	.word	0x2400181e
 800f268:	24001824 	.word	0x24001824
 800f26c:	24000340 	.word	0x24000340
 800f270:	24000344 	.word	0x24000344
 800f274:	24001845 	.word	0x24001845

0800f278 <FCM_Init>:
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	4b0e      	ldr	r3, [pc, #56]	; (800f2b8 <FCM_Init+0x40>)
 800f280:	2200      	movs	r2, #0
 800f282:	701a      	strb	r2, [r3, #0]
 800f284:	2300      	movs	r3, #0
 800f286:	71fb      	strb	r3, [r7, #7]
 800f288:	e00a      	b.n	800f2a0 <FCM_Init+0x28>
 800f28a:	79fb      	ldrb	r3, [r7, #7]
 800f28c:	4a0b      	ldr	r2, [pc, #44]	; (800f2bc <FCM_Init+0x44>)
 800f28e:	2101      	movs	r1, #1
 800f290:	54d1      	strb	r1, [r2, r3]
 800f292:	79fb      	ldrb	r3, [r7, #7]
 800f294:	4a0a      	ldr	r2, [pc, #40]	; (800f2c0 <FCM_Init+0x48>)
 800f296:	2101      	movs	r1, #1
 800f298:	54d1      	strb	r1, [r2, r3]
 800f29a:	79fb      	ldrb	r3, [r7, #7]
 800f29c:	3301      	adds	r3, #1
 800f29e:	71fb      	strb	r3, [r7, #7]
 800f2a0:	79fb      	ldrb	r3, [r7, #7]
 800f2a2:	2b02      	cmp	r3, #2
 800f2a4:	d9f1      	bls.n	800f28a <FCM_Init+0x12>
 800f2a6:	4b07      	ldr	r3, [pc, #28]	; (800f2c4 <FCM_Init+0x4c>)
 800f2a8:	2201      	movs	r2, #1
 800f2aa:	701a      	strb	r2, [r3, #0]
 800f2ac:	f7f1 fb00 	bl	80008b0 <FCM_Init_DTC_Info>
 800f2b0:	bf00      	nop
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	24000310 	.word	0x24000310
 800f2bc:	2400029c 	.word	0x2400029c
 800f2c0:	240002a0 	.word	0x240002a0
 800f2c4:	240002a3 	.word	0x240002a3

0800f2c8 <FCM_FindDTCIndex>:
 800f2c8:	b480      	push	{r7}
 800f2ca:	b085      	sub	sp, #20
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	73fb      	strb	r3, [r7, #15]
 800f2d4:	e00d      	b.n	800f2f2 <FCM_FindDTCIndex+0x2a>
 800f2d6:	7bfa      	ldrb	r2, [r7, #15]
 800f2d8:	490c      	ldr	r1, [pc, #48]	; (800f30c <FCM_FindDTCIndex+0x44>)
 800f2da:	4613      	mov	r3, r2
 800f2dc:	005b      	lsls	r3, r3, #1
 800f2de:	4413      	add	r3, r2
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	440b      	add	r3, r1
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d006      	beq.n	800f2fa <FCM_FindDTCIndex+0x32>
 800f2ec:	7bfb      	ldrb	r3, [r7, #15]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	73fb      	strb	r3, [r7, #15]
 800f2f2:	7bfb      	ldrb	r3, [r7, #15]
 800f2f4:	2b20      	cmp	r3, #32
 800f2f6:	d9ee      	bls.n	800f2d6 <FCM_FindDTCIndex+0xe>
 800f2f8:	e000      	b.n	800f2fc <FCM_FindDTCIndex+0x34>
 800f2fa:	bf00      	nop
 800f2fc:	7bfb      	ldrb	r3, [r7, #15]
 800f2fe:	4618      	mov	r0, r3
 800f300:	3714      	adds	r7, #20
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr
 800f30a:	bf00      	nop
 800f30c:	0801045c 	.word	0x0801045c

0800f310 <FCM_UpdateOperationCycle>:
 800f310:	b580      	push	{r7, lr}
 800f312:	b084      	sub	sp, #16
 800f314:	af00      	add	r7, sp, #0
 800f316:	4603      	mov	r3, r0
 800f318:	460a      	mov	r2, r1
 800f31a:	71fb      	strb	r3, [r7, #7]
 800f31c:	4613      	mov	r3, r2
 800f31e:	71bb      	strb	r3, [r7, #6]
 800f320:	f7f1 f9c4 	bl	80006ac <HAL_FCM_InitStatus>
 800f324:	4603      	mov	r3, r0
 800f326:	2b01      	cmp	r3, #1
 800f328:	f040 8122 	bne.w	800f570 <FCM_UpdateOperationCycle+0x260>
 800f32c:	79fb      	ldrb	r3, [r7, #7]
 800f32e:	2b02      	cmp	r3, #2
 800f330:	d809      	bhi.n	800f346 <FCM_UpdateOperationCycle+0x36>
 800f332:	79bb      	ldrb	r3, [r7, #6]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d002      	beq.n	800f33e <FCM_UpdateOperationCycle+0x2e>
 800f338:	79bb      	ldrb	r3, [r7, #6]
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	d103      	bne.n	800f346 <FCM_UpdateOperationCycle+0x36>
 800f33e:	79fb      	ldrb	r3, [r7, #7]
 800f340:	498d      	ldr	r1, [pc, #564]	; (800f578 <FCM_UpdateOperationCycle+0x268>)
 800f342:	79ba      	ldrb	r2, [r7, #6]
 800f344:	54ca      	strb	r2, [r1, r3]
 800f346:	4b8d      	ldr	r3, [pc, #564]	; (800f57c <FCM_UpdateOperationCycle+0x26c>)
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	f040 8110 	bne.w	800f570 <FCM_UpdateOperationCycle+0x260>
 800f350:	2300      	movs	r3, #0
 800f352:	73fb      	strb	r3, [r7, #15]
 800f354:	e108      	b.n	800f568 <FCM_UpdateOperationCycle+0x258>
 800f356:	7bfb      	ldrb	r3, [r7, #15]
 800f358:	4a87      	ldr	r2, [pc, #540]	; (800f578 <FCM_UpdateOperationCycle+0x268>)
 800f35a:	5cd2      	ldrb	r2, [r2, r3]
 800f35c:	7bfb      	ldrb	r3, [r7, #15]
 800f35e:	4988      	ldr	r1, [pc, #544]	; (800f580 <FCM_UpdateOperationCycle+0x270>)
 800f360:	5ccb      	ldrb	r3, [r1, r3]
 800f362:	429a      	cmp	r2, r3
 800f364:	f000 80fd 	beq.w	800f562 <FCM_UpdateOperationCycle+0x252>
 800f368:	7bfb      	ldrb	r3, [r7, #15]
 800f36a:	4a83      	ldr	r2, [pc, #524]	; (800f578 <FCM_UpdateOperationCycle+0x268>)
 800f36c:	5cd3      	ldrb	r3, [r2, r3]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d002      	beq.n	800f378 <FCM_UpdateOperationCycle+0x68>
 800f372:	2b01      	cmp	r3, #1
 800f374:	d03d      	beq.n	800f3f2 <FCM_UpdateOperationCycle+0xe2>
 800f376:	e0ee      	b.n	800f556 <FCM_UpdateOperationCycle+0x246>
 800f378:	7bfb      	ldrb	r3, [r7, #15]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d104      	bne.n	800f388 <FCM_UpdateOperationCycle+0x78>
 800f37e:	2300      	movs	r3, #0
 800f380:	737b      	strb	r3, [r7, #13]
 800f382:	2321      	movs	r3, #33	; 0x21
 800f384:	733b      	strb	r3, [r7, #12]
 800f386:	e00b      	b.n	800f3a0 <FCM_UpdateOperationCycle+0x90>
 800f388:	7bfb      	ldrb	r3, [r7, #15]
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	d104      	bne.n	800f398 <FCM_UpdateOperationCycle+0x88>
 800f38e:	2321      	movs	r3, #33	; 0x21
 800f390:	737b      	strb	r3, [r7, #13]
 800f392:	2321      	movs	r3, #33	; 0x21
 800f394:	733b      	strb	r3, [r7, #12]
 800f396:	e003      	b.n	800f3a0 <FCM_UpdateOperationCycle+0x90>
 800f398:	2321      	movs	r3, #33	; 0x21
 800f39a:	737b      	strb	r3, [r7, #13]
 800f39c:	2321      	movs	r3, #33	; 0x21
 800f39e:	733b      	strb	r3, [r7, #12]
 800f3a0:	7b7b      	ldrb	r3, [r7, #13]
 800f3a2:	73bb      	strb	r3, [r7, #14]
 800f3a4:	e020      	b.n	800f3e8 <FCM_UpdateOperationCycle+0xd8>
 800f3a6:	7bba      	ldrb	r2, [r7, #14]
 800f3a8:	4976      	ldr	r1, [pc, #472]	; (800f584 <FCM_UpdateOperationCycle+0x274>)
 800f3aa:	4613      	mov	r3, r2
 800f3ac:	005b      	lsls	r3, r3, #1
 800f3ae:	4413      	add	r3, r2
 800f3b0:	18ca      	adds	r2, r1, r3
 800f3b2:	7853      	ldrb	r3, [r2, #1]
 800f3b4:	f36f 13c7 	bfc	r3, #7, #1
 800f3b8:	7053      	strb	r3, [r2, #1]
 800f3ba:	7bba      	ldrb	r2, [r7, #14]
 800f3bc:	4971      	ldr	r1, [pc, #452]	; (800f584 <FCM_UpdateOperationCycle+0x274>)
 800f3be:	4613      	mov	r3, r2
 800f3c0:	005b      	lsls	r3, r3, #1
 800f3c2:	4413      	add	r3, r2
 800f3c4:	18ca      	adds	r2, r1, r3
 800f3c6:	7853      	ldrb	r3, [r2, #1]
 800f3c8:	f36f 1386 	bfc	r3, #6, #1
 800f3cc:	7053      	strb	r3, [r2, #1]
 800f3ce:	7bba      	ldrb	r2, [r7, #14]
 800f3d0:	496c      	ldr	r1, [pc, #432]	; (800f584 <FCM_UpdateOperationCycle+0x274>)
 800f3d2:	4613      	mov	r3, r2
 800f3d4:	005b      	lsls	r3, r3, #1
 800f3d6:	4413      	add	r3, r2
 800f3d8:	18ca      	adds	r2, r1, r3
 800f3da:	7853      	ldrb	r3, [r2, #1]
 800f3dc:	f043 0302 	orr.w	r3, r3, #2
 800f3e0:	7053      	strb	r3, [r2, #1]
 800f3e2:	7bbb      	ldrb	r3, [r7, #14]
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	73bb      	strb	r3, [r7, #14]
 800f3e8:	7bba      	ldrb	r2, [r7, #14]
 800f3ea:	7b3b      	ldrb	r3, [r7, #12]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d3da      	bcc.n	800f3a6 <FCM_UpdateOperationCycle+0x96>
 800f3f0:	e0b1      	b.n	800f556 <FCM_UpdateOperationCycle+0x246>
 800f3f2:	7bfb      	ldrb	r3, [r7, #15]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d104      	bne.n	800f402 <FCM_UpdateOperationCycle+0xf2>
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	737b      	strb	r3, [r7, #13]
 800f3fc:	2321      	movs	r3, #33	; 0x21
 800f3fe:	733b      	strb	r3, [r7, #12]
 800f400:	e00b      	b.n	800f41a <FCM_UpdateOperationCycle+0x10a>
 800f402:	7bfb      	ldrb	r3, [r7, #15]
 800f404:	2b01      	cmp	r3, #1
 800f406:	d104      	bne.n	800f412 <FCM_UpdateOperationCycle+0x102>
 800f408:	2321      	movs	r3, #33	; 0x21
 800f40a:	737b      	strb	r3, [r7, #13]
 800f40c:	2321      	movs	r3, #33	; 0x21
 800f40e:	733b      	strb	r3, [r7, #12]
 800f410:	e003      	b.n	800f41a <FCM_UpdateOperationCycle+0x10a>
 800f412:	2321      	movs	r3, #33	; 0x21
 800f414:	737b      	strb	r3, [r7, #13]
 800f416:	2321      	movs	r3, #33	; 0x21
 800f418:	733b      	strb	r3, [r7, #12]
 800f41a:	7b7b      	ldrb	r3, [r7, #13]
 800f41c:	73bb      	strb	r3, [r7, #14]
 800f41e:	e094      	b.n	800f54a <FCM_UpdateOperationCycle+0x23a>
 800f420:	7bba      	ldrb	r2, [r7, #14]
 800f422:	4958      	ldr	r1, [pc, #352]	; (800f584 <FCM_UpdateOperationCycle+0x274>)
 800f424:	4613      	mov	r3, r2
 800f426:	005b      	lsls	r3, r3, #1
 800f428:	4413      	add	r3, r2
 800f42a:	440b      	add	r3, r1
 800f42c:	785b      	ldrb	r3, [r3, #1]
 800f42e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f432:	b2db      	uxtb	r3, r3
 800f434:	2b00      	cmp	r3, #0
 800f436:	f040 8085 	bne.w	800f544 <FCM_UpdateOperationCycle+0x234>
 800f43a:	7bba      	ldrb	r2, [r7, #14]
 800f43c:	4951      	ldr	r1, [pc, #324]	; (800f584 <FCM_UpdateOperationCycle+0x274>)
 800f43e:	4613      	mov	r3, r2
 800f440:	005b      	lsls	r3, r3, #1
 800f442:	4413      	add	r3, r2
 800f444:	440b      	add	r3, r1
 800f446:	785b      	ldrb	r3, [r3, #1]
 800f448:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f44c:	b2db      	uxtb	r3, r3
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d178      	bne.n	800f544 <FCM_UpdateOperationCycle+0x234>
 800f452:	7bba      	ldrb	r2, [r7, #14]
 800f454:	494b      	ldr	r1, [pc, #300]	; (800f584 <FCM_UpdateOperationCycle+0x274>)
 800f456:	4613      	mov	r3, r2
 800f458:	005b      	lsls	r3, r3, #1
 800f45a:	4413      	add	r3, r2
 800f45c:	18ca      	adds	r2, r1, r3
 800f45e:	7853      	ldrb	r3, [r2, #1]
 800f460:	f36f 1345 	bfc	r3, #5, #1
 800f464:	7053      	strb	r3, [r2, #1]
 800f466:	7bba      	ldrb	r2, [r7, #14]
 800f468:	4946      	ldr	r1, [pc, #280]	; (800f584 <FCM_UpdateOperationCycle+0x274>)
 800f46a:	4613      	mov	r3, r2
 800f46c:	005b      	lsls	r3, r3, #1
 800f46e:	4413      	add	r3, r2
 800f470:	440b      	add	r3, r1
 800f472:	2200      	movs	r2, #0
 800f474:	701a      	strb	r2, [r3, #0]
 800f476:	7bba      	ldrb	r2, [r7, #14]
 800f478:	4942      	ldr	r1, [pc, #264]	; (800f584 <FCM_UpdateOperationCycle+0x274>)
 800f47a:	4613      	mov	r3, r2
 800f47c:	005b      	lsls	r3, r3, #1
 800f47e:	4413      	add	r3, r2
 800f480:	440b      	add	r3, r1
 800f482:	785b      	ldrb	r3, [r3, #1]
 800f484:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f488:	b2db      	uxtb	r3, r3
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	d154      	bne.n	800f538 <FCM_UpdateOperationCycle+0x228>
 800f48e:	7bba      	ldrb	r2, [r7, #14]
 800f490:	493c      	ldr	r1, [pc, #240]	; (800f584 <FCM_UpdateOperationCycle+0x274>)
 800f492:	4613      	mov	r3, r2
 800f494:	005b      	lsls	r3, r3, #1
 800f496:	4413      	add	r3, r2
 800f498:	440b      	add	r3, r1
 800f49a:	3302      	adds	r3, #2
 800f49c:	7819      	ldrb	r1, [r3, #0]
 800f49e:	7bba      	ldrb	r2, [r7, #14]
 800f4a0:	4839      	ldr	r0, [pc, #228]	; (800f588 <FCM_UpdateOperationCycle+0x278>)
 800f4a2:	4613      	mov	r3, r2
 800f4a4:	005b      	lsls	r3, r3, #1
 800f4a6:	4413      	add	r3, r2
 800f4a8:	009b      	lsls	r3, r3, #2
 800f4aa:	4403      	add	r3, r0
 800f4ac:	3306      	adds	r3, #6
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	4299      	cmp	r1, r3
 800f4b2:	d21b      	bcs.n	800f4ec <FCM_UpdateOperationCycle+0x1dc>
 800f4b4:	7bba      	ldrb	r2, [r7, #14]
 800f4b6:	4933      	ldr	r1, [pc, #204]	; (800f584 <FCM_UpdateOperationCycle+0x274>)
 800f4b8:	4613      	mov	r3, r2
 800f4ba:	005b      	lsls	r3, r3, #1
 800f4bc:	4413      	add	r3, r2
 800f4be:	440b      	add	r3, r1
 800f4c0:	3302      	adds	r3, #2
 800f4c2:	7819      	ldrb	r1, [r3, #0]
 800f4c4:	7bba      	ldrb	r2, [r7, #14]
 800f4c6:	4830      	ldr	r0, [pc, #192]	; (800f588 <FCM_UpdateOperationCycle+0x278>)
 800f4c8:	4613      	mov	r3, r2
 800f4ca:	005b      	lsls	r3, r3, #1
 800f4cc:	4413      	add	r3, r2
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	4403      	add	r3, r0
 800f4d2:	3307      	adds	r3, #7
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	7bba      	ldrb	r2, [r7, #14]
 800f4d8:	440b      	add	r3, r1
 800f4da:	b2d8      	uxtb	r0, r3
 800f4dc:	4929      	ldr	r1, [pc, #164]	; (800f584 <FCM_UpdateOperationCycle+0x274>)
 800f4de:	4613      	mov	r3, r2
 800f4e0:	005b      	lsls	r3, r3, #1
 800f4e2:	4413      	add	r3, r2
 800f4e4:	440b      	add	r3, r1
 800f4e6:	3302      	adds	r3, #2
 800f4e8:	4602      	mov	r2, r0
 800f4ea:	701a      	strb	r2, [r3, #0]
 800f4ec:	7bba      	ldrb	r2, [r7, #14]
 800f4ee:	4925      	ldr	r1, [pc, #148]	; (800f584 <FCM_UpdateOperationCycle+0x274>)
 800f4f0:	4613      	mov	r3, r2
 800f4f2:	005b      	lsls	r3, r3, #1
 800f4f4:	4413      	add	r3, r2
 800f4f6:	440b      	add	r3, r1
 800f4f8:	3302      	adds	r3, #2
 800f4fa:	7819      	ldrb	r1, [r3, #0]
 800f4fc:	7bba      	ldrb	r2, [r7, #14]
 800f4fe:	4822      	ldr	r0, [pc, #136]	; (800f588 <FCM_UpdateOperationCycle+0x278>)
 800f500:	4613      	mov	r3, r2
 800f502:	005b      	lsls	r3, r3, #1
 800f504:	4413      	add	r3, r2
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	4403      	add	r3, r0
 800f50a:	3306      	adds	r3, #6
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	4299      	cmp	r1, r3
 800f510:	d312      	bcc.n	800f538 <FCM_UpdateOperationCycle+0x228>
 800f512:	7bba      	ldrb	r2, [r7, #14]
 800f514:	491b      	ldr	r1, [pc, #108]	; (800f584 <FCM_UpdateOperationCycle+0x274>)
 800f516:	4613      	mov	r3, r2
 800f518:	005b      	lsls	r3, r3, #1
 800f51a:	4413      	add	r3, r2
 800f51c:	18ca      	adds	r2, r1, r3
 800f51e:	7853      	ldrb	r3, [r2, #1]
 800f520:	f36f 1304 	bfc	r3, #4, #1
 800f524:	7053      	strb	r3, [r2, #1]
 800f526:	7bba      	ldrb	r2, [r7, #14]
 800f528:	4916      	ldr	r1, [pc, #88]	; (800f584 <FCM_UpdateOperationCycle+0x274>)
 800f52a:	4613      	mov	r3, r2
 800f52c:	005b      	lsls	r3, r3, #1
 800f52e:	4413      	add	r3, r2
 800f530:	440b      	add	r3, r1
 800f532:	3302      	adds	r3, #2
 800f534:	2200      	movs	r2, #0
 800f536:	701a      	strb	r2, [r3, #0]
 800f538:	7bbb      	ldrb	r3, [r7, #14]
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	4911      	ldr	r1, [pc, #68]	; (800f584 <FCM_UpdateOperationCycle+0x274>)
 800f53e:	4618      	mov	r0, r3
 800f540:	f7f1 fb4e 	bl	8000be0 <FCM_DTC_WriteDTCToEEPROM>
 800f544:	7bbb      	ldrb	r3, [r7, #14]
 800f546:	3301      	adds	r3, #1
 800f548:	73bb      	strb	r3, [r7, #14]
 800f54a:	7bba      	ldrb	r2, [r7, #14]
 800f54c:	7b3b      	ldrb	r3, [r7, #12]
 800f54e:	429a      	cmp	r2, r3
 800f550:	f4ff af66 	bcc.w	800f420 <FCM_UpdateOperationCycle+0x110>
 800f554:	bf00      	nop
 800f556:	7bfa      	ldrb	r2, [r7, #15]
 800f558:	7bfb      	ldrb	r3, [r7, #15]
 800f55a:	4907      	ldr	r1, [pc, #28]	; (800f578 <FCM_UpdateOperationCycle+0x268>)
 800f55c:	5c89      	ldrb	r1, [r1, r2]
 800f55e:	4a08      	ldr	r2, [pc, #32]	; (800f580 <FCM_UpdateOperationCycle+0x270>)
 800f560:	54d1      	strb	r1, [r2, r3]
 800f562:	7bfb      	ldrb	r3, [r7, #15]
 800f564:	3301      	adds	r3, #1
 800f566:	73fb      	strb	r3, [r7, #15]
 800f568:	7bfb      	ldrb	r3, [r7, #15]
 800f56a:	2b02      	cmp	r3, #2
 800f56c:	f67f aef3 	bls.w	800f356 <FCM_UpdateOperationCycle+0x46>
 800f570:	bf00      	nop
 800f572:	3710      	adds	r7, #16
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	2400029c 	.word	0x2400029c
 800f57c:	240002a3 	.word	0x240002a3
 800f580:	240002a0 	.word	0x240002a0
 800f584:	24000000 	.word	0x24000000
 800f588:	0801045c 	.word	0x0801045c

0800f58c <FCM_ClearAllDTCInfo>:
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b082      	sub	sp, #8
 800f590:	af00      	add	r7, sp, #0
 800f592:	f7f1 f88b 	bl	80006ac <HAL_FCM_InitStatus>
 800f596:	4603      	mov	r3, r0
 800f598:	2b01      	cmp	r3, #1
 800f59a:	f040 80b0 	bne.w	800f6fe <FCM_ClearAllDTCInfo+0x172>
 800f59e:	2301      	movs	r3, #1
 800f5a0:	71bb      	strb	r3, [r7, #6]
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	71fb      	strb	r3, [r7, #7]
 800f5a6:	e00a      	b.n	800f5be <FCM_ClearAllDTCInfo+0x32>
 800f5a8:	79fb      	ldrb	r3, [r7, #7]
 800f5aa:	4a58      	ldr	r2, [pc, #352]	; (800f70c <FCM_ClearAllDTCInfo+0x180>)
 800f5ac:	2101      	movs	r1, #1
 800f5ae:	54d1      	strb	r1, [r2, r3]
 800f5b0:	79fb      	ldrb	r3, [r7, #7]
 800f5b2:	4a57      	ldr	r2, [pc, #348]	; (800f710 <FCM_ClearAllDTCInfo+0x184>)
 800f5b4:	2101      	movs	r1, #1
 800f5b6:	54d1      	strb	r1, [r2, r3]
 800f5b8:	79fb      	ldrb	r3, [r7, #7]
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	71fb      	strb	r3, [r7, #7]
 800f5be:	79fb      	ldrb	r3, [r7, #7]
 800f5c0:	2b02      	cmp	r3, #2
 800f5c2:	d9f1      	bls.n	800f5a8 <FCM_ClearAllDTCInfo+0x1c>
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	71fb      	strb	r3, [r7, #7]
 800f5c8:	e06e      	b.n	800f6a8 <FCM_ClearAllDTCInfo+0x11c>
 800f5ca:	79fa      	ldrb	r2, [r7, #7]
 800f5cc:	4951      	ldr	r1, [pc, #324]	; (800f714 <FCM_ClearAllDTCInfo+0x188>)
 800f5ce:	4613      	mov	r3, r2
 800f5d0:	005b      	lsls	r3, r3, #1
 800f5d2:	4413      	add	r3, r2
 800f5d4:	009b      	lsls	r3, r3, #2
 800f5d6:	440b      	add	r3, r1
 800f5d8:	3309      	adds	r3, #9
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d160      	bne.n	800f6a2 <FCM_ClearAllDTCInfo+0x116>
 800f5e0:	79fa      	ldrb	r2, [r7, #7]
 800f5e2:	494d      	ldr	r1, [pc, #308]	; (800f718 <FCM_ClearAllDTCInfo+0x18c>)
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	005b      	lsls	r3, r3, #1
 800f5e8:	4413      	add	r3, r2
 800f5ea:	18ca      	adds	r2, r1, r3
 800f5ec:	7853      	ldrb	r3, [r2, #1]
 800f5ee:	f36f 13c7 	bfc	r3, #7, #1
 800f5f2:	7053      	strb	r3, [r2, #1]
 800f5f4:	79fa      	ldrb	r2, [r7, #7]
 800f5f6:	4948      	ldr	r1, [pc, #288]	; (800f718 <FCM_ClearAllDTCInfo+0x18c>)
 800f5f8:	4613      	mov	r3, r2
 800f5fa:	005b      	lsls	r3, r3, #1
 800f5fc:	4413      	add	r3, r2
 800f5fe:	18ca      	adds	r2, r1, r3
 800f600:	7853      	ldrb	r3, [r2, #1]
 800f602:	f36f 1386 	bfc	r3, #6, #1
 800f606:	7053      	strb	r3, [r2, #1]
 800f608:	79fa      	ldrb	r2, [r7, #7]
 800f60a:	4943      	ldr	r1, [pc, #268]	; (800f718 <FCM_ClearAllDTCInfo+0x18c>)
 800f60c:	4613      	mov	r3, r2
 800f60e:	005b      	lsls	r3, r3, #1
 800f610:	4413      	add	r3, r2
 800f612:	18ca      	adds	r2, r1, r3
 800f614:	7853      	ldrb	r3, [r2, #1]
 800f616:	f36f 1345 	bfc	r3, #5, #1
 800f61a:	7053      	strb	r3, [r2, #1]
 800f61c:	79fa      	ldrb	r2, [r7, #7]
 800f61e:	493e      	ldr	r1, [pc, #248]	; (800f718 <FCM_ClearAllDTCInfo+0x18c>)
 800f620:	4613      	mov	r3, r2
 800f622:	005b      	lsls	r3, r3, #1
 800f624:	4413      	add	r3, r2
 800f626:	18ca      	adds	r2, r1, r3
 800f628:	7853      	ldrb	r3, [r2, #1]
 800f62a:	f36f 1304 	bfc	r3, #4, #1
 800f62e:	7053      	strb	r3, [r2, #1]
 800f630:	79fa      	ldrb	r2, [r7, #7]
 800f632:	4939      	ldr	r1, [pc, #228]	; (800f718 <FCM_ClearAllDTCInfo+0x18c>)
 800f634:	4613      	mov	r3, r2
 800f636:	005b      	lsls	r3, r3, #1
 800f638:	4413      	add	r3, r2
 800f63a:	18ca      	adds	r2, r1, r3
 800f63c:	7853      	ldrb	r3, [r2, #1]
 800f63e:	f36f 03c3 	bfc	r3, #3, #1
 800f642:	7053      	strb	r3, [r2, #1]
 800f644:	79fa      	ldrb	r2, [r7, #7]
 800f646:	4934      	ldr	r1, [pc, #208]	; (800f718 <FCM_ClearAllDTCInfo+0x18c>)
 800f648:	4613      	mov	r3, r2
 800f64a:	005b      	lsls	r3, r3, #1
 800f64c:	4413      	add	r3, r2
 800f64e:	18ca      	adds	r2, r1, r3
 800f650:	7853      	ldrb	r3, [r2, #1]
 800f652:	f36f 0382 	bfc	r3, #2, #1
 800f656:	7053      	strb	r3, [r2, #1]
 800f658:	79fa      	ldrb	r2, [r7, #7]
 800f65a:	492f      	ldr	r1, [pc, #188]	; (800f718 <FCM_ClearAllDTCInfo+0x18c>)
 800f65c:	4613      	mov	r3, r2
 800f65e:	005b      	lsls	r3, r3, #1
 800f660:	4413      	add	r3, r2
 800f662:	18ca      	adds	r2, r1, r3
 800f664:	7853      	ldrb	r3, [r2, #1]
 800f666:	f043 0302 	orr.w	r3, r3, #2
 800f66a:	7053      	strb	r3, [r2, #1]
 800f66c:	79fa      	ldrb	r2, [r7, #7]
 800f66e:	492a      	ldr	r1, [pc, #168]	; (800f718 <FCM_ClearAllDTCInfo+0x18c>)
 800f670:	4613      	mov	r3, r2
 800f672:	005b      	lsls	r3, r3, #1
 800f674:	4413      	add	r3, r2
 800f676:	18ca      	adds	r2, r1, r3
 800f678:	7853      	ldrb	r3, [r2, #1]
 800f67a:	f36f 0300 	bfc	r3, #0, #1
 800f67e:	7053      	strb	r3, [r2, #1]
 800f680:	79fa      	ldrb	r2, [r7, #7]
 800f682:	4925      	ldr	r1, [pc, #148]	; (800f718 <FCM_ClearAllDTCInfo+0x18c>)
 800f684:	4613      	mov	r3, r2
 800f686:	005b      	lsls	r3, r3, #1
 800f688:	4413      	add	r3, r2
 800f68a:	440b      	add	r3, r1
 800f68c:	3302      	adds	r3, #2
 800f68e:	2200      	movs	r2, #0
 800f690:	701a      	strb	r2, [r3, #0]
 800f692:	79fa      	ldrb	r2, [r7, #7]
 800f694:	4920      	ldr	r1, [pc, #128]	; (800f718 <FCM_ClearAllDTCInfo+0x18c>)
 800f696:	4613      	mov	r3, r2
 800f698:	005b      	lsls	r3, r3, #1
 800f69a:	4413      	add	r3, r2
 800f69c:	440b      	add	r3, r1
 800f69e:	2200      	movs	r2, #0
 800f6a0:	701a      	strb	r2, [r3, #0]
 800f6a2:	79fb      	ldrb	r3, [r7, #7]
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	71fb      	strb	r3, [r7, #7]
 800f6a8:	79fb      	ldrb	r3, [r7, #7]
 800f6aa:	2b20      	cmp	r3, #32
 800f6ac:	d98d      	bls.n	800f5ca <FCM_ClearAllDTCInfo+0x3e>
 800f6ae:	4b1b      	ldr	r3, [pc, #108]	; (800f71c <FCM_ClearAllDTCInfo+0x190>)
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	701a      	strb	r2, [r3, #0]
 800f6b4:	4b1a      	ldr	r3, [pc, #104]	; (800f720 <FCM_ClearAllDTCInfo+0x194>)
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	601a      	str	r2, [r3, #0]
 800f6ba:	4b19      	ldr	r3, [pc, #100]	; (800f720 <FCM_ClearAllDTCInfo+0x194>)
 800f6bc:	2200      	movs	r2, #0
 800f6be:	715a      	strb	r2, [r3, #5]
 800f6c0:	4b18      	ldr	r3, [pc, #96]	; (800f724 <FCM_ClearAllDTCInfo+0x198>)
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	701a      	strb	r2, [r3, #0]
 800f6c6:	4b18      	ldr	r3, [pc, #96]	; (800f728 <FCM_ClearAllDTCInfo+0x19c>)
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	601a      	str	r2, [r3, #0]
 800f6cc:	4b16      	ldr	r3, [pc, #88]	; (800f728 <FCM_ClearAllDTCInfo+0x19c>)
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	715a      	strb	r2, [r3, #5]
 800f6d2:	4b16      	ldr	r3, [pc, #88]	; (800f72c <FCM_ClearAllDTCInfo+0x1a0>)
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	701a      	strb	r2, [r3, #0]
 800f6d8:	4b15      	ldr	r3, [pc, #84]	; (800f730 <FCM_ClearAllDTCInfo+0x1a4>)
 800f6da:	2200      	movs	r2, #0
 800f6dc:	601a      	str	r2, [r3, #0]
 800f6de:	4b14      	ldr	r3, [pc, #80]	; (800f730 <FCM_ClearAllDTCInfo+0x1a4>)
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	601a      	str	r2, [r3, #0]
 800f6e4:	4b13      	ldr	r3, [pc, #76]	; (800f734 <FCM_ClearAllDTCInfo+0x1a8>)
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	701a      	strb	r2, [r3, #0]
 800f6ea:	4b13      	ldr	r3, [pc, #76]	; (800f738 <FCM_ClearAllDTCInfo+0x1ac>)
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	601a      	str	r2, [r3, #0]
 800f6f0:	4b11      	ldr	r3, [pc, #68]	; (800f738 <FCM_ClearAllDTCInfo+0x1ac>)
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	715a      	strb	r2, [r3, #5]
 800f6f6:	4808      	ldr	r0, [pc, #32]	; (800f718 <FCM_ClearAllDTCInfo+0x18c>)
 800f6f8:	f7f1 f8ac 	bl	8000854 <HAL_FCM_ClearAllDTC>
 800f6fc:	e001      	b.n	800f702 <FCM_ClearAllDTCInfo+0x176>
 800f6fe:	2300      	movs	r3, #0
 800f700:	71bb      	strb	r3, [r7, #6]
 800f702:	79bb      	ldrb	r3, [r7, #6]
 800f704:	4618      	mov	r0, r3
 800f706:	3708      	adds	r7, #8
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}
 800f70c:	2400029c 	.word	0x2400029c
 800f710:	240002a0 	.word	0x240002a0
 800f714:	0801045c 	.word	0x0801045c
 800f718:	24000000 	.word	0x24000000
 800f71c:	24000312 	.word	0x24000312
 800f720:	24000314 	.word	0x24000314
 800f724:	2400031c 	.word	0x2400031c
 800f728:	24000320 	.word	0x24000320
 800f72c:	24000328 	.word	0x24000328
 800f730:	2400032c 	.word	0x2400032c
 800f734:	24000334 	.word	0x24000334
 800f738:	24000338 	.word	0x24000338

0800f73c <FCM_CopyDTCStatusByDTCNumber>:
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b084      	sub	sp, #16
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f7ff fdbe 	bl	800f2c8 <FCM_FindDTCIndex>
 800f74c:	4603      	mov	r3, r0
 800f74e:	81fb      	strh	r3, [r7, #14]
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d035      	beq.n	800f7c2 <FCM_CopyDTCStatusByDTCNumber+0x86>
 800f756:	89fb      	ldrh	r3, [r7, #14]
 800f758:	2b20      	cmp	r3, #32
 800f75a:	d832      	bhi.n	800f7c2 <FCM_CopyDTCStatusByDTCNumber+0x86>
 800f75c:	89fa      	ldrh	r2, [r7, #14]
 800f75e:	491b      	ldr	r1, [pc, #108]	; (800f7cc <FCM_CopyDTCStatusByDTCNumber+0x90>)
 800f760:	4613      	mov	r3, r2
 800f762:	005b      	lsls	r3, r3, #1
 800f764:	4413      	add	r3, r2
 800f766:	009b      	lsls	r3, r3, #2
 800f768:	440b      	add	r3, r1
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	0c1b      	lsrs	r3, r3, #16
 800f76e:	b2da      	uxtb	r2, r3
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	701a      	strb	r2, [r3, #0]
 800f774:	89fa      	ldrh	r2, [r7, #14]
 800f776:	4915      	ldr	r1, [pc, #84]	; (800f7cc <FCM_CopyDTCStatusByDTCNumber+0x90>)
 800f778:	4613      	mov	r3, r2
 800f77a:	005b      	lsls	r3, r3, #1
 800f77c:	4413      	add	r3, r2
 800f77e:	009b      	lsls	r3, r3, #2
 800f780:	440b      	add	r3, r1
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	0a1a      	lsrs	r2, r3, #8
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	3301      	adds	r3, #1
 800f78a:	b2d2      	uxtb	r2, r2
 800f78c:	701a      	strb	r2, [r3, #0]
 800f78e:	89fa      	ldrh	r2, [r7, #14]
 800f790:	490e      	ldr	r1, [pc, #56]	; (800f7cc <FCM_CopyDTCStatusByDTCNumber+0x90>)
 800f792:	4613      	mov	r3, r2
 800f794:	005b      	lsls	r3, r3, #1
 800f796:	4413      	add	r3, r2
 800f798:	009b      	lsls	r3, r3, #2
 800f79a:	440b      	add	r3, r1
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	3302      	adds	r3, #2
 800f7a2:	b2d2      	uxtb	r2, r2
 800f7a4:	701a      	strb	r2, [r3, #0]
 800f7a6:	89fa      	ldrh	r2, [r7, #14]
 800f7a8:	4909      	ldr	r1, [pc, #36]	; (800f7d0 <FCM_CopyDTCStatusByDTCNumber+0x94>)
 800f7aa:	4613      	mov	r3, r2
 800f7ac:	005b      	lsls	r3, r3, #1
 800f7ae:	4413      	add	r3, r2
 800f7b0:	440b      	add	r3, r1
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	781a      	ldrb	r2, [r3, #0]
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	3303      	adds	r3, #3
 800f7ba:	f002 026f 	and.w	r2, r2, #111	; 0x6f
 800f7be:	b2d2      	uxtb	r2, r2
 800f7c0:	701a      	strb	r2, [r3, #0]
 800f7c2:	bf00      	nop
 800f7c4:	3710      	adds	r7, #16
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	0801045c 	.word	0x0801045c
 800f7d0:	24000000 	.word	0x24000000

0800f7d4 <FCM_ReportNoOfDTCByStatusMask>:
 800f7d4:	b480      	push	{r7}
 800f7d6:	b085      	sub	sp, #20
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	4603      	mov	r3, r0
 800f7dc:	71fb      	strb	r3, [r7, #7]
 800f7de:	2300      	movs	r3, #0
 800f7e0:	81bb      	strh	r3, [r7, #12]
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	81fb      	strh	r3, [r7, #14]
 800f7e6:	e014      	b.n	800f812 <FCM_ReportNoOfDTCByStatusMask+0x3e>
 800f7e8:	89fa      	ldrh	r2, [r7, #14]
 800f7ea:	490f      	ldr	r1, [pc, #60]	; (800f828 <FCM_ReportNoOfDTCByStatusMask+0x54>)
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	005b      	lsls	r3, r3, #1
 800f7f0:	4413      	add	r3, r2
 800f7f2:	440b      	add	r3, r1
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	461a      	mov	r2, r3
 800f7fa:	79fb      	ldrb	r3, [r7, #7]
 800f7fc:	4013      	ands	r3, r2
 800f7fe:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800f802:	2b00      	cmp	r3, #0
 800f804:	d002      	beq.n	800f80c <FCM_ReportNoOfDTCByStatusMask+0x38>
 800f806:	89bb      	ldrh	r3, [r7, #12]
 800f808:	3301      	adds	r3, #1
 800f80a:	81bb      	strh	r3, [r7, #12]
 800f80c:	89fb      	ldrh	r3, [r7, #14]
 800f80e:	3301      	adds	r3, #1
 800f810:	81fb      	strh	r3, [r7, #14]
 800f812:	89fb      	ldrh	r3, [r7, #14]
 800f814:	2b20      	cmp	r3, #32
 800f816:	d9e7      	bls.n	800f7e8 <FCM_ReportNoOfDTCByStatusMask+0x14>
 800f818:	89bb      	ldrh	r3, [r7, #12]
 800f81a:	4618      	mov	r0, r3
 800f81c:	3714      	adds	r7, #20
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr
 800f826:	bf00      	nop
 800f828:	24000000 	.word	0x24000000

0800f82c <FCM_ReportDTCByStatusMask>:
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b084      	sub	sp, #16
 800f830:	af00      	add	r7, sp, #0
 800f832:	4603      	mov	r3, r0
 800f834:	6039      	str	r1, [r7, #0]
 800f836:	71fb      	strb	r3, [r7, #7]
 800f838:	2300      	movs	r3, #0
 800f83a:	81bb      	strh	r3, [r7, #12]
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d05a      	beq.n	800f8f8 <FCM_ReportDTCByStatusMask+0xcc>
 800f842:	f7f0 ff33 	bl	80006ac <HAL_FCM_InitStatus>
 800f846:	4603      	mov	r3, r0
 800f848:	2b01      	cmp	r3, #1
 800f84a:	d155      	bne.n	800f8f8 <FCM_ReportDTCByStatusMask+0xcc>
 800f84c:	2300      	movs	r3, #0
 800f84e:	81fb      	strh	r3, [r7, #14]
 800f850:	e04f      	b.n	800f8f2 <FCM_ReportDTCByStatusMask+0xc6>
 800f852:	89fa      	ldrh	r2, [r7, #14]
 800f854:	492b      	ldr	r1, [pc, #172]	; (800f904 <FCM_ReportDTCByStatusMask+0xd8>)
 800f856:	4613      	mov	r3, r2
 800f858:	005b      	lsls	r3, r3, #1
 800f85a:	4413      	add	r3, r2
 800f85c:	440b      	add	r3, r1
 800f85e:	3301      	adds	r3, #1
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	461a      	mov	r2, r3
 800f864:	79fb      	ldrb	r3, [r7, #7]
 800f866:	4013      	ands	r3, r2
 800f868:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d03d      	beq.n	800f8ec <FCM_ReportDTCByStatusMask+0xc0>
 800f870:	89fa      	ldrh	r2, [r7, #14]
 800f872:	4925      	ldr	r1, [pc, #148]	; (800f908 <FCM_ReportDTCByStatusMask+0xdc>)
 800f874:	4613      	mov	r3, r2
 800f876:	005b      	lsls	r3, r3, #1
 800f878:	4413      	add	r3, r2
 800f87a:	009b      	lsls	r3, r3, #2
 800f87c:	440b      	add	r3, r1
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	0c19      	lsrs	r1, r3, #16
 800f882:	89bb      	ldrh	r3, [r7, #12]
 800f884:	683a      	ldr	r2, [r7, #0]
 800f886:	4413      	add	r3, r2
 800f888:	b2ca      	uxtb	r2, r1
 800f88a:	701a      	strb	r2, [r3, #0]
 800f88c:	89fa      	ldrh	r2, [r7, #14]
 800f88e:	491e      	ldr	r1, [pc, #120]	; (800f908 <FCM_ReportDTCByStatusMask+0xdc>)
 800f890:	4613      	mov	r3, r2
 800f892:	005b      	lsls	r3, r3, #1
 800f894:	4413      	add	r3, r2
 800f896:	009b      	lsls	r3, r3, #2
 800f898:	440b      	add	r3, r1
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	0a19      	lsrs	r1, r3, #8
 800f89e:	89bb      	ldrh	r3, [r7, #12]
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	683a      	ldr	r2, [r7, #0]
 800f8a4:	4413      	add	r3, r2
 800f8a6:	b2ca      	uxtb	r2, r1
 800f8a8:	701a      	strb	r2, [r3, #0]
 800f8aa:	89fa      	ldrh	r2, [r7, #14]
 800f8ac:	4916      	ldr	r1, [pc, #88]	; (800f908 <FCM_ReportDTCByStatusMask+0xdc>)
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	005b      	lsls	r3, r3, #1
 800f8b2:	4413      	add	r3, r2
 800f8b4:	009b      	lsls	r3, r3, #2
 800f8b6:	440b      	add	r3, r1
 800f8b8:	6819      	ldr	r1, [r3, #0]
 800f8ba:	89bb      	ldrh	r3, [r7, #12]
 800f8bc:	3302      	adds	r3, #2
 800f8be:	683a      	ldr	r2, [r7, #0]
 800f8c0:	4413      	add	r3, r2
 800f8c2:	b2ca      	uxtb	r2, r1
 800f8c4:	701a      	strb	r2, [r3, #0]
 800f8c6:	89fa      	ldrh	r2, [r7, #14]
 800f8c8:	490e      	ldr	r1, [pc, #56]	; (800f904 <FCM_ReportDTCByStatusMask+0xd8>)
 800f8ca:	4613      	mov	r3, r2
 800f8cc:	005b      	lsls	r3, r3, #1
 800f8ce:	4413      	add	r3, r2
 800f8d0:	440b      	add	r3, r1
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	781a      	ldrb	r2, [r3, #0]
 800f8d6:	89bb      	ldrh	r3, [r7, #12]
 800f8d8:	3303      	adds	r3, #3
 800f8da:	6839      	ldr	r1, [r7, #0]
 800f8dc:	440b      	add	r3, r1
 800f8de:	f002 026f 	and.w	r2, r2, #111	; 0x6f
 800f8e2:	b2d2      	uxtb	r2, r2
 800f8e4:	701a      	strb	r2, [r3, #0]
 800f8e6:	89bb      	ldrh	r3, [r7, #12]
 800f8e8:	3304      	adds	r3, #4
 800f8ea:	81bb      	strh	r3, [r7, #12]
 800f8ec:	89fb      	ldrh	r3, [r7, #14]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	81fb      	strh	r3, [r7, #14]
 800f8f2:	89fb      	ldrh	r3, [r7, #14]
 800f8f4:	2b20      	cmp	r3, #32
 800f8f6:	d9ac      	bls.n	800f852 <FCM_ReportDTCByStatusMask+0x26>
 800f8f8:	89bb      	ldrh	r3, [r7, #12]
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3710      	adds	r7, #16
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
 800f902:	bf00      	nop
 800f904:	24000000 	.word	0x24000000
 800f908:	0801045c 	.word	0x0801045c

0800f90c <FCM_ReportSupportedDTCs>:
 800f90c:	b480      	push	{r7}
 800f90e:	b085      	sub	sp, #20
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	2300      	movs	r3, #0
 800f916:	81bb      	strh	r3, [r7, #12]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d04a      	beq.n	800f9b4 <FCM_ReportSupportedDTCs+0xa8>
 800f91e:	2300      	movs	r3, #0
 800f920:	81fb      	strh	r3, [r7, #14]
 800f922:	e044      	b.n	800f9ae <FCM_ReportSupportedDTCs+0xa2>
 800f924:	89fa      	ldrh	r2, [r7, #14]
 800f926:	4927      	ldr	r1, [pc, #156]	; (800f9c4 <FCM_ReportSupportedDTCs+0xb8>)
 800f928:	4613      	mov	r3, r2
 800f92a:	005b      	lsls	r3, r3, #1
 800f92c:	4413      	add	r3, r2
 800f92e:	009b      	lsls	r3, r3, #2
 800f930:	440b      	add	r3, r1
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	0c19      	lsrs	r1, r3, #16
 800f936:	89fb      	ldrh	r3, [r7, #14]
 800f938:	009b      	lsls	r3, r3, #2
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	4413      	add	r3, r2
 800f93e:	b2ca      	uxtb	r2, r1
 800f940:	701a      	strb	r2, [r3, #0]
 800f942:	89fa      	ldrh	r2, [r7, #14]
 800f944:	491f      	ldr	r1, [pc, #124]	; (800f9c4 <FCM_ReportSupportedDTCs+0xb8>)
 800f946:	4613      	mov	r3, r2
 800f948:	005b      	lsls	r3, r3, #1
 800f94a:	4413      	add	r3, r2
 800f94c:	009b      	lsls	r3, r3, #2
 800f94e:	440b      	add	r3, r1
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	0a19      	lsrs	r1, r3, #8
 800f954:	89fb      	ldrh	r3, [r7, #14]
 800f956:	009b      	lsls	r3, r3, #2
 800f958:	3301      	adds	r3, #1
 800f95a:	687a      	ldr	r2, [r7, #4]
 800f95c:	4413      	add	r3, r2
 800f95e:	b2ca      	uxtb	r2, r1
 800f960:	701a      	strb	r2, [r3, #0]
 800f962:	89fa      	ldrh	r2, [r7, #14]
 800f964:	4917      	ldr	r1, [pc, #92]	; (800f9c4 <FCM_ReportSupportedDTCs+0xb8>)
 800f966:	4613      	mov	r3, r2
 800f968:	005b      	lsls	r3, r3, #1
 800f96a:	4413      	add	r3, r2
 800f96c:	009b      	lsls	r3, r3, #2
 800f96e:	440b      	add	r3, r1
 800f970:	6819      	ldr	r1, [r3, #0]
 800f972:	89fb      	ldrh	r3, [r7, #14]
 800f974:	009b      	lsls	r3, r3, #2
 800f976:	3302      	adds	r3, #2
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	4413      	add	r3, r2
 800f97c:	b2ca      	uxtb	r2, r1
 800f97e:	701a      	strb	r2, [r3, #0]
 800f980:	89fa      	ldrh	r2, [r7, #14]
 800f982:	4911      	ldr	r1, [pc, #68]	; (800f9c8 <FCM_ReportSupportedDTCs+0xbc>)
 800f984:	4613      	mov	r3, r2
 800f986:	005b      	lsls	r3, r3, #1
 800f988:	4413      	add	r3, r2
 800f98a:	440b      	add	r3, r1
 800f98c:	3301      	adds	r3, #1
 800f98e:	781a      	ldrb	r2, [r3, #0]
 800f990:	89fb      	ldrh	r3, [r7, #14]
 800f992:	009b      	lsls	r3, r3, #2
 800f994:	3303      	adds	r3, #3
 800f996:	6879      	ldr	r1, [r7, #4]
 800f998:	440b      	add	r3, r1
 800f99a:	f002 026f 	and.w	r2, r2, #111	; 0x6f
 800f99e:	b2d2      	uxtb	r2, r2
 800f9a0:	701a      	strb	r2, [r3, #0]
 800f9a2:	89bb      	ldrh	r3, [r7, #12]
 800f9a4:	3304      	adds	r3, #4
 800f9a6:	81bb      	strh	r3, [r7, #12]
 800f9a8:	89fb      	ldrh	r3, [r7, #14]
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	81fb      	strh	r3, [r7, #14]
 800f9ae:	89fb      	ldrh	r3, [r7, #14]
 800f9b0:	2b20      	cmp	r3, #32
 800f9b2:	d9b7      	bls.n	800f924 <FCM_ReportSupportedDTCs+0x18>
 800f9b4:	89bb      	ldrh	r3, [r7, #12]
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3714      	adds	r7, #20
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr
 800f9c2:	bf00      	nop
 800f9c4:	0801045c 	.word	0x0801045c
 800f9c8:	24000000 	.word	0x24000000

0800f9cc <FCM_UpdateCntrolDTCSetting>:
 800f9cc:	b480      	push	{r7}
 800f9ce:	b083      	sub	sp, #12
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	71fb      	strb	r3, [r7, #7]
 800f9d6:	4a04      	ldr	r2, [pc, #16]	; (800f9e8 <FCM_UpdateCntrolDTCSetting+0x1c>)
 800f9d8:	79fb      	ldrb	r3, [r7, #7]
 800f9da:	7013      	strb	r3, [r2, #0]
 800f9dc:	bf00      	nop
 800f9de:	370c      	adds	r7, #12
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr
 800f9e8:	240002a3 	.word	0x240002a3

0800f9ec <siprintf>:
 800f9ec:	b40e      	push	{r1, r2, r3}
 800f9ee:	b500      	push	{lr}
 800f9f0:	b09c      	sub	sp, #112	; 0x70
 800f9f2:	ab1d      	add	r3, sp, #116	; 0x74
 800f9f4:	9002      	str	r0, [sp, #8]
 800f9f6:	9006      	str	r0, [sp, #24]
 800f9f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f9fc:	4809      	ldr	r0, [pc, #36]	; (800fa24 <siprintf+0x38>)
 800f9fe:	9107      	str	r1, [sp, #28]
 800fa00:	9104      	str	r1, [sp, #16]
 800fa02:	4909      	ldr	r1, [pc, #36]	; (800fa28 <siprintf+0x3c>)
 800fa04:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa08:	9105      	str	r1, [sp, #20]
 800fa0a:	6800      	ldr	r0, [r0, #0]
 800fa0c:	9301      	str	r3, [sp, #4]
 800fa0e:	a902      	add	r1, sp, #8
 800fa10:	f000 f9a0 	bl	800fd54 <_svfiprintf_r>
 800fa14:	9b02      	ldr	r3, [sp, #8]
 800fa16:	2200      	movs	r2, #0
 800fa18:	701a      	strb	r2, [r3, #0]
 800fa1a:	b01c      	add	sp, #112	; 0x70
 800fa1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa20:	b003      	add	sp, #12
 800fa22:	4770      	bx	lr
 800fa24:	240002f0 	.word	0x240002f0
 800fa28:	ffff0208 	.word	0xffff0208

0800fa2c <memset>:
 800fa2c:	4402      	add	r2, r0
 800fa2e:	4603      	mov	r3, r0
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d100      	bne.n	800fa36 <memset+0xa>
 800fa34:	4770      	bx	lr
 800fa36:	f803 1b01 	strb.w	r1, [r3], #1
 800fa3a:	e7f9      	b.n	800fa30 <memset+0x4>

0800fa3c <__errno>:
 800fa3c:	4b01      	ldr	r3, [pc, #4]	; (800fa44 <__errno+0x8>)
 800fa3e:	6818      	ldr	r0, [r3, #0]
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	240002f0 	.word	0x240002f0

0800fa48 <__libc_init_array>:
 800fa48:	b570      	push	{r4, r5, r6, lr}
 800fa4a:	4d0d      	ldr	r5, [pc, #52]	; (800fa80 <__libc_init_array+0x38>)
 800fa4c:	4c0d      	ldr	r4, [pc, #52]	; (800fa84 <__libc_init_array+0x3c>)
 800fa4e:	1b64      	subs	r4, r4, r5
 800fa50:	10a4      	asrs	r4, r4, #2
 800fa52:	2600      	movs	r6, #0
 800fa54:	42a6      	cmp	r6, r4
 800fa56:	d109      	bne.n	800fa6c <__libc_init_array+0x24>
 800fa58:	4d0b      	ldr	r5, [pc, #44]	; (800fa88 <__libc_init_array+0x40>)
 800fa5a:	4c0c      	ldr	r4, [pc, #48]	; (800fa8c <__libc_init_array+0x44>)
 800fa5c:	f000 fc6a 	bl	8010334 <_init>
 800fa60:	1b64      	subs	r4, r4, r5
 800fa62:	10a4      	asrs	r4, r4, #2
 800fa64:	2600      	movs	r6, #0
 800fa66:	42a6      	cmp	r6, r4
 800fa68:	d105      	bne.n	800fa76 <__libc_init_array+0x2e>
 800fa6a:	bd70      	pop	{r4, r5, r6, pc}
 800fa6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa70:	4798      	blx	r3
 800fa72:	3601      	adds	r6, #1
 800fa74:	e7ee      	b.n	800fa54 <__libc_init_array+0xc>
 800fa76:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa7a:	4798      	blx	r3
 800fa7c:	3601      	adds	r6, #1
 800fa7e:	e7f2      	b.n	800fa66 <__libc_init_array+0x1e>
 800fa80:	08011054 	.word	0x08011054
 800fa84:	08011054 	.word	0x08011054
 800fa88:	08011054 	.word	0x08011054
 800fa8c:	08011058 	.word	0x08011058

0800fa90 <__retarget_lock_acquire_recursive>:
 800fa90:	4770      	bx	lr

0800fa92 <__retarget_lock_release_recursive>:
 800fa92:	4770      	bx	lr

0800fa94 <memcpy>:
 800fa94:	440a      	add	r2, r1
 800fa96:	4291      	cmp	r1, r2
 800fa98:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa9c:	d100      	bne.n	800faa0 <memcpy+0xc>
 800fa9e:	4770      	bx	lr
 800faa0:	b510      	push	{r4, lr}
 800faa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800faa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800faaa:	4291      	cmp	r1, r2
 800faac:	d1f9      	bne.n	800faa2 <memcpy+0xe>
 800faae:	bd10      	pop	{r4, pc}

0800fab0 <_free_r>:
 800fab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fab2:	2900      	cmp	r1, #0
 800fab4:	d044      	beq.n	800fb40 <_free_r+0x90>
 800fab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800faba:	9001      	str	r0, [sp, #4]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	f1a1 0404 	sub.w	r4, r1, #4
 800fac2:	bfb8      	it	lt
 800fac4:	18e4      	addlt	r4, r4, r3
 800fac6:	f000 f8df 	bl	800fc88 <__malloc_lock>
 800faca:	4a1e      	ldr	r2, [pc, #120]	; (800fb44 <_free_r+0x94>)
 800facc:	9801      	ldr	r0, [sp, #4]
 800face:	6813      	ldr	r3, [r2, #0]
 800fad0:	b933      	cbnz	r3, 800fae0 <_free_r+0x30>
 800fad2:	6063      	str	r3, [r4, #4]
 800fad4:	6014      	str	r4, [r2, #0]
 800fad6:	b003      	add	sp, #12
 800fad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fadc:	f000 b8da 	b.w	800fc94 <__malloc_unlock>
 800fae0:	42a3      	cmp	r3, r4
 800fae2:	d908      	bls.n	800faf6 <_free_r+0x46>
 800fae4:	6825      	ldr	r5, [r4, #0]
 800fae6:	1961      	adds	r1, r4, r5
 800fae8:	428b      	cmp	r3, r1
 800faea:	bf01      	itttt	eq
 800faec:	6819      	ldreq	r1, [r3, #0]
 800faee:	685b      	ldreq	r3, [r3, #4]
 800faf0:	1949      	addeq	r1, r1, r5
 800faf2:	6021      	streq	r1, [r4, #0]
 800faf4:	e7ed      	b.n	800fad2 <_free_r+0x22>
 800faf6:	461a      	mov	r2, r3
 800faf8:	685b      	ldr	r3, [r3, #4]
 800fafa:	b10b      	cbz	r3, 800fb00 <_free_r+0x50>
 800fafc:	42a3      	cmp	r3, r4
 800fafe:	d9fa      	bls.n	800faf6 <_free_r+0x46>
 800fb00:	6811      	ldr	r1, [r2, #0]
 800fb02:	1855      	adds	r5, r2, r1
 800fb04:	42a5      	cmp	r5, r4
 800fb06:	d10b      	bne.n	800fb20 <_free_r+0x70>
 800fb08:	6824      	ldr	r4, [r4, #0]
 800fb0a:	4421      	add	r1, r4
 800fb0c:	1854      	adds	r4, r2, r1
 800fb0e:	42a3      	cmp	r3, r4
 800fb10:	6011      	str	r1, [r2, #0]
 800fb12:	d1e0      	bne.n	800fad6 <_free_r+0x26>
 800fb14:	681c      	ldr	r4, [r3, #0]
 800fb16:	685b      	ldr	r3, [r3, #4]
 800fb18:	6053      	str	r3, [r2, #4]
 800fb1a:	440c      	add	r4, r1
 800fb1c:	6014      	str	r4, [r2, #0]
 800fb1e:	e7da      	b.n	800fad6 <_free_r+0x26>
 800fb20:	d902      	bls.n	800fb28 <_free_r+0x78>
 800fb22:	230c      	movs	r3, #12
 800fb24:	6003      	str	r3, [r0, #0]
 800fb26:	e7d6      	b.n	800fad6 <_free_r+0x26>
 800fb28:	6825      	ldr	r5, [r4, #0]
 800fb2a:	1961      	adds	r1, r4, r5
 800fb2c:	428b      	cmp	r3, r1
 800fb2e:	bf04      	itt	eq
 800fb30:	6819      	ldreq	r1, [r3, #0]
 800fb32:	685b      	ldreq	r3, [r3, #4]
 800fb34:	6063      	str	r3, [r4, #4]
 800fb36:	bf04      	itt	eq
 800fb38:	1949      	addeq	r1, r1, r5
 800fb3a:	6021      	streq	r1, [r4, #0]
 800fb3c:	6054      	str	r4, [r2, #4]
 800fb3e:	e7ca      	b.n	800fad6 <_free_r+0x26>
 800fb40:	b003      	add	sp, #12
 800fb42:	bd30      	pop	{r4, r5, pc}
 800fb44:	24002998 	.word	0x24002998

0800fb48 <sbrk_aligned>:
 800fb48:	b570      	push	{r4, r5, r6, lr}
 800fb4a:	4e0e      	ldr	r6, [pc, #56]	; (800fb84 <sbrk_aligned+0x3c>)
 800fb4c:	460c      	mov	r4, r1
 800fb4e:	6831      	ldr	r1, [r6, #0]
 800fb50:	4605      	mov	r5, r0
 800fb52:	b911      	cbnz	r1, 800fb5a <sbrk_aligned+0x12>
 800fb54:	f000 fba6 	bl	80102a4 <_sbrk_r>
 800fb58:	6030      	str	r0, [r6, #0]
 800fb5a:	4621      	mov	r1, r4
 800fb5c:	4628      	mov	r0, r5
 800fb5e:	f000 fba1 	bl	80102a4 <_sbrk_r>
 800fb62:	1c43      	adds	r3, r0, #1
 800fb64:	d00a      	beq.n	800fb7c <sbrk_aligned+0x34>
 800fb66:	1cc4      	adds	r4, r0, #3
 800fb68:	f024 0403 	bic.w	r4, r4, #3
 800fb6c:	42a0      	cmp	r0, r4
 800fb6e:	d007      	beq.n	800fb80 <sbrk_aligned+0x38>
 800fb70:	1a21      	subs	r1, r4, r0
 800fb72:	4628      	mov	r0, r5
 800fb74:	f000 fb96 	bl	80102a4 <_sbrk_r>
 800fb78:	3001      	adds	r0, #1
 800fb7a:	d101      	bne.n	800fb80 <sbrk_aligned+0x38>
 800fb7c:	f04f 34ff 	mov.w	r4, #4294967295
 800fb80:	4620      	mov	r0, r4
 800fb82:	bd70      	pop	{r4, r5, r6, pc}
 800fb84:	2400299c 	.word	0x2400299c

0800fb88 <_malloc_r>:
 800fb88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb8c:	1ccd      	adds	r5, r1, #3
 800fb8e:	f025 0503 	bic.w	r5, r5, #3
 800fb92:	3508      	adds	r5, #8
 800fb94:	2d0c      	cmp	r5, #12
 800fb96:	bf38      	it	cc
 800fb98:	250c      	movcc	r5, #12
 800fb9a:	2d00      	cmp	r5, #0
 800fb9c:	4607      	mov	r7, r0
 800fb9e:	db01      	blt.n	800fba4 <_malloc_r+0x1c>
 800fba0:	42a9      	cmp	r1, r5
 800fba2:	d905      	bls.n	800fbb0 <_malloc_r+0x28>
 800fba4:	230c      	movs	r3, #12
 800fba6:	603b      	str	r3, [r7, #0]
 800fba8:	2600      	movs	r6, #0
 800fbaa:	4630      	mov	r0, r6
 800fbac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fc84 <_malloc_r+0xfc>
 800fbb4:	f000 f868 	bl	800fc88 <__malloc_lock>
 800fbb8:	f8d8 3000 	ldr.w	r3, [r8]
 800fbbc:	461c      	mov	r4, r3
 800fbbe:	bb5c      	cbnz	r4, 800fc18 <_malloc_r+0x90>
 800fbc0:	4629      	mov	r1, r5
 800fbc2:	4638      	mov	r0, r7
 800fbc4:	f7ff ffc0 	bl	800fb48 <sbrk_aligned>
 800fbc8:	1c43      	adds	r3, r0, #1
 800fbca:	4604      	mov	r4, r0
 800fbcc:	d155      	bne.n	800fc7a <_malloc_r+0xf2>
 800fbce:	f8d8 4000 	ldr.w	r4, [r8]
 800fbd2:	4626      	mov	r6, r4
 800fbd4:	2e00      	cmp	r6, #0
 800fbd6:	d145      	bne.n	800fc64 <_malloc_r+0xdc>
 800fbd8:	2c00      	cmp	r4, #0
 800fbda:	d048      	beq.n	800fc6e <_malloc_r+0xe6>
 800fbdc:	6823      	ldr	r3, [r4, #0]
 800fbde:	4631      	mov	r1, r6
 800fbe0:	4638      	mov	r0, r7
 800fbe2:	eb04 0903 	add.w	r9, r4, r3
 800fbe6:	f000 fb5d 	bl	80102a4 <_sbrk_r>
 800fbea:	4581      	cmp	r9, r0
 800fbec:	d13f      	bne.n	800fc6e <_malloc_r+0xe6>
 800fbee:	6821      	ldr	r1, [r4, #0]
 800fbf0:	1a6d      	subs	r5, r5, r1
 800fbf2:	4629      	mov	r1, r5
 800fbf4:	4638      	mov	r0, r7
 800fbf6:	f7ff ffa7 	bl	800fb48 <sbrk_aligned>
 800fbfa:	3001      	adds	r0, #1
 800fbfc:	d037      	beq.n	800fc6e <_malloc_r+0xe6>
 800fbfe:	6823      	ldr	r3, [r4, #0]
 800fc00:	442b      	add	r3, r5
 800fc02:	6023      	str	r3, [r4, #0]
 800fc04:	f8d8 3000 	ldr.w	r3, [r8]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d038      	beq.n	800fc7e <_malloc_r+0xf6>
 800fc0c:	685a      	ldr	r2, [r3, #4]
 800fc0e:	42a2      	cmp	r2, r4
 800fc10:	d12b      	bne.n	800fc6a <_malloc_r+0xe2>
 800fc12:	2200      	movs	r2, #0
 800fc14:	605a      	str	r2, [r3, #4]
 800fc16:	e00f      	b.n	800fc38 <_malloc_r+0xb0>
 800fc18:	6822      	ldr	r2, [r4, #0]
 800fc1a:	1b52      	subs	r2, r2, r5
 800fc1c:	d41f      	bmi.n	800fc5e <_malloc_r+0xd6>
 800fc1e:	2a0b      	cmp	r2, #11
 800fc20:	d917      	bls.n	800fc52 <_malloc_r+0xca>
 800fc22:	1961      	adds	r1, r4, r5
 800fc24:	42a3      	cmp	r3, r4
 800fc26:	6025      	str	r5, [r4, #0]
 800fc28:	bf18      	it	ne
 800fc2a:	6059      	strne	r1, [r3, #4]
 800fc2c:	6863      	ldr	r3, [r4, #4]
 800fc2e:	bf08      	it	eq
 800fc30:	f8c8 1000 	streq.w	r1, [r8]
 800fc34:	5162      	str	r2, [r4, r5]
 800fc36:	604b      	str	r3, [r1, #4]
 800fc38:	4638      	mov	r0, r7
 800fc3a:	f104 060b 	add.w	r6, r4, #11
 800fc3e:	f000 f829 	bl	800fc94 <__malloc_unlock>
 800fc42:	f026 0607 	bic.w	r6, r6, #7
 800fc46:	1d23      	adds	r3, r4, #4
 800fc48:	1af2      	subs	r2, r6, r3
 800fc4a:	d0ae      	beq.n	800fbaa <_malloc_r+0x22>
 800fc4c:	1b9b      	subs	r3, r3, r6
 800fc4e:	50a3      	str	r3, [r4, r2]
 800fc50:	e7ab      	b.n	800fbaa <_malloc_r+0x22>
 800fc52:	42a3      	cmp	r3, r4
 800fc54:	6862      	ldr	r2, [r4, #4]
 800fc56:	d1dd      	bne.n	800fc14 <_malloc_r+0x8c>
 800fc58:	f8c8 2000 	str.w	r2, [r8]
 800fc5c:	e7ec      	b.n	800fc38 <_malloc_r+0xb0>
 800fc5e:	4623      	mov	r3, r4
 800fc60:	6864      	ldr	r4, [r4, #4]
 800fc62:	e7ac      	b.n	800fbbe <_malloc_r+0x36>
 800fc64:	4634      	mov	r4, r6
 800fc66:	6876      	ldr	r6, [r6, #4]
 800fc68:	e7b4      	b.n	800fbd4 <_malloc_r+0x4c>
 800fc6a:	4613      	mov	r3, r2
 800fc6c:	e7cc      	b.n	800fc08 <_malloc_r+0x80>
 800fc6e:	230c      	movs	r3, #12
 800fc70:	603b      	str	r3, [r7, #0]
 800fc72:	4638      	mov	r0, r7
 800fc74:	f000 f80e 	bl	800fc94 <__malloc_unlock>
 800fc78:	e797      	b.n	800fbaa <_malloc_r+0x22>
 800fc7a:	6025      	str	r5, [r4, #0]
 800fc7c:	e7dc      	b.n	800fc38 <_malloc_r+0xb0>
 800fc7e:	605b      	str	r3, [r3, #4]
 800fc80:	deff      	udf	#255	; 0xff
 800fc82:	bf00      	nop
 800fc84:	24002998 	.word	0x24002998

0800fc88 <__malloc_lock>:
 800fc88:	4801      	ldr	r0, [pc, #4]	; (800fc90 <__malloc_lock+0x8>)
 800fc8a:	f7ff bf01 	b.w	800fa90 <__retarget_lock_acquire_recursive>
 800fc8e:	bf00      	nop
 800fc90:	24002994 	.word	0x24002994

0800fc94 <__malloc_unlock>:
 800fc94:	4801      	ldr	r0, [pc, #4]	; (800fc9c <__malloc_unlock+0x8>)
 800fc96:	f7ff befc 	b.w	800fa92 <__retarget_lock_release_recursive>
 800fc9a:	bf00      	nop
 800fc9c:	24002994 	.word	0x24002994

0800fca0 <__ssputs_r>:
 800fca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fca4:	688e      	ldr	r6, [r1, #8]
 800fca6:	461f      	mov	r7, r3
 800fca8:	42be      	cmp	r6, r7
 800fcaa:	680b      	ldr	r3, [r1, #0]
 800fcac:	4682      	mov	sl, r0
 800fcae:	460c      	mov	r4, r1
 800fcb0:	4690      	mov	r8, r2
 800fcb2:	d82c      	bhi.n	800fd0e <__ssputs_r+0x6e>
 800fcb4:	898a      	ldrh	r2, [r1, #12]
 800fcb6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fcba:	d026      	beq.n	800fd0a <__ssputs_r+0x6a>
 800fcbc:	6965      	ldr	r5, [r4, #20]
 800fcbe:	6909      	ldr	r1, [r1, #16]
 800fcc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fcc4:	eba3 0901 	sub.w	r9, r3, r1
 800fcc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fccc:	1c7b      	adds	r3, r7, #1
 800fcce:	444b      	add	r3, r9
 800fcd0:	106d      	asrs	r5, r5, #1
 800fcd2:	429d      	cmp	r5, r3
 800fcd4:	bf38      	it	cc
 800fcd6:	461d      	movcc	r5, r3
 800fcd8:	0553      	lsls	r3, r2, #21
 800fcda:	d527      	bpl.n	800fd2c <__ssputs_r+0x8c>
 800fcdc:	4629      	mov	r1, r5
 800fcde:	f7ff ff53 	bl	800fb88 <_malloc_r>
 800fce2:	4606      	mov	r6, r0
 800fce4:	b360      	cbz	r0, 800fd40 <__ssputs_r+0xa0>
 800fce6:	6921      	ldr	r1, [r4, #16]
 800fce8:	464a      	mov	r2, r9
 800fcea:	f7ff fed3 	bl	800fa94 <memcpy>
 800fcee:	89a3      	ldrh	r3, [r4, #12]
 800fcf0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fcf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcf8:	81a3      	strh	r3, [r4, #12]
 800fcfa:	6126      	str	r6, [r4, #16]
 800fcfc:	6165      	str	r5, [r4, #20]
 800fcfe:	444e      	add	r6, r9
 800fd00:	eba5 0509 	sub.w	r5, r5, r9
 800fd04:	6026      	str	r6, [r4, #0]
 800fd06:	60a5      	str	r5, [r4, #8]
 800fd08:	463e      	mov	r6, r7
 800fd0a:	42be      	cmp	r6, r7
 800fd0c:	d900      	bls.n	800fd10 <__ssputs_r+0x70>
 800fd0e:	463e      	mov	r6, r7
 800fd10:	6820      	ldr	r0, [r4, #0]
 800fd12:	4632      	mov	r2, r6
 800fd14:	4641      	mov	r1, r8
 800fd16:	f000 faab 	bl	8010270 <memmove>
 800fd1a:	68a3      	ldr	r3, [r4, #8]
 800fd1c:	1b9b      	subs	r3, r3, r6
 800fd1e:	60a3      	str	r3, [r4, #8]
 800fd20:	6823      	ldr	r3, [r4, #0]
 800fd22:	4433      	add	r3, r6
 800fd24:	6023      	str	r3, [r4, #0]
 800fd26:	2000      	movs	r0, #0
 800fd28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd2c:	462a      	mov	r2, r5
 800fd2e:	f000 fac9 	bl	80102c4 <_realloc_r>
 800fd32:	4606      	mov	r6, r0
 800fd34:	2800      	cmp	r0, #0
 800fd36:	d1e0      	bne.n	800fcfa <__ssputs_r+0x5a>
 800fd38:	6921      	ldr	r1, [r4, #16]
 800fd3a:	4650      	mov	r0, sl
 800fd3c:	f7ff feb8 	bl	800fab0 <_free_r>
 800fd40:	230c      	movs	r3, #12
 800fd42:	f8ca 3000 	str.w	r3, [sl]
 800fd46:	89a3      	ldrh	r3, [r4, #12]
 800fd48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd4c:	81a3      	strh	r3, [r4, #12]
 800fd4e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd52:	e7e9      	b.n	800fd28 <__ssputs_r+0x88>

0800fd54 <_svfiprintf_r>:
 800fd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd58:	4698      	mov	r8, r3
 800fd5a:	898b      	ldrh	r3, [r1, #12]
 800fd5c:	061b      	lsls	r3, r3, #24
 800fd5e:	b09d      	sub	sp, #116	; 0x74
 800fd60:	4607      	mov	r7, r0
 800fd62:	460d      	mov	r5, r1
 800fd64:	4614      	mov	r4, r2
 800fd66:	d50e      	bpl.n	800fd86 <_svfiprintf_r+0x32>
 800fd68:	690b      	ldr	r3, [r1, #16]
 800fd6a:	b963      	cbnz	r3, 800fd86 <_svfiprintf_r+0x32>
 800fd6c:	2140      	movs	r1, #64	; 0x40
 800fd6e:	f7ff ff0b 	bl	800fb88 <_malloc_r>
 800fd72:	6028      	str	r0, [r5, #0]
 800fd74:	6128      	str	r0, [r5, #16]
 800fd76:	b920      	cbnz	r0, 800fd82 <_svfiprintf_r+0x2e>
 800fd78:	230c      	movs	r3, #12
 800fd7a:	603b      	str	r3, [r7, #0]
 800fd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd80:	e0d0      	b.n	800ff24 <_svfiprintf_r+0x1d0>
 800fd82:	2340      	movs	r3, #64	; 0x40
 800fd84:	616b      	str	r3, [r5, #20]
 800fd86:	2300      	movs	r3, #0
 800fd88:	9309      	str	r3, [sp, #36]	; 0x24
 800fd8a:	2320      	movs	r3, #32
 800fd8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd90:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd94:	2330      	movs	r3, #48	; 0x30
 800fd96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ff3c <_svfiprintf_r+0x1e8>
 800fd9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd9e:	f04f 0901 	mov.w	r9, #1
 800fda2:	4623      	mov	r3, r4
 800fda4:	469a      	mov	sl, r3
 800fda6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdaa:	b10a      	cbz	r2, 800fdb0 <_svfiprintf_r+0x5c>
 800fdac:	2a25      	cmp	r2, #37	; 0x25
 800fdae:	d1f9      	bne.n	800fda4 <_svfiprintf_r+0x50>
 800fdb0:	ebba 0b04 	subs.w	fp, sl, r4
 800fdb4:	d00b      	beq.n	800fdce <_svfiprintf_r+0x7a>
 800fdb6:	465b      	mov	r3, fp
 800fdb8:	4622      	mov	r2, r4
 800fdba:	4629      	mov	r1, r5
 800fdbc:	4638      	mov	r0, r7
 800fdbe:	f7ff ff6f 	bl	800fca0 <__ssputs_r>
 800fdc2:	3001      	adds	r0, #1
 800fdc4:	f000 80a9 	beq.w	800ff1a <_svfiprintf_r+0x1c6>
 800fdc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdca:	445a      	add	r2, fp
 800fdcc:	9209      	str	r2, [sp, #36]	; 0x24
 800fdce:	f89a 3000 	ldrb.w	r3, [sl]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	f000 80a1 	beq.w	800ff1a <_svfiprintf_r+0x1c6>
 800fdd8:	2300      	movs	r3, #0
 800fdda:	f04f 32ff 	mov.w	r2, #4294967295
 800fdde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fde2:	f10a 0a01 	add.w	sl, sl, #1
 800fde6:	9304      	str	r3, [sp, #16]
 800fde8:	9307      	str	r3, [sp, #28]
 800fdea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fdee:	931a      	str	r3, [sp, #104]	; 0x68
 800fdf0:	4654      	mov	r4, sl
 800fdf2:	2205      	movs	r2, #5
 800fdf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdf8:	4850      	ldr	r0, [pc, #320]	; (800ff3c <_svfiprintf_r+0x1e8>)
 800fdfa:	f7f0 fa89 	bl	8000310 <memchr>
 800fdfe:	9a04      	ldr	r2, [sp, #16]
 800fe00:	b9d8      	cbnz	r0, 800fe3a <_svfiprintf_r+0xe6>
 800fe02:	06d0      	lsls	r0, r2, #27
 800fe04:	bf44      	itt	mi
 800fe06:	2320      	movmi	r3, #32
 800fe08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe0c:	0711      	lsls	r1, r2, #28
 800fe0e:	bf44      	itt	mi
 800fe10:	232b      	movmi	r3, #43	; 0x2b
 800fe12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe16:	f89a 3000 	ldrb.w	r3, [sl]
 800fe1a:	2b2a      	cmp	r3, #42	; 0x2a
 800fe1c:	d015      	beq.n	800fe4a <_svfiprintf_r+0xf6>
 800fe1e:	9a07      	ldr	r2, [sp, #28]
 800fe20:	4654      	mov	r4, sl
 800fe22:	2000      	movs	r0, #0
 800fe24:	f04f 0c0a 	mov.w	ip, #10
 800fe28:	4621      	mov	r1, r4
 800fe2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe2e:	3b30      	subs	r3, #48	; 0x30
 800fe30:	2b09      	cmp	r3, #9
 800fe32:	d94d      	bls.n	800fed0 <_svfiprintf_r+0x17c>
 800fe34:	b1b0      	cbz	r0, 800fe64 <_svfiprintf_r+0x110>
 800fe36:	9207      	str	r2, [sp, #28]
 800fe38:	e014      	b.n	800fe64 <_svfiprintf_r+0x110>
 800fe3a:	eba0 0308 	sub.w	r3, r0, r8
 800fe3e:	fa09 f303 	lsl.w	r3, r9, r3
 800fe42:	4313      	orrs	r3, r2
 800fe44:	9304      	str	r3, [sp, #16]
 800fe46:	46a2      	mov	sl, r4
 800fe48:	e7d2      	b.n	800fdf0 <_svfiprintf_r+0x9c>
 800fe4a:	9b03      	ldr	r3, [sp, #12]
 800fe4c:	1d19      	adds	r1, r3, #4
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	9103      	str	r1, [sp, #12]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	bfbb      	ittet	lt
 800fe56:	425b      	neglt	r3, r3
 800fe58:	f042 0202 	orrlt.w	r2, r2, #2
 800fe5c:	9307      	strge	r3, [sp, #28]
 800fe5e:	9307      	strlt	r3, [sp, #28]
 800fe60:	bfb8      	it	lt
 800fe62:	9204      	strlt	r2, [sp, #16]
 800fe64:	7823      	ldrb	r3, [r4, #0]
 800fe66:	2b2e      	cmp	r3, #46	; 0x2e
 800fe68:	d10c      	bne.n	800fe84 <_svfiprintf_r+0x130>
 800fe6a:	7863      	ldrb	r3, [r4, #1]
 800fe6c:	2b2a      	cmp	r3, #42	; 0x2a
 800fe6e:	d134      	bne.n	800feda <_svfiprintf_r+0x186>
 800fe70:	9b03      	ldr	r3, [sp, #12]
 800fe72:	1d1a      	adds	r2, r3, #4
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	9203      	str	r2, [sp, #12]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	bfb8      	it	lt
 800fe7c:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe80:	3402      	adds	r4, #2
 800fe82:	9305      	str	r3, [sp, #20]
 800fe84:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ff4c <_svfiprintf_r+0x1f8>
 800fe88:	7821      	ldrb	r1, [r4, #0]
 800fe8a:	2203      	movs	r2, #3
 800fe8c:	4650      	mov	r0, sl
 800fe8e:	f7f0 fa3f 	bl	8000310 <memchr>
 800fe92:	b138      	cbz	r0, 800fea4 <_svfiprintf_r+0x150>
 800fe94:	9b04      	ldr	r3, [sp, #16]
 800fe96:	eba0 000a 	sub.w	r0, r0, sl
 800fe9a:	2240      	movs	r2, #64	; 0x40
 800fe9c:	4082      	lsls	r2, r0
 800fe9e:	4313      	orrs	r3, r2
 800fea0:	3401      	adds	r4, #1
 800fea2:	9304      	str	r3, [sp, #16]
 800fea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fea8:	4825      	ldr	r0, [pc, #148]	; (800ff40 <_svfiprintf_r+0x1ec>)
 800feaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800feae:	2206      	movs	r2, #6
 800feb0:	f7f0 fa2e 	bl	8000310 <memchr>
 800feb4:	2800      	cmp	r0, #0
 800feb6:	d038      	beq.n	800ff2a <_svfiprintf_r+0x1d6>
 800feb8:	4b22      	ldr	r3, [pc, #136]	; (800ff44 <_svfiprintf_r+0x1f0>)
 800feba:	bb1b      	cbnz	r3, 800ff04 <_svfiprintf_r+0x1b0>
 800febc:	9b03      	ldr	r3, [sp, #12]
 800febe:	3307      	adds	r3, #7
 800fec0:	f023 0307 	bic.w	r3, r3, #7
 800fec4:	3308      	adds	r3, #8
 800fec6:	9303      	str	r3, [sp, #12]
 800fec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feca:	4433      	add	r3, r6
 800fecc:	9309      	str	r3, [sp, #36]	; 0x24
 800fece:	e768      	b.n	800fda2 <_svfiprintf_r+0x4e>
 800fed0:	fb0c 3202 	mla	r2, ip, r2, r3
 800fed4:	460c      	mov	r4, r1
 800fed6:	2001      	movs	r0, #1
 800fed8:	e7a6      	b.n	800fe28 <_svfiprintf_r+0xd4>
 800feda:	2300      	movs	r3, #0
 800fedc:	3401      	adds	r4, #1
 800fede:	9305      	str	r3, [sp, #20]
 800fee0:	4619      	mov	r1, r3
 800fee2:	f04f 0c0a 	mov.w	ip, #10
 800fee6:	4620      	mov	r0, r4
 800fee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800feec:	3a30      	subs	r2, #48	; 0x30
 800feee:	2a09      	cmp	r2, #9
 800fef0:	d903      	bls.n	800fefa <_svfiprintf_r+0x1a6>
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d0c6      	beq.n	800fe84 <_svfiprintf_r+0x130>
 800fef6:	9105      	str	r1, [sp, #20]
 800fef8:	e7c4      	b.n	800fe84 <_svfiprintf_r+0x130>
 800fefa:	fb0c 2101 	mla	r1, ip, r1, r2
 800fefe:	4604      	mov	r4, r0
 800ff00:	2301      	movs	r3, #1
 800ff02:	e7f0      	b.n	800fee6 <_svfiprintf_r+0x192>
 800ff04:	ab03      	add	r3, sp, #12
 800ff06:	9300      	str	r3, [sp, #0]
 800ff08:	462a      	mov	r2, r5
 800ff0a:	4b0f      	ldr	r3, [pc, #60]	; (800ff48 <_svfiprintf_r+0x1f4>)
 800ff0c:	a904      	add	r1, sp, #16
 800ff0e:	4638      	mov	r0, r7
 800ff10:	f3af 8000 	nop.w
 800ff14:	1c42      	adds	r2, r0, #1
 800ff16:	4606      	mov	r6, r0
 800ff18:	d1d6      	bne.n	800fec8 <_svfiprintf_r+0x174>
 800ff1a:	89ab      	ldrh	r3, [r5, #12]
 800ff1c:	065b      	lsls	r3, r3, #25
 800ff1e:	f53f af2d 	bmi.w	800fd7c <_svfiprintf_r+0x28>
 800ff22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff24:	b01d      	add	sp, #116	; 0x74
 800ff26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff2a:	ab03      	add	r3, sp, #12
 800ff2c:	9300      	str	r3, [sp, #0]
 800ff2e:	462a      	mov	r2, r5
 800ff30:	4b05      	ldr	r3, [pc, #20]	; (800ff48 <_svfiprintf_r+0x1f4>)
 800ff32:	a904      	add	r1, sp, #16
 800ff34:	4638      	mov	r0, r7
 800ff36:	f000 f879 	bl	801002c <_printf_i>
 800ff3a:	e7eb      	b.n	800ff14 <_svfiprintf_r+0x1c0>
 800ff3c:	08011018 	.word	0x08011018
 800ff40:	08011022 	.word	0x08011022
 800ff44:	00000000 	.word	0x00000000
 800ff48:	0800fca1 	.word	0x0800fca1
 800ff4c:	0801101e 	.word	0x0801101e

0800ff50 <_printf_common>:
 800ff50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff54:	4616      	mov	r6, r2
 800ff56:	4699      	mov	r9, r3
 800ff58:	688a      	ldr	r2, [r1, #8]
 800ff5a:	690b      	ldr	r3, [r1, #16]
 800ff5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ff60:	4293      	cmp	r3, r2
 800ff62:	bfb8      	it	lt
 800ff64:	4613      	movlt	r3, r2
 800ff66:	6033      	str	r3, [r6, #0]
 800ff68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff6c:	4607      	mov	r7, r0
 800ff6e:	460c      	mov	r4, r1
 800ff70:	b10a      	cbz	r2, 800ff76 <_printf_common+0x26>
 800ff72:	3301      	adds	r3, #1
 800ff74:	6033      	str	r3, [r6, #0]
 800ff76:	6823      	ldr	r3, [r4, #0]
 800ff78:	0699      	lsls	r1, r3, #26
 800ff7a:	bf42      	ittt	mi
 800ff7c:	6833      	ldrmi	r3, [r6, #0]
 800ff7e:	3302      	addmi	r3, #2
 800ff80:	6033      	strmi	r3, [r6, #0]
 800ff82:	6825      	ldr	r5, [r4, #0]
 800ff84:	f015 0506 	ands.w	r5, r5, #6
 800ff88:	d106      	bne.n	800ff98 <_printf_common+0x48>
 800ff8a:	f104 0a19 	add.w	sl, r4, #25
 800ff8e:	68e3      	ldr	r3, [r4, #12]
 800ff90:	6832      	ldr	r2, [r6, #0]
 800ff92:	1a9b      	subs	r3, r3, r2
 800ff94:	42ab      	cmp	r3, r5
 800ff96:	dc26      	bgt.n	800ffe6 <_printf_common+0x96>
 800ff98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff9c:	1e13      	subs	r3, r2, #0
 800ff9e:	6822      	ldr	r2, [r4, #0]
 800ffa0:	bf18      	it	ne
 800ffa2:	2301      	movne	r3, #1
 800ffa4:	0692      	lsls	r2, r2, #26
 800ffa6:	d42b      	bmi.n	8010000 <_printf_common+0xb0>
 800ffa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ffac:	4649      	mov	r1, r9
 800ffae:	4638      	mov	r0, r7
 800ffb0:	47c0      	blx	r8
 800ffb2:	3001      	adds	r0, #1
 800ffb4:	d01e      	beq.n	800fff4 <_printf_common+0xa4>
 800ffb6:	6823      	ldr	r3, [r4, #0]
 800ffb8:	6922      	ldr	r2, [r4, #16]
 800ffba:	f003 0306 	and.w	r3, r3, #6
 800ffbe:	2b04      	cmp	r3, #4
 800ffc0:	bf02      	ittt	eq
 800ffc2:	68e5      	ldreq	r5, [r4, #12]
 800ffc4:	6833      	ldreq	r3, [r6, #0]
 800ffc6:	1aed      	subeq	r5, r5, r3
 800ffc8:	68a3      	ldr	r3, [r4, #8]
 800ffca:	bf0c      	ite	eq
 800ffcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ffd0:	2500      	movne	r5, #0
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	bfc4      	itt	gt
 800ffd6:	1a9b      	subgt	r3, r3, r2
 800ffd8:	18ed      	addgt	r5, r5, r3
 800ffda:	2600      	movs	r6, #0
 800ffdc:	341a      	adds	r4, #26
 800ffde:	42b5      	cmp	r5, r6
 800ffe0:	d11a      	bne.n	8010018 <_printf_common+0xc8>
 800ffe2:	2000      	movs	r0, #0
 800ffe4:	e008      	b.n	800fff8 <_printf_common+0xa8>
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	4652      	mov	r2, sl
 800ffea:	4649      	mov	r1, r9
 800ffec:	4638      	mov	r0, r7
 800ffee:	47c0      	blx	r8
 800fff0:	3001      	adds	r0, #1
 800fff2:	d103      	bne.n	800fffc <_printf_common+0xac>
 800fff4:	f04f 30ff 	mov.w	r0, #4294967295
 800fff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fffc:	3501      	adds	r5, #1
 800fffe:	e7c6      	b.n	800ff8e <_printf_common+0x3e>
 8010000:	18e1      	adds	r1, r4, r3
 8010002:	1c5a      	adds	r2, r3, #1
 8010004:	2030      	movs	r0, #48	; 0x30
 8010006:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801000a:	4422      	add	r2, r4
 801000c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010010:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010014:	3302      	adds	r3, #2
 8010016:	e7c7      	b.n	800ffa8 <_printf_common+0x58>
 8010018:	2301      	movs	r3, #1
 801001a:	4622      	mov	r2, r4
 801001c:	4649      	mov	r1, r9
 801001e:	4638      	mov	r0, r7
 8010020:	47c0      	blx	r8
 8010022:	3001      	adds	r0, #1
 8010024:	d0e6      	beq.n	800fff4 <_printf_common+0xa4>
 8010026:	3601      	adds	r6, #1
 8010028:	e7d9      	b.n	800ffde <_printf_common+0x8e>
	...

0801002c <_printf_i>:
 801002c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010030:	7e0f      	ldrb	r7, [r1, #24]
 8010032:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010034:	2f78      	cmp	r7, #120	; 0x78
 8010036:	4691      	mov	r9, r2
 8010038:	4680      	mov	r8, r0
 801003a:	460c      	mov	r4, r1
 801003c:	469a      	mov	sl, r3
 801003e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010042:	d807      	bhi.n	8010054 <_printf_i+0x28>
 8010044:	2f62      	cmp	r7, #98	; 0x62
 8010046:	d80a      	bhi.n	801005e <_printf_i+0x32>
 8010048:	2f00      	cmp	r7, #0
 801004a:	f000 80d4 	beq.w	80101f6 <_printf_i+0x1ca>
 801004e:	2f58      	cmp	r7, #88	; 0x58
 8010050:	f000 80c0 	beq.w	80101d4 <_printf_i+0x1a8>
 8010054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801005c:	e03a      	b.n	80100d4 <_printf_i+0xa8>
 801005e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010062:	2b15      	cmp	r3, #21
 8010064:	d8f6      	bhi.n	8010054 <_printf_i+0x28>
 8010066:	a101      	add	r1, pc, #4	; (adr r1, 801006c <_printf_i+0x40>)
 8010068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801006c:	080100c5 	.word	0x080100c5
 8010070:	080100d9 	.word	0x080100d9
 8010074:	08010055 	.word	0x08010055
 8010078:	08010055 	.word	0x08010055
 801007c:	08010055 	.word	0x08010055
 8010080:	08010055 	.word	0x08010055
 8010084:	080100d9 	.word	0x080100d9
 8010088:	08010055 	.word	0x08010055
 801008c:	08010055 	.word	0x08010055
 8010090:	08010055 	.word	0x08010055
 8010094:	08010055 	.word	0x08010055
 8010098:	080101dd 	.word	0x080101dd
 801009c:	08010105 	.word	0x08010105
 80100a0:	08010197 	.word	0x08010197
 80100a4:	08010055 	.word	0x08010055
 80100a8:	08010055 	.word	0x08010055
 80100ac:	080101ff 	.word	0x080101ff
 80100b0:	08010055 	.word	0x08010055
 80100b4:	08010105 	.word	0x08010105
 80100b8:	08010055 	.word	0x08010055
 80100bc:	08010055 	.word	0x08010055
 80100c0:	0801019f 	.word	0x0801019f
 80100c4:	682b      	ldr	r3, [r5, #0]
 80100c6:	1d1a      	adds	r2, r3, #4
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	602a      	str	r2, [r5, #0]
 80100cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80100d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80100d4:	2301      	movs	r3, #1
 80100d6:	e09f      	b.n	8010218 <_printf_i+0x1ec>
 80100d8:	6820      	ldr	r0, [r4, #0]
 80100da:	682b      	ldr	r3, [r5, #0]
 80100dc:	0607      	lsls	r7, r0, #24
 80100de:	f103 0104 	add.w	r1, r3, #4
 80100e2:	6029      	str	r1, [r5, #0]
 80100e4:	d501      	bpl.n	80100ea <_printf_i+0xbe>
 80100e6:	681e      	ldr	r6, [r3, #0]
 80100e8:	e003      	b.n	80100f2 <_printf_i+0xc6>
 80100ea:	0646      	lsls	r6, r0, #25
 80100ec:	d5fb      	bpl.n	80100e6 <_printf_i+0xba>
 80100ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80100f2:	2e00      	cmp	r6, #0
 80100f4:	da03      	bge.n	80100fe <_printf_i+0xd2>
 80100f6:	232d      	movs	r3, #45	; 0x2d
 80100f8:	4276      	negs	r6, r6
 80100fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100fe:	485a      	ldr	r0, [pc, #360]	; (8010268 <_printf_i+0x23c>)
 8010100:	230a      	movs	r3, #10
 8010102:	e012      	b.n	801012a <_printf_i+0xfe>
 8010104:	682b      	ldr	r3, [r5, #0]
 8010106:	6820      	ldr	r0, [r4, #0]
 8010108:	1d19      	adds	r1, r3, #4
 801010a:	6029      	str	r1, [r5, #0]
 801010c:	0605      	lsls	r5, r0, #24
 801010e:	d501      	bpl.n	8010114 <_printf_i+0xe8>
 8010110:	681e      	ldr	r6, [r3, #0]
 8010112:	e002      	b.n	801011a <_printf_i+0xee>
 8010114:	0641      	lsls	r1, r0, #25
 8010116:	d5fb      	bpl.n	8010110 <_printf_i+0xe4>
 8010118:	881e      	ldrh	r6, [r3, #0]
 801011a:	4853      	ldr	r0, [pc, #332]	; (8010268 <_printf_i+0x23c>)
 801011c:	2f6f      	cmp	r7, #111	; 0x6f
 801011e:	bf0c      	ite	eq
 8010120:	2308      	moveq	r3, #8
 8010122:	230a      	movne	r3, #10
 8010124:	2100      	movs	r1, #0
 8010126:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801012a:	6865      	ldr	r5, [r4, #4]
 801012c:	60a5      	str	r5, [r4, #8]
 801012e:	2d00      	cmp	r5, #0
 8010130:	bfa2      	ittt	ge
 8010132:	6821      	ldrge	r1, [r4, #0]
 8010134:	f021 0104 	bicge.w	r1, r1, #4
 8010138:	6021      	strge	r1, [r4, #0]
 801013a:	b90e      	cbnz	r6, 8010140 <_printf_i+0x114>
 801013c:	2d00      	cmp	r5, #0
 801013e:	d04b      	beq.n	80101d8 <_printf_i+0x1ac>
 8010140:	4615      	mov	r5, r2
 8010142:	fbb6 f1f3 	udiv	r1, r6, r3
 8010146:	fb03 6711 	mls	r7, r3, r1, r6
 801014a:	5dc7      	ldrb	r7, [r0, r7]
 801014c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010150:	4637      	mov	r7, r6
 8010152:	42bb      	cmp	r3, r7
 8010154:	460e      	mov	r6, r1
 8010156:	d9f4      	bls.n	8010142 <_printf_i+0x116>
 8010158:	2b08      	cmp	r3, #8
 801015a:	d10b      	bne.n	8010174 <_printf_i+0x148>
 801015c:	6823      	ldr	r3, [r4, #0]
 801015e:	07de      	lsls	r6, r3, #31
 8010160:	d508      	bpl.n	8010174 <_printf_i+0x148>
 8010162:	6923      	ldr	r3, [r4, #16]
 8010164:	6861      	ldr	r1, [r4, #4]
 8010166:	4299      	cmp	r1, r3
 8010168:	bfde      	ittt	le
 801016a:	2330      	movle	r3, #48	; 0x30
 801016c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010170:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010174:	1b52      	subs	r2, r2, r5
 8010176:	6122      	str	r2, [r4, #16]
 8010178:	f8cd a000 	str.w	sl, [sp]
 801017c:	464b      	mov	r3, r9
 801017e:	aa03      	add	r2, sp, #12
 8010180:	4621      	mov	r1, r4
 8010182:	4640      	mov	r0, r8
 8010184:	f7ff fee4 	bl	800ff50 <_printf_common>
 8010188:	3001      	adds	r0, #1
 801018a:	d14a      	bne.n	8010222 <_printf_i+0x1f6>
 801018c:	f04f 30ff 	mov.w	r0, #4294967295
 8010190:	b004      	add	sp, #16
 8010192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010196:	6823      	ldr	r3, [r4, #0]
 8010198:	f043 0320 	orr.w	r3, r3, #32
 801019c:	6023      	str	r3, [r4, #0]
 801019e:	4833      	ldr	r0, [pc, #204]	; (801026c <_printf_i+0x240>)
 80101a0:	2778      	movs	r7, #120	; 0x78
 80101a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80101a6:	6823      	ldr	r3, [r4, #0]
 80101a8:	6829      	ldr	r1, [r5, #0]
 80101aa:	061f      	lsls	r7, r3, #24
 80101ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80101b0:	d402      	bmi.n	80101b8 <_printf_i+0x18c>
 80101b2:	065f      	lsls	r7, r3, #25
 80101b4:	bf48      	it	mi
 80101b6:	b2b6      	uxthmi	r6, r6
 80101b8:	07df      	lsls	r7, r3, #31
 80101ba:	bf48      	it	mi
 80101bc:	f043 0320 	orrmi.w	r3, r3, #32
 80101c0:	6029      	str	r1, [r5, #0]
 80101c2:	bf48      	it	mi
 80101c4:	6023      	strmi	r3, [r4, #0]
 80101c6:	b91e      	cbnz	r6, 80101d0 <_printf_i+0x1a4>
 80101c8:	6823      	ldr	r3, [r4, #0]
 80101ca:	f023 0320 	bic.w	r3, r3, #32
 80101ce:	6023      	str	r3, [r4, #0]
 80101d0:	2310      	movs	r3, #16
 80101d2:	e7a7      	b.n	8010124 <_printf_i+0xf8>
 80101d4:	4824      	ldr	r0, [pc, #144]	; (8010268 <_printf_i+0x23c>)
 80101d6:	e7e4      	b.n	80101a2 <_printf_i+0x176>
 80101d8:	4615      	mov	r5, r2
 80101da:	e7bd      	b.n	8010158 <_printf_i+0x12c>
 80101dc:	682b      	ldr	r3, [r5, #0]
 80101de:	6826      	ldr	r6, [r4, #0]
 80101e0:	6961      	ldr	r1, [r4, #20]
 80101e2:	1d18      	adds	r0, r3, #4
 80101e4:	6028      	str	r0, [r5, #0]
 80101e6:	0635      	lsls	r5, r6, #24
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	d501      	bpl.n	80101f0 <_printf_i+0x1c4>
 80101ec:	6019      	str	r1, [r3, #0]
 80101ee:	e002      	b.n	80101f6 <_printf_i+0x1ca>
 80101f0:	0670      	lsls	r0, r6, #25
 80101f2:	d5fb      	bpl.n	80101ec <_printf_i+0x1c0>
 80101f4:	8019      	strh	r1, [r3, #0]
 80101f6:	2300      	movs	r3, #0
 80101f8:	6123      	str	r3, [r4, #16]
 80101fa:	4615      	mov	r5, r2
 80101fc:	e7bc      	b.n	8010178 <_printf_i+0x14c>
 80101fe:	682b      	ldr	r3, [r5, #0]
 8010200:	1d1a      	adds	r2, r3, #4
 8010202:	602a      	str	r2, [r5, #0]
 8010204:	681d      	ldr	r5, [r3, #0]
 8010206:	6862      	ldr	r2, [r4, #4]
 8010208:	2100      	movs	r1, #0
 801020a:	4628      	mov	r0, r5
 801020c:	f7f0 f880 	bl	8000310 <memchr>
 8010210:	b108      	cbz	r0, 8010216 <_printf_i+0x1ea>
 8010212:	1b40      	subs	r0, r0, r5
 8010214:	6060      	str	r0, [r4, #4]
 8010216:	6863      	ldr	r3, [r4, #4]
 8010218:	6123      	str	r3, [r4, #16]
 801021a:	2300      	movs	r3, #0
 801021c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010220:	e7aa      	b.n	8010178 <_printf_i+0x14c>
 8010222:	6923      	ldr	r3, [r4, #16]
 8010224:	462a      	mov	r2, r5
 8010226:	4649      	mov	r1, r9
 8010228:	4640      	mov	r0, r8
 801022a:	47d0      	blx	sl
 801022c:	3001      	adds	r0, #1
 801022e:	d0ad      	beq.n	801018c <_printf_i+0x160>
 8010230:	6823      	ldr	r3, [r4, #0]
 8010232:	079b      	lsls	r3, r3, #30
 8010234:	d413      	bmi.n	801025e <_printf_i+0x232>
 8010236:	68e0      	ldr	r0, [r4, #12]
 8010238:	9b03      	ldr	r3, [sp, #12]
 801023a:	4298      	cmp	r0, r3
 801023c:	bfb8      	it	lt
 801023e:	4618      	movlt	r0, r3
 8010240:	e7a6      	b.n	8010190 <_printf_i+0x164>
 8010242:	2301      	movs	r3, #1
 8010244:	4632      	mov	r2, r6
 8010246:	4649      	mov	r1, r9
 8010248:	4640      	mov	r0, r8
 801024a:	47d0      	blx	sl
 801024c:	3001      	adds	r0, #1
 801024e:	d09d      	beq.n	801018c <_printf_i+0x160>
 8010250:	3501      	adds	r5, #1
 8010252:	68e3      	ldr	r3, [r4, #12]
 8010254:	9903      	ldr	r1, [sp, #12]
 8010256:	1a5b      	subs	r3, r3, r1
 8010258:	42ab      	cmp	r3, r5
 801025a:	dcf2      	bgt.n	8010242 <_printf_i+0x216>
 801025c:	e7eb      	b.n	8010236 <_printf_i+0x20a>
 801025e:	2500      	movs	r5, #0
 8010260:	f104 0619 	add.w	r6, r4, #25
 8010264:	e7f5      	b.n	8010252 <_printf_i+0x226>
 8010266:	bf00      	nop
 8010268:	08011029 	.word	0x08011029
 801026c:	0801103a 	.word	0x0801103a

08010270 <memmove>:
 8010270:	4288      	cmp	r0, r1
 8010272:	b510      	push	{r4, lr}
 8010274:	eb01 0402 	add.w	r4, r1, r2
 8010278:	d902      	bls.n	8010280 <memmove+0x10>
 801027a:	4284      	cmp	r4, r0
 801027c:	4623      	mov	r3, r4
 801027e:	d807      	bhi.n	8010290 <memmove+0x20>
 8010280:	1e43      	subs	r3, r0, #1
 8010282:	42a1      	cmp	r1, r4
 8010284:	d008      	beq.n	8010298 <memmove+0x28>
 8010286:	f811 2b01 	ldrb.w	r2, [r1], #1
 801028a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801028e:	e7f8      	b.n	8010282 <memmove+0x12>
 8010290:	4402      	add	r2, r0
 8010292:	4601      	mov	r1, r0
 8010294:	428a      	cmp	r2, r1
 8010296:	d100      	bne.n	801029a <memmove+0x2a>
 8010298:	bd10      	pop	{r4, pc}
 801029a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801029e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80102a2:	e7f7      	b.n	8010294 <memmove+0x24>

080102a4 <_sbrk_r>:
 80102a4:	b538      	push	{r3, r4, r5, lr}
 80102a6:	4d06      	ldr	r5, [pc, #24]	; (80102c0 <_sbrk_r+0x1c>)
 80102a8:	2300      	movs	r3, #0
 80102aa:	4604      	mov	r4, r0
 80102ac:	4608      	mov	r0, r1
 80102ae:	602b      	str	r3, [r5, #0]
 80102b0:	f7f3 fd52 	bl	8003d58 <_sbrk>
 80102b4:	1c43      	adds	r3, r0, #1
 80102b6:	d102      	bne.n	80102be <_sbrk_r+0x1a>
 80102b8:	682b      	ldr	r3, [r5, #0]
 80102ba:	b103      	cbz	r3, 80102be <_sbrk_r+0x1a>
 80102bc:	6023      	str	r3, [r4, #0]
 80102be:	bd38      	pop	{r3, r4, r5, pc}
 80102c0:	24002990 	.word	0x24002990

080102c4 <_realloc_r>:
 80102c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102c8:	4680      	mov	r8, r0
 80102ca:	4614      	mov	r4, r2
 80102cc:	460e      	mov	r6, r1
 80102ce:	b921      	cbnz	r1, 80102da <_realloc_r+0x16>
 80102d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102d4:	4611      	mov	r1, r2
 80102d6:	f7ff bc57 	b.w	800fb88 <_malloc_r>
 80102da:	b92a      	cbnz	r2, 80102e8 <_realloc_r+0x24>
 80102dc:	f7ff fbe8 	bl	800fab0 <_free_r>
 80102e0:	4625      	mov	r5, r4
 80102e2:	4628      	mov	r0, r5
 80102e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102e8:	f000 f81b 	bl	8010322 <_malloc_usable_size_r>
 80102ec:	4284      	cmp	r4, r0
 80102ee:	4607      	mov	r7, r0
 80102f0:	d802      	bhi.n	80102f8 <_realloc_r+0x34>
 80102f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80102f6:	d812      	bhi.n	801031e <_realloc_r+0x5a>
 80102f8:	4621      	mov	r1, r4
 80102fa:	4640      	mov	r0, r8
 80102fc:	f7ff fc44 	bl	800fb88 <_malloc_r>
 8010300:	4605      	mov	r5, r0
 8010302:	2800      	cmp	r0, #0
 8010304:	d0ed      	beq.n	80102e2 <_realloc_r+0x1e>
 8010306:	42bc      	cmp	r4, r7
 8010308:	4622      	mov	r2, r4
 801030a:	4631      	mov	r1, r6
 801030c:	bf28      	it	cs
 801030e:	463a      	movcs	r2, r7
 8010310:	f7ff fbc0 	bl	800fa94 <memcpy>
 8010314:	4631      	mov	r1, r6
 8010316:	4640      	mov	r0, r8
 8010318:	f7ff fbca 	bl	800fab0 <_free_r>
 801031c:	e7e1      	b.n	80102e2 <_realloc_r+0x1e>
 801031e:	4635      	mov	r5, r6
 8010320:	e7df      	b.n	80102e2 <_realloc_r+0x1e>

08010322 <_malloc_usable_size_r>:
 8010322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010326:	1f18      	subs	r0, r3, #4
 8010328:	2b00      	cmp	r3, #0
 801032a:	bfbc      	itt	lt
 801032c:	580b      	ldrlt	r3, [r1, r0]
 801032e:	18c0      	addlt	r0, r0, r3
 8010330:	4770      	bx	lr
	...

08010334 <_init>:
 8010334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010336:	bf00      	nop
 8010338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801033a:	bc08      	pop	{r3}
 801033c:	469e      	mov	lr, r3
 801033e:	4770      	bx	lr

08010340 <_fini>:
 8010340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010342:	bf00      	nop
 8010344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010346:	bc08      	pop	{r3}
 8010348:	469e      	mov	lr, r3
 801034a:	4770      	bx	lr
